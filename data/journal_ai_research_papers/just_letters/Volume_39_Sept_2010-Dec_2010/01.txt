journal of artificial intelligence research                 

submitted       published     

implicit abstraction heuristics
michael katz
carmel domshlak

dugi tx technion ac il
dcarmel ie technion ac il

faculty of industrial engineering   management 
technion  israel

abstract
state space search with explicit abstraction heuristics is at the state of the art of costoptimal planning  these heuristics are inherently limited  nonetheless  because the size of
the abstract space must be bounded by some  even if a very large  constant  targeting
this shortcoming  we introduce the notion of  additive  implicit abstractions  in which
the planning task is abstracted by instances of tractable fragments of optimal planning 
we then introduce a concrete setting of this framework  called fork decomposition  that is
based on two novel fragments of tractable cost optimal planning  the induced admissible
heuristics are then studied formally and empirically  this study testifies for the accuracy
of the fork decomposition heuristics  yet our empirical evaluation also stresses the tradeoff
between their accuracy and the runtime complexity of computing them  indeed  some
of the power of the explicit abstraction heuristics comes from precomputing the heuristic
function offline and then determining h s  for each evaluated state s by a very fast lookup
in a database  by contrast  while fork decomposition heuristics can be calculated in
polynomial time  computing them is far from being fast  to address this problem  we
show that the time per node complexity bottleneck of the fork decomposition heuristics can
be successfully overcome  we demonstrate that an equivalent of the explicit abstraction
notion of a database exists for the fork decomposition abstractions as well  despite their
exponential size abstract spaces  we then verify empirically that heuristic search with the
databased fork decomposition heuristics favorably competes with the state of the art of
cost optimal planning 

   introduction
heuristic search  either through progression in the space of world states or through regression in the space of subgoals  is a common and successful approach to classical planning 
it is probably the most popular approach to cost optimal planning  that is  finding a plan
with a minimal total cost of its actions  the difference between various heuristic search
algorithms for optimal planning is mainly in the admissible heuristic functions they employ 
in state space search  such a heuristic estimates the cost of achieving the goal from a given
state and guarantees not to overestimate that cost 
a useful heuristic function must be accurate as well as efficiently computable  improving
the accuracy of a heuristic function without substantially worsening the time complexity
of computing it usually translates into faster search for optimal solutions  during the last
decade  numerous computational ideas evolved into new admissible heuristics for classical
planning  these include the delete relaxing max heuristic hmax  bonet   geffner         critical path heuristics hm  haslum   geffner         landmark heuristics hl   hla  karpas  
domshlak        and hlm cut  helmert   domshlak         and abstraction heuristics such
c
    
ai access foundation  all rights reserved 

fikatz   domshlak

as pattern database heuristics  edelkamp        and merge and shrink heuristics  helmert 
haslum    hoffmann         our focus in this work is on the abstraction heuristics 
generally speaking  an abstraction of a planning task is given by a mapping    s  s 
from the states of the planning tasks transition system to the states of some abstract
transition system such that  for all states s  s   s  the cost from  s  to  s    is upperbounded by the cost from s to s    the abstraction heuristic value h  s  is then the cost from
 s  to the closest goal state of the abstract transition system  perhaps the most well known
abstraction heuristics are pattern database  pdb  heuristics  which are based on projecting
the planning task onto a subset of its state variables and then explicitly searching for optimal
plans in the abstract space  over the years  pdb heuristics have been shown to be very
effective in several hard search problems  including cost optimal planning  culberson  
schaeffer        edelkamp        felner  korf    hanan        haslum  botea  helmert 
bonet    koenig         the conceptual limitation of these heuristics  however  is that the
size of the abstract space and its dimensionality must be fixed   the more recent merge andshrink abstractions generalize pdb heuristics to overcome the latter limitation  helmert
et al          instead of perfectly reflecting just a few state variables  merge and shrink
abstractions allow for imperfectly reflecting all variables  as demonstrated by the formal
and empirical analysis of helmert et al   this flexibility often makes the merge and shrink
abstractions much more effective than pdbs  however  the merge and shrink abstract
spaces are still searched explicitly  and thus they still have to be of fixed size  while quality
heuristics estimates can still be obtained for many problems  this limitation is a critical
obstacle for many others 
our goal in this paper is to push the envelope of abstraction heuristics beyond explicit
abstractions  we introduce a principled way to obtain abstraction heuristics that limit neither the dimensionality nor the size of the abstract spaces  the basic idea behind what we
call implicit abstractions is simple and intuitive  instead of relying on abstract problems
that are easy to solve because they are small  we can rely on abstract problems belonging to
provably tractable fragments of optimal planning  the key point is that  at least theoretically  moving to implicit abstractions removes the requirement on the abstractions size to
be small  our contribution  however  is in showing that implicit abstractions are far from
being of theoretical interest only  specifically 
   we specify acyclic causal graph decompositions  a general framework for additive implicit abstractions that is based on decomposing the problem at hand along its causal
graph  we then introduce a concrete family of such abstractions  called fork decompositions  that are based on two novel fragments of tractable cost optimal planning 
following the type of analysis suggested by helmert and mattmuller         we formally analyze the asymptotic performance ratio of the fork decomposition heuristics
and prove that their worst case accuracy on selected domains is comparable with that
of  even parametric  state of the art admissible heuristics  we then empirically evaluate the accuracy of the fork decomposition heuristics on a large set of domains from
recent planning competitions and show that their accuracy is competitive with the
state of the art 
   this does not necessarily apply to symbolic pdbs which  on some tasks  may exponentially reduce the
pdbs representation  edelkamp        

  

fiimplicit abstraction heuristics

   the key attraction of explicit abstractions is that state to goal costs in the abstract
space can be precomputed and stored in memory in a preprocessing phase so that
heuristic evaluation during search can be done by a simple lookup  a necessary condition for this would seem to be the small size of the abstract space  however  we
show that an equivalent of the pdb and merge and shrinks notion of database
exists for the fork decomposition abstractions as well  despite the exponential size abstract spaces of the latter  these databased implicit abstractions are based on a proper
partitioning of the heuristic computation into parts that can be shared between search
states and parts that must be computed online per state  our empirical evaluation
shows that a equipped with the databased fork decomposition heuristics favorably
competes with the state of the art of cost optimal planning 
this work is a revision and extension of the formulation and results presented by katz
and domshlak               which in turn is based on ideas first sketched also by katz and
domshlak      a  

   preliminaries
we consider classical planning tasks corresponding to state models with a single initial state
and only deterministic actions  specifically  we consider state models captured by the sas 
formalism  backstrom   nebel        with nonnegative action costs  such a planning task
is given by a quintuple    hv  a  i  g  costi  where 
 v is a set of state variables  with each v  v being associated with a finite domain
d v   for a subset of variables v    v   we denote the set of assignments to v   by
d v       vv   d v   each complete assignment to v is called a state  and s   d v  
is the state space of   i is an initial state  the goal g is a partial assignment to v  
a state s is a goal state iff g  s 
 a is a finite set of actions  each action a is a pair hpre a   eff a i of partial assignments
to v called preconditions and effects  respectively  by av  a we denote the actions
affecting the value of v  cost   a  r   is a real valued  nonnegative action cost
function 
for a variable v and a value   d v   instantiation of v by  is denoted by v     for a
partial assignment p  v p   v denotes the subset of state variables instantiated by p  in
turn  for any v    v p   by p v     we denote the value of v   in p  if v      v  is a singleton 
we use p v  for p v      for any sequence of actions  and variable v  v   by v we denote the
restriction of  to actions changing the value of v  that is  v is the maximal subsequence
of  consisting only of actions in av  
an action a is applicable in a state s iff s v    pre a  v  for all v  v pre a    applying
a changes the value of v  v eff a   to eff a  v   the resulting state is denoted by sjak  by
sjha            ak ik we denote the state obtained from sequential application of the  respectively
applicable  actions a            ak starting at state s  such an action sequence is an s plan if
g  sjha            ak ik  and it is a cost optimal  or  in what follows  optimal  s plan if the
sum of its action costs is minimal among all s plans  the purpose of  optimal  planning is
finding an  optimal  i plan  for a pair of states s    s   s  by cost s    s    we refer to the
  

fikatz   domshlak

p 

b

c 

f
c

a
c 

t

d

c

c

t

e
p

c 

c

p

g
p 

 a 

 b 
in t

in c

b
a

d

f
d

e

c

e

at a

at b

at c

at d

at e

at f

at g

g
in c

 c 

in c

 d 

figure    logistics style example adapted from helmert        and illustrated in  a   the
goal is to deliver p  from c to g and p  from f to e using the cars c    c    c  and
truck t  making sure that c  ends up at f   the cars may only use city roads  thin
edges   the truck may only use the highway  thick edge   figures  b    c   and
 d  depict  respectively  the causal graph of the problem  the domain transition
graphs  labels omitted  of c  and c   left   t  center   and c   right   and the
identical domain transition graphs of of p  and p   

cost of a cost optimal plan from s  to s    h  s    mins  g cost s  s    is the custom notation
for the cost of the optimal s plan in   finally  important roles in what follows are played
by a pair of standard graphical structures induced by planning tasks 
 the causal graph cg   of  is a digraph over nodes v   an arc  v  v     is in cg  
iff v    v   and there exists an action a  a such that  v  v      v eff a    v pre a   
v eff a    in this case  we say that  v  v     is induced by a  by succ v  and pred v  we
respectively denote the sets of immediate successors and predecessors of v in cg   
 the domain transition graph dtg v    of a variable v  v is an arc labeled digraph
over the nodes d v  such that an arc        labeled with pre a  v    v   and cost a 
exists in the graph iff both eff a  v        and either pre a  v     or v   v pre a   
to illustrate various constructs  we use a slight variation of a logistics style example
from helmert         this example is depicted in figure  a  and in sas  it has
  

fiimplicit abstraction heuristics

v

   p    p    c    c    c    t 

d p      d p       a  b  c  d  e  f  g  c    c    c    t 
d c      d c       a  b  c  d 

d c       e  f  g 
d t     d  e 

i    p    c  p    f  t   e  c    a  c    b  c    g 

g    p    g  p    e  c    f   

and actions corresponding to all possible loads and unloads  as well as single segment movements of the vehicles  for instance  if action a captures loading p  into c  at c  then
pre a     p    c  c    c   and eff a     p    c     all actions in the example have unit cost 
the causal graph of this example  as well as the domain transition graphs of the state
variables  are depicted in figures  b  d 
heuristic functions are used by informed search procedures to estimate the cost  of the
cheapest path  from a search node to the nearest goal node  our focus here is on statedependent  admissible abstraction heuristics  a heuristic function h is state dependent if its
estimate for a search node depends only on the problem state associated with that node 
that is  h   s  r        most heuristics in use these days are state dependent  though
see  e g   richter  helmert    westphal       and karpas   domshlak       for a different
case   a heuristic h is admissible if h s   h  s  for all states s  if h  and h  are two
admissible heuristics  and h   s   h   s  for all states s  we say that h  dominates h   
for any set of admissible heuristics h            hm   their pointwise maximum is always an
admissible heuristic  dominating each individual heuristic in the set  for some sets of admissible heuristics  their pointwise sum is also admissible and dominates their pointwise
maximum  many recent works on cost optimal planning are based on additive ensembles of admissible heuristics  and this includes critical path heuristics  haslum  bonet   
geffner        coles  fox  long    smith         pattern database heuristics  edelkamp 
      haslum et al          and landmark heuristics  karpas   domshlak        helmert  
domshlak         in particular  katz and domshlak      a        and yang et al        
      independently introduced a general criterion for admissible additive ensembles of
heuristics  called in the former work action cost partitioning  this criterion can be formalized as follows  let    hv  a  i  g 
be a planning task and  costi   a  r    m
i   a
pcosti
m
family of cost functions such that i   costi  a   cost a  for all actions a  a  if  hi  m
i  
is a set
of
arbitrary
admissible
heuristic
functions
for

 
hv 
a 
i 
g 
cost
i 
respectively 
i
i
p
m
then m
i   hi is also an admissible heuristic for   the set of cost functions  costi  i   can
be seen as a partition of the action costs cost 

   abstractions and abstraction heuristics
the semantics of any planning task  is given by its induced state transition model  often
called the transition graph of  

  

fikatz   domshlak

definition   a transition graph is a tuple t    s  l  tr  s    s        where s is a finite
set of states  l is a finite set of transition labels  tr  s  l  s is a set of  labeled 
transitions  s   s is an initial state  s    s is a set of goal states  and     l  r   is a
transition cost function 
 for a state s  s and a subset of states s    s in t  cost s  s     is the cost  of a
cheapest with respect to   path  from s to a state in s   along the transitions of t  if
no state in s   is reachable from s  then we have cost s  s        
 any path from s  to s   is a plan for t  and cheapest such plans are called optimal 
the states of the transition graph t   induced by a planning task    hv  a  i  g  costi
are the states of   the transition labels of t   are the actions a  there is a transition
 s  a  sjak   tr iff a is applicable in s  the initial state s    i  the set of goal states
s      s  s   s  g   and the transition cost function     cost 
we now proceed
with formally specifying the notion of abstraction  our definition of abstraction resembles
that of prieditis         and right from the beginning we specify a more general notion of
additive abstraction  informally  by additive abstraction we refer to a set of abstractions
interconstrained by a requirement to jointly not overestimate the transition path costs in
the abstracted transition graph 
definition   an additive abstraction of a transition graph t    s  l  tr  s    s        is
a set of pairs  hti   i i m
i   where  for    i  m 
 ti    si   li   tri   s i   si     i   is a transition graph 
 i   s  si is a function  called abstraction mapping  such that
 i  s      s i   i  s   si  for all s  s     and 
 for all pairs of states s  s   s holds
m
x
i  

cost i  s   i  s      cost s  s    

   

a few words on why we use this particular notion of abstraction  the term abstraction
is usually associated with simplifying the original system  reducing and factoring out details
less crucial in the given context  which details can be reduced and which should better
be preserved depends  of course  on the context  for instance  in the context of formal
verification  the abstract transition graphs are required not to decrease the reachability
between the states  that is  if there is a path from s to s  in the original transition graph 
then there should be a path from  s  to  s    in the abstract transition graph  clarke 
grumberg    peled         in addition  the reachability should also be increased as little as
possible  beyond that  the precise relationship between the path costs in the original and
abstract transition graphs is only of secondary importance  in contrast  when abstractions
are designed to induce admissible heuristic functions for heuristic search  the relationship
between the path costs as captured by eq    is what must be obeyed  however  requirements
above and beyond the general requirement of eq    not to overestimate the distances between
  

fiimplicit abstraction heuristics

the states are unnecessary  hence  in particular  definition   generalizes the notion of
abstraction by helmert et al         by replacing the condition of preserving individual
transitions and their labels  that is    s   l   s     if  s  l  s     with a weaker condition stated
in eq     the reader  of course  may well ask whether the generality of the condition in
eq    beyond the condition of helmert et al         really delivers any practical gain  and
later we show that the answer to this question is affirmative  for now  we proceed with
adding further requirements essential to making abstraction usable as a basis for heuristic
functions 
definition   let  be a planning task over states s  and let  hti   i i m
i   be an additive
abstraction of the transition graph t    if m   o poly        and  for all states s  s
and all  p
 i  m  the cost cost i  s   si    in ti is computable in time o poly         then
 
ha  s    m
i   cost i  s   si   is an abstraction heuristic function for  
note that admissibility of ha is implied by the cost conservation condition of eq     to further illustrate the connection between abstractions and admissible heuristics  consider three
well known mechanisms for devising admissible planning heuristics  delete relaxation  bonet
  geffner         critical path relaxation  haslum   geffner          and pattern database
heuristics  edelkamp        
first  while typically not considered this way  the delete relaxation of a planning task
          i
   hv  a  i  g  costi does correspond to an abstraction ht     s    l    tr    s     s 
 
 
of the transition
graph
t   
assuming
unique
naming
of
the
variable
values
in

and
des
noting d    vv d v   we have the abstract states s  being the power set of d    and the
labels l     a  a    a  a   the transitions come from two sources  for each abstract state
s   s  and each original action a  a applicable in s    we have both  s    a  s  jak   tr 
and  s    a    s   eff a    tr    with a minor abuse of notation  the initial state and the
     s  s   s  g   and the abstraction
goal states of the abstraction are s     i and s 
 
 
 
mapping   is simply the identity function  it is easy to show that  for any state s of our
      h   s   where h   s  is the delete relaxation
planning task   we have cost    s   s 
estimate of the cost from s to the goal  as an aside  we note that this delete relaxation
abstraction ht      i in particular exemplifies that nothing in definition   requires the
size of the abstract state space to be limited by the size of the original state space  in any
event  however  the abstraction ht      i does not induce a heuristic in terms of definition  
because computing h   s  is known to be np hard  bylander        
the situation for critical path relaxation is exactly the opposite  while computing
the corresponding family of admissible estimates hm is polynomial time for any fixed m 
this computation is not based on computing the shortest paths in an abstraction of the
planning task  the state graph over which hm is computed is an and or graph  and not
an or graph such as transition graphs   and the actual computation of hm corresponds
to computing a critical tree  and not a shortest path  to the goal  to the best of our
knowledge  the precise relation between critical path and abstraction heuristics is currently
an open question  helmert   domshlak        
overall  the only abstraction heuristics in the toolbox of planning these days appear to
be the explicit homomorphism abstractions  whose best known representative is probably
   we assume the reader is familiar with these two relaxations  if not  their discussion here can be safely
skipped 

  

fikatz   domshlak

the pattern database  pdb  heuristics  given a planning task  over state variables v  
a pdb heuristic is based on projecting  onto a subset of its variables v   v   such a
homomorphism abstraction  maps two states s    s   s into the same abstract state iff
s   v      s   v     inspired by the  similarly named  domain specific heuristics for search
problems such as  n      puzzles or rubiks cube  culberson   schaeffer        hernadvolgyi   holte        felner et al          pdb heuristics have been successfully exploited in domain independent planning as well  edelkamp              haslum et al  
       the key decision in constructing pdbs is what sets of variables the problem is
projected to  edelkamp        haslum et al          however  apart from that need to
automatically select good projections  the two limitations of pdb heuristics are the size of
the abstract space s  and its dimensionality  first  the number of abstract states should
be small enough to allow reachability analysis in s  by exhaustive search  moreover  an
o    bound on  s    is typically set explicitly to fit the time and memory limitations of
the system  second  since pdb abstractions are projections  the explicit constraint on  s   
implies a fixed dimensionality constraint  v      o     in planning tasks with  informally 
many alternative resources  this limitation is a pitfall  for instance  suppose  i  
i   is a
sequence of logistics problems of growing size with  vi     i  if each package in i can be
transported by some  i  vehicles  then starting from some i  h will not account at all for
movements of vehicles essential for solving i  helmert   mattmuller        
aiming at preserving the attractiveness of the pdb heuristic while eliminating the bottleneck of fixed dimensionality  helmert et al         have generalized the methodology
of drager  finkbeiner  and podelski        and introduced the so called merge and shrink
 ms  abstractions for planning  ms abstractions are homomorphisms that generalize pdb
abstractions by allowing for more flexibility in selection of pairs of states to be contracted 
the problems state space is viewed as the synchronized product of its projections onto the
single state variables  starting with all such atomic abstractions  this product can be
computed by iteratively composing two abstract spaces  replacing them with their product 
while in a pdb the size of the abstract space s  is controlled by limiting the number of
product compositions  in ms abstractions it is controlled by interleaving the iterative composition of projections with abstraction of the partial composites  helmert et al         have
proposed a concrete strategy for this interleaved abstraction refinement scheme and empirically demonstrated the power of the merge and shrink abstraction heuristics  like pdbs 
however  ms abstractions are explicit abstractions  and thus computing their heuristic values is also based on explicitly searching for optimal plans in the abstract spaces  hence 
while merge and shrink abstractions escape the fixed dimensionality constraint of pdbs 
the constraint on the abstract space to be of a fixed size still holds 

   implicit abstractions
focusing on the o    bound posted by explicit abstractions on the size of the abstract
space  our first observation is that explicit abstractions are not necessarily the only way to
proceed with abstraction heuristics  given a planning task  over states s  suppose we can
transform it into a different planning task  such that
   the transformation induces an abstraction mapping    s  s  where s  is the state
space of    and
  

fiimplicit abstraction heuristics

   both the transformation of  to    as well as computing  for any state in s  can
be done in time polynomial in      
having such planning task to planning task transformations in mind  we define what we
call  additive  implicit abstractions 
definition   an additive implicit abstraction of a planning task  is a set of pairs
m
m
a    hi   i i m
i   such that  i  i   are some planning tasks and  ht i    i i i   is an
additive abstraction of t   
let us now examine the notion of implicit abstractions more closely  first  implicit
abstractions allow for a natural additive combination of admissible heuristics for the abstract
tasks  this composition is formulated below by theorem    extending the original criterion
for admissibility of additive heuristics described in section    second  as formulated by
theorem    implicit abstractions can be composed via the functional composition of their
abstraction mappings  these two easy to prove properties of implicit abstractions allow us
then to take the desired step from implicit abstractions to implicit abstraction heuristics 
theorem    admissibility  let  be a planning task and a    hi   i i m
i   be an additive implicit abstraction of
 
if 
for
each
 

i

m 
h
is
an
admissible
heuristic
for i  
i
pm
then the function h s    i   hi  i  s   is an admissible heuristic for  
proof  the proof is straightforward  let t    s  l  tr  s    s        be the transition graph
of   and let s be some state in s  for each    i  m  let ti    si   li   tri   s i   si     i   be
the transition graph of i  
first  if hi is an admissible heuristic for i   then for all si  si   
hi  i  s    cost i  s   si   
now  for each state s   s     from definition   we have i  s     si    and from eq    we have
m
x
i  

and thus
h s   

m
x
i  

cost i  s   i  s      cost s  s    

hi  i  s   

giving us an admissible estimate for

m
x

i  

h  s  

cost i  s   i  s      cost s  s    


theorem    composition  let  be a planning task and a    hi   i i m
i   be an addimi
tive implicit abstraction of   if  for each
i j   i j i j   is an additive
s    i  m  ai   m h
i
implicit abstraction of i   then a    m
 h
 



i 
is
an additive implicit abi j
i j
i j  
i  
straction of  
proof  let t    s  l  tr  s    s        be the transition graph of   for each    i  m 
let ti    si   li   tri   s i   si     i   be the transition graph of i   and for each    j  mi   let
        be the transition graph of    we need to show that
ti j    si j   li j   tri j   s i j   si j
i j
i j
i j  i is an abstraction mapping as in definition    from i and i j being abstraction
mappings  we have
  

fikatz   domshlak

 s i j   i j  s i     i j  i  s       i j  i  s    
    and
 for all s  s   we have i  s   si  and thus i j  i  s     i j  i  s   si j
p i
 
 
 for all si   s i  si   cost si   s i    m
j   cost i j  si    i j  si     and thus for all s  s  s 

cost s  s    

m
x
i  

cost i  s   i  s     
 

mi
m x
x
i   j  
mi
m x
x
i   j  

cost i j  i  s    i j  i  s     
cost i j  i  s   i j  i  s     


together  theorems   and   suggest the following scheme for deriving abstraction heuristics  given an additive implicit abstraction a    hi   i i m
i     if all its individual abstract
tasks belong to some tractable fragments of optimal planning  then we can use in practice
the  sum of the  true costs in all i as the admissible estimates for the costs in   otherwise  if optimal planning for some abstract tasks i in a cannot be proven polynomial time
solvable  then we can further abstract these tasks  obtaining admissible estimates for the
true costs in i  
definition   let  be a planning task over states s  and let a    hi   i i m
i   be an
additive implicit abstraction of   if m   o poly         and  for allp
states s  s and all

   i  m  h  i  s   is polynomial time computable  then ha  s    m
i   h  i  s   is an
implicit abstraction heuristic function for  
compared to explicit abstraction heuristics such as pdb heuristics and merge andshrink heuristics  the direction of implicit abstraction heuristics is  at least in principle 
appealing because neither the dimensionality nor even the size of the state spaces induced
by implicit abstractions are required to be bounded by something restrictive  if at all  the
pitfall  however  is that implicit abstraction heuristics correspond to tractable fragments of
optimal planning  and the palette of such known fragments is extremely limited  backstrom
  nebel        bylander        jonsson   backstrom        jonsson        katz   domshlak      b   in fact  none so far has appeared to us very convenient for automatically devising useful problem transformations as above  fortunately  we show next that the boundaries
of tractability can be expanded in the right way  allowing us to successfully materialize the
idea of implicit abstraction heuristics 
in the following  a key role is played by the causal graphs induced by the planning
tasks  informally  the basic idea behind what we call causal graph decompositions is to
abstract the given planning task  along a subgraph of s causal graph  with the goal of
obtaining abstract problems of specific structure  naturally  there are numerous possibilities
for obtaining such structure oriented abstractions  we now present one such decomposition
that is tailored to abstractions around acyclic subgraphs  informally  this decomposition
can be seen as a sequential application of two kinds of task transformations  dropping
preconditions  pearl        and  certain form of  breaking actions with conjunctive effects
into single effect actions 
  

fiimplicit abstraction heuristics

definition   let    hv  a  i  g  costi be a planning task  and let g    vg   eg   be an
acyclic subgraph of the causal graph cg    a planning task g   hvg   ag   ig   gg   costg i
is an acyclic causal graph decomposition of  with respect to g if
   ig   i vg    gg   g vg   
s
   ag   aa ag  a  where each ag  a     a            al a    is a set of actions over vg
such that  for a topological with respect to g ordering of the variables  v            vl a     
v eff a    vg   and    i  l a  
 
eff a  v  
v   vi
i
eff a   v   
unspecified  otherwise

   

 v  vi    eg  v   v eff a   or v   vi
pre a  v  
pre ai   v    eff a  v  
 v  vi    eg  v  v eff a  


unspecified  otherwise
   for each action a  a 

x
a  ag  a 

costg  a     cost a  

   

it is not hard to verify from definition   that for any planning task  and any acyclic
causal graph decomposition g of   the causal graph cg g   is exactly the subgraph g underlying the decomposition  to illustrate the notion of acyclic causal graph decomposition 
we consider a planning task    hv  a  i  g  costi over five state variables v    u  v  x  y  z  
two unit cost actions a    a    a    as in figure  a  initial state i    u      v      x      y      z      
and goal g    u      v      x      y      z       the causal graph cg   is depicted in figure  a 
figures  b c show two subgraphs g  and g  of cg    respectively  as well as the action sets ag   a       a     a     a     and ag   a       a     a     a     in figure   b   and the action
sets ag   a       a     a     a     and ag   a       a     a     a     in figure   c   for i          let
i   hv  ai   i  g  costi i be the planning task with ai   agi  a   agi  a    and costi  a       
for all a  ai   these two planning tasks i  individually  satisfy the conditions of definition   with respect to  and gi   and thus they are acyclic causal graph decompositions of
 with respect to gi  
we now proceed with specifying implicit abstractions defined via acyclic causal graph
decompositions 
definition   let    hv  a  i  g  costi be a planning task over states s  and let g    gi  
m
 vgi   egi   m
i   be a set of acyclic subgraphs of the causal graph cg    a    hgi   i i i  
is an acyclic causal graph abstraction of  over g if  for some set of cost functions
 costi   a  r    m
i   satisfying
a  a  

m
x
i  

costi  a   cost a  

we have  for    i  m 
  

   

fikatz   domshlak

a    h x      y      z        x      y      z     i

a     h x        x     i
a     h x      y        y     i
a     h x      z        z     i

a     h y        y     i
a     h z        z     i
a     h y      z      x        x     i

a    h u      v      x        u      v      x     i

a     h x        x     i
a     h x      u        u     i
a     h x      v        v     i

a     h u        u     i
a     h v        v     i
a     h u      v      x        x     i

u

a 

a 

x

a 
a 

y

x
a 

a  

a 

v

z

u

a  

a   a  

y

v

 a 

u

 b 

a  

z

y

v
a  

a  

z
a  

x
 c 

figure     a  the actions and causal graph cg   of the planning graph in the example
illustrating definition     b  subgraph g  of cg   and the induced action sets
ag   a    and ag   a      c  subgraph g  of cg   and the induced action sets
ag   a    and ag   a     the arcs of both cg   and its subgraphs g  and g  are
labeled with the actions inducing the arcs 

 gi   hvgi   agi   igi   ggi   costgi i is an acyclic causal graph decomposition of i  
hv  a  i  g  costi i with respect to gi   and
 the abstraction mapping i   s  si is the projection mapping i  s    s vgi   
theorem   acyclic causal graph abstractions of the planning tasks are additive implicit
abstractions of these tasks 
proof  let    hv  a  i  g  costi be a planning task  and let a    hgi   i i m
i   be an
acyclic causal graph abstraction of  over a set of subgraphs g    gi    vgi   egi   m
i    
let t    s  l  tr  s    s        be the transition graph of   and  for    i  m  ti  
 si   li   tri   s i   si     i   be the transition graph of gi   we need to show that i is an abstraction mapping as in definition   
first  from definitions   and    we have
 s i   igi   i vgi     s   vgi     i  s     and
 for all s  s   we have s  g and thus i  s    s vgi    g vgi     ggi   providing us
with i  s   si   
now  if s is a state of  and a  a is an action with pre a   s  then i  s  is a state of gi
and pre a  vgi    i  s   let the action sequence    ha    a            al a  i be constructed from
a as in eq     we inductively prove that  is applicable in i  s   first  for each v  vgi  
either pre a    v    pre a  v   or pre a    v  is unspecified  and thus     ha  i is applicable in
i  s   the inductive hypothesis is now that j   ha    a            aj i is applicable in i  s   and
 
let s    i  s jj k  from eq     for each    j    j  aj changes the value of vj   to eff a  vj     
  

fiimplicit abstraction heuristics

and that is the only change of vj   along j   likewise  since all the actions constructed as in
eq    are unary effect   v            vj   are the only variables in vgi affected along j   hence 
for all v  vgi   if v   vj        j    j  then s   v    eff a  v    pre aj     v   and otherwise 
s   v    i  s  v   and if pre aj     v  is specified  then pre aj     v    pre a  v    i  s  v   this
implies that aj   is applicable in s  and  as a result  j     ha    a            aj   i is applicable in
i  s   finalizing the inductive proof  likewise  exactly the same arguments on the affect of
l a 
 aj  j   on i  s  immediately imply that  if    ha    a            al a  i  then i  sjak    i  s jk 
next  for each a  a  from eqs    and   we have
m
x

x

i   a  agi  a 

costgi  a    

m
x
i  

costi  a   cost a  

   

now  let s  s   s be a pair of original states such that cost s  s        and let    
 
ha            ak i be the sequence
pk of labels along a cheapest path from s to s in t  from that 
 
cost s  s     cost      j   cost aj    the decomposition of such a path to the sequences
of actions as in eq    is ap not p
neccesarily cheapest  path from i  s  to i  s    in ti   and
k
 
thus cost i  s   i  s     j   a  ag  aj   costgi  a     providing us with
i

m
x
i  

 

cost i  s   i  s    
   



m x
k
x

x

 

costgi  a    

i   j   a  agi  aj  
k
x

k x
m
x

x

costgi  a   

j   i   a  agi  aj  

cost aj     cost s  s    

j  


thus  if we can decompose the given task  into a set of tractable acyclic causalgraph decompositions     g            gm    then we can solve all these tasks in polynomial
time  and derive an additive admissible heuristic for   before we proceed with considering
concrete acyclic causal graph decomposition  note that definition   leaves the decision about
the actual partition of the action costs rather open  in what follows we adopt the most
straightforward  uniform action cost partition in which thescost of each action a is equally
split among all the non redundant representatives of a in m
i   agi  a   however  a better
choice of action cost partition can sometimes be made  in fact  sometimes it can even be
optimized  katz   domshlak       

   fork decompositions
we now proceed with introducing two concrete acyclic causal graph decompositions that 
when combined with certain variable domain abstractions  provide us with implicit abstraction heuristics  these so called fork decomposition heuristics are based on two novel
fragments of tractable cost optimal planning for tasks with fork and inverted fork structured
causal graphs 
definition   for a planning task  over variables v   and a variable v  v  
  

fikatz   domshlak

    v fork of  is the subgraph gvf of cg   over nodes vgvf    v   succ v  and edges
egvf     v  u    u  succ v    and
    v ifork  short for inverted fork  of  is a subgraph gvi of cg   over nodes vgvi  
 v   pred v  and edges egvi     u  v    u  pred v   
the sets of all v forks and all v iforks of  are denoted by gf    gvf  vv and gi  
 gvi  vv   respectively 
for any planning task and each of its state variables v  both v fork and v ifork are
acyclic digraphs  allowing us to define our three implicit abstractions as follows 
definition   for any planning task    hv  a  i  g  costi 

    any acyclic causal graph abstraction af    hfv   vf i vv of  over gf is called
f abstraction  and the set of abstract planning tasks f    fv  vv is called
f decomposition of  
    any acyclic causal graph abstraction ai    hiv   vi i vv of  over gi is called
i abstraction  and the set of abstract planning tasks i    iv  vv is called
i decomposition of  
    any acyclic causal graph abstraction afi    hfv   vf i  hiv   vi i vv of  over
gfi   gf  gi is called fi abstraction  and the set of abstract planning tasks
fi    fv   iv  vv is called fi decomposition of  

definition   can be better understood by considering the fi abstraction of the problem
 from our logistics example  figure   schematically illustrates the process  to simplify
the example  here we as if eliminate from gfi all the single node subgraphs  obtaining
afi    hfc    cf   i   hfc    cf   i   hfc    cf   i   hft   tf i   hip    pi   i   hip    pi   i  
considering the action sets of the problems in fi    fc    fc    fc    ft   ip    ip     we see
that each original driving action has one nonredundant  that is  changing some variable 
representative in three of the abstract planning tasks  while each load unload action has
one nonredundant representative in five of these tasks  for instance  the action drive c  from a to d has one nonredundant representative in each of the tasks  fc    ip    ip     and
the action load p   into c   at a has one nonredundant representative in each of the tasks
 fc    fc    fc    ft   ip     since we assume a uniform partition of the action costs  the cost
of each driving and load unload action in each relevant abstract planning task is thus set
to     and      respectively  from theorem   we have afi being an additive implicit
abstraction of   and from theorem   we then have

x
hfi  
hf   hi  
   
v

v

vv

being an admissible estimate of h in   the question now is how good this estimate is 
the optimal cost of solving our running example is     taking as a reference the well known
admissible heuristics hmax  bonet   geffner        and h   haslum   geffner         we
have hmax  i      and h   i        considering our fi abstraction  the optimal plans for
the tasks in fi are as follows 
  

fiimplicit abstraction heuristics

fc    load p   into c   at c  unload p   from c   at d  load p   into t at d 
unload p   from t at e  load p   into c   at e  unload p   from c   at g 
load p   into c   at f  unload p   from c   at e 
fc    load p   into c   at c  unload p   from c   at d  load p   into t at d 
unload p   from t at e  load p   into c   at e  unload p   from c   at g 
load p   into c   at f  unload p   from c   at e 
fc    load p   into c   at c  unload p   from c   at d  load p   into t at d 
unload p   from t at e  drive c   from g to e  load p   into c   at e 
drive c   from e to g  unload p   from c   at g  drive c   from g to e 
drive c   from e to f  load p   into c   at f  drive c   from f to e 
unload p   from c   at e  drive c   from e to f 
ft   load p   into c   at c  unload p   from c   at d  drive t from e to d 
load p   into t at d  drive t from d to e  unload p   from t at e 
load p   into c   at e  unload p   from c   at g  load p   into c   at f 
unload p   from c   at e 
ip    drive c   from a to d  drive c   from d to c  load p   into c   at c 
drive c   from c to d  unload p   from c   at d  drive t from e to d 
load p   into t at d  drive t from d to e  unload p   from t at e 
drive c   from g to e  load p   into c   at e  drive c   from e to g 
unload p   from c   at g  drive c   from g to e  drive c   from e to f 
ip    drive c   from g to e  drive c   from e to f  load p   into c   at f 
drive c   from f to e  unload p   from c   at e  drive c   from e to f 
hence  we have
hfi   hf

c 

 

 
 

  hf

 

 
 

 

c 

 

hf
 
 

c 

 

 
 

hf

 
 

 
 

t

 

 
 

 

hi

 

 
 

p 

 

 
 

 

hf

 

 
 

p 

 

 
 

     

   

and so hfi appears at least promising 
unfortunately  despite the seeming simplicity of the planning tasks in fi   it turns out
that implicit fork decomposition abstractions as in definitions   do not fit the requirements
of implicit abstraction heuristics as in definition    the causal graphs of the planning
tasks in f and i form directed forks and directed inverted forks  respectively  and  in
general  the number of variables in each such planning task can be as large as   v    
the problem is that even satisficing planning for sas  fragments with fork and inverted
fork causal graphs is np complete  domshlak   dinitz         in fact  recent results by
chen and gimenez        show that planning for any sas  fragment characterized by any
nontrivial form of causal graph is np hard  moreover  even if the domain transition graphs
of all the state variables are strongly connected  as in our example   optimal planning for
fork and inverted fork structured problems remain np hard  see helmert       and     
for the respective results   next  however  we show that this is not the end of the story for
fork decompositions 
  

fikatz   domshlak



b
a
c 

p 

c 

cg  

f
c 

t

d

p 

g

p 

c 

t

e
c 

c

c 

p 

 fv   iv  vv
fc 

c 

p 

c 

p 

c 

c 

t

ip 

p 
if
cg 
cg p ip   

cg fcfc    
cg 

figure    schematic illustration of fi decomposition for our running logistics example
while the hardness of optimal planning for problems with fork and inverted fork causal
graphs casts a shadow on the relevance of fork decompositions  a closer look at the proofs of
the corresponding hardness results of domshlak and dinitz        and helmert             
reveals that they in particular rely on root variables having large domains  exploiting this
observation  we now show that this reliance is not incidental and characterize two substantial
islands of tractability within the structural fragments of sas   
theorem    tractable forks  given a planning task    hv  a  i  g  costi with a fork
causal graph rooted at r  v   if  d r        the time complexity of the cost optimal planning
for  is polynomial in      
proof  observe that  for any planning task  as in the theorem  the fork structure of the
causal graph cg   implies that all the actions in  are unary effect  and each leaf variable
v  succ r  preconditions only the actions affecting v itself  the algorithm below is based
on the following three properties satisfied by the optimal plans  for  
 i  for any leaf variable v  succ r   the path v from i v  to g v  induced by  in
dtg v    is either cycle free or contains only zero cost cycles  this is the case because
otherwise all the nonzero cost cycles can be eliminated from v while preserving its
validity  violating the assumed optimality of   without loss of generality  in what
follows we assume that this path v in dtg v    is cycle free  in the case of fork
causal graphs  we can always select an optimal  that satisfies this requirement for all
v  succ r   thus  we have  v     d v      
 ii  having fixed a sequence of value changes of r  the forks leaves become mutually
independent  that is  our ability to change the value of one of them does not affect
our ability to change the value of all the others 
  

fiimplicit abstraction heuristics

 iii  because r is binary valued  if v  v    r  is the most demanding leaf variable in
terms of the number of value changes required from r by the action preconditions
along v   then these are the only value changes of r along   except for  possibly  a
final value change to g r   thus  in particular  we have  r    maxvsucc r   d v   
we begin with introducing some auxiliary notations  with  d r        let d r          
with i r       let  r  be an alternating     sequence starting with    and having   in
all odd and   in all even positions  this sequence  r  is such that   r       if no action
in a can change rs value to      r       if some action can change rs value to   but no
action can then restore it to value    and otherwise    r         maxvsucc r   d v    let
  r   be the set of all nonempty prefixes of  r  if g r  is unspecified  otherwise  let it
be the set of all nonempty prefixes of  r  ending with g r   note that  if   r      
then the problem is trivially unsolvable  in what follows we assume this is not the case  for
each v  succ r   let dt g v and dt g v be the subgraphs of the domain transition graphs
dtg v     obtained by removing from dtg v    all the arcs labeled with r     and r     
respectively 
the algorithm below incrementally constructs a set r of valid plans for   starting with
r    
    for each v  succ r   and each pair of vs values x  y  d v   compute the cheapest
 that is  cost minimal  paths v   x  y  and v   x  y  from x to y in dt g v and dt g v  
respectively  for some pairs of values x  y  one or even both these paths may  of course 
not exist 
    for each sequence     r    and each v  succ r   construct a layered digraph lv   
with        node layers l            l     where l  consists of only i v   and for    i     
 i 

li consists of all nodes y  d v  for which a path v  x  y  from some node x  li 
has been constructed in step      for each x  li    y  li   lv    contains an arc
 i 
 x  y  weighted with cost v  x  y   

    for each     r    let k       a candidate plan  for  is constructed as follows 

 a  for each v  succ r   find a cost minimal path from i v  to g v  in lv     if no such
path exists  then proceed with the next prefix in   r    otherwise  note that the
i th edge on this path  taking us from some x  li  to some y  li   corresponds
 i 
to the cost minimal path v  x  y  from x to y  let us denote this path from x to
y by svi  

 b  set r   r     where    s   a    s        a k  s k   each sequence s i is obtained
by an arbitrary merge of the sequences  svi  vsucc r    and a is the cheapest action
changing the value of r to value  
    if r     then fail  otherwise return    argmin r cost    
it is straightforward to verify that the complexity of the above procedure is polynomial
in the description size of   to prove correctness  we show that the procedure returns a
plan for any solvable task   and that the returned plan   satisfies cost      cost   for
any optimal plan  for  
  

fikatz   domshlak

given a solvable task   let  be an optimal plan for  with all v for the leaf variables
v being cycle free  let r   ha          ak i  the numbering of actions along r starts with
a  to simplify indexing later on  for each v  succ r   the actions of r divide v into
subsequences of v changing actions v    v         kv   separated by the value changes
required from r  that is  for each    i  k  all actions in iv are preconditioned by the
same value of r  if any  and if two actions a  iv and a   i  
are preconditioned by r  then
v
pre a  r     pre a    r   let     r   be a value sequence such that      k    r        for
each v  succ r   v is a path from i v  to g v  in lv     and therefore some  is added
into r by the algorithm  meaning that the algorithm finds a solution  now  if   r 
then  for each v  succ r   let sv   sv          svk be a cost minimal path from i v  to g v  in
lv    such that svi is the sequence of actions changing the value of v and preconditioned
either by r     or nothing for odd i  and by r     or nothing for even i  thus 
cost sv   sv          svk    

k
x
i  

cost svi    cost v   

because sequence s i is obtained by an arbitrary merge of the sequences  svi  vsucc r    and
a is the cheapest action changing the value of r to   then    s    a     s           a k   s k
is an applicable sequence of actions that achieves the goal values for each v  succ r  as
well as for r  and
cost      cost s    a     s           a k   s k    

k
x

cost a i     

i  

cost r    

k
x
i  

x

cost s i   

cost v     cost   

vsucc r 

hence  if  is solvable  then the algorithm returns a plan for   and this plan must be
optimal  finally  if  is not solvable  then r necessarily remains empty  and thus the
algorithm fails 

while theorem   concerns the tractability tasks with fork structured causal graphs and
roots with binary domains  in our earlier work we also reported an additional tractability
result for fork structured causal graphs with the domains of all variables being of a fixed
size  though not necessarily binary valued  katz   domshlak         we do not discuss
this result here in detail because  at least so far  we have not found it very helpful in the
context of devising effective abstraction heuristics 
theorem    tractable inverted forks  given a planning task    hv  a  i  g  costi
with an inverted fork causal graph with sink r  v   if  d r     o     the time complexity of
the cost optimal planning for  is polynomial in      
proof  let  d r     d  observe that the inverted fork structure of the causal graph cg  
implies all the actions in  are unary effect  and that the sink r preconditions only the
actions affecting r itself  hence  in what follows we assume that g r  is specified  otherwise
  

fiimplicit abstraction heuristics

given a path ha            am i from i r  to g r  in dtg r    
    hi
am      hg pred r    i
foreach v  pred r  do xv    i v 
for i      to m     do
foreach v  pred r  do
if pre ai   v  is specified and pre ai   v     xv then
if pre ai   v  is not reachable from xv in dtg v    then fail
append to  the actions induced by some cost minimal path
from pre ai   v  to xv in dtg v   
xv    pre ai   v 
if i   m     then append to  the action ai
return 
figure    detailed outline of step     of the planning algorithm for inverted fork structured
task 

 breaks down to a set of trivial planning problems over a single variable each  likewise 
from the above properties of  it follows that  if  is an optimal plan for   then the path
r from i r  to g r  induced by  in dtg r    is either cycle free or contains only zerocost cycles  the latter can be safely eliminated from   and thus we can assume that r
is cycle free  given that  a simple algorithm that finds a cost optimal plan for  in time
     d           is as follows 
    create all   ar  d    cycle free paths from i r  to g r  in dtg r    
    for each variable v  pred r   and each pair of vs values x  y  d v   compute the
cost minimal path from x to y in dtg v     the whole set of such cost minimal paths
can be computed using  d v    applications of the floyd warshall algorithm on the
domain transition graphs of the sinks parents pred r  
    for each i r  to g r  path in dtg r    generated in step      construct a plan for
 based on that path for r  and the cheapest paths computed in      this simple
construction  depicted in figure    is possible because the values of each parent variable
can be changed independently of the values of all other variables in the inverted fork 
    take the cheapest plan among those constructed in      if no plan was constructed in
step      then  is unsolvable 
we have already observed that  for each cost optimal plan   r is one of the i r  to g r 
paths generated in step      for each v  pred r   let sv denote the sequence of values from
d v  that is required by the preconditions of the actions along r   for each v  pred r   we
have v corresponding to a  possibly cyclic  path from i v  to g v  in dtg v     traversing
the values    nodes  from sv in the order required by sv   in turn  the plan for  generated
in     consists of cost minimal such paths for all v  pred r   therefore  at least one of the
  

fikatz   domshlak

plans generated in     must be cost optimal for   and the minimization step     will select
one of them 

theorems   and   clarify the gap between fork decompositions and implicit abstraction
heuristics  and now we can bridge this gap by further abstracting each task in the given fork
decomposition of   we do that by abstracting domains of the fork roots and inverted fork
sinks to meet the requirements of the tractable fragments  we note that  in itself  the idea
of domain decomposition is not very new in general  hernadvolgyi   holte        and in
domain independent planning in particular  domshlak  hoffmann    sabharwal         in
fact  the shrinking step of the algorithm for building the merge and shrink abstractions
is precisely a variable domain abstraction for meta variables constructed in the merging
steps  helmert et al         
definition    let    hv  a  i  g  costi be a planning task over states s  v  v be a state
variable  and                 m   be a set of mappings from d v  to some sets             m  
respectively  a    hi   i i m
i   is a domain abstraction of  over  if  for some set of
cost functions  costi   a  r    m
i   satisfying
a  a  

m
x
i  

costi  a   cost a  

   

we have  for    i  m 
 the abstraction mapping i of states s is
u  v  

 
i  s u   
i  s  u   
s u  

u v
 
u    v

and  extending i to partial assignments on v    v as i  s v        i  s  v     
 i   hv  ai   ii   gi   costi i is a planning task with
   ii   i  i   gi   i  g  
   ai    ai   hi  pre a    i  eff a  i   a  a   and

   for each action a  a 

costi  ai     costi  a  

   

we say that i is a domain decomposition of i   hv  a  i  g  costi i with respect to i  
theorem   domain abstractions of the planning tasks are additive implicit abstractions
of these tasks 
proof  let    hv  a  i  g  costi be a planning task and a    hi   i i m
i   be a domain
abstraction of  over                 m    let t    s  l  tr  s    s        be the transition
graph of   for each    i  m  let ti    si   li   tri   s i   si     i   be the transition graph of
i   we need to show that i is an abstraction mapping as in definition   
first  from definition    we have
  

fiimplicit abstraction heuristics

 s i   ii   i  i    i  s     and
 for all s  s   we have s  g and thus i  s   i  g    gi   providing us with
i  s   si   
now  if s is a state of  and a  a is an action with pre a   s  then i  s  is a state of i
and pre ai     i  pre a    i  s   thus  ai is applicable in i  s   and now we show that
applying ai in i  s  results in i  s jai k   i  sjak  
   for the effect variables v  v eff a     v eff ai     we have eff ai    i  s jai k and
eff ai     i  eff a    i  sjak  
   for all other variables v   v eff a    we have sjak v    s v  and i  s jai k v   
i  s  v   and thus
i  s jai k v    i  s  v    i  s v     i  sjak v     i  sjak  v  
next  for each a  a  from eqs    and   we have
m
x

costi  ai    

i  

m
x
i  

costi  a   cost a  

    

now  let s  s   s be a pair of states such that cost s  s       and let     ha            al i be the
sequence
of labels along a cheapest path from s to s  in t  from that  cost s  s      cost     
pl
j
j   cost a    the decomposition of such a path to the actions as in definition    is a
 not
cheapest  path from i  s  to i  s    in ti   and thus cost i  s   i  s     
pl neccesarily
j
j   costi  a    providing us with
m
x
i  

cost i  s   i  s     

m x
l
x
i   j  

costi  aji    

l x
m
x
j   i  

    

costi  aji   

l
x

cost aj     cost s  s    

j  


having put the notion of domain abstraction in the framework of implicit abstractions 
we are now ready to connect fork decompositions and implicit abstraction heuristics  given
a fi abstraction afi    hfv   vf i  hiv   vi i vv of a planning task    hv  a  i  g  costi 
 for each fv  fi   we associate the root v of cg fv   with mappings fv    fv             fv kv  
such that kv   o poly        and all fv i   d v           and then abstract fv with
f i kv   and
afv    hfv i   v i
i  
 for each iv  fi   we associate the sink v of cg iv   with mappings iv    iv             iv kv   
such that kv    o poly        and all iv i   d v                  bv i    bv i   o     and
k 

i i  v  
then abstract iv with aiv    hiv i   v i
i  

  

fikatz   domshlak

from theorem    theorem    and the composition theorem    we then immediately have


kv 
kv
   
 
f
i
  hfv i   v i
afi  
 vf i    hiv i   v i
 vi i 
    
vv

i  

i  

being an additive implicit abstraction of   hence  from theorem   


kv 
kv
x x
x

hfi  
hi 
hf  
vv

v i

i  

i  

v i

    

is an admissible estimate of h for   and  from theorems   and    hfi is also computable
in time o poly        
this finalizes our construction of a concrete family of implicit abstraction heuristics  to
illustrate the mixture of acyclic causal graph and domain abstractions as above  we again
use our running logistics example  one bothersome question is to what extent further
abstracting fork decompositions using domain abstractions affects the informativeness of
the heuristic estimate  though generally a degradation here is unavoidable  below we show
that the answer to this question can sometimes be somewhat surprising 
to begin with an extreme setting  let all the domain abstractions for roots of forks and
sinks of inverted forks be to binary valued domains  among multiple options for choosing the mapping sets  fv   and  iv    here we use a simple choice of distinguishing between different values of each variable v on the basis of their cost from i v  in dtg v    
specifically  for each v  v   we set fv   iv   and  for each value   d v  and each
   i  max  d v  d i v       
 
   d i v       i
fv i      iv i     
    
   otherwise
for example  the problem fc  is decomposed  see the domain transition graph of c 
on the left in figure  c  into two problems  fc     and fc       with the binary abstract
domains of c  corresponding to the partitions   a    b  c  d   and   a  d    b  c   of
d c     respectively  as yet another example  the problem ip  is decomposed  see the
domain transition graph of p  in figure  d  into six problems ip               ip     along the
abstractions of d p    depicted in figure  a  now  given the fi decomposition of  and
mappings  fv   iv  vv as above  consider the problem ip       obtained from abstracting 
along the inverted fork of p  and then abstracting d p    using
 
      c 
ip         
 
      a  b  d  e  f  g  c    c    c    t 
it is not hard to verify that  from the original actions affecting p    we are left in ip     with
only actions conditioned by c  and c    if so  then no information is lost  if we remove
from ip     both variables c  and t  as well as the actions changing  only  these variables 
   no information is lost here because we still keep either fork or inverted fork for each variable of  

  

fiimplicit abstraction heuristics

in t

in c

at a

at b

at c

at d

at e

in c

at f

at g

in c

 a 
in t

in c

at a

at b

at c

at d

in t

in c

at e

in c

at f

at g

at a

in c

at b

at c

at d

at e

in c

d p    in fp    

in t

in c

at f

at a

at g

at b

at c

at d

at e

in c

in c

d p    in fp    

at f

at g

in c

d p    in fp    

 b 
figure    domain abstractions for d p      a  binary valued domain abstractions  the values inside and outside each dashed contour are mapped to   and    respectively 
 b  ternary valued domain abstractions  values that are mapped to the same
abstract value are shown as nodes with the same color and borderline 

and redistribute the cost of the removed actions between all other representatives of their
originals in   the latter revision of the action cost partition can be obtained directly by
replacing the cost partitioning steps corresponding to eqs      and     by a single  joint
action cost partitioning applied over the final additive implicit abstraction afi as in eq    
and satisfying

kv
x x
cost a  

vv



 

x

costfv i  fv i  a      

i   a  a f  a 
g

kv
x

x


costiv i  iv i  a      

    

i   a  a i  a 
g
v

v

in what follows  by uniform action cost partition we refer to a partition in which the cost of
each action is equally split among all its nonredundant representatives in the final additive
implicit abstraction 
overall  computing hfi as in eq     under our all binary valued domain abstractions
 
and such a uniform action cost partition provides us with hfi  i         
  and knowing that
fi
the original costs are all integers we can safely adjust it to h  i        hence  even under
the most severe domain abstractions as above  the estimate of hfi in our example task is
not lower than that of h   
let us now slightly refine our domain abstractions for the sinks of the inverted forks to
be to a ternary range            while mappings  fv   remain unchanged   iv   are set to
  

fikatz   domshlak



   d i v        i   
i
  d v    v i         d i v        i   


   d i v        i   

 

    

for example  the problem ip  is now decomposed into ip               ip     along the abstractions
of d p    depicted in figure  b  applying now the same computation of hfi as in eq    
over the new set of domain abstractions gives hfi  i            which  again  can be safely
adjusted to hfi  i        note that this value is higher than hfi      obtained using the
 generally intractable  pure fork decomposition abstractions as in eq     at first view 
this outcome may seem counterintuitive as the domain abstractions are applied over the fork
decomposition  and one would expect a coarser abstraction to provide less precise estimates 
this  however  is not necessarily the case when the employed action cost partition is ad hoc 
for instance  domain abstraction for the sink of an inverted fork may create independence
between the sink and its parent variables  and exploiting such domain abstraction specific
independence relations leads to more targeted action cost partition via eq     
to see why this surprising estimate improvement has been obtained  note that before
the domain abstraction in eq     is applied on our example  the truck moving actions
drive t from d to e and drive t from e to d appear in three abstractions ft   ip  and ip   
while after domain abstraction they appear in five abstractions ft     ip       ip       ip     and
ip       however  a closer look at the action sets of these five abstractions reveals that the
dependencies of p  in cg ip       and cg ip        and of p  in cg ip       on t are redundant 
and thus keeping representatives of move d e and move e d in the corresponding abstract
tasks is entirely unnecessary  hence  after all  the two truck moving actions appear only in
two post domain abstraction tasks  moreover  in both these abstractions the truck moving
actions are fully counted  in contrast to the predomain abstraction tasks where the portion
of the cost of these actions allocated to ip  simply gets lost 

   experimental evaluation  take i
to evaluate the practical attractiveness of the fork decomposition heuristics  we have conducted an empirical study on a wide sample of planning domains from the international
planning competitions  ipc             plus a non ipc schedule strips domain  
the domains were selected to allow a comparative evaluation with other  both baseline and
state of the art  approaches planners  not all of which supported all the pddl features at
the time of our evaluation 
later we formally prove that  under ad hoc action cost partitions such as our uniform
partition  none of the three fork decompositions as in definition   is dominated by the
other two  hence  we have implemented three additive fork decomposition heuristics  hf  
hi   and hfi   within the standard heuristic forward search framework of the fast downward
planner  helmert        using the a algorithm with full duplicate elimination  the hf
heuristic corresponds to the ensemble of all  not clearly redundant  fork subgraphs of the
   schedule strips appears in the domains distribution of ipc       later we became aware of the
fact that this domain was excluded from the competition because its encoding generated problems for
various planners 

  

fiimplicit abstraction heuristics

domain

s

airport ipc 
blocks ipc 
depots ipc 
driverlog ipc 
freecell ipc 
grid ipc 
gripper ipc 
logistics ipc 
logistics ipc 
miconic strips ipc 
mprime ipc 
mystery ipc 
openstacks ipc 
pathways ipc 
pipes notank ipc 
pipes tank ipc 
psr small ipc 
rovers ipc 
satellite ipc 
schedule strips
tpp ipc 
trucks ipc 
zenotravel ipc 

  
  
 
  
 
 
  
 
  
  
  
  
 
 
  
  
  
 
 
  
 
 
  

total

   

hf
s
  
  
 
 
 
 
 
 
  
  
  
  
 
 
 
 
  
 
 
  
 
 
 

 s
  
  
  
  
  
  
  
  
  
  
  
  
   
   
  
  
  
  
   
  
  
  
  
   

hi
s
  
  
 
  
 
 
 
 
  
  
  
  
 
 
  
 
  
 
 
  
 
 
 

 s
  
  
  
  
  
  
  
  
  
  
  
  
   
   
  
  
  
  
   
  
  
  
  
   

hfi
s
  
  
 
 
 
 
 
 
  
  
  
  
 
 
 
 
  
 
 
  
 
 
 

 s
  
  
  
  
  
  
  
  
  
  
  
  
   
   
  
  
  
  
  
  
  
  
  

ms     

ms     

s
  
  
 
  
 
 
 
 
  
  
  
  
 
 
  
  
  
 
 
  
 
 
  

s
  
  
 
  
 
 
 
 
  
  
  
  
 
 
  
 
  
 
 
 
 
 
  

   

 s
  
  
   
   
   
   
  
  
  
  
  
  
   
  
  
  
   
  
   
  
   
  
   
   

 s
  
  
  
   
  
   
  
  
  
  
  
  
   
   
  
  
   
   
   
 
   
  
   
   

hspf

s
  
  
 
 
 
 
 
 
  
  
 
  
 
 
  
 
  
 
 
  
 
 
 

 s
  
   
  
  
   
 
  
  
  
  
  
  
   
   
  
  
   
  
  
  
  
   
  

   

gamer
s
  
  
 
  
 
 
  
 
  
  
 
 
 
 
  
 
  
 
 
 
 
 
  

 s
  
   
  
  
  
   
   
   
  
   
  
  
   
   
  
  
  
  
   
 
  
  
  
   

blind
s
  
  
 
 
 
 
 
 
  
  
  
  
 
 
  
  
  
 
 
  
 
 
 

 s
  
  
  
  
  
  
  
  
  
  
  
  
   
   
  
  
  
  
  
  
  
  
  
   

hmax
s
  
  
 
 
 
 
 
 
  
  
  
  
 
 
  
  
  
 
 
  
 
 
 

 s
  
  
  
  
   
   
  
  
  
  
   
  
   
   
  
  
  
  
  
  
   
  
  
   

table    a summary of the experimental results  per domain  s denotes the number of
tasks solved by any planner  per planner domain  the number of tasks solved by
that planner is given both by the absolute number  s  and by the percentage from
solved by some planners   s   the last row summarize the number of solved
instances 

causal graph  with the domains of the roots being abstracted using the leave one value out
binary valued domain decompositions as follows 
 
      i
i  d v    fv i     
 
    
   otherwise
the hi heuristic is the same but for the inverted fork subgraphs  with the domains of the
sinks being abstracted using the distance to goal value ternary valued domain decompositions  as in eq     


   d   g v      i   
i
  d v    v i         d   g v      i     
    


   d   g v      i   
the ensemble of the hfi heuristic is the union of these for hf and hi   the action cost
partition in all three heuristics was what we call uniform 
we make a comparison with two baseline approaches  namely blind a  with heuristic
value   for goal states and   otherwise  and a with the hmax heuristic  bonet   geffner 
       as well as with state of the art abstraction heuristics  represented by the mergeand shrink abstractions of helmert et al          the latter were constructed under the
   while distance from initial value is reasonable for the evaluation of just the initial state  leave onevalue out for fork roots and distance to goal value for inverted fork sinks should typically be much
more attractive for the evaluation of all the states examined by a  

  

fikatz   domshlak

linear  f  preserving abstraction strategy proposed by these authors  and this under two
fixed bounds on the size of the abstract state spaces  notably  s          and  s           
these four  baseline and merge and shrink  heuristics were implemented by helmert et al 
       within the same planning system as our fork decomposition heuristics  allowing for
a fairly unbiased comparison  we also compare to the gamer  edelkamp   kissmann 
      and hspf  haslum        planners  the winner and the runner up at the sequential
optimization track of ipc       on the algorithmic side  gamer is based on a bidirectional
blind search using sophisticated symbolic search techniques  and hspf uses a with an
additive critical path heuristic  the experiments were conducted on a  ghz intel e    
cpu with   gb memory  using     gb memory limit and    minute timeout  the only
exception was gamer  for which we used similar machines but with   gb memory and  
gb memory limit  this was done to provide gamer with the environment for which it was
configured 
table   summarizes our experimental results in terms of the number of tasks solved by
each planner  our impression of fork decomposition heuristics from table   is somewhat
mixed  on the one hand  the performance of all three fork decomposition based planners
was comparable to one of the settings of the merge and shrink heuristic  and this clearly
testifies for that the framework of implicit abstractions is not of theoretical interest only 
on the other hand  all the planners  except for a with the merge and shrink heuristic with
 s            failed to outperform a with the baseline hmax heuristic  more important for
us is that  unfortunately  all three fork decomposition based planners failed to outperform
even the basic blind search 
this  however  is not the end of the story for the fork decomposition heuristics  some
hope can be found in the detailed results in tables      in the appendix  as it appears from
table     on  e g   the logistics ipc  domain  hf almost consistently leads to expanding
fewer search nodes than the  better between the two merge and shrink heuristics on this
domain  ms        with the difference hitting four orders of magnitude  however  the time
complexity of hf per search node is substantially higher than that of ms        with the
two expanding at a rate of approximately    and        nodes per second  respectively 
the outcome is simple  while with no time limits  and only memory limit of     gb  hf
solves more tasks in logistics ipc  than ms       task      is solved with hf in        
seconds   this is not so with a standard time limit of half an hour used for table     in what
follows we examine the possibility of exploiting the informativeness of fork decomposition
heuristics while not falling into the trap of costly per node heuristic evaluation 

   back to theory  h partitions and databased implicit abstraction
accuracy and low time complexity are both desired yet competing properties of heuristic
functions  for many powerful heuristics  and abstraction heuristics in particular  computing
h s  for each state s in isolation is impractical  while computing h s  is polynomial in the
description size of   it is often not efficient enough to be performed at each search node 
however  for some costly heuristics this obstacle can be largely overcome by sharing most
of the computation between the evaluations of h on different states  if that is possible 
the shared parts of computing h for all problem states are precomputed and memorized
before the search  and then reused during the search by the evaluations of h on different
  

fiimplicit abstraction heuristics

states  such a mixed offline online heuristic computation is henceforth called h partition 
and we define the time complexity of an h partition as the complexity of computing h
for a set of states  given a subset of k problem states s    s  the h partitions time
complexity of computing  h s    s  s     is expressed as o x   ky    where o x  and o y  
are  respectively  the complexity of the  offline  pre search and  online  per node parts of
computing h s  
these days h partitions are being adopted by various optimal planners using criticalpath heuristics hm for m      haslum et al          landmark heuristics hl and hla  karpas
  domshlak         and pdb and merge and shrink abstraction heuristics  edelkamp 
      helmert et al          without effective h partitions  optimal search with these
heuristics would not scale up well  while with such h partitions it constitutes the state of the
art of cost optimal planning  for instance  a very attractive property of pdb abstractions
is the complexity of their natural h  partition  instead of computing h  s    h   s   from
scratch for each evaluated state s  impractical for all but tiny projections   the practice is
to precompute and store h  s    for all abstract states s   s   after which the per node
computation of h  s  boils down to a hash table lookup for h   s   with a perfect hash
function  in our terms  the time and space complexity of that pdb h  partition for a set
of k states is o  s    log  s        a     k  and o  s      respectively  this is precisely what
makes pdb heuristics so attractive in practice  in that respect  the picture with mergeand shrink abstractions is very much similar  while the order in which composites are
formed and the choice of abstract states to contract are crucial to the complexity of their
natural h  partitions  the time and space complexity for the concrete linear abstraction
strategy of helmert et al  are respectively o  v   s    log  s        a     k   v    and o  s     
similarly to pdb abstractions  the per node computation of h  s  with a merge and shrink
abstraction  is just a lookup in a data structure storing h   s   for all abstract states
 s   s   hence  while the pre search computation with ms abstractions can be more
costly than with pdbs  the online part of computing heuristic values is still extremely
efficient  this per node efficiency provides the merge and shrink heuristics with impressive
practical effectiveness on numerous ipc domains  helmert et al         
to sum up  we can say that the fixed size of abstract spaces induced by explicit abstractions such as pdbs and merge and shrink is not only a limitation but also a key to obtaining
effective h partitions  in contrast  escaping that limitation with implicit abstractions might
trap us into having to pay a high price for each search node evaluation  we now show  however  that the time per node complexity bottleneck of fork decomposition heuristics can
be successfully overcome  specifically  we show that an equivalent of pdbs and mergeand shrink notion of database exists for fork decomposition abstractions as well  despite
their exponential size abstract spaces  of course  unlike with pdb and merge and shrink
abstractions  the databased fork decomposition heuristics do not  and cannot  provide us
with a purely lookup online computation of h  s   the online part of the h  partition has
to be nontrivial in the sense that its complexity cannot be o     in what comes next we
prove the existence of such effective h partitions for fork and inverted fork abstractions 
in section   we then empirically show that these h partitions lead to fast pre search and
per node computations  allowing the informativeness of the fork decomposition heuristics
to be successfully exploited in practice 

  

fikatz   domshlak

theorem   let    hv  a  i  g  costi be a planning task with a fork causal graph rooted at a
binary valued variable r  there exists an h  partition for  such that  for any set of k states 
the time and space complexity of that h  partition is  respectively  o d   v      ar     kd v   
and o d   v     where d   maxv d v  
proof  the proof is by a modification of the polynomial time algorithm for computing
h  s  for a state s of such a task  used in the proof of theorem    tractable forks   given
a state s  let d r            where s r       in what follows  for each of the two roots
values   d r    denotes the opposite value       r     r    dtg  v and dtg  v are
defined exactly as in the proof of theorem   
    for each of the two values r  d r  of the root variable  each leaf variable v  v    r  
and each pair of values      d v   let p    r be the cost of the cheapest sequence of
actions changing v from  to   provided r   r   the whole set  p    r   for all the leaves
v  v   r  can be computed by a straightforward variant of the all pairs shortest paths 
floyd warshall algorithm on dtg v r in time o d   v    
    for each leaf variable v  v    r      i  d      and   d v   let g i be the cost of
the cheapest sequence of actions changing s v  to  provided a sequence     r   
     i  of value changes of r  having the values  p    r   from step      the set  g i  
is given by the solution of the recursive equation


ps v   s r   
i  






min g   i    p    s r   
    i     i is odd
  

g i  
 

   i    p    s r   
min
g
 
 
i


 
i
is
even



  


g
   i  d    
 i   
where     d v        given that  we have

h  s   

min

 cost    

  r  


x

gg v       

vv   r 

p  
with cost     i   cost a i     where a i   a is the cheapest action changing the
value of r from  i     to  i  
note that step     is already state independent  but the heavy step     is not  however 
the state dependence of step     can mostly be overcome as follows  for each v  v    r  
  d v      i  d      and r  d r   let g i  r   be the cost of the cheapest sequence of
actions changing  to g v  provided the value changes of r induce a     sequence of length
i starting with r   the set  g i  r    is given by the solution of the recursive equation


 
i  

p g v  
 r

g   i   r     p    r       i  
 
g i  r     min
 


g
   i  d    
 i   r   
  

    

fiimplicit abstraction heuristics

  

 

 

r   

  

 
 

 
 

 

 
   

 
 

   
 
  

 

 

 
 
   

 
 

 

 

 
   

 

 

 

 

   
 
  

 

 
 

 

 

 

 
 
 
 
 
 
 
 
 
 
 
 
 
 

cost  

v   

v    v    v   

u  

u   u   u   u   u  

 
  
  
  
  
   
   
 
  
  
  
  
   
   

   
   
   
   
 
 
 

   
 
 
 
 
 


 
 
 
 
 
 


 
 
 
 
 

   
   
  
  
 
 
 

   
   
  
  
 
 

           
           
     
 
     
 
 
 
 
 
 
 
 
 
 
  
     
 
     
 
 
 
 
 
 
 
 
 
 
 
 
 


 
 
 
 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 

 a 

 
 
 
 
 
 
 

 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 

 b 

figure    the database for a fork structured problem with a binary valued root variable r
and two children v and u  and g r       g v       and g u        a  depicts the
domain transition graphs of r  top   v  middle   and u  bottom   the numbers
above and below each edge are the precondition on r and the cost of the respective
action   b  depicts the database created by the algorithm  for instance  the entry
in row r             and column v     captures the value of gv      r      computed as
in eq      the shaded entries are those examined during the online computation
of h  r      v      u      
which can be solved in time o d   v     note that this equation is now independent of the
evaluated state s  and yet  g i  r    allow for computing h  s  for a given state s via

h  s   

min



 cost    

  r s r   

x

gs v      s r   

    

vv   r 

where  r r   is defined similarly to  r  but with respect to the initial value r of r 
with the new formulation  the only computation that has to be performed online  per
search node  is the final minimization over   r s r    in eq      and this is the lightest
part of the whole algorithm anyway  the major computations  notably those of  p    r  
and  g i  r     can now be performed offline and shared between the evaluated states  the
space required to store this information is o d   v    as it contains only a fixed amount of
information per pair of values of each variable  the time complexity of the offline computation is o d   v      ar     the  ar   component stems from precomputing the costs cost   
the time complexity of the online computation per state is o d v      v   comes from the
internal summation and d comes from the size of   r s r    

figure  b shows the database created for a fork structured problem with a binary valued
root r  two children v and u  and g r       g v       and g u       the domain transition
  

fikatz   domshlak

graphs of v and u are depicted in figure   a   online computation of h  s  as in eq    
for s    r      v      u      sums over the shaded entries of each of the four rows having such
entries  and minimizes over the resulting four sums  with the minimum being obtained in
the row r             
theorem   let    hv  a  i  g  costi be a planning task with an inverted fork causal graph
with sink r and  d r     b   o     there exists an h  partition for  such that  for any set
of k states  the time and space complexity of that h  partition is o b v   ar  b    d   v    
k v   ar  b    and o  v   ar  b    d   v     respectively  where d   maxv d v  
proof  like the proof of theorem    the proof of theorem   is based on a modification
of the polynomial time algorithm for computing h  s  used for the proof of theorem  
 tractable inverted forks  
    for each parent variable v  v    r   and each pair of its values      d v   let p  
be the cost of the cheapest sequence of actions changing  to     the whole set  p    
can be computed using the floyd warshall algorithm on the domain transition graph
of v in time o d   v    
    given a state s  for each cycle free path    ha            am i from s r  to g r  in dtg v    
let g be the cost of the cheapest plan from s in  based on   and the cheapest paths
 p     computed in step      each g can be computed as
g  

m
x
i  

cost ai    

m
x
x

pprei  v  prei    v   

i   vv   r 

where pre            prem   are the values required from the parents of r along the path  
that is  for each v  v    r   and    i  m     


s v  
i  



g v  
i   m      and g v  is specified
prei  v   
 

pre a
  v  
 

i

m 
and
pre a
  v 
is
specified
i
i



pre  v 
otherwise
i 
from that  we have h  s    min g  
note that step     is state independent  but step     is not  however  the dependence
of step     on the evaluated state can be substantially relaxed  as there are only o   
different values of r  it is possible to consider cycle free paths to g r  from all values of r 
for each such path   and each parent variable v  v    r   we know what the first value of
v required by  would be  given that  we can precompute the cost optimal plans induced
by each  assuming the parents start at their first required values  the remainder of the
computation of h  s  is delegated to online  and the modified step     is as follows 
for each r  d r  and each cycle free path    ha            am i from r to g r  in
dtg r     let a proxy state s be


v r
r  
s  v    g v  
   i  m   pre ai   v  is unspecified  


pre ai   v   i   argminj  pre aj   v  is specified 
  

fiimplicit abstraction heuristics

that is  the nontrivial part of s captures the first values of v    r  required along    given
that  let g be the cost of the cheapest plan from s in  based on   and the cheapest
paths  p     computed in      each g can be computed as
g  

m
x





cost ai    

i  

x

pprei  v  prei    v    

vv   r 

where  for each v  v    r   and    i  m     


s  v  
i  



g v  
i   m      and g v  is specified
prei  v   
 

pre ai   v      i  m  and pre ai   v  is specified



pre  v   otherwise
i 
storing the pairs  g   s   accomplishes the offline part of the computation  now  given a
search state s  we can compute

h  s   

min

 s t 
s  r  s r 



g  

x

ps v  s  v   

    

vv   r 

the number of cycle free paths to g r  in dtg r    is   ar  b     and g for each
such path  can be computed in time o b v     hence  the overall offline time complexity is
o b v   ar  b    d   v     and the space complexity  including the storage of the proxy states
s   is o  v   ar  b    d   v     the time complexity of the online computation per state via
eq     is o  v   ar  b      v   comes from the internal summation and  ar  b  from the upper
bound on the number of cycle free paths from s r  to g r  

figure   b  shows the database created for an inverted fork structured problem with a
ternary valued sink variable r  two parents u and v  and g r       g u       and g v      
the domain transition graphs of u and v are depicted at the top of figure   a   the actual
identities of actions affecting these two parents are not important here  the actions affecting
the sink r are
a    h u      r        r     i
a    h v      r        r     i

a    h u      r        r     i

a    h v      r        r     i 
the domain transition graph of r is depicted at the bottom of figure   a   online computation of h  s  as in eq     for s    r      v      u      sums over the shaded entries of each
of the four rows having such entries  and minimizes over the resulting four sums  with the
minimum being obtained in the lowest such row 
  

fikatz   domshlak

 

 

  

 

  

  

 

 
 

 

   

 

u  

u  

 

 

 

 

 

v  

v  

  

   

r



ha    a  i
  ha    a  i
ha    a  i
ha   a  i
ha  i
 
ha  i

 a 

s

g

u  

u   u  

v   

u      v    
u      v    
u      v    
u      v    
u      v    
u      v    

   
   
   
   
   
   

   
   
  
 
  
 

 
  
 
  
     
      
     
      

 
   
   
   
 
   

v    v   
 
 
 
 
 
 

 
   
   
   
 
   

 b 

figure    the database for an inverted fork structured problem with a o    bounded sink
variable r and two parents u and v  and g r       g u       and g v      
 a  depicts the domain transition graphs of u  top left   v  top right   and r
 bottom   the numbers above and below each edge are the preconditions and the
cost of the respective action  respectively   b  depicts the database created by the
algorithm  the shaded entries are those examined during the online computation
of h  r      u      v      

   experimental evaluation  take ii
to evaluate the practical attractiveness of the databased fork decomposition heuristics  we
have repeated our empirical evaluation as in section    but now for the databased versions
of the heuristics  the detailed results of this evaluation are relegated to tables       in
the appendix  but they are summarized here in table    for each domain  the s column
captures the number of tasks in that domain that were solved by at least one planner
in the suite  per planner domain  the number of tasks solved by that planner is given
both by the absolute number  s  and by the percentage from solved by some planners
  s   boldfaced results indicate the best performance within the corresponding domain 
the last three rows summarize the performance of the planners via three measures  the
first is the number of tasks solved in all the    domains  this is basically the performance
evaluation measure used in the optimization track at ipc       as domains are not equally
challenging and do not equally discriminate between the planners performance  the second
is a domain normalized performance measure
s p   

x
domain d

 tasks in d solved by planner p
 
 tasks in d solved by some planners

finally  the third measure corresponds to the number of domains w in which the planner
in question solved at least as many tasks as any other planner 
overall  table   clearly suggests that heuristic search with databased fork decomposition
heuristics favorably competes with the state of the art of optimal planning  in particular 
   for ease of presentation  we omit here the case where v is required neither along   nor by the goal  such
variables should be simply ignored when accounting for the cost of  

  

fiimplicit abstraction heuristics

domain

s

airport ipc 
blocks ipc 
depots ipc 
driverlog ipc 
freecell ipc 
grid ipc 
gripper ipc 
logistics ipc 
logistics ipc 
miconic strips ipc 
mprime ipc 
mystery ipc 
openstacks ipc 
pathways ipc 
pipes notank ipc 
pipes tank ipc 
psr small ipc 
rovers ipc 
satellite ipc 
schedule strips
tpp ipc 
trucks ipc 
zenotravel ipc 

  
  
 
  
 
 
  
  
 
  
  
  
 
 
  
  
  
 
 
  
 
 
  

total
s
w

   

hf
s
  
  
 
  
 
 
 
  
 
  
  
  
 
 
  
  
  
 
 
  
 
 
  

 s
   
  
   
   
   
   
  
   
  
  
  
   
   
   
  
  
  
  
   
   
   
  
   

   
     
  

hi
s
  
  
 
  
 
 
 
  
 
  
  
  
 
 
  
 
  
 
 
  
 
 
  

 s
  
  
  
   
  
  
  
  
  
  
  
  
   
   
  
  
  
   
   
  
   
  
   

   
     
 

hfi
s
  
  
 
  
 
 
 
  
 
  
  
  
 
 
  
 
  
 
 
  
 
 
  

 s
  
  
   
   
  
  
  
  
  
  
  
   
   
   
  
  
  
  
   
   
   
  
   

   
     
 

ms     

ms     

s
  
  
 
  
 
 
 
  
 
  
  
  
 
 
  
  
  
 
 
  
 
 
  

s
  
  
 
  
 
 
 
  
 
  
  
  
 
 
  
 
  
 
 
 
 
 
  

 s
  
  
   
   
   
   
  
  
  
  
  
  
   
  
  
  
   
  
   
  
   
  
   

   
     
  

 s
  
  
  
   
  
   
  
  
  
  
  
  
   
   
  
  
   
   
   
 
   
  
   

   
     
 

hspf

s
  
  
 
 
 
 
 
  
 
  
 
  
 
 
  
 
  
 
 
  
 
 
 

 s
  
   
  
  
   
 
  
  
  
  
  
  
   
   
  
  
   
  
  
  
  
   
  

   
     
 

gamer
s
  
  
 
  
 
 
  
  
 
  
 
 
 
 
  
 
  
 
 
 
 
 
  

 s
  
   
  
  
  
   
   
  
  
   
  
  
   
   
  
  
  
  
   
 
  
  
  

   
     
 

blind
s
  
  
 
 
 
 
 
  
 
  
  
  
 
 
  
  
  
 
 
  
 
 
 

 s
  
  
  
  
  
  
  
  
  
  
  
  
   
   
  
  
  
  
  
  
  
  
  

   
     
 

hmax
s
  
  
 
 
 
 
 
  
 
  
  
  
 
 
  
  
  
 
 
  
 
 
 

 s
  
  
  
  
   
   
  
  
  
  
   
  
   
   
  
  
  
  
  
  
   
  
  

   
     
 

table    a summary of the experimental results with databased versions of the forkdecomposition heuristics  per domain  s denotes the number of tasks solved by
any planner  per planner domain  the number of tasks solved by that planner
is given both by the absolute number  s  and by the percentage from solved by
some planners   s   boldfaced results indicate the best performance within the
corresponding domain  the last three rows summarize the number of solved instances  the domain normalized measure of solved instances  s   and the number
of domains in which the planners achieved superior performance  w  

a with the only forks heuristic hf exhibited the best overall performance according to
all three measures  in terms of the absolute number of solved instances  a with all three
fork decomposition heuristics outperformed all other planners in the suite  the contribution
of databasing to the success of the fork decomposition heuristics was dramatic  looking
back at the results with fully online heuristic computation depicted in table    note that
the total number of solved instances for the fork decomposition heuristics hf   hi   and hfi
increased by         and     respectively  and this made the whole difference 
we have also performed a comparative evaluation on the planning domains from the
recent ipc       the ipc      domains differ from the previous domains in that actions
had various costs  and  more importantly  many actions had zero cost  the latter is an
issue for heuristic search planners because heuristic functions cannot differentiate between
subplans that have the same cost of zero  but differ in length  in any case  the comparative
side of our evaluation on the ipc      domains differ on several points from the previous
one  first  neither for merge and shrink nor for hmax heuristics  we had implementation
supporting arbitrary action costs  hence  our comparison here is only with gamer  hspf  
and blind search  second  to ensure admissibility of the blind search  the latter has been
modified to return on non goal states the cost of the cheapest applicable action  finally  all
the planners were run on a  ghz intel e     cpu with   gb memory  using   gb memory
  

fikatz   domshlak

domain

s

elevators strips ipc 
openstacks strips ipc 
parcprinter strips ipc 
pegsol strips ipc 
scanalyzer strips ipc 
sokoban strips ipc 
transport strips ipc 
woodworking strips ipc 

  
  
  
  
  
  
  
  

total
s
w

   

hf
s
  
  
  
  
  
  
  
 

 s
  
  
  
   
   
  
   
  

   
    
 

hi
s
  
  
  
  
 
  
  
 

 s
  
  
  
   
  
  
   
  

   
    
 

hfi
s
  
  
  
  
 
  
  
 

 s
  
  
  
   
  
  
   
  

   
    
 

hspf

s
 
  
  
  
 
  
 
 

 s
  
   
   
   
  
  
  
  

   
    
 

gamer
s
  
  
 
  
  
  
  
  

 s
   
  
  
  
  
  
   
   

   
    
 

blind
s
  
  
  
  
  
  
  
 

 s
  
  
  
   
   
  
   
  

   
    
 

table    a summary of the experimental results  per domain  s denotes the number of
tasks solved by any planner  per planner domain  the number of tasks solved by
that planner is given both by the absolute number  s  and by the percentage from
solved by some planners   s   boldfaced results indicate the best performance
within the corresponding domain  the last three rows summarize the number of
solved instances  the domain normalized measure of solved instances  s   and the
number of domains in which the planners achieved superior performance  w  

limit and    minute timeout  the results of this evaluation are summarized in table    for
the detailed results we refer the reader to tables       in the appendix  overall  these
results show that a with the fork decomposition heuristics are very much competitive on
the ipc      domains as well 

   formal analysis  asymptotic performance ratios
empirical evaluation on a concrete set of benchmark tasks is a standard and important
methodology for assessing the effectiveness of heuristic estimates  it allows us to study the
tradeoff between the accuracy of the heuristics and the complexity of computing them 
however  as rightfully noted by helmert and mattmuller         such evaluations almost
never lead to absolute statements of the type heuristic h is well suited for solving problems from benchmark suite x  but only to relative statements of the type heuristic h
expands fewer nodes than heuristic h  on benchmark suite x  moreover  one would probably like to obtain formal evidence of the effectiveness of a heuristic before proceeding with
its implementation  especially for very complicated heuristic procedures such as those underlying the proofs of theorems   and    our formal analysis of the effectiveness of the
fork decomposition heuristics using the methodology suggested and exploited by helmert
and mattmuller was motivated primarily by this desire for formal evidence 
given a planning domain d and heuristic h  helmert and mattmuller        consider
the asymptotic performance ratio of h in d  the goal is to find a value  h  d          such
that
    for all states s in all problems   d  h s    h  d   h  s    o h  s    and
    there is a family of problems  n  nn  d and solvable  non goal states  sn  nn such
that sn  n   limn h  sn       and h sn     h  d   h  sn     o h  sn    
  

fiimplicit abstraction heuristics

domain

h 

hk

hpdb

hpdb
add

hf

hi

hfi

gripper
logistics
blocksworld
miconic strips
satellite

   
   
   
   
   

 
 
 
 
 

 
 
 
 
 

   
   
 
   
   

   
   
 
   
   

 
   
 
   
   

   
   
 
   
   

table    performance ratios of multiple heuristics in selected planning domains  ratios for
h    hk   hpdb   hpdb
add are by helmert and mattmuller        

in other words  h is never worse than    domain   h  plus a sublinear term   and it can
become as bad as  h  d   h  plus a sublinear term  for arbitrarily large inputs  note that
both the existence and uniqueness of  h  d  are guaranteed for any h and d 
helmert and mattmuller        study the asymptotic performance ratio of some standard admissible heuristics on a set of well known benchmark domains from the first four
ipcs  their results for gripper  logistics  blocksworld  miconic  and satellite
are shown in the first four columns of table   
 the h  estimate corresponds to the optimal cost of solving the well known delete
relaxation of the original planning task  which is generally np hard to compute  bylander        
 the hk   k  n    family of heuristics is based on a relaxation where the cost of
achieving a partial assignment is approximated by the highest cost of achieving its
sub assignment of size k  haslum   geffner         computing hk is exponential only
in k 
 the hpdb and hpdb
add heuristics are regular  maximized over  and additive pattern
database heuristics where the size of each pattern is assumed to be o log n   where
n    v    and  importantly  the choice of the patterns is assumed to be optimal 
these results provide us with a baseline for evaluating our fork decomposition heuristics
hi   and hfi   first  however  theorem   shows that these three heuristics are worth
analyzing because each alone can be strictly more informative than the other two  depending
on the planning task and or the state being evaluated  
hf  

theorem    undominance  under uniform action cost partition  none of the heuristic
functions hf   hi   and hfi dominates another 
proof  the proof is by example of two tasks    and     which illustrate the following
two cases  hf  i    hfi  i    hi  i  and hf  i    hfi  i    hi  i   these two tasks
are defined over the same set of binary valued variables v    v    v    v    u    u    u     have
the same initial state i    v       v       v       u       u       u        and have the same goal
   theorem   is formulated and proven under the uniform action cost partition that we use throughout the
paper  including the experiments  for per step optimal action cost partitions  katz   domshlak        
it is trivial to show that hfi dominates both hf and hi for all planning tasks 

  

fikatz   domshlak

a 

u 

u 

u 

v 

v 

v 

a 
a 
a 
a 
a 
a 
a 
a 
a 

h v       u       u       u         v      i
h v       u       u       u         v      i
h v       u       u       u         v    i
h u         u      i
h u         u      i
h u         u      i
h u         u      i
h u         u      i
h u         u      i

 a 

 
f

 
i

 
fi

   
   
   
 
 
 
 
 
 

 
 
 
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   

 c 

u 

u 

u 

v  v  v 

v  v  v 

v  v  v 

guf  

guf  

guf  

u  u  u 

u  u  u 

u  u  u 

v 

v 

v 

gvi  

gvi  

gvi  

a 
a 
a 
a 
a 
a 
a 
a 
a 
a 
a  
a  
a  

 b 

h v       u         v      i
h v       u         v      i
h v       u         v      i
h v       u         v      i
h v       u         v      i
h v       u         v      i
h v       u         v      i
h v       u         v      i
h v       u         v      i
h u         u      i
h u         u      i
h u         u      i

 
f

 
i

 
fi

   
   
   
   
   
   
   
   
   
 
 
 

 
 
 
 
 
 
 
 
 
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   

 d 

figure    illustrations for the proof of theorem     a  causal graphs of   and      b  fork
and inverted fork subgraphs of the  same  causal graph of   and     and the
action sets of  c    and  d      as well as the costs of the action representatives
in each abstract problem along these subgraphs  considering for example the
first row of table  c   the action a  in   has a single representative in each of the
three fork abstractions  as well as a representative in the inverted fork abstraction
 g i   hence  the cost of each of its representatives in f decomposition is     
v 

while the cost of its sole representative in i decomposition is   

g    v       v       v        the difference between   and   is in the action sets  listed in
figure  c d  with all the actions being unit cost actions  the two tasks induce identical
causal graphs  depicted in figure  a  hence  the collections of v forks and v iforks of both
tasks are also identical  these are depicted in figure  b  the fractional costs of the tasks
action representatives in the corresponding abstract problems are given in figure  c d 
figure   shows the optimal plans for all the abstract problems in f decompositions  f  
  g f    g f    g f   and  f     g f    g f    g f    i decompositions  i     g i    g i    g i  
u 

u 

u 

u 

u 

u 

v 

v 

v 

and  i     g i    g i    g i    and fi decompositions  fi    f   i and  fi    f   i  
v 

v 

v 

the last column in both tables captures the estimates of the three heuristics for the initial
states of   and     respectively  together  these two cases show that none of the forkdecomposition heuristic functions hf   hi   and hfi dominates any other  and  since all the
  

fiimplicit abstraction heuristics

h
hf

hi

h

fi

task
 g f
u 
 g f
u 
 g f
u 
 g i
v 
 g i
v 
 g i
v 
 g f
u 
 g f
u 
 g f
u 
 g i
v 
 g i
v 
 g i
v

optimal plan

cost

ha    a    a    a  i

 

ha    a    a    a  i

 

ha    a    a    a  i

 

ha  i

 

ha    a    a  i

   

ha    a    a  i

   

ha    a    a    a  i

 

ha    a    a    a  i

 

ha    a    a    a  i

 

ha  i

   

ha    a    a  i

   

ha    a    a  i

   

h i 

h
hf

 

hi

    

    

h

 

fi

task

optimal plan

 g f
u 
 g f
u 
 g f
u 
 g i
v 
 g i
v 
 g i
v 
 g f
u 
 g f
u 
 g f
u 
 g i
v 
 g i
v 
 g i
v

ha    a    a  i

 

ha    a    a  i

 

ha    a    a  i

cost

h i 
 

 

ha     a  i

   

ha     a  i

   

ha     a  i

   

ha    a    a  i

   

ha    a    a  i

   

ha    a    a  i

   

ha     a  i

   

ha     a  i

   

ha     a  i

   

 

    

 

 a 

 b 

figure    illustrations for the proof of theorem    optimal plans for all the abstract problems of  a      where we have hf  i    hfi  i    hi  i   and  b      where we have
hf  i    hfi  i    hi  i  

variables above are binary valued  the claim holds in conjunction with arbitrary variable
domain abstractions 

one conclusion from theorem   is that it is worth studying the asymptotic performance
ratios for all three heuristics  the last three columns of table   present our results for
hf   hi   and hfi for the gripper  logistics  blocksworld  miconic  and satellite
domains  we also studied the performance ratios of max hf   hi   hfi    and in these five
domains they appear to be identical to those of hf    note that ratio of max should not
necessarily be identical to max of ratios  and thus this analysis is worthwhile   taking
a conservative position  the performance ratios for the fork decomposition heuristics in
table   are worst case in the sense that
 i  here we neither optimize the action cost partition  setting it to uniform as in the rest
of the paper  nor eliminate clearly redundant abstractions  and
 ii  we use domain abstractions to  up to  ternary valued abstract domains only 
the domains of the fork roots are all abstracted using the leave one out binary valued
domain decompositions as in eq     while the domains of the inverted fork sinks are all
abstracted using the distance from initial value ternary valued domain decompositions
as in eq     
overall  the results for fork decomposition heuristics in table   are gratifying  first 
note that the performance ratios for hk and hpdb are all    this is because every subgoal
set of size k  for hk   and size log n   for hpdb   can be reached in the number of steps that
only depends on k  respectively  log n    and not n  while h  sn   grows linearly in n in
all the five domains  this leaves us with hpdb
add being the only state of the art  tractable
  

fikatz   domshlak

and  admissible heuristic to compare with  table   shows that the asymptotic performance
f
ratio of hf heuristic is at least as good as that of hpdb
add in all five domains  while h is
 
pdb
superior to hpdb
add in miconic  getting here quite close to h   when comparing hadd and
fork decomposition heuristics  it is crucial to recall that the ratios devised by helmert and
mattmuller for hpdb
add are with respect to optimal  manually selected set of patterns  by
contrast  the selection of variable subsets for fork decomposition heuristics is completely
nonparametric  and thus requires no tuning of the abstraction selection process 
in the rest of the section we prove these asymptotic performance ratios of hf   hi   and
fi
h in table   for the five domains  we begin with a very brief outline of how the results are
obtained  some familiarity with the domains is assumed  next  each domain is addressed
in detail  we provide an informal domain description as well as its sas  representation  and
then prove lower and upper bounds on the ratios for all three heuristics 
gripper assuming n     balls should be moved from one room to another  all three
heuristics hf   hi   hfi account for all the required pickup and drop actions  and only for
o    portion of move actions  however  the former actions are responsible for     of
the optimal plan length    cost   now  with the basic uniform action cost partition 
hf   hi   and hfi account for the whole  o   n   and     of the total pickup drop
actions cost  respectively  providing the ratios in table    
logistics an optimal plan contains at least as many load unload actions as move actions 
and all three heuristics hf   hi   hfi fully account for the former  providing a lower bound
of      an instance on which all three heuristics achieve exactly     consists of two
trucks t    t    no airplanes  one city  and n packages such that the initial and goal
locations of all the packages and trucks are all pair wise different 
blocksworld arguments similar to those of helmert and mattmuller        for hpdb
add  
miconic all three heuristics fully account for all the loads unload actions  in addition  hf
accounts for the full cost of all the move actions to the passengers initial locations 
and for half of the cost of all the other move actions  this provides us with lower
bounds of     and      respectively  tightness of     for hi and hfi is shown on a
task consisting of n passengers   n     floors  and all the initial and goal locations
being pair wise different  tightness of     for hf is shown on a task consisting of n
passengers  n     floors  the elevator and all the passengers are initially at floor n     
and each passenger i wishes to get to floor i 
satellite the length of an optimal plan for a problem with n images to be taken and k
satellites to be moved to some end positions is   n   k  all three heuristics fully
account for all the image taking actions and one satellite moving action per satellite
as above  providing a lower bound of      tightness of     for all three heuristics
is shown on a task as follows  two satellites with instruments  i li   and  i  l
i l    

respectively  where l   n  n  each pair of instruments  i  l   i  can take images
in modes  m    mi    there is a set of directions  dj  nj   and a set of image objectives
   we note that a very slight modification of the uniform action cost partition results in a ratio of     for
all three heuristics  such optimizations  however  are outside of our scope here 

  

fiimplicit abstraction heuristics

right

lef t

robot

right
b 

b 



bn

   
f
gright

lef t
bn

   

b 

right

robot
bn

b 

f
glef
t

 a 

   

robot

bn

f
grobot

lef t

b
gbi   b  balls

 b 

figure     grippers  a  causal graph and  b  the corresponding collection of v forks and
v iforks

 oi  ni   such that  for    i  l  oi    d    mi   and  for l   i  n  oi    di   m    
finally  the calibration direction for each pair of instruments  i  l   i  is di  
    gripper
the domain consists of one robot robot with two arms arms    right  lef t   two rooms
rooms    r   r    and a set balls of n balls  the robot can pick up a ball with an arm
arm  arms if arm is empty  release a ball b  balls from the arm arm if arm currently
holds b  and move from one room to another  all balls and the robot are initially in room
r   both arms are empty  and the goal is to move all the balls to room r   a natural
description of this planning task in sas  is as follows 
s
s
 variables v    robot  arms balls with domains
d robot    rooms

d lef t    d right    balls   empty 

b  balls   d b    rooms   robot  

 initial state i    b   r    b  balls    robot   r   right   empty  lef t   empty  
 goal g    b   r    b  balls  
 actions
a   m ove r  r       r  r     rooms 

 

 p ickup b  arm  r   drop b  arm  r    b  balls  arm  arms  r  rooms  
where
 move robot  m ove r  r      h robot   r    robot   r   i 

 pickup ball 
p ickup b  arm  r    h b   r  arm   empty  robot   r    b   robot  arm   b i  and

 drop ball  drop b  arm  r    h b   robot  arm   b  robot   r    b   r  arm   empty i 

the  parametric in n  causal graph of this task is depicted in figure   a 
  

fikatz   domshlak

frobot

action
 

m ove r  r  
p ickup b  arm  r 
drop b  arm  r 

farm empty

 
 
 

 
 
 

farm b

farm b 

 
 
 

 
 
 

farm   
 
 
 

ib
 
 
 

ib 
 
 
 

f

i

fi

 

 
n
 
n  
 
n  

 
n  
 
 n  
 
 n  

 
 n  
 
 n  

table    number of representatives for each original gripper action in each abstract task 
as well as the partition of the action costs between these representatives
frobot

fright empty
fright b
fright b 
flef t 
ib
ib 

p ickup b  right  r     h robot   r   b   r     b   robot i
p ickup b  right  r      h right   empty    right   b i 
p ickup b  right  r      h right   b  b   r     b   robot i
p ickup b  right  r      h right   empty    right   b i 
p ickup b  right  r      h right   b  b   r     b   robot i
p ickup b  right  r     h right   b  b   r     b   robot i
p ickup b  right  r     h right   b  b   r     b   robot i
p ickup b  right  r      h right   empty    right   b i 
p ickup b  right  r      h right   b  robot   r   b   r     b   robot i
p ickup b  right  r     h right   empty    right   b i

table    the sets of representatives of the original action p ickup b  right  r   in the abstract
tasks

      fork decomposition
since the variables robot  right  and lef t have no goal value  the collection of v forks and
v iforks is as in figure   b  the domains of inverted fork sinks are ternary valued  the
domains of fork roots are abstracted as in eq      leave one out   and thus
f    frobot     fright    flef t       empty   balls  
i    ib   b  balls  

fi    frobot     fright    flef t       empty   balls    ib   b  balls  
for each original action  the number of its representatives in each abstract task  as well as
the cost assigned to each such representative  are listed in table    table   illustrates derivation of these numbers via decomposition of an example action p ickup b  right  r   in each
of the fork decomposition abstractions  that action has one nonredundant representative
in frobot   two such representatives in each of fright empty and fright b   one representative in
each fright b  for b   balls    b   one representative in each flef t  for   balls   empty  
two representatives in ib   and one representative in each ib  for b   balls    b   this
 
 
results in cost  n  
for each representative in f   n  
for each representative in i   and
 
 n   for each representative in fi  
given that  the optimal plans for the abstract tasks are as follows 
  

fiimplicit abstraction heuristics

h

task
frobot

hf

fright 
flef t 

hi

ib
frobot

hfi

fright 
flef t 
ib

optimal plan
hp ickup b    right  r            p ickup bn   right  r   
  m ove r   r    drop b    right  r            drop bn   right  r  i
hp ickup b    lef t  r            p ickup bn   lef t  r   
  drop b    lef t  r            drop bn   lef t  r  i
hp ickup b    right  r            p ickup bn   right  r   
  drop b    right  r            drop bn   right  r  i
hp ickup b  right  r      p ickup b  right  r      m ove r   r    drop b  lef t  r    i
hp ickup b    right  r            p ickup bn   right  r    m ove r   r   
  drop b    right  r            drop bn   right  r  i
hp ickup b    lef t  r            p ickup bn   lef t  r   
  drop b    lef t  r            drop bn   lef t  r  i
hp ickup b    right  r            p ickup bn   right  r   
  drop b    right  r            drop bn   right  r  i
hp ickup b  right  r      p ickup b  right  r      m ove r   r    drop b  lef t  r    i

cost

 

 n  
 n  

 

 n
 n  

n  

 n
 n  

n  

 
 
  n
n  
 
 n  
 n  
n  

n

 n
 n  

n  

 n
 n  

n  

 
 n  

 
  n  

h i 

 n   n 
 n  

 n  
n  

 
 n
 

   n  
 n  

n

assuming n     balls should be moved from one room to another  the cost of the optimal
plan for the original task is  n    when n is even  and  n when n is odd  therefore  the
asymptotic performance ratios for the heuristics hf   hi   hfi on gripper are         and     
respectively 
    logistics
each logistics task consists of some k cities  x airplanes  y trucks and n packages  each
city i is associated with a set li    li          lii   of locations within that city  the union of
s
the locations of all the cities is denoted by l   ki   li   in addition  precisely one location
in each city is an airport  and the set of airports is la    l           lk     l  each truck can
move only within the city in which it is located  and airplanes can fly between airports 
the airplanes are denoted by u    u            ux    the trucks by t    t            ty    and the
packages by p    p            pn    let ti    t  t   i t   li   denote the trucks of city i  and
p   p   p   p   p   p  denote a partition of the packages as follows 
 each package in p     p  p   i p   g p   la   is both initially at an airport and
needs to be moved to another airport 
 each package in p     p  p   i p   la  li   g p   lj   la   i    j  is initially at an
airport and needs to be moved to a non airport location in another city 
 each package in p     p  p   i p   li   g p   li   needs to be moved within one
city 
 each package in p     p  p   i p   li   la   g p   la   li   needs to be moved from
a non airport location in one city to the airport of some other city  and
 each package in p     p  p   i p   li   la   g p   lj   la   i    j  needs to be moved
from a non airport location in one city to a non airport location in another city 
a natural logistics task description in sas  is as follows 
 variables v   u  t  p with domains
u  u   d u    la  

   i  k  t  ti   d t    li  

p  p   d p    l  u  t 
  

fikatz   domshlak

u     ux

t    

ty

u
p       

p    

pi    pn
 a 

u        ux

t
pn

guf   u  u

p       

pn

gtf   t  t
 b 

t        ty
p

gpi   p  p

figure     logisticss  a  causal graph and  b  the corresponding collection of v forks and
v iforks

 initial state i   la  x  l       lk   l n  
 goal g    p    l            pn   ln     l n  
 actions
a 

k    
 

i   lli tti



   
lla uu


 lt p  t  l   u t p  t  l    p  p     m t t  l  l       l   li    l  


 la p  u  l   u a p  u  l    p  p     m a u  l  l      l   la    l    

where
 load package p onto truck t in location l  lt p  t  l    h p   l  t   l    p   t i 
 unload package p from truck t in location l  u t p  t  l    h p   t  t   l    p   l i 
 move truck t from location l to location l    m t t  l  l      h t   l    t   l   i 
 load package p onto airplane u in l  la p  u  l    h p   l  u   l    p   u i 
 unload package p from airplane u into l  u a p  u  l    h p   u  u   l    p   l i  and
 move airplane u from location l to l    m a u  l  l      h u   l    u   l   i 
the  parametrized in n  x  and y  causal graph of logistics tasks is depicted in figure   a 
      fork decomposition
since the variables u  u and t  t have no goal value  the collection of v forks and viforks is as in figure   b  the domains of the inverted fork sinks are all abstracted as in
eq      distance from initial value   while the domains of the fork roots are abstracted
  

fiimplicit abstraction heuristics

fu l fu l  fu l   fu   l ft l ft l  ft l   ft   l ip m f i fi

action
 

m t t  l  l  
m a u  l  l   

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 
 
 
 

 
 

 
 
ni   ni
 
 
ni   ni

 a 
i p   la  li
i p   li   la
p  p  p  p  p  p  p  p  p  p 
p  p 
fu l ft l ip   m ip   ip   ip   ip   ip   ip   ip   ip   ip   ip   f i fi

action
l  li
l  lj
la p  u  l   u a p  u  l 

lt p  t  l   u t p  t  l 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
 
 

 
nf
 
nf
 
nf

 
 
 

 
nf   
 
nf   
 
nf   

 b 
figure     number of representatives of each original logistics action in each abstract
task  as well as the partition of the action costs between these representatives 
tables  a  and  b  capture the move and load unload actions  respectively

as in eq      leave one out   thus  we have
f  

   
uu lla

i  

fi  

 fu l   

 

 

k    
 
i   tti lli

 ip     
 ip    
pp
pp  p  p 
   
uu lla

 fu l   



 ft l   

 
pp 

k    
 
i   tti lli

 ip     

 ft l   

 
pp

 ip     

 

 ip     

pp  p  p 

 
pp 

 ip     

p
the total number of forks is nf    f      u     la     ki    ti     li    and the total number
of inverted forks is ni    i      p          p       p          p          p     for each action
a  a  the number of its representatives in each abstract task  as well as the cost assigned
to each such representative  are given in figure     each row in the tables of figure   
corresponds to a certain logistics action  each column  except for the last three  represents
an abstract task  and each entry captures the number of representatives an action has in
the corresponding task  the last three columns show the portion of the total cost that is
given to an action representative in each task  in each of the three heuristics in question 
      lower bound
note that any optimal plan for a logistics task contains at least as many load unload
actions as move actions  thus  the following lemma provides us with the lower bound of
    for all three heuristics in question 

  

fikatz   domshlak

lemma   for any logistics task  hf   hi   and hfi account for the full cost of the load unload
actions required by any optimal plan for that task 
proof  for any logistics task  all the optimal plans for that task contain the same amount
of load unload actions for each package p  p as follows 

p  p   

  actions  one load onto an airplane  and one unload from that airplane 

p  p      actions  one load onto an airplane  one unload from that airplane  one load
onto a truck  and one unload from that truck 
p  p   

  actions  one load onto a truck  and one unload from that truck 

p  p      actions  one load onto a truck  one unload from that truck  one load onto an
airplane  and one unload from that airplane  and
p  p      actions  two loads onto some trucks  two unloads from these trucks  one load
onto an airplane  and one unload from that airplane 
consider the fork decomposition f   any optimal plan for each of the abstract tasks
will contain the number of load unload actions exactly as above  the effects of these actions
remain unchanged in these tasks   the cost of each representative of each load unload
action is n f   and there are nf abstract tasks  therefore  the heuristic hf fully accounts for
the cost of the required load unload actions 
now consider the fork decomposition i   with m being the domain decomposition
index of the abstraction  any optimal plan for the abstract task ip m will include one load
and one unload actions as follows 
p  p   

one load onto an airplane and one unload from that airplane 

p  p    m     

one load onto an airplane and one unload from that airplane 

p  p    m     

one load onto a truck and one unload from that truck 

p  p   

one load onto a truck and one unload from that truck 

p  p    m     

one load onto a truck and one unload from that truck 

p  p    m     

one load onto an airplane  and one unload from that airplane 

p  p    m     

one load onto a truck and one unload from that truck 

p  p    m     

one load onto an airplane and one unload from that airplane  and

p  p    m     

one load onto a truck and one unload from that truck 

the cost of each representative of load unload actions is    and thus the heuristic hi fully
accounts for the cost of the required load unload actions 
finally  consider the fork decomposition fi   any optimal plan for each of the forkstructured abstract tasks will contain the same number of load unload actions as for f  
the cost of each representative of load unload actions is nf    and there are nf such abstract
tasks  in addition  each of these load unload actions will also appear in exactly one inverted
fork structured abstract task  therefore the heuristic hfi also fully accounts for the cost of
the required load unload actions 

  

fiimplicit abstraction heuristics

t 
p 

t 

   

pn

p 

gtf 

t 

   

t 

pn

p
gpi   p  p

gtf 

figure     collection of v forks and v iforks for the logistics task used for the proof of
the upper bound of    

      upper bound
an instance on which all three heuristics achieve exactly     consists of two trucks t    t    no
airplanes  one city  and n packages such that the initial and goal locations of all the packages
are all pairwise different  and both trucks are initially located at yet another location  more
 
formally  if l    li   n
i     and t    t    t     then the sas encoding for this logistics task
is as follows 
 variables v    t    t    p            pn   with domains
t  t   d t    l 

p  p   d p    l  t 
 initial state i    t    l    t    l    p    l            pn   ln   
 goal g    p    ln             pn   l n   
 actions a    lt p  t  l   u t p  t  l    l  l  t  t  p  p     m t t  l  l      t  t   l  l    
l  
the collection of v forks and v iforks for this task is depicted in figure     the domains of
the inverted fork sinks are all abstracted as in eq      distance from initial value   while
the domains of the fork roots are abstracted as in eq      leave one out   and therefore
we have
f    ft   l ft   l   l  l  
i    ip     p  p   

fi    ft   l ft   l   l  l    ip     p  p   
the total number of forks is thus nf    n     and the total number of inverted forks is
ni   n  the partition of the action costs for logistics tasks is described in figure    
here we have p   p  and thus the action cost partition is as follows 
ft l

action
 

m t t  l  l  
lt p  t  l 
u t p  t  l 

 
 
 

ft l 
 
 
 

ft l  
 
 
 

ft   l
 
 
 

  

ip  
 
 
 

ip    

f

i

fi

 
 
 

 
 
 
 n  
 
 n  

 
n

 
n  
 
 n  
 
 n  

 
 

fikatz   domshlak

given that  the optimal plans for the abstract task are
h

task

hf

ft   l
ft   l
ipi   
ft   l
ft   l
ipi   

hi
hfi

optimal plan
hlt p    t    l             lt pn   t    ln    u t p    t    ln              u t pn   t    l n  i
hlt p    t    l             lt pn   t    ln    u t p    t    ln              u t pn   t    l n  i
hm t t    l    li    lt pi   t    li    m t t    li   ln i    u t pi   t    ln i  i
hlt p    t    l             lt pn   t    ln    u t p    t    ln              u t pn   t    l n  i
hlt p    t    l             lt pn   t    ln    u t p    t    ln              u t pn   t    l n  i
hm t t    l    li    lt pi   t    li    m t t    li   ln i    u t pi   t    ln i  i

cost

 

 n
 n  
 n
 n  
 
  
n
 n
 n  
 n
 n  

 n    
 n    
n
 n    
 n    
n

 
n  

 

 
 n  

h i 
 n
 n    
 n  

 n
n  

while an optimal plan for the original task  e g   hm t t    l    l     lt p    t    l     m t t    l    l     lt p    t    l    
m t t    l    l             lt pn   t    ln    m t t    ln   ln      u t p    t    ln      m t t    ln     ln      u t p    t    ln     
m t t    ln     ln              u t pn   t    l n  i 

has the cost of  n  providing us with the upper bound of
    for all three heuristics  putting our lower and upper bounds together  the asymptotic
ratio of all three heuristics in question is     
    blocksworld
each blocksworld task consists of a table table  a crane c  and n     blocks b  
 b            bn      each block can be either on the table  or on top of some other block 
or held by the crane  the crane can pick up a block if it currently holds nothing  and that
block has no other block on top of it  the crane can drop the held block on the table or on
top of some other block 
consider now a blocksworld task as follows  the blocks initially form a tower
b            bn   bn   with bn   being on the table  and the goal is to move them to form a
tower b            bn    bn     bn with bn being on the table  that is  the goal is to swap the
lowest two blocks of the tower  a natural description of this task in sas  is as follows 
 variables v    b  clearb   b  b    c  with domains
d c     empty   b 

b  b   d b     table  c   b    b  
d clearb      yes  no  

 initial state
i    c   empty  bn     table  clearb    yes 
 
 bi   bi        i  n 

 

 clearb   no   b  b    b      
 goal g    bn   table  bn     bn   bn    bn       bi   bi        i  n     
 actions a    pt  b   dt  b    b  b    p  b  b     d b  b       b  b     b  where
 pick block b from the table  pt  b    h c   empty  b   table  clearb   yes    cb  b   c i 
 pick block b from block b   
p  b  b      h c   empty  b   b    clearb   yes  clearb    no    c   b  b   c  clearb    yes i 
  

fiimplicit abstraction heuristics

c

clearb        clearbn  

c
b
gbi   b   bn    bn   bn    

clearb 

clearb

c
b 

b

bn 

bn

clearb
bn  

bn 

gcf
 a 

bn

bn  

f
gclear
 b  b
b

 b 

figure      a  causal graph and  b  the corresponding collection of v forks and v iforks for
the blocksworld task used in the proof

 drop block b on the table  dt  b    h c   b  b   c    c   empty  b   table i  and
 drop block b on block b   
d b  b      h c   b  b   c  clearb    yes    c   empty  b   b    clearb    no i 

a schematic version of the causal graph of this task is depicted in figure   a  since only
the variables bn    bn   bn   have goal values that are different from their values in the initial
state  the collection of v forks and v iforks is as in figure   b  after the  leave one out 
eq      domain abstraction of the variable c  c fork gcf breaks down into n     abstract
tasks  the sinks of v iforks gbi n    gbi n   and gbi n   also go through the process of domain
decomposition  distance from initial value  eq       however  due to the structure of the
domain transition graphs of the block variables  domain decomposition here results in only
a single abstract task for each of the v iforks  thus we have
f   fc empty     fc b   b  b    fclearb   b  b  
i   ibn       ibn      ibn        

fi   fc empty     fc b   b  b    fclearb   b  b   ibn       ibn      ibn        
it is technically straightforward to verify that  for each abstract task in f   i   and fi  
there exists a plan that  i  involves only the representatives of the actions
 p  bn    bn    dt  bn     p  bn   bn      dt  bn    pt  bn      d bn     bn    pt  bn     d bn    bn       
    
and  ii  involves each representative of each original action at most once  even if together
these plans account for the total cost of all eight actions in eq      the total cost of all these
plans  and thus the estimates of all the three heuristics  is upper bounded by    while an
optimal plan for the original task  e g   hp  b    b     dt  b     p  b    b     dt  b             p  bn   bn      dt  bn   
pt  bn      d bn     bn    pt  bn     d bn    bn      pt  bn     d bn    bn             pt  b     d b    b   i  has a cost
  

fikatz   domshlak

e

p 



e
p    

pn

gef

 a 

e
pn

 b 

p
gpi   p  p

figure     miconics  a  causal graph and  b  the corresponding collection of v forks and
v iforks

of  n  hence  the asymptotic performance ratio of all three heuristics on the blocksworld
domain is   
    miconic
each miconic task consists of one elevator e  a set of floors f   and the passengers p   the
elevator can move between  f   floors and on each floor it can load and or unload passengers 
a natural sas  description of a miconic task is as follows 
 variables v    e   p with domains
d e    f 

p  p   d p    f   e  
 initial state i    e   fe     p   fp   p  p     f   p      
 goal g    p   fp    p  p     f   p    
 actions a    in p  f    out p  f     f  f  p  p     m ove f  f        f  f      f    where
 load passenger p into e on floor f   in p  f     h e   f  p   f     p   e i 
 unload passenger p from e to floor f   out p  f     h e   f  p   e    p   f  i  and
 move elevator from floor f to floor f     m ove f  f       h e   f     e   f    i 
the  parametrized in n  causal graph of miconic tasks is depicted in figure   a  and
figure   b depicts the corresponding collection of v forks and v iforks  the domains of the
inverted fork sinks are all abstracted as in eq      distance from initial value   and the
domains of the fork roots are abstracted as in eq      leave one out   thus  we have
f    fe f   f  f   
i    ip     p  p   

fi    fe f   f  f     ip     p  p   
the total number of the fork structured abstract tasks is thus nf    f      f   and the
total number of the inverted fork structured abstract tasks is ni    i      p    for each
action a  a  the number of its representatives in each abstract task  as well as the cost
assigned to each such representative  are given in table   
  

fiimplicit abstraction heuristics

action
m ove f  f    
in p  f  
in p    f  
out p  f  
out p    f  

fe f fe f   fe f    ip   ip     f i fi
 
 
 
 
 

 
 
 
 
 

 
 
 
 
 

 
 
 
 
 

 
 
 
 
 

 
 
 
nf
 
nf
 
nf
 
nf

 
 
ni   ni
  nf   
  nf   
  nf   
  nf   

table    number of representatives for each original miconic action in each abstract task 
as well as the partition of the action costs among these representatives

      lower bounds
first  as miconic is a special case of the logistics domain  lemma   applies here analogously  with each package in p  corresponding to a passenger  thus  for each p  p   all
three heuristics account for the full cost of the load unload actions required by any optimal
plan for that task 
let us now focus on the abstract tasks f    fe f   f  f    recall that the task fe f
is induced by an e fork and  in terms of domain decomposition  distinguishes between being
at floor f and being somewhere else  without loss of generality  the set of floors f can be
restricted to the initial and the goal values of the variables  and this because no optimal
plan will move the elevator to or from a floor f that is neither an initial nor a goal location
of a passenger or the elevator  let fi    i p    p  p   and fg    g p    p  p    the costs
of the optimal plans for each abstract task fe f are as follows 
f  fi  fg   let p  p   p be a pair of passengers with initial and goal locations in f  
respectively  that is  i p    g p      f   if f   i e   then any plan for fe f has to move
the elevator from f in order to load passenger p    and then move the elevator back
to f in order to unload passenger p    therefore the cost of any plan for fe f is at
 
least   p
 f        where  see the last three columns of table    the first component of the
summation comes from summing the costs of the representatives of the load unload
actions for all the passengers  and the second component is the sum of the costs of
representatives of the two respective move actions  similarly  if f    i e   then any
plan for fe f has to move the elevator to f in order to load passenger p  and then
move the elevator from f in order to unload p  therefore  here as well  the cost of
 
any plan for fe f is at least   p
 f       

f  fi   fg   let p  p be a passenger initially at f   that is  i p    f   if f   i e   then
any plan for fe f has to move the elevator from f in order to unload p  and thus the
cost of any plan for fe f is at least

  p  
 f  

       otherwise  if f    i e   then any plan

for fe f has to move the elevator to f in order to load p  and then move the elevator
from f in order to unload p  hence  in this case  the cost of any plan for fe f is at
least

  p  
 f  

    
  

fikatz   domshlak

f  fg   fi   let p  p be a passenger who must arrive at floor f   that is  g p    f   if
f   i e   then any plan for fe f has to move the elevator from f in order to load p 
and then move the elevator back to f in order to unload p  hence  here as well  the
 
cost of any plan for fe f is at least   p
 f        otherwise  if f    i e   then any plan for

fe f has to move the elevator to f in order to unload p  and thus the cost of any plan

for fe f is at least

  p  
 f  

      

f   fg  fi   if f   i e   then any plan for fe f has to include a move from f in order to

 
 
load unload the passengers  and thus the cost of any plan for fe f is at least   p
 f        
otherwise  if f    i e   the elevator is initially in the set of all other locations  and
 
thus the cost of any plan for fe f is at least   p
 f    

putting this case by case analysis together  we have

 fg  fi  

 
i e   fi  fg
  p      fi  fg      fi   fg    
 


  p      f  f      f   f             fg  fi     i e   f   f
i
g
i
g
i
g
 
 
 
hf  i  
 fg  fi   

  p
 
 
 f

f
 
 
 f
 
f
 
 
 
 
 
i e 

f
 
f
i
g
i
g
g
i

 


  p      f  f      f   f      fg  fi         
i e    fg  fi
i
g
i
g
 
 

note that the value in the second case is the lowest  this gives us a lower bound on the hf
estimate as in eq     
 fg   fi  
 
   fi  fg     
    
 
 
now  let us provide an upper bound on the length    cost  of the optimal plan for a
miconic task  first  let p    p denote the set of passengers with both initial and goal
locations in fi  fg   let m p     fi  fg   denote the length of the optimal traversal of the
floors fi  fg such that  for each passenger p  p     a visit of i p  comes before some visit of
g p   given that  on a case by case basis  a  not necessarily optimal  plan for the miconic
task at hand is as follows 
hf  i     p      fi   fg    

i e   fi  fg   collect all the passengers at i e  if any  then traverse all the floors in
fi   fg and collect passengers from these floors  then move the elevator to the first
floor f on the optimal path  traversing the floors fi  fg   drop off the passengers
whose destination is f   collect the new passengers if any  keep moving along  while
collecting and dropping off passengers at their initial and target floors  and then
traverse fg   fi   dropping off the remaining passengers at their destinations  the
cost of such a plan  and thus of the optimal plan  is upper bounded as in eq    
below 
h  i     p      fi   fg     m p     fi  fg      fg   fi   
    
i e   fi   fg   collect all the passengers at i e  if any  then traverse all the floors in
fi   fg and collect passengers from these floors while making sure that this traversal
ends up at the first floor f of the optimal path  traversing the floors fi  fg   then
follow  while collecting and dropping passengers off at their initial and target floors 
and then traverse fg   fi   dropping the remaining passengers off at their destinations 
as in the first case  the cost of such a plan is upper bounded as in eq     
   

fiimplicit abstraction heuristics

i e    fi   traverse the floors fi   fg and collect all the passengers from these floors  then
move along the optimal path  traversing the floors fi  fg while collecting and
dropping off passengers at their initial and target floors  and then traverse the floors
fg   fi   dropping the remaining passengers off at their destinations  here as well  the
cost of such a plan is upper bounded by the expression in eq     
lemma   for any miconic task with passengers p   we have

hf  i 
h  i 



  p   
  p    

proof  recall that p    p is the set of all passengers with both initial and goal locations
in fi  fg   first we give two upper bounds on the length of the optimal traversal of the
floors fi  fg such that  for each passenger p  p     a visit of i p  comes before some visit
of g p   from theorem       of helmert        we have
m p     fi  fg      fi  fg     m  g     

    

where m  g     is the size of the minimum feedback vertex set of the directed graph g    
 v     e      with v     fi  fg and e   containing an arc from f to f   if and only if a passenger
p  p   is initially at floor f and should arrive at floor f    
note that m  g     is trivially bounded by the number of graph nodes v     in addition 
observe that  for any order of the nodes v     the arcs e   can be partitioned into forward and
 
backward arcs  and one of these subsets must contain no more than  e    arcs  removing
from g   all the nodes that are origins of the arcs in that smaller subset of e   results in a
directed acyclic graph  hence  the set of removed nodes is a  not necessarily minimum 
 
feedback vertex set of g     and the size of this set is no larger than  e      putting these two
bounds on m  g     together with eq     we obtain


 p    
 
m p   fi  fg    min   fi  fg     fi  fg    
 
    
 
from the disjointness of fg   fi and fi  fg   and the fact that the goal of all the
passengers in p   is in fi   we have  fg   fi     p     p      from eqs     and    we have
  p      fi   fg      fg  fi      fi  fg      
hf

 
h
  p      fi   fg      fg   fi     m p     fi  fg  

    

f

as we are interested in a lower bound on the ratio hh   the right hand side of the
inequality should be minimized  and thus we can safely set  fi   fg       and  fg   fi    
 p     p      obtaining
 

 
  p      p   p
   fi  fg      
hf
  p     p         fi  fg     
 

 
 
h
  p      p     p       m p     fi  fg  
  p      p        m p     fi  fg  

    

let us examine the right most expression in eq     with respect to the two upper bounds
on m p     fi  fg   as in eq     

 if the minimum is obtained on   fi  fg    then m p     fi  fg      fi  fg   
 
 fi  fg      p      where the last inequality can be reformulated as
  fi  fg     p        
   

fikatz   domshlak

this allows us to provide a lower bound on the right most expression in eq      and
f
thus on hh as
hf
  p     p         fi  fg     
  p        fi  fg     p        
  p     



 
h
  p      p        m p     fi  fg  
  p         fi  fg     p     
  p  
    
 

 

 if the minimum is obtained on  fi fg     p      then m p     fi fg     fi fg     p     
  fi  fg    where the last inequality can be reformulated as
  fi  fg     p         
this again allows us to provide a lower bound on

hf
h

via eq     as

  p     p         fi  fg     
  p        fi  fg     p        
  p     
hf



 

 
 
 
h
  p      p      m p   fi  fg  
  p        fi  fg     p   
  p  
    
note that both lower bounds on
the lemma 

hf
h

in eq     and eq     are as required by the claim of


      upper bounds
a miconic task on which the heuristic hf achieves the performance ratio of exactly    
consists of an elevator e  floors f    fi  ni     passengers p    pi  ni     all the passengers and
the elevator being initially at f    and the target floors of the passengers all being pairwise
disjoint  the sas  encoding for the miconic task is as follows 
 variables v    e   p with the domains d e    f and p  p   d p    f   e  
 initial state i    e   f    p    f            pn   f    
 goal g    p    f            pn   fn   
 actions a    in p  f    out p  f     f  f  p  p     m ove f  f        f  f      f   
the causal graph of this task and the corresponding collection of v forks  consisting of
only one e fork  are depicted in figure     the domain of e is abstracted as in eq    
 leave one out   providing us with
f    fe f    fe f            fe fn   
the costs of the action representatives in these abstract tasks are given in table   with
nf   n      the optimal plans for the abstract tasks in f are
task optimal plan
fe f 
fe f 
fe fn

cost

hin p    f             in pn   f     m ove f    f     out p    f             out pn   fn  i
hin p    f             in pn   f     out p    f             out pn   fn    m ove f    f     out p    f   i
hin p    f             in pn   f     out p    f             out pn    fn     m ove f    fn    out pn   fn  i

   

 
 
 
 
 
 

 
 
 

 n
n  
 n
n  
 n
n  

 

hf  i 

n  

 n  
 

fiimplicit abstraction heuristics

while an optimal plan for the original task  hin p    f             in pn   f     m ove f    f     out p    f    
has a cost of  n  providing us with the
f
upper bound of     for the h heuristic in miconic  putting this upper bound together with
the previously obtained lower bound of      we conclude that the asymptotic performance
ratio of hf in miconic is     
a miconic task on which the heuristics hi and hfi achieve exactly     consists of an
n
elevator e  floors f    fi   n
i     passengers p    pi  i     and the initial and target floors for
all the passengers and the elevator being pairwise disjoint  the task description in sas  is
as follows 
m ove f    f     out p    f     m ove f    f             out pn   fn  i 

 variables v    e   p with the domains d e    f and p  p   d p    f   e  
 initial state i    e   f    p    f            pn   fn   
 goal g    p    fn             pn   f n   
 actions a    in p  f    out p  f     f  f  p  p     m ove f  f        f  f      f   
the causal graph of this task and the corresponding collection of v forks and v iforks are
depicted in figure     the domains of the inverted fork sinks are all abstracted as in eq    
 distance from initial value   and the domains of the fork roots are all abstracted as in
eq      leave one out   this provides us with
i    ip               ipn      

fi    fe f    fe f            fe fn   fe fn             fe f n   ip               ipn      
the costs of the action representatives in these abstract tasks are given in table   with
nf    n     and ni   n  the optimal plans for the abstract tasks in i and fi are
h

task

optimal plan

hi

ipi   
fe f 

hm ove f    fi    in pi   fi    m ove fi   fn i    out pi   fn i  i
hm ove f    f     in p    f             in pn   fn   
out p    fn              out pn   f n  i
hm ove f    f     in p    f     m ove f    f     in p    f             in pn   fn   
out p    fn              out pn   f n  i
hm ove f    fn    in pn   fn    m ove fn   f    
in p    f             in pn    fn     out p    fn              out pn   f n  i
hin p    f             in pn   fn    out p    fn              out pn   f n   
m ove f    fn      out p    fn    i
hin p    f             in pn   fn    out p    fn              out pn    f n    
m ove f    f n    out pn   f n  i
hm ove f    fi    in pi   fi    m ove fi   fn i    out pi   fn i  i

hfi

fe f 
fe fn
fe f

n  

fe f n
ipi   

cost

 

h i 

n
 

 n    

 
n  

  
 n
   n  

 
n  

 

 n
 n  

n

 
n  

 

 n
 n  

 
n  

 

 n
 n  

 
n  

 

 n
 n  

 
n  

 

 
 n  

 
n

 n  

 n  
n  

n

n

while an optimal plan for the original task  hm ove f    f     in p    f     m ove f    f     in p    f    
m ove f    f             in pn   fn    m ove fn   fn      out p    fn      m ove fn     fn      out p    fn     
m ove fn     fn              out pn   f n  i  has the cost of  n  providing us with the upper bound of
    for the hi and hfi heuristics in miconic  putting this upper bound together with the
previously obtained lower bound of      we conclude that the asymptotic performance ratio
of hi and hfi in miconic is     

   

fikatz   domshlak

    satellite
the satellite domain is quite complex  a satellite tasks
s consists of some satellites s 
each s  s with a finite set of instruments is onboard  i   ss is   there is a set of image
modes m  and for each mode m  m  there is a set im  i of instruments supporting
mode m  likewise  there is a set of directions l  image objectives o  lm  and functions
cal   i   l  p    s   l  and p   s    l with s   s  where cal is the calibration target
direction function  p  is the initial direction function  and p is the goal pointing direction
function 
let us denote by oi    o    d sm   o   i  im   the subset of all images that can
be taken by instrument i  by os   iis oi the subset of all images that can be taken by
instruments on satellite s  and by sm    s   is  im      the subset of all satellites that
can take images in mode m  the problem description in sas  is as follows 
 variables v   s   oni   ci   i  i   o with domains
s  s   d s    l 

i  i   d oni     d ci            
o  o   d o           

 initial state i    s   p   s    s  s    oni      ci       i  i    o       o  o  
 goal g    s   p  s    s  s      o       o  o  
 actions
 

a 
 t urn s  d  d       d  d     l    swon i  s   cal i  s   swof f  i    i  is   
ss

 t akeim o  d  s  i    o    d  m   o  s  sm   i  im  is   
where
 turn satellite  t urn s  d  d      h s   d    s   d   i 

 power on instrument  swon i  s    h oni        i   is     oni     i 
 power off instrument  swof f  i    h oni        oni      ci     i 

 calibrate instrument  cal i  s    h ci      oni      s   cal i     ci     i  and
 take an image  t akeim o  d  s  i    h o      ci      s   d    o     i 

      fork decomposition
the causal graph of an example satellite task and a representative subset of the collection
of v forks and v iforks are depicted in figure     since the variables  oni   ci   i  i s  s 
have no goal value  the collection of v forks and v iforks will be as follows in the general
case 
 for each satellite s  s  an s fork with the leaves os  
   

fiimplicit abstraction heuristics

o 

o 

o 

o 

s 

c 

s 

s 

c 

c 

c 

on 

on 

on 

on 

c 

c 

o 

c 

o 

c 
o 

gsf  
s 

o 

c 
o 

f
gc
 
s 

c 

c 
o 

f
gc
 
c 

o 
f
gc
 

c 

on 
o 
on 

on 

 a 

goi  
 b 

figure     satellite example task  a  causal graph and  b  a representative subset of the
collection of v forks and v iforks

 for each instrument i  i  a ci  fork with the leaves oi  
 for each image objective o    d  m   o  a o ifork with the parents  ci   i  im  sm  
the root domains of all forks rooted at instruments i  i and of all the inverted fork sinks
are binary in the first place  and the root domains of the forks rooted at satellites s  s are
abstracted as in eq      leave one out   this provides us with
f    fs d   s  s  d  l    fci   i  i  
i    io   o  o  

fi    fs d   s  s  d  l    fci   i  i    io   o  o  
the total number of forks is thus nf    s    l     i  and the total number of inverted
forks is ni    o   for each action a  a  the number of its representatives in each abstract
task  as well as the cost assigned to each such representative  are given in figure    
      lower bounds
first  note that any optimal plan for a satellite task contains at most   actions per image
objective o  o and one action per satellite s  s  such that i s     g s   now we show
that each of the three heuristics fully account for the cost of at least one action per image
objective o  o and one action per such a satellite  this will provide us with the lower
bound of     on the asymptotic performance ratios of our three heuristics 
lemma   for any satellite task  hf   hi   and hfi fully account for the cost of at least
one take image action t akeim o  d  s  i  for each image objective o  o 
proof  for an image objective o    d  m   o  some actions t akeim o  d  s  i    h o  
   ci      s   d    o     i will appear in optimal plans for  sm     l  fork abstract tasks rooted
   

fikatz   domshlak

fs d

action
 

t urn s  d  d  
swon i  s 
cal i  s 
swof f  i 

 
 
 
 

fs d 
 
 
 
 

fs d  

fs   d

 
 
 
 

 
 
 
 

fci
 
 
 
 

fci 
 
 
 
 

o  oi o  os   oi o   os
io
io
io
f i
 
 
 
 

 
 
 
 

 
 

 
 
 
 

 
 
 

 
 o s  

fi
 
 o s    

 

 

 
 oi  
 
 oi  

 
 oi    
 
 oi    

 a 

action
t akeim o  d  s  i  
o    d  m 

s   sm s    sm i   im i    im
fs   d 
fs   d 
fci 
fci 
io io 
 

 

 

 

 

 

f

i

fi

 
 sm   l   im  

 

 
 sm   l   im    

 b 
figure     number of representatives for each original satellite action in each abstract
task  as well as the partition of the action costs between these representatives 
table  a  shows turn  switch on  switch off  and calibrate actions  and
table  b  shows take image actions

in satellites   im   fork abstract tasks rooted in instrument calibration status variables ci  
and one inverted fork abstract task with sink o  together with the costs of the action
representatives in the abstract problems  see figure      we have
hf   cost of each representative is
tasks 

 
 sm   l   im  

and there are  sm     l     im   fork abstract

hi   cost of each representative is   and there is one inverted fork abstract task  and
hfi   cost of each representative is
tasks 

 
 sm   l   im    

and there are  sm     l     im       abstract

therefore  for each o  o  the cost of one t akeim o  d  s  i  action will be fully accounted
for by each of the three heuristics 

lemma   for any satellite task  hf   hi   and hfi fully account for the cost of at least
one turn action t urn s  d  d    for each s  s  such that i s     g s  
proof  if s  s  is a satellite with i s     g s   then an action t urn s  i s   d    will appear
in any optimal plan for fs i s    an action t urn s  d  g s   will appear in any optimal plan
for fs g s    and for each o  os   an action t urn s  d  g s   will appear in any optimal plan
for io   together with the costs of the action representatives in the abstract problems  see
figure     we have
hf   cost of each representative is

 
 

and there are   fork abstract tasks 
   

fiimplicit abstraction heuristics

hi   cost of each representative is
hfi   cost of each representative is

 
 os  

and there are  os   inverted fork abstract tasks  and

 
 os    

and there are  os       abstract tasks 

therefore  for each s  s  such that i s     g s   the cost of one t urn s  d  d    action will
be fully accounted for by each of the three heuristics 

h
h

together  lemmas   and   imply that  for h   hf   hi   hfi    on satellite we have
     

      upper bound
a satellite task on which all three heuristics achieve the ratio of exactly     consists of
two identical satellites s    s  s    with l instruments each  i   is  is                l    l  
            l   such that instruments  i  l i  have two modes each  m  and mi   there is a set of
n     directions l    di   d            dn   and a set of n image objectives o    o            on    oi  
 di   mi   for    i  l and oi    di   m    for l   i  n  the calibration direction of
instruments  i  l   i  is di   the sas  encoding for this planning task is as follows 
 variables v   s  o   oni   ci   i  i  
 initial state i    s   di   s  s    oni      ci       i  i    o       o  o  
 goal g    o       o  o  
 actions
 

a 
 t urn s  d  d       d  d     l    swon i  s   cal i  s   swof f  i    i  is   
ss


 
ss

 t akeim  di   mi    di   s  i    i  is   

n
 


 t akeim  dj   m     dj   s  i    i  is    

j l  

the causal graph of this task is depicted in figure   a  the state variables  oni   ci  
i  i   s have no goal value  and thus the collection of v forks and v iforks for this task
is as in figure   b  the domains of the inverted fork sinks are binary  and the domains of
the fork roots are abstracted as in eq      leave one out   this provides us with
f    fs d   fs   d   d  l    fci   i  i  
i    io   o  o  

fi    fs d   fs   d   d  l    fci   i  i    io   o  o  
the total number of forks in this task is nf    n    l     and the total number of inverted
forks is ni   n  the costs of the action representatives in each abstract task are given in
 
figure     where  os      os      o    n   oi     n  l       sm         im       l   imi       
and  l    n     
the optimal plans per abstract task are depicted in table    while an optimal plan for
the original problem  hswon    s   t urn s  di   d     cal    s   t urn s  d    di    t akeim o    di   s     
   

fikatz   domshlak

s 

s
o 

c 

ok

oi

cl  

cl

ci

ol  

s

s 

o        on

o        on

gsf

gsf  

cl i

c l
s

oni

on 

ci

on

s 

ci

oi

ol         on
f
gc
 i  i
i

s

cl i

s 

c        c l

onl i

onl

onl  

on l

oi

oi

goi i      i  l

goi i   l   i  n

 a 

 b 

figure      a  causal graph and  b  the corresponding collection of v forks and v iforks for
the satellite task used in the proof of the upper bound of    

h

hf

hi

hfi

task

optimal plan

cost

ht akeim o    di   s    l             t akeim ol   di   s     l  
fs d
t akeim ol     dl     s     l           t akeim on   dn   s     l i
ht akeim o    di   s              t akeim ol   di   s  l  
f
s   d
t akeim ol     dl     s  l           t akeim on   dn   s  l i
ht akeim oi   di   s    l   i  
f
 ci   i  i s
t akeim ol     dl     s     l           t akeim on   dn   s     l i
ht akeim oi   di   s  i  
fci   i  is 
t akeim ol     dl     s  l           t akeim on   dn   s  l i
ioj      j  l ht urn s  di   dj    cal j  s   t urn s  dj   di    t akeim oj   di   s  j i
ioj   l   j  n ht urn s  di   d     cal    s   t urn s  d    dj    t akeim oj   di   s    i
ht akeim o    di   s    l               t akeim ol   di   s     l  
fs d
t akeim ol     dl     s     l           t akeim on   dn   s     l i
ht akeim o    di   s              t akeim ol   di   s  l  
f
s   d
t akeim ol     dl     s  l           t akeim on   dn   s  l i
ht akeim oi   di   s    l   i  
f
 ci   i  i s
t akeim ol     dl     s     l           t akeim on   dn   s     l i
ht akeim oi   di   s  i  
fci   i  is 
t akeim ol     dl     s  l           t akeim on   dn   s  l i
ioj      j  l ht urn s  di   dj    cal j  s   t urn s  dj   di    t akeim oj   di   s  j i
ioj   l   j  n ht urn s  di   d     cal    s   t urn s  d    dj    t akeim oj   di   s    i

 

l
 n  

 

nl
 n  l  

n  

l
 n  

 

nl
 n  l  

n  

 
 n  

 

nl
 n  l  

l

nl
 
   n  l  
 n  
 
 
  nl  
  
n
 
 
 
  
n
nl  

l
l
nl

h i 

n

l
 n  

 

nl
 n  l  

n  

l
 n  

 

nl
 n  l  

n  

 
 n  

 

nl
 n  l  

l

nl
 
   n  l  
 n  
 
 
  nl    
n  
 
 n  
 
 
  nl  
 
n  
 
 n  l  

l

n     
n
nl  

n 

l

 n
n  

 

n
nl  

nl

table    optimal plans for the abstract tasks and the overall heuristic estimates for the
satellite task used in the proof of the upper bound of    

swof f            swon l     s   t urn s  di   dl     cal l     s   t urn s  dl    di    t akeim ol    di   s  l     
swof f  l      swon l  s   t urn s  di   dl    cal l  s   t urn s  dl   di    t akeim ol   di   s  l   t urn s  di   dl     
t akeim ol     dl     s  l           t urn s  dn    dn    t akeim on   dn   s  l i 

   

has the cost of  l    n     for

fiimplicit abstraction heuristics


l   n  n  this provides us with the asymptotic performance ratio of     for all three
heuristics 

    summary
we considered heuristic search for cost optimal planning and introduced a domain independent
framework for devising admissible heuristics using additive implicit abstractions  each such
implicit abstraction corresponds to abstracting the planning task at hand by an instance of a
tractable fragment of optimal planning  the key motivation for our investigation was to escape the restriction of explicit abstractions  such as pattern database and merge and shrink
abstractions  to abstract spaces of a fixed size  we presented a concrete scheme for additive
implicit abstractions by decomposing the planning task along its causal graph and suggested
a concrete realization of this idea  called fork decomposition  that is based on two novel fragments of tractable cost optimal planning  we then studied the induced admissible heuristics
both formally and empirically  and showed that they favorably compete in informativeness
with the state of the art admissible heuristics both in theory and in practice  our empirical
evaluation stressed the tradeoff between the accuracy of the heuristics and runtime complexity of computing them  to alleviate the problem of expensive per search node runtime
complexity of fork decomposition heuristics  we showed that an equivalent of the explicit
abstractions notion of database exists also for the fork decomposition abstractions  and
this despite their exponential size abstract spaces  our subsequent empirical evaluation of
heuristic search with such databases for the fork decomposition heuristics showed that it
favorably competes with the state of the art of cost optimal planning 
the basic principles of the implicit abstraction framework motivate further research
in numerous directions  most importantly in  i  discovering new islands of tractability of
optimal planning  and  ii  abstracting the general planning tasks into such islands  likewise  there is promise in combining implicit abstractions with other techniques for deriving admissible heuristic estimates  a first step towards combining implicit abstractions
with polynomial time discoverable landmarks of the planning tasks has recently been taken
by domshlak  katz  and lefler         we believe that various combinations of such techniques might well improve the informativeness of the heuristics  and this without substantially increasing their runtime complexity 

acknowledgments
the work of both authors was partly supported by israel science foundation grants       
and         

   

fikatz   domshlak

appendix a  detailed results of empirical evaluation
hf
task

hi

h nodes time nodes

hfi
time nodes

time

ms    

ms    

nodes

nodes

time

hspf

time

nodes

 
    
  
    
  
    
  
    
  
    
  
    
  
    
           
            
  
    
  
    
  
    
  
    
           
           
             

 
  
  
  
  
  
  
   
     
  
  
  
  
  
  

time

blind
nodes time

hmax
nodes time

airport ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
   
   

       
       
       
       
       
        
        

      
       
        
       
       
        
        
           

      
       
       
       
       
         
         

       
       
        
        

       
       
        
        
           
           

       
       
         
         

      
       
       
       
       
       
       
           
            
       
       
       
       
           
           
             

          
             
           

   

     

    
       
      
    
       
       
    
        
       
    
       
       
     
       
       
      
        
        
      
        
        
                 
         
                             
    
       
       
     
       
       
      
        
        
      
        
        
                 
         
                 
         
                         
             
            
          
         
            
          

blocks ipc 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

 
       
       
       
      
 
    
 
    
       
       
  
       
       
       
       
  
    
  
    
       
       
 
      
       
       
      
 
    
 
    
       
       
  
       
        
        
       
  
    
  
    
        
        
  
       
        
       
       
  
    
  
    
        
        
  
        
        
        
       
  
    
  
    
        
        
  
       
        
        
       
  
    
  
    
         
        
  
                 
        
       
  
    
  
    
         
        
  
                            
        
  
    
  
    
         
         
  
                             
        
         
                   
         
                                    
          
          
                               
                                    
         
         
                              
                                    
         
         
                               
                                     
          
           
                                 
  
                                
        
        
                               
  
                          
                                  
            
          
           
                                 
            
            
           
                                 
  
           
  
               
           
  
           
  
              
           
  
           
  
           
  
           
  
          
  
            
  
             
  
           
  
           

depots ipc 
  
  
  
  
  
  
  

  
  
  
  
  
  
  

        
         

        
          

        
          

       
  
    
  
    
        
        
        
  
    
                    
         
                                                                 
                            
            
                                     
             
             

grid ipc 
  
  

  
  

        

    

    

         

        
          
                            

         

        
            

table    runtimes of cost optimal heuristic search planners on the airport 
blocksworld  depots  and grid domains  the description of the planners is given in section    here the fork decomposition heuristics are computed
fully online  column task denotes problem instance  column h denotes optimal
solution length  other columns capture the run time and number of expanded
nodes 

   

fiimplicit abstraction heuristics

hf
task

h

nodes

hi

hfi

time

nodes

time nodes

time

    
     
    
     
     
    
    

  
     
   
     
     
   
    

    
  
           
    
   
          
           
    
   
         

    
     
    
     
     
    
     

hspf

ms    

ms    

nodes

time

nodes

time

nodes

      
       
       
       
         
        
       
           
          
       
          
             

 
  
  
  
  
  
  
    
  
  
     
      

    
    
    
    
    
    
     
     
     
     
     
     

  
     
   
     
     
    
     

blind
time

nodes

time

hmax
nodes
time

driverlog ipc 
  
  
  
  
  
  
  
  
  
  
  
  

 
  
  
  
  
  
  
  
  
  
  
  

  
     
   
    
     
   
   

           
            

             
                       
                         

    
        
  
    
          
     
    
          
    
                        
                           
                 
     
                          

           
             

    
    
    
    
     
    
     

              

freecell ipc 
  
  
  
  
  

 
   
    
               
                
  
  

   
    
   
    
                         

       
           
           
            
             

       

       
         
    
    
                     
           
                                     
                                        
            
              

gripper ipc 
  
  
  
  
  
  
  

  
   
    
   
    
   
    
       
       
  
    
        
   
    
  
    
    
    
         
    
       
       
   
    
         
    
    
        
          
          
    
          
         
    
    
          
     
    
                                      
          
          
           
          
     
    
                                           
                                                        
    
  
                                                                     
  
                            
                             

logistics ipc 
  
  
  
  
  

  
  
  
  
  

           
   
    
   
    

    
    

    
    

    
   

     
    

  
    
   
    
  
  
    
   
    
   
  
    
   
    
  
  
    
    
         
  
    
   
    
   
 
    
  
    
  
  
    
    
         
  
    
   
    
  
  
    
    
         
  
    
    
         
  
                        
          
  
                      
  
                  
  
                        
  
                      
  
    
  
    
         
            
  
    

    
    
    
    
    
    
    
    
    
    
      

             
            
        
       

            
            
       
       
            

             
    
    

      
      

    
    

     
     

    
    

       
       
       
       
       
      
       
       
       
       
       
       
       
       
       
       
            
             
            

  
    
  
    
  
    
  
    
  
    
 
    
  
    
  
    
  
    
  
    
           
             
           
             
           
          

     
    
    
      
     
    
      
     
      
      

    
    
    
    
    
    
    
    
    
    

    
    
    
     
    
   
      
    
      
      

    
    
    
    
    
    
    
    
    
    

    

    

   
    

logistics ipc 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

  
  
  
  
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

      
      
      

  
  
  
  
  
 
  
  
  
  
   
      
    
     
     
  

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

            
             

mprime ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

   
    
            
         
    
    
    

     

  
    
            
 
    
    
    
  

    

                          
 
    
   
    
            
          
          

  
    
           
  
    
    
    
   

    

           
 
    
          
          

      
          
        
      
             
          
             
           
      
           

       
       
       

   

     

            

         
            
     

       
           

         
            

         

    

             
          
           
            
            

          
            
  

    

  

  
    
 
    
   
    
         
            
         
   
    

    
   
  
  
     
  
   

    

  

    

     
 
    
  
    
  
    
  
           
    
  
    
  

    
    
    
     
     
    
    

      
            
       
      
       
         
           
         
        

      
            
       
       
       
          
       

             
        
            
          
          
          
         
         
                        
         
         
         
  

    

  
    
           
 
    
   
    
              
  
    
          
           
   
    
    
    
           
          
 
    
            
            
 
    
   
    
   
    
   
    
 
    
  
    
    
    
  
    
  
    

table     similar to table   for the driverlog  freecell  gripper  logistics ipc  
logistics ipc   and mprime domains 
   

fikatz   domshlak

hf
task

h

nodes

hi
time

nodes

hfi
time nodes

time

ms    

ms    

nodes

nodes

time

time

hspf

nodes

blind
time

nodes

time

hmax
nodes time

miconic strips ipc 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

 
 
 
 
 
 
 
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

      
 
    
      
      
 
    
      
      
 
    
      
      
 
    
      
      
 
    
      
       
  
    
       
       
  
    
       
       
  
    
       
       
  
    
       
       
  
    
       
       
   
    
       
        
   
    
        
        
   
    
        
       
   
    
        
        
   
    
        
        
   
    
        
        
   
    
        
        
   
    
        
        
   
    
        
        
   
    
        
         
    
              
         
    
              
         
    
              
         
    
              
         
    
              
               
               
               
               
                
               
                
               
                
               
                                   
                                   
                                   
                                   
                                    
                                      
                                      
                                      
                                      
                                      
             
                           
                           
             
             

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
         
       
         
       
         
       
          
       
          
       
          
       
          
       
           
       
          
       
                       
                       
                      
                         
           
       
                          
                          
                          
                          
                          
                           
                          
                           
             
                          

 
    
 
    
 
    
 
    
 
    
  
    
  
    
  
    
  
    
  
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    
     
    
     
    
     
    
           
           
           
           
           
             
             
            
             
             
              
              
              
              
              

      
      
      
      
      
      
      
      
      
      
       
       
       
       
       
       
       
       
       
       
        
        
        
        
        
       
        
        
        
        
         
        
         
        
         
        
         
        
         
        
         
         
         
         
         
         
         
         
         
         
          
          
          
          
          
          
          
          
          
          
                       
                       
                       
                       
                       
                       
                       
                       
                       
                       
                           
                           
                           
                           
                           
                            
                            
                            
                            
                            

mystery ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 


 
 

 

 

 
 

 
 
 
 
 
 

      
          
       
      
      
          
      

      
         
      

      
      
          
       
      
       

 
    
           
 
    
 
    
            
  
    
              

        
 
    
           

  
    
   
  
  

    
     
    
    
    

      
         
       
      
      
          
      

      
        
      

      
      
          
      
       
       

      
          
       

 

    

  

    

       

         

      
      
          
      
       
                          

 
    
           
        

         
      
      
           
                         
      
         
      
      
      
           

      
         
       
      
       
           

 

    

  
    
           
        
        
         

       
            
        

    
    
    

      
      
           
         
        
       
                           
            
        
         
      
           
            
       
         
         
        
        
             

table     similar to table   for the miconic and mystery domains 
   

 
    
 

 
 
    
   

    
    
    
    

      
       
       
       
      
           

fiimplicit abstraction heuristics

hf
task

h

hi

hfi

ms    

ms    

time

nodes

nodes

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                                         
                                         

  
  
  
  
  
      
      

nodes

time

nodes

time

nodes

time

time

hspf

nodes

blind

hmax
nodes
time

time

nodes

time

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                  
                  

    
    
    
    
    
      
      

    
    
    
    
    
    
    

    
    
    
    
    
      
      

    
    
    
    
    
     
     

    
    
     
      

    
    
    
    

  
   
    
      

    
    
    
    

openstacks ipc 
  
  
  
  
  
  
  

  
  
  
  
  
  
  

    
  
    
  
    
  
    
  
    
  
           
           

pathways ipc 
  
  
  
  

 
  
  
  

    
    
     
      

    
    
    
     

    
    
     
     

    
    
    
    

    
    
     
     

    
    
    
    

 
    
     

    
    
    

      
        
           
           

    
   
     
     

    
    
    
     

pipesworld notankage ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
  
 
  
 
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  

   
    
    
    
    
    
          
          
            
          
            

   
    
    
    
    
    
          
          
            
          
            

   
    
    
    
    
    
          
          
            
           
            

             
             

            

            

      
      
 
    
        
  
    
        
       
   
    
         
   
    
      
      
   
    
         
   
    
        
       
   
    
          
    
    
       
       
         
          
    
    
         
        
          
          
    
    
         
       
         
          
    
    
         
         
                      
     
    
            
                                      
             
             
               
                                                             
                                                                  
           
                        
     
    
              
            
                           
             
             
          
         
           
    
    
                         
             
             
             

pipesworld tankage ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
  
 
  
 
  
 
  
  
  
  
  
  
  

  
    
   
    
   
    
   
    
    
    
   
    
                                      
                                         
                      
           
                                      

      
        
         
          
         
          

      
       
       
        
       
        

 
    
        
   
    
         
         
          
                      
         
          
          
          
                         

  
    
   
    
    
    
           
    
    
     
    
             

             

             

             
             

             
             

           
                         
            
             
              
           
             

tpp ipc 
  
  
  
  
  
  

 
 
  
  
  
  

 
 
  
  
   

    
    
    
    
    

 
  
  
  
    

    
    
    
    
    

 
 
  
  
    

    
    
    
    
    

      
      
       
       
       
            

      
      
       
       
       
           

 
 
  
  
   

    
    
    
    
    

 
  
   
   
     

    
    
    
    
    

 
    
  
    
  
    
   
    
     
    
              

trucks ipc 
  
  
  
  
  
  
  
  
  

  
    
    
    
    
    
    
       
       
   
    
         
   
    
  
    
    
    
    
    
    
         
       
    
    
          
   
    
  
                                   
                       
    
                
    
    
                                                                        
    
                         
    
  
              
           
             
  
             
                                                                                                               
  
           
              
  
             

table     similar to table   for the openstacks  pathways  pipesworld notankage 
pipesworld tankage  tpp  and trucks domains 

   

fikatz   domshlak

hf
task

h

nodes

hi
time

nodes

hfi
time

nodes

time

ms    

ms    

nodes time

nodes

time

hspf

nodes

blind
time

hmax
nodes time

nodes

time

    
 
    
  
    
  
    
  
    
  
    
  
    
  
    
   
    
  
    
   
    
 
    
  
    
  
    
   
    
 
    
   
    
 
    
  
    
  
    
    
    
  
    
   
    
  
    
   
    
  
    
  
    
  
    
  
    
         
    
    
    
    
    
    
  
    
  
    
  
    
   
    
    
    
    
    
  
    
  
    
  
    
  
    
     
           
    
  
    
   
    
  
    
  
     
         
    
    
  
    
   
    
   
    
   
    
  
    
  
    
    
           
    
   
    
    
    
                
    
   
    
   
    
   
    
    
    
   
    
   
    
    
           
                          
    
   
    
    
    
  
    
   
    
   
    
    
     
                  
    
  
    
  
    
    
    
    
    
   
    
   
    
   
    
    
    
   
    
   
    
     
          
    
   
    
    
                   
                    
    
   
    
   

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

      
       
       
        
       
      
       
       
       
        
        
        
       
       
        
         
       
       
         
       
       
           
        
       
        
        
        
       
           
         
          
        
         
        
          
            
         
        
         
           
       
         
        
         
        
          
         
              

    

   

psr small ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
  
  
  
  
 
  
 
 
 
  
  
  
 
  
  
 
  
  
  
  
  
  
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
   
   
   
  
  
    
    
  
  
    
  
  
      
  
  
   
   
   
  
      
    
     
   
    
   
     
      
    
   
    
  
    
   
    
   
     
    

   

    
  
    
  
    
    
  
    
  
    
    
  
    
  
    
    
  
    
  
    
    
  
    
  
    
    
  
    
  
    
    
  
    
  
    
    
  
    
  
    
    
  
    
  
    
    
   
    
   
    
    
   
    
   
    
    
   
    
   
    
    
  
    
  
    
    
  
    
  
    
    
   
    
   
    
    
    
    
    
    
    
  
    
  
    
    
  
    
  
    
    
    
    
    
    
    
  
    
  
    
    
  
    
  
    
                                  
    
  
    
  
    
    
  
    
  
    
     
          
          
    
   
    
   
    
    
   
    
   
    
    
  
    
  
    
                                  
    
    
    
    
    
     
          
          
    
   
    
   
    
    
    
    
    
    
    
   
    
   
    
                               
                                  
    
    
    
    
    
    
   
    
   
    
    
    
    
    
    
             
    
  
    
  
    
    
    
    
    
    
    
   
    
   
    
    
    
    
    
    
    
   
    
   
    
                             
    
    
    
    
    

    

   

    

   

      
 
       
  
       
  
       
  
       
  
      
 
       
  
      
 
      
 
      
 
       
  
       
  
       
  
       
  
       
  
        
  
       
  
       
  
         
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
         
   
       
  
        
  
       
  
                
          
    
       
  
       
  
       
  
          
    
       
  
         
  
       
  
       
  
       
  
                
       
  
           
    
                   
    
       
  

    

rovers ipc 
  
  
  
  
  
  
  

  
 
  
 
  
  
  

   
    
   
    
   
    
       
       
  
    
         
        
  
    
  
    
  
    
      
      
  
    
        
        
   
    
   
    
   
    
       
       
   
    
         
        
  
    
  
    
  
    
      
      
  
    
        
        
                                                                                                           
                                                                    
             
             

satellite ipc 
  
  
  
  
  
  

 
  
    
  
    
  
  
    
   
    
  
    
    
   
    
  
                      
                             
                               

  
    
   
    
   
    
           
            

       
       
       
       
       
       
         
       
                       
                         

  
    
  
   
    
    
    
          
     
           
             

      
      
      
      
      
      
      
      
       
       
       
       
       
       
          
        
                         
                         
                        

 
    
 
 
    
  
  
    
    
   
    
    
   
          
                 
                  
            

    
    
    
    

  
   
    
      

    
    
    
    

              

zenotravel ipc 
  
  
  
  
  
  
  
  
  
  
  

 
 
 
 
  
  
  
  
  
  
  

 
  
  
  
   
    
    
    

    
    
    
    
    
    
    
     

 
  
  
  
   
    
    
    

    
    
    
    
    
    
    
    

            

 
  
  
  
   
   
    
    

    
    
    
    
    
    
     
     

    
    
    
    
    
    
    

      
       
        
        
          
          
           
            

table     similar to table   for the psr  rovers  satellite  and zenotravel domains 

   

fiimplicit abstraction heuristics

hf
task

h nodes

hi
timenodes

hfi
timenodes

ms    
time nodes

ms    

timenodes

hspf

time nodes

blind
hmax
time nodes time nodes
time

schedule strips
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

 
 
    
 
    
 
    
 
 
    
 
    
 
    
 
 
    
 
    
 
    
 
  
    
  
    
  
    
 
  
        
        
    
 
 
    
 
    
 
    
 
 
    
 
    
 
    
 
 
    
 
    
 
    
 
 
    
 
    
 
    
 
 
    
 
    
 
    
 
  
                        
 
 
    
 
    
 
    
 
  
    
  
    
  
    
 
  
    
  
    
  
    
 
 
    
  
    
 
    
 
  
              
  
    
 
  
    
  
    
  
    
 
  
    
  
    
  
    
 
                             
 
 
    
  
    
  
    
 
                              
                          
 
   
              
  
    
 
                             
 
                              
 
                                
 
                                 
 
                            
 
                             
                                  
 
                             
             
           
 
            
 
                                 
 
                               
             
            
 
                                  
             
           
                                     
 
          
           
              
             
             

        
        
        
       
 
 
 
 
 

      
      
      
      
      

        
        
        
        
        
        
        
        
 
 
 
 
 

      
      
      
      
      

        

 
 
 
 
 
 
 
 
 
 

      
      
      
      
      
      
      
      
      
      

       
 
    
      
 
    
      
 
    
        
  
    
        
   
    
      
 
    
      
 
    
       
 
    
      
 
    
       
 
    
               
    
       
  
    
              
    
         
   
    
        
        
  
    
                     
                    
                     
                     
         
   
    
                        
           
                      
                       
                       
             
             
                      
                        
                     
                        

             

table     similar to table   for the  non ipc  schedule strips domain 

   

fikatz   domshlak
hf
task

h

nodes

hi
time

nodes

hfi
time

nodes

time

ms    

ms    

nodes

nodes

time

hspf

time

nodes

 
    
  
    
  
    
  
    
  
    
  
    
  
    
           
            
  
    
  
    
  
    
  
    
           
           
             

 
  
  
  
  
  
  
   
     
  
  
  
  
  
  

time

blind
nodes time

hmax
nodes time

airport ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
  
    
      
 
    
      
 
  
    
       
  
    
       
  
  
    
        
  
    
       
  
  
    
       
  
    
       
  
  
    
       
  
    
       
  
   
    
        
   
    
       
  
   
    
        
   
    
       
  
     
                     
    
           
  
                                                
  
  
    
       
  
    
       
  
  
    
       
  
    
       
  
   
    
        
   
    
       
  
   
    
        
   
    
       
  
     
                     
    
           
  
     
                     
    
           
                                                        
                 
              
                                            
   
                     
          
          
                                                          
   
                       
           
           
   
            

   

     

    
       
      
    
       
       
    
        
       
    
       
       
     
       
       
      
        
        
      
        
        
                 
         
                             
    
       
       
     
       
       
      
        
        
      
        
        
                 
         
                 
         
                         
             
            
          
         
            
          

blocks ipc 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

 
  
  
  
 
 
  
  
  
  
  
   
  
  
  
  
  
   
  
   
  
    
  
    
  
    
  
     
  
   
         
  
    
  
    
          
         
          
  
  
  
  
  
  
  
  
  

    
       
  
    
      
 
    
    
       
  
    
       
  
    
    
       
  
    
      
 
    
    
        
   
    
       
  
    
    
        
  
    
       
  
    
    
        
   
    
       
  
    
    
        
   
    
       
  
    
    
         
   
    
       
  
    
    
         
    
    
        
  
    
               
    
    
        
         
                     
    
          
          
                     
    
         
         
                      
    
         
         
                       
    
          
           
                      
    
        
        
                                                          
                              
          
           
                                           
           
     
     
               
     
              

 
    
       
       
  
    
       
       
 
    
       
       
  
    
        
        
  
    
        
        
  
    
        
        
  
    
         
        
  
    
         
        
  
    
         
         
                   
         
                               
                              
                               
                                 
                               
                                  
                                 
                                 
           
           
           
           
           
           
           
          
            
             
           
           

depots ipc 
  
  
  
  
  
  
  

  
   
    
        
   
    
       
  
    
  
    
        
        
  
    
    
         
    
    
        
  
    
                    
         
         
                                                                                                
                 
                                           
         
                                           
                                     
                 
                            
                 
                            

driverlog ipc 
  
  
  
  
  
  
  
  
  
  
  
  

 
  
    
       
  
    
      
  
     
                     
    
       
  
   
    
        
   
    
       
  
    
               
    
    
       
  
     
                     
    
         
  
   
    
        
   
    
        
  
   
    
         
    
    
       
                                                      
                                         
          
  
    
               
    
    
       
  
     
                     
    
          
                                                          

 
  
  
  
  
  
  
    
  
  
     
      

    
  
    
        
       
          
                          
    
   
               
         
                                        
                                         
    
                                 
                                          
     
     
                 
                   
             
     

table     runtimes of cost optimal heuristic search planners on the airport 
blocksworld  depots  and driverlog domains 
the description of
the planners is given in section    here the fork decomposition heuristics are via
structural pattern databases  column task denotes problem instance  column
h denotes optimal solution length  other columns capture the run time and
number of expanded nodes 
   

fiimplicit abstraction heuristics

hf
taskh

nodes

hi
time

nodes

hfi
time

nodes

time

ms    

ms    

nodes

nodes

time

time

hspf

nodes

blind
time

nodes

time

hmax
nodes
time

freecell ipc 
  
  
  
  
  

 
  
  
  
  

   
    
   
    
        
     
    
     
    
          
                                      
                                         
              

       
           
           
            
             

       

       
         
    
    
                     
           
                                     
                                        
            
              

grid ipc 
  
  

  
  

   
    
              

    

    

   

    

        
         
                           

    

    

   
    
             

gripper ipc 
  
  
  
  
  
  
  

  
   
    
   
    
        
       
       
  
    
        
   
    
  
    
    
    
    
         
       
       
   
    
         
    
    
  
     
    
     
    
          
          
         
    
    
          
     
    
  
     
    
     
    
          
          
          
           
          
     
    
  
                   
                 
                                                        
    
                                                                                                                  
                                                                            
                             

logistics ipc 
  
  
  
  
  
  

  
  
  
  
  
  

     
            
    
           
   
    
    
   
    
    
            
             

     
     
    
    

            
            
         
        
             

             
            
        
       

            
            
       
       
            

             
    
    

      
      

    
    

     
     

    
    

       
       
       
       
       
      
       
       
       
       
       
       
       
       
       
       
            
             
            

  
    
  
    
  
    
  
    
  
    
 
    
  
    
  
    
  
    
  
    
           
             
           
             
           
          

     
    
    
      
     
    
      
     
      
      

    
    
    
    
    
    
    
    
    
    

    
    
    
     
    
   
      
    
      
      

    
    
    
    
    
    
    
    
    
    

    

    

   
    

logistics ipc 
       
       
       
       
       
      
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

  
  
  
  
  
 
  
  
  
  
  
    
  
  
  
  
  
  
   
     
  
      

    
   
    
   
    
   
    
    
    
   
    
  
    
    
    
   
    
    
    
    
           
            
    
     
            
           
    
     
    
    
    
    
    
     

    
       
    
        
    
       
    
         
    
        
    
       
    
         
    
       
    
         
    
         
    
          
                   
    
          
                  
                 
    
          

  
  
  
  
  
 
  
  
  
  
   
      
    
     
     
  

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

            
             

mprime ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

   
    
  
    
     
    
           
   
    
 
    
    
    
    
    
              
    
    
  
    
                            
     
                 
 
    
   
    
     
    
    
    
   
    
          
             
            
  
    
           
  
    
 
    
   
    
   
    
     
    
   
    
   
    

            
         
            
           
  
    
            
    
    
   
    
  
    
  
    
     
    
  
    
   
    

       
         
       
         
            
        
    
 
    

    
    
    

        
         

      
          
        
      
             
          
             
           
      
           

       
       
       

   

     

            

         
            
     

       
           

    

             
         
          
                        

         

            
            

            
            
       
           
      
       
       
       
          
       
       

      
            
       
      
       
         
           
         
        

      
            
       
       
       
          
       

             
        
            
          
          
          
         
         
                        
         
         
         
  

    

  
    
           
 
    
   
    
              
  
    
          
           
   
    
    
    
           
          
 
    
            
            
 
    
   
    
   
    
   
    
 
    
  
    
    
    
  
    
  
    

table     similar to table    for the freecell  grid  gripper  logistics ipc  
logistics ipc   and mprime domains 

   

fikatz   domshlak

hf
task

h

nodes

hi
time

nodes

hfi
time

nodes

time

ms    

ms    

nodes

nodes

time

time

hspf

nodes

blind
time

nodes

time

hmax
nodes time

miconic strips ipc 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

 
      
      
      
      
      
 
      
      
      
      
      
 
      
      
      
      
      
 
      
      
      
      
      
 
      
      
      
      
      
 
       
       
       
      
      
 
       
       
       
      
      
 
       
       
       
      
      
 
       
       
       
      
      
 
       
       
       
      
      
  
       
        
       
       
       
  
        
        
        
       
       
  
        
        
        
       
       
  
       
        
        
       
       
  
        
        
        
       
       
  
        
        
        
       
       
  
        
        
        
       
       
  
        
        
        
       
       
  
        
        
        
       
       
  
        
        
        
       
       
  
         
         
         
       
       
  
         
         
         
       
       
  
         
         
         
       
       
  
         
         
         
       
       
  
         
         
         
       
       
  
         
                     
       
       
  
         
                     
       
       
  
          
                     
       
       
  
          
                     
       
       
  
          
                     
       
       
  
          
                     
       
       
  
          
                     
         
       
  
          
                     
         
       
  
          
                     
         
       
  
                                  
          
       
  
                                    
          
       
  
                                    
          
       
  
                                   
          
       
  
                                    
           
       
  
                                    
          
       
                                           
                       
                                           
                       
                                           
                      
                                           
                         
                                           
           
       
                                                                      
                                                                      
                                                                      
                                                                      
                                                                      
  
                           
                 
                          
  
                           
  
             
  
                          

 
    
 
    
 
    
 
    
 
    
  
    
  
    
  
    
  
    
  
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    
     
    
     
    
     
    
           
           
           
           
           
             
             
            
             
             
              
              
              
              
              

      
      
      
      
      
      
      
      
      
      
       
       
       
       
       
       
       
       
       
       
        
        
        
        
        
       
        
        
        
        
         
        
         
        
         
        
         
        
         
        
         
         
         
         
         
         
         
         
         
         
          
          
          
          
          
          
          
          
          
          
                       
                       
                       
                       
                       
                       
                       
                       
                       
                       
                           
                           
                           
                           
                           
                            
                            
                            
                            
                            

mystery ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 


 
 

 

 

 
 

 
 
 
 
 
 

      
      
      
         
          
        
       
      
       
      
      
      
      
      
         
          
         
      
       
      
                                        
           
           
          
      
      
        
       
       
      
      
      
          
                     
           
                       
      
      
      
       
      
         
         
         
       
        
      
      
       
       
       
       
       
          
           
          

      
          
       

 

    

  

    

       

         

      
      
          
      
       
                          

 
    
           
        

         
      
      
           
                         
      
         
      
      
      
           

      
         
       
      
       
           

 

    

  
    
           
        
        
         

       
            
        

    
    
    

      
      
           
         
        
       
                           
            
        
         
      
           
            
       
         
         
        
        
             

table     similar to table    for the miconic and mystery domains 
   

 
    
 

 
 
    
   

    
    
    
    

      
       
       
       
      
           

fiimplicit abstraction heuristics

hf
task h

nodes

hi
time

nodes

hfi

ms    

ms    

nodes

time

nodes

nodes

time

    
    
    
    
    
    
    
    
    
    
            
            

    
    
    
    
    
     
     

  
  
  
  
  
      
      

    
  
    
  
    
  
    
  
    
  
           
           

    
    
    
    
    
    
    

    
    
    
    

 
    
     

time

time

hspf

nodes

blind
time

hmax
nodes
time

nodes

time

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                    
                    

    
    
    
    
    
    
    

    
    
    
    
    
      
      

    
    
    
    
    
     
     

    
    
    
    

  
   
    
      

    
    
    
    

openstacks ipc 
  
  
  
  
  
  
  

  
  
  
  
  
  
  

    
    
    
    
    
      
      

    
    
    
    
    
    
    
    
    
    
           
           

pathways ipc 
  
  
  
  

 
  
  
  

    
    
     
      

    
    
    
    

    
    
     
     

    
    
    
    

    
    
     
     

    
    
    

      
        
           
           

    
   
     
     

    
    
    
    
          
            

pipesworld notankage ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
  
 
  
 
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  

   
    
   
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
          
          
    
    
    
    
    
    
    
     
          
          
    
                                          
      
      
     

                               
                                 
                             

                                          
              
     
          
          
    
                                          
             

      
      
        
       
      
      
        
       
       
       
         
        
         
       
         
         
            
             
                      
                         
           
              
            
             
             
          
         
                         
             

 
    
        
  
    
   
    
         
   
    
   
    
         
   
    
   
               
    
    
                    
    
    
                     
    
    
                    
    
    
                      
     
    
                                     
             
               
                                      
                                       
                        
     
    
             

      

    

             

             

    
    
             
             

pipesworld tankage ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
  
    
   
    
   
    
      
      
  
   
    
    
    
   
    
        
       
 
     
          
          
    
         
       
         
           
                 
          
        
 
    
          
    
    
    
         
       
  
     
          
          
    
          
        
                                          
  
           
                                             
                         
  
            
                 
             
  
              
                
           
                                                           

 
    
        
   
    
         
                    
                      
                    
                     
                        

  
    
   
    
    
    
           
    
    
     
    
             

             

             

             
             

             
             

rovers ipc 
  
  
  
  
  
  
  

  
   
    
   
 
  
    
  
  
   
    
   
 
  
    
  
                      
                        
  
       

    
   
    
    
  
    
    
   
    
    
  
    
                 
                   
     

       
       
  
    
         
   
    
      
      
  
    
        
   
    
       
       
   
    
         
   
    
      
      
  
    
        
   
    
                                                                  
                                         
              
             

    
  
    
    
   
    
    
   
    
          
    
                
                   

       
       
       
       
       
       
         
       
                       
                          

satellite ipc 
  
  
  
  
  
  

 
  
  
  
  
    
  
    
         
          

    
  
    
   
    
   
          
           
            

  
    
  
   
    
    
    
          
     
           
             

    
    
    
    

  
   
    
      

    
    
    
    

               

table     similar to table    for the openstacks  pathways  pipesworldnotankage  pipesworld tankage  rovers  and satellite domains 

   

fikatz   domshlak

hf
task h

nodes

hi
time

nodes

hfi
time

nodes

time

ms    

ms    

nodes

nodes

time

time

hspf

nodes

blind
time

hmax
nodes time

nodes

time

    
 
    
  
    
  
    
  
    
  
    
  
    
  
    
   
    
  
    
   
    
 
    
  
    
  
    
   
    
 
    
   
    
 
    
  
    
  
    
    
    
  
    
   
    
  
    
   
    
  
    
  
    
  
    
  
    
         
    
    
    
    
    
    
  
    
  
    
  
    
   
    
    
    
    
    
  
    
  
    
  
    
  
    
     
           
    
  
    
   
    
  
    
  
     
         
    
    
  
    
   
    
   
    
   
    
  
    
  
    
    
           
    
   
    
    
    
          
     
    
   
    
   
    
   
    
    
    
   
    
   
    
    
           
                           
    
   
    
    
    
  
    
   
    
   
    
    
     
                   
    
  
    
  
    
    
    
    
    
   
    
   
    
   
    
    
    
   
    
   
    
     
    
     
    
   
    
    
                   
                    
    
   
    
   

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

      
       
       
        
       
      
       
       
       
        
        
        
       
       
        
         
       
       
         
       
       
           
        
       
        
        
        
       
           
         
          
        
         
        
          
            
         
        
         
           
       
         
        
         
        
          
         
              

    

   

psr small ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
       
       
       
  
       
       
       
  
       
       
       
  
       
       
       
  
       
       
       
 
       
       
       
  
       
       
       
 
       
       
       
 
       
       
       
 
        
        
        
  
        
        
        
  
        
        
        
  
       
       
       
 
       
       
       
  
         
        
        
  
         
         
         
 
       
       
       
  
       
       
       
  
         
         
         
  
       
       
       
  
       
       
       
  
                                   
  
       
       
       
  
       
       
       
 
        
        
        
  
        
        
        
  
        
        
        
  
       
       
       
  
                                   
  
         
         
         
  
          
         
         
  
        
        
        
  
         
         
         
  
        
        
        
  
          
          
          
  
                                     
  
         
         
         
  
        
        
        
  
         
         
         
  
                                    
  
       
       
       
  
         
         
         
  
        
        
        
  
         
         
         
  
        
        
        
  
          
          
          
  
         
         
         
                                             
  
  
        
        
        

      
 
       
  
       
  
       
  
       
  
      
 
       
  
      
 
      
 
      
 
       
  
       
  
       
  
       
  
       
  
        
  
       
  
       
  
         
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
       
  
         
   
       
  
        
  
       
  
                
          
    
       
  
       
  
       
  
          
    
       
  
         
  
       
  
       
  
       
  
                
       
  
           
    
                    
       
  

    

tpp ipc 
  
  
  
  
  
  

 
 
  
  
  
  

      
      
      
      
       
      
       
       
       
       
       
       
        
         
         
                                         

      
      
       
       
       
            

      
      
       
       
       
           

 
 
  
  
   

    
    
    
    
    

 
  
   
   
     

    
    
    
    
    

      
       
       
        
          
             

trucks ipc 
  
  
  
  
  
  
  
  
  

  
         
         
         
       
       
  
         
         
         
         
       
  
          
          
          
                       
                                                                       
                                                            
  
                                                                     
  
                           
  

   
    
         
        
    
    
          
        
    
                
         
    
                              
           
             
             
                                      
           
             
             

zenotravel ipc 
  
  
  
  
  
  
  
  
  
  
  

 
 
 
 
  
  
  
  
  
  
  

      
      
      
       
       
       
       
       
       
       
       
       
        
        
        
         
         
        
         
         
         
         
         
         
                                         
                                         
            
          
           

      
      
      
      
      
      
      
      
       
       
       
       
       
       
          
        
                          
                          
                         

 
    
 
    
  
    
   
    
   
    
          
           
            

 
  
    
    
     
      
      

    
    
    
    
    
    
    

      
       
        
        
          
          
           
            

table     similar to table    for the psr  tpp  trucks  and zenotravel domains 
   

fiimplicit abstraction heuristics

hf
task

h

hi

hfi

nodes timenodes time nodes

ms    
time nodes

ms    

timenodes

hspf

time nodes

blind
hmax
time nodes time nodes
time

schedule strips
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

 
      
      
      
 
      
      
      
 
      
      
      
 
       
       
       
 
                
        
 
      
      
      
 
      
      
      
 
      
      
      
 
      
      
      
 
      
      
      
 
                
        
 
      
      
      
 
       
       
       
 
       
       
       
 
      
       
      
 
                
       
 
       
       
       
 
       
       
       
 
                 
        
 
      
       
       
 
                  
        
                                  
 
                 
       
 
                 
        
 
                 
        
 
                  
        
 
                            
 
                
        
 
                 
        
 
                            
 
                 
        
 
                             
             
            
                                  
 
                  
        
 
                  
        
 
                               
 
                            
 
                             
 
                             
 
                            
            
           
            
           
 
         
          
            
           
 
         
           

        
        
        
       
 
 
 
 
 

      
      
      
      
      

        
        
        
        
        
        
        
        
 
 
 
 
 

      
      
      
      
      

        

 
 
 
 
 
 
 
 
 
 

      
      
      
      
      
      
      
      
      
      

       
 
    
      
 
    
      
 
    
        
  
    
        
   
    
      
 
    
      
 
    
       
 
    
      
 
    
       
 
    
               
    
       
  
    
              
    
         
   
    
        
        
  
    
                     
                    
                     
                     
         
   
    
                        
           
                      
                       
                       
             
             
                      
                        
                     
                        

             

table     similar to table    for the  non ipc  schedule strips domain 

   

fikatz   domshlak

hf
task

h

nodes

hi

hfi

hspf

blind

time

nodes

time

nodes

time

nodes

time

nodes

time

    
    
    
     
     
      
    
    
     
     
     
      
    
      
      
      
      
      

     
    
      
      
       
       
     
     
      
       
       

    
    
     
     
      
       
    
     
     
      
      

    
    
      
      
       
       
     
     
      
      
       

    
    
     
     
      
      
    
     
     
      
      

     
    
      
      

     
     
      
      

     
     
      
       
       

    
    
     
     
      

     
     

      
      

      
      
       
       

    
    
     
      

     
      
        

    
      
       

     
      
       

     
      
       

      

      

      
       

    
     

       

       

  
   
   
    
    
   
     
     
    
    
     
     
      
      
      
      
      
     
      
      
      

    
    
    
    
    
    
     
     
     
     
      
     
      
      
       
      
      
      
       
       
      

   
   
    
    
     
    
      
      
      
     
      
      
       
       
        
       
       
      

    
    
    
    
    
    
    
    
    
    
    
    
     
     
      
     
      
     

       

     

  
  
   
   
    
     
  
   
    
      
 
  
   
    
     
      

    
    
    
     
     
      
    
    
     
      
    
    
    
    
      
      

  
    
    
        

    
    
    
      

  
    
       

    
    
     

  
    
      

    
    
    

     
     
     
        
        
        
  
  
  
        
        
        

    
    
    
      
      
      
    
    
    
      
     
     

elevators strips ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

    
    
     
     
      
      
     
     
      
      
      
       
     
      
       
       
       
      

openstacks strips ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

   
   
    
    
     
    
      
      
      
     
      
      
       
       
        
       
       
       

    
    
    
    
    
    
    
    
    
    
     
     
      
     
      
      
      
     

   
   
    
    
     
    
      
      
      
     
      
      
       
       
        
       
       
       

    
    
    
    
    
    
    
    
    
    
    
    
     
     
      
      
      
     

   
   
    
    
     
    
      
      
      
     
      
      
       
       
        
       
       
       

    
    
    
    
    
    
    
    
    
    
     
     
      
     
      
      
      
     

       

      

       

     

       

      

    
    
    
     
      
      
    
    
    
      
    
    
    
    

  
   
   
     
      
       
  
    
      

    
    
    
    
     
      
    
    
    

  
   
   
     
      
       
  
    
     

    
    
    
    
      
      
    
    
    

  
   
     
      

    
    
    
     

  
   
    
      

    
    
    
     

    
    
    
      
      
      
    
    
    
      
      
      

     
     
     

    
    
    

     
     
     

    
    
    

     
     
     

     
     
     

  
  
  

    
    
    

  
  
  

    
    
    

 
 
 

    
    
    

parcprinter strips ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

      
      
      
      
       
       
      
      
      
       
      
      
      
      
       
       

  
   
   
      
       
       
  
    
     
       
  
   
    
     

scanalyzer strips ipc 
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  

     
     
     
       
       
        
  
  
  
       
       
        

table     runtimes of cost optimal heuristic search planners on the elevators 
openstacks strips     parcprinter  and scanalyzer domains  the description of the planners is given in section    here the fork decomposition heuristics are via structural pattern databases  column task denotes problem instance 
column h denotes optimal solution length  other columns capture the run time
and number of expanded nodes 

   

fiimplicit abstraction heuristics

hf
task

h

hi

nodes

hfi

hspf

blind

time

nodes

time

nodes

time

nodes

time

nodes

time

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    
     
     
     
    
     
      
     
      
      

  
  
   
   
   
   
   
     
    
     
     
     
     
     
     
     
      
     
      
      
      
     
      
       
      
       
       

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    
     
     
     
      
     

  
  
   
   
   
   
   
     
    
     
     
     
     
     
     
     
      
     
      
      
      
     
      
       
      
       
       

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    
     
     
     
    
      
      
      
      
      

 
  
  
  
  
   
  
    
   
    
    
     
     
     
     
    
      
     
     
     
      
     
      
      
      
       
      

    
    
    
    
    
     
     
     
     
     
     
     
     
     
     
     
      
     
     
     
     
     
      
      
      
       
      

  
  
   
   
   
    
   
     
    
     
     
     
     
     
     
     
      
     
      
      
      
     
       
       
      
       
       

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
     

   
   
   
      
  
   
     
       
     
     
      
      
      
     
       
      
     
       
       
   
      
       
       
        

    
    
    
    
    
    
    
      
    
    
     
     
    
    
      
     
    
      
      
    
     
      
      
       

   
   
   
     
      
   
     
       
     
     
      
     
      
    
       
      
     
      
       
   
      
       
       
       
        
        

    
    
    
    
    
    
    
     
    
    
    
    
    
    
     
    
    
    
     
    
     
     
     
     
      
      

   
   
   
     
    
   
     
       
     
     
      
     
      
    
       
      
     
      
       
   
     
       
       
       
        
        
       

    
    
    
    
    
    
    
     
    
    
     
    
     
    
      
     
    
    
      
    
     
      
      
      
       
      
       

    
   
   
      

    
    
    
      

    
     

    
      

      
      
      

      
      
      

       
      

      
      

      
      

      
      

    
    
    
      
       
     
      
        
      
      
      
       
       
      
        
      
      
       
        
   

    
    
    
    
     
    
    
     
    
    
    
     
     
    
      
    
    
     
      
    

       

      
  
   
      
       
   
    
      
  
    
     
      

    
    
     
      
    
    
     
    
    
     
      

  
   
      
       
   
     
      
  
    
     
      

    
    
     
      
    
    
     
    
    
     
      

  
    
      

    
    
      

   
     
      
  
    
      

    
     
      
    
    
     

  
    
      
       
   
     
      
   
    
      
       

    
    
    
     
    
    
    
    
    
    
     

   
   
     
  
     
      
  
    
    

    
    
      
    
     
      
    
    
    

    
     

    
    

    
       

    
     

   
      
      

    
    
     

pegsol strips ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 

  
  
   
   
   
    
   
     
    
     
     
     
     
     
     
     
      
     
      
      
      
     
       
       
      
       
       

sokoban strips ipc 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
 
  
  
 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
 
  
  
  
  
  
  
  
  

transport strips ipc 
  
  
  
  
  
  
  
  
  
  
  

  
   
   
   
   
   
   
   
   
   
   

  
    
      
       
   
     
      
  
    
      
       

    
    
     
      
    
    
     
    
    
    
     

woodworking strips ipc 
  
  
  
  
  
  
  
  
  

   
   
   
   
   
   
  
   
   

    
    

    
    

    
    

    
    

    
    

    
    

   
      
       
  
     
     

    
     
      
    
    
    

   
      
       
  
     
      

    
     
      
    
    
    

   
      
       
  
     
     

    
     
       
    
    
     

table     similar to table    for the pegsol  sokoban  transport  and woodworking domains 
   

fikatz   domshlak

references
backstrom  c     nebel  b          complexity results for sas  planning  computational
intelligence                 
bonet  b     geffner  h          planning as heuristic search  artificial intelligence        
        
bylander  t          the computational complexity of propositional strips planning 
artificial intelligence                   
chen  h     gimenez  o          causal graphs and structurally restricted planning  in proceedings of the   th international conference on automated planning and scheduling
 icaps   pp        sydney  australia 
clarke  e   grumberg  o     peled  d          model checking  mit press 
coles  a  i   fox  m   long  d     smith  a  j          additive disjunctive heuristics for
optimal planning  in proceedings of the   th international conference on automated
planning and scheduling  icaps   pp       
culberson  j     schaeffer  j          pattern databases  computational intelligence         
       
domshlak  c     dinitz  y          multi agent off line coordination  structure and complexity  in proceedings of sixth european conference on planning  ecp   pp         
domshlak  c   hoffmann  j     sabharwal  a          friends or foes  on planning as
satisfiability and abstract cnf encodings  journal of artificial intelligence research 
           
domshlak  c   katz  m     lefler  s          when abstractions met landmarks  in proceedings of the   th international conference on automated planning and scheduling
 icaps   pp        toronto  canada 
drager  k   finkbeiner  b     podelski  a          directed model checking with distancepreserving abstractions  in valmari  a   ed    proceedings of the   th international
spin workshop on model checking software  vol       of lecture notes in computer
science  pp        berlin heidelberg  springer verlag 
edelkamp  s          planning with pattern databases  in proceedings of the european
conference on planning  ecp   pp       
edelkamp  s          symbolic pattern databases in heuristic search planning  in proceedings of the international conference on ai planning and scheduling  aips   pp 
       
edelkamp  s          automated creation of pattern database search heuristics  in proceedings of the  th workshop on model checking and artificial intelligence  mochart  
edelkamp  s     kissmann  p          optimal symbolic planning with action costs and
preferences  in proceedings of the   st international joint conference on artificial
intelligence  ijcai   pp            pasadena  ca  us 
felner  a   korf  r  e     hanan  s          additive pattern database heuristics  journal
of artificial intelligence research             
   

fiimplicit abstraction heuristics

haslum  p          additive and reversed relaxed reachability heuristics revisited  in proceedings of the  th international planning competition 
haslum  p   bonet  b     geffner  h          new admissible heuristics for domainindependent planning  in proceedings of the twentieth national conference on artificial intelligence  aaai   pp           
haslum  p   botea  a   helmert  m   bonet  b     koenig  s          domain independent
construction of pattern database heuristics for cost optimal planning  in proceedings
of the   th national conference on artificial intelligence  aaai   pp           
haslum  p     geffner  h          admissible heuristics for optimal planning  in proceedings of the fifth international conference on artificial intelligence planning systems
 icaps   pp         
helmert  m          complexity results for standard benchmark domains in planning 
artificial intelligence                  
helmert  m          a planning heuristic based on causal graph analysis  in proceedings of
the   th international conference on automated planning and scheduling  icaps  
pp          whistler  canada 
helmert  m          the fast downward planning system  journal of artificial intelligence
research             
helmert  m     domshlak  c          landmarks  critical paths and abstractions  whats
the difference anyway   in proceedings of the   th international conference on automated planning and scheduling  icaps   pp          thessaloniki  greece 
helmert  m   haslum  p     hoffmann  j          flexible abstraction heuristics for optimal
sequential planning  in proceedings of the   th international conference on automated
planning and scheduling  icaps   pp          providence  ri  usa 
helmert  m     mattmuller  r          accuracy of admissible heuristic functions in selected planning domains  in proceedings of the   rd aaai conference on artificial
intelligence  pp          chicago  usa 
helmert  m          understanding planning tasks  domain complexity and heuristic
decomposition  vol       of lecture notes in computer science  springer 
hernadvolgyi  i     holte  r          psvn  a vector representation for production systems 
tech  rep           university of ottawa 
jonsson  a          the role of macros in tractable planning over causal graphs  in proceedings of the international joint conference on artificial intelligence  ijcai     
pp           
jonsson  p     backstrom  c          state variable planning under structural restrictions 
algorithms and complexity  artificial intelligence                   
karpas  e     domshlak  c          cost optimal planning with landmarks  in proceedings
of the international joint conference on artificial intelligence  ijcai      pp      
      pasadena  ca  usa 
   

fikatz   domshlak

katz  m     domshlak  c       a   structural patterns heuristics  in icaps    workshop on heuristics for domain independent planning  progress  ideas  limitations 
challenges  providence  ri  usa 
katz  m     domshlak  c       b   structural patterns of tractable sequentially optimal
planning  in proceedings of the   th international conference on automated planning
and scheduling  icaps   pp          providence  ri  usa 
katz  m     domshlak  c          structural patterns heuristics via fork decomposition  in
proceedings of the   th international conference on automated planning and scheduling  icaps   pp          sydney  australia 
katz  m     domshlak  c          structural pattern databases  in proceedings of the
  th international conference on automated planning and scheduling  icaps   pp 
        thessaloniki  greece 
katz  m     domshlak  c          optimal admissible composition of abstraction heuristics 
artificial intelligence              
pearl  j          heuristics   intelligent search strategies for computer problem solving 
addison wesley 
prieditis  a          machine discovery of effective admissible heuristics  machine learning 
           
richter  s   helmert  m     westphal  m          landmarks revisited  in proceedings of
the twenty third national conference on artificial intelligence  aaai   pp         
chicago  il  usa 
yang  f   culberson  j     holte  r          a general additive search abstraction  tech 
rep  tr       university of alberta 
yang  f   culberson  j   holte  r   zahavi  u     felner  a          a general theory
of additive state space abstractions  journal of artificial intelligence research     
       

   

fi