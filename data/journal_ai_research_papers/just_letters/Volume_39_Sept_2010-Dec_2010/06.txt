journal of artificial intelligence research                  

submitted       published      

an effective algorithm for and phase transitions of the
directed hamiltonian cycle problem
gerold jager

gej informatik uni kiel de

computer science institute 
christian albrechts university of kiel 
d       kiel  germany

weixiong zhang

weixiong zhang wustl edu

department of computer science and engineering 
washington university 
st  louis  missouri        united states

abstract
the hamiltonian cycle problem  hcp  is an important combinatorial problem with
applications in many areas  it is among the first problems used for studying intrinsic properties  including phase transitions  of combinatorial problems  while thorough theoretical
and experimental analyses have been made on the hcp in undirected graphs  a limited
amount of work has been done for the hcp in directed graphs  dhcp   the main contribution of this work is an effective algorithm for the dhcp  our algorithm explores and
exploits the close relationship between the dhcp and the assignment problem  ap  and
utilizes a technique based on boolean satisfiability  sat   by combining effective algorithms for the ap and sat  our algorithm significantly outperforms previous exact dhcp
algorithms  including an algorithm based on the award winning concorde tsp algorithm 
the second result of the current study is an experimental analysis of phase transitions of
the dhcp  verifying and refining a known phase transition of the dhcp 

   introduction
an undirected graph g    v  e  is hamiltonian if it contains a hamiltonian cycle  hc   a
cycle that visits each vertex exactly once  given a graph  the hamiltonian cycle problem
 hcp  is to find a hc or to prove that no hc exists in the graph  the decision version of the
hcp is among the first problems that were proven to be n p complete  karp         hcp is
a well known problem with many applications in different areas  e g   the hamiltonian cycle
game in game theory  stojakovic   szabo         the problem of finding a knights tour on
a chessboard in artificial intelligence  henderson   apodaca         and the dna physical
mapping in biology  grebinski   kucherov         much research has been done on the
hcp in undirected graphs  for reviews  see the work of bondy         christofides        
chvatal         gould         vandegriend         and gutin and moscato         in
particular  many algorithms have been developed for the hcp  angluin   valiant       
bollobas  fenner   frieze        frieze      a  posa        vandegriend         as reviewed
in the stony brook algorithm repository  skiena         one effective algorithm for the
hcp is based on the related traveling salesman problem  tsp  in an undirected weighted
graph  which is the problem of finding a hc with minimum total weight 
c
    
ai access foundation  all rights reserved 

fijager   zhang

the hcp is also a canonical problem for understanding intrinsic properties of combinatorial problems  one such problem property is the so called phase transition  consider an
undirected graph gn m with m edges randomly chosen from all possible n n       edges
over n vertices  it is expected that when keeping the size n  i e   the number of vertices  a
constant while increasing the number of edges m  the probability that a random graph gn m
is hamiltonian increases from   to    surprisingly  the probability of being hamiltonian for
gn m exhibits a sharp  dramatic transition from   to    and the transition occurs approximately when m   dc  n   log n   log log n   c  bollobas        cheeseman  kanefsky  
taylor        komlos   szemeredi         furthermore  it was experimentally shown that
when the constant c is between      and       the probability that gn m is hamiltonian is
     vandegriend   culberson         phase transitions in the hcp have also been studied
under other different control parameters  for example  the so called general constrainedness
parameter  frank  gent   walsh         the phase transition result of the hcp has motivated a substantial amount of research on phase transitions of other combinatorial problems 
particularly the tsp  zhang   korf        and boolean satisfiability  monasson  zecchina 
kirkpatrick   selman        
in this study we consider the hcp in directed graphs  which we call directed hcp 
or dhcp for short  in addition to the known applications of the hcp mentioned above 
an interesting application of the dhcp is that dhcp heuristics can be used to solve the
bottleneck tsp  kabadi   punnen         in contrast to the extensive amount of work
on the hcp for undirected graphs  the research on the dhcp is rather limited  angluin
  valiant        bang jensen   gutin        kelly         the first exact algorithm for
the dhcp was developed by martello         this algorithm outputs a fixed number h
of hcs or reports that it cannot find h hcs in a given directed graph  by setting h     
this gives rise to an algorithm for the dhcp  in recent years  algorithms based on sat
encoding have been introduced to this problem  e g   the absolute encoding  hoos       
and the relative encoding  prestwich        see also velev   gao         furthermore  a
probabilistic heuristic for dhcp of complexity o n      was proposed  frieze      b   it
can be shown that for the random class gn m the probability  that for a given instance a
hc is found by this algorithm and therefore exists  changes from   to    when n grows to
infinity and m   n log n cn  where c is a constant  for the dhcp  a phase transition result
similar to that of the hcp has been obtained as well  namely the phase transition occurs
at m   dc  n   log n   log log n c  mcdiarmid         where the constant c was expected to
be close to   
note that the research on the tsp has also alluded to a dhcp algorithm  using the
technique of   point reduction  the asymmetric tsp  atsp   where the distance from city i
to city j may not be necessarily equal to that from j to i  can be converted to the symmetric
tsp  with the number of vertices being doubled  jonker   volgenant         using this
transformation  we can determine whether a directed graph is hamiltonian by solving the
symmetric tsp using the renowned concorde algorithm  applegate  bixby  chavatal  
cook               concorde has solved many large benchmark instances  cook        
including a tsp instance with         cities  applegate et al          which up to date is
the largest solved practical tsp instance 
the main contribution of this paper is an effective exact algorithm for the dhcp  in our
algorithm  we utilize methods for two well known combinatorial problems  i e   the assign   

fialgorithm for directed hamiltonian cyce problem

ment problem  ap  and boolean satisfiability  sat   we therefore denote our algorithm by
ap sat  using random graphs and many real world instances  we experimentally compare
the ap sat algorithm with the dhcp algorithm of martello         the tsp based approach that takes advantage of the tsp solver concorde  applegate et al              
and the above mentioned sat encodings for the dhcp  hoos        prestwich         the
results show that the ap sat algorithm significantly outperforms these algorithms 
the second contribution is an experimental study and refinement of the known phase
transition result on the existence of a hc in a random directed graph  mcdiarmid        
as similarly done for the hcp  vandegriend   culberson        

   the algorithm
consider a directed unweighted graph g    v  e  with nodes v and edges e  for our
purpose of solving the dhcp  we consider the problem of determining whether or not
there exists a collection of cycles  which may not be necessarily complete cycles  visiting
each vertex exactly once  we call this problem directed assignment problem or dap for
short  our algorithm explores and exploits the intrinsic relationship between the dhcp
and the dap  more precisely  the ap sat algorithm searches for a hc in the space of dap
solutions  it first solves the dap  if the dap solution forms a hc  or no dap solution
exists  the algorithm terminates  if the dap solver returns a solution that is not a hc  the
algorithm then tries to patch the subcycles in the solution into a hc using the well known
karp steele patching method  karp   steele         if no hc is found either  these dap
and patching steps are iterated  with the only difference that another dap solution might
be found  for most cases that we considered in this study  the algorithm can find a hc or
determine that no solution exists after these two steps  if the algorithm fails to solve the
problem after these iterative steps  it then attempts to enumerate the dap solutions by
formulating the dap as a boolean satisfiability problem and repeatedly solving the problem
using a sat solver and adding constraints to eliminate the dap solutions that have been
encountered  we discuss the details of these steps in the rest of the section 
    solving the assignment problem
given n vertices and a matrix c    cij   i jn  rn n of the costs between pairs of
vertices  the nassignment problemo ap  is to find a vertex permutation   such that
pn
    arg min
i   ci  i      n   where n is the set of all permutations of             n  
note that an ap solution can be viewed as a collection of cycles visiting each vertex exactly
once 
many algorithms have been developed for the ap  bertsekas        goldberg   kennedy 
      jonker   volgenant          for an experimental comparison of ap algorithms see
dellamico   toth         the most efficient one is the hungarian algorithm  which is based
on konig egervarys theorem and has a complexity of o n     in the ap sat algorithm we
use the implementation of the hungarian algorithm by jonker and volgenant              
   

fijager   zhang

for an unweighted directed graph g    v  e   dap can be solved by applying an ap
algorithm to the ap instance defined by the matrix c    cij   i jn with

cij


   
  
 

  

if  i  j   e  i    j
if  i  j  
  e  i  
  j
if i   j

where we map the costs of arcs in g to   and the costs of the remaining arcs to    if the
ap algorithm returns a solution with cost    there is a dap solution in g  since every arc
taken in the ap solution is an arc in g  on the other hand  if it returns a solution of cost
greater than    there is no dap solution in g because at least one arc in the solution does
not belong to g 
the first step of the ap sat algorithm is this dap algorithm  then a hc of g  if one
exists  is a solution to the dap  we have to distinguish three cases at the end of the first
step 
 if the cost of the ap solution is greater than    g does not have a hc  and the dhcp
instance is solved with no solution 
 if the ap solution has cost   and the solution consists of one cycle  we have found a
hc  and the dhcp instance is also solved 
 if the ap solution has cost   and the ap solution has more than one cycle  we cannot
determine  based on the ap solution  whether or not g is hamiltonian  we then
continue to the next steps of the ap sat algorithm 
    karp steele patching
if the dap solution does not provide a definitive answer to the problem  i e   the case where
the ap solution cost is   and the ap solution contains more than one cycle  we continue to
search for a hc in g  we first patch the subcycles in an attempt to form a hc  and we use
karp steele patching  ksp  for this purpose  which is an effective atsp heuristic  glover 
gutin  yeo   zverovich        goldengorin  jager   molitor        karp   steele        
the operation of patching two cycles c  and c  in an ap solution is defined as follows 
two fixed arcs  v    w     c  and  v    w     c  are first deleted and two arcs  v    w    and
 v    w    joining the two cycles are added  the cost of patching c  and c  using  v    w   
and  v    w    is equal to
 c    c      c v    w      c v    w      c v    w      c v    w    
i e    c    c    is the difference between the total cost of the inserted arcs and the total cost
of the deleted arcs  in each step we choose to patch the two cycles that have the largest
number of vertices  for these two cycles  the two arcs are chosen in such a way that the
patching cost is the minimum among all possible arc pairs  if we have k    cycles  we
repeat this patching step k    times to form one cycle at the end  we apply ksp to the
ap instance defined in section      if the patching procedure provides a hc  the ap sat
algorithm can be terminated  otherwise  we continue to the next step 
   

fialgorithm for directed hamiltonian cyce problem

    solving variant aps
dap may have multiple solutions  and some of the dap solutions may be hcs  we can
increase the chance of finding a hc if we apply the ap step multiple times  since the
computational cost of the ap and the ksp algorithms is low  the key is to avoid finding
the same dap solution again  to accomplish this  we slightly alter some of the arc costs of
the corresponding ap instance so as to find the other dap solutions  enhanced by the ksp if
needed  to increase the possibility of finding a hc  in other words  we add a perturbation
component to create multiple variant ap instances to boost the overall chance of finding a
hc  note that in the worst case when the dhcp instance contains no hc  this procedure
will not be productive 
the main idea to create a variant ap instance is to reduce the chance that the subcycles
in the current ap solution can be chosen in the subsequent rounds of solving the aps  this
is done by perturbing the costs of some of the arcs in g as follows  for each arc in the
current dap solution we increase its cost by one  to create an ap instance different from
that in section      we generalize the ap instance as follows  let ci j be the cost of the arc
 i  j   e  and let
m

   n  max  ci j    i  j   e     

i e   m is greater than n times the largest cost of an arc in g  we then set the costs of the
edges not in e to m   the ap instance of section     is a special case of this ap instance 
where the costs ci j for all arcs  i  j   e are    it is critical to notice that all dap solutions 
including a hc  must have costs less than m   as before  if the solution contains a hc 
the algorithm terminates  otherwise  the subcycles are patched using the ksp to possibly
find a hc  we repeat this step multiple times so that an arc  which has appeared in many
previous dap solutions  will be very unlikely to appear in the next dap solution  and an
arc  which has never occurred in any previous dap solution  will be more likely to appear
in the next dap solution 
let r be the maximal number of ap ksp calls  i e   the number of variant ap instances
solved  we observed in our experiments that r   n  see step   of the pseudo code of the
appendix  is a good choice  this will be discussed in detail in section     
    implicitly enumerating all dap solutions using sat
all the ap and patching based steps discussed above may still miss a solution to a dhcp
instance  we now consider how to implicitly enumerate all dap solutions for finding a
solution to the dhcp  if it exists  the idea is to systematically rule out all the dap
solutions that have been discovered so far during the search  to this end  we first formulate
a dap as a boolean satisfiability  sat  problem  dechter        and forbid a dap solution
by adding new constraints to the sat model  this elementary technique of adding new
constraints with the purpose of enumerating all sat solutions can also be applied to a
general sat problem  e g   see jin  han   somenzi         notice that this cannot be
easily done under the ap framework because such constraints cannot be properly added to
the ap  moreover  we can take advantage of the research effort that has been devoted to
sat  in particular  we can use an effective sat solver called minisat  een   sorensson 
            
   

fijager   zhang

in the conjunctive normal form  cnf   a sat instance over a set of boolean variables
is a conjunction of clauses  each of which is a disjunction of literals which are boolean
variables or their negations  a clause is satisfied if one of its literals is true  and the
instance is satisfied if all its clauses are satisfied  the sat problem is to find a truth
assignment of the variables to satisfy all clauses if they are satisfiable  or to determine no
such assignment exists  sat was the first problem shown to be n p complete  cook       
garey   johnson        karp        
we now formulate the dap in sat  a solution to a dap must obey the following
restrictions 
 for each vertex i  i              n  exactly one arc  i  j   i    j  exists in the dap solution 
 for each vertex i  i              n  exactly one arc  j  i   j    i  exists in the dap solution 
we first introduce an integer decision variable xi j to the arc  i  j   e where xi j     holds
if and only if the arc  i  j  appears in the dap solution  we represent the above constraints
in the following integer linear program  ilp  
  pn
xi j     for i              n
pj    i j e
   
n
i    i j e xi j     for j              n
where xi j         for  i  j   e  we thus have a total of  n constraints  note that we only
have to use m variables  one variable for each arc in the graph  which can be substantially
smaller than n  variables for sparse graphs  we represent the integer linear program    
by a sat model similar to the work of lynce and marques silva         where we replace
integer variables xi j with boolean variables yi j   to enforce the  n restrictions in the sat
formulation  we need to introduce constraints in clauses  one restriction in     means that
exactly one of the up to n involved boolean variables for a vertex can be set to true and
the rest must be false  to represent this  we introduce at most  n  auxiliary variables
z    z            z n    with up to n zs for one restriction  without loss of generality  consider the
first restriction  which has z    z            zn associated  we use zk to represent that at least one
of y      y              y  k is true  precisely  the z variables are defined as follows 
 z    y    or equivalently  y     z      y     z    
 zk   y  k  zk  or equivalently  zk  y  k     zk  zk      zk  y  k  zk    for
k                 n 
in addition  we need to enforce that only one y  i for i                 n can be true  this
means that if y  k is true  none of the y  i for i   k can be true  this can be formulated
as
 zk   y  k for k                 n 
finally  zn must be true  the other restrictions in     are represented similarly 
the sat based representation allows us to exclude a non hamiltonian dap solution
previously found in the search  this can be done by introducing new clauses to explicitly
   

fialgorithm for directed hamiltonian cyce problem

forbidding all subcycles of this solution  let such a subcycle be  v    v            vk   v     then
we add the clause
yv   v          yvk   vk  yvk  v 
to the current sat instance  as a result  the updated sat instance is not satisfiable 
meaning that the corresponding dhcp instance does not contain a hc  or gives rise to a
new dap solution  as it does not allow the previous dap solution 
in summary  after the ap  and patching related steps failed to find a solution  the apsat algorithm transforms the problem instance into a sat instance  then it collects all
previous dap solutions  each of which includes at least two subcycles  and excludes these
subcycles for each of the dap solutions by adding new clauses as described above  then
the resulting sat model is solved  if the sat model is not satisfiable  then the dhcp
algorithm terminates with the result of the problem instance being not hamiltonian  if the
sat model is satisfiable and the solution has only one cycle  the algorithm stops with a hc 
if the sat model is satisfiable  but the solution has more than one subcycle  new clauses
are introduced to the sat model to rule out this solution  and the algorithm repeats to
solve the revised formula  since there is a finite number of dap solutions  the algorithm
terminates  in the worst case if the dap solutions contain no hc  the sat part of the
algorithm will enumerate all these dap solutions  for an overview  we outline the main
steps of the ap sat algorithm in a pseudo code in the appendix 
    some general remarks
before we present our experimental results  we like to comment on the method we proposed
to help appreciate its features 
   the ap sat algorithm consists of three main components  namely the ap step  the
ksp step and the sat step  it might be interesting to know which of these components is the most important one  for this  we have to distinguish between completeness
and efficacy of the algorithm  the only necessary step for the completeness is the sat
step of section      this step without all previous steps leads also to a correct dhcp
algorithm  on the other hand  the ap sat algorithm is more effective if the ap and
the ksp steps are called often and the sat step is not called or called only a few
times  for example  if for an instance no dap solution exists or an existing hc is
found by the previous steps  the sat part will not be invoked at all  indeed  our
experiments showed that the sat step is not invoked for most of the test instances 
regarding the relative time needed by the ap and the ksp steps  we have to consider the density of problem instances  for an instance with a small number of arcs 
in most cases there is not only no hc solution  but also no dap solution  in this
case the algorithm terminates after the first ap step and does not need to make any
ksp call  on the other hand  an instance with a large number of arcs should require
many ap steps  as many dap solutions may exist which are not hcs  and thus a hc
solution may have to be found by ksp  this expected behavior could be validated by
experiments  the time for the ksp steps is smaller for instances with a small number
of arcs  but is larger for instances with a large number of arcs  see figure    
   

fijager   zhang

   the ap sat algorithm is also able to solve hcp as a special case of dhcp  but it
is less effective for this case  the reason is that for a symmetric case  an arc and its
reverse arc are often present in a dap solution  resulting in many small cycles of two
vertices in the solution  thus in general we have to enumerate a large number of dap
solutions  in the worst case when no hc exists  all these dap solutions have to be
enumerated  giving rise to a long running time 
   we can easily revise the ap sat algorithm to identify all hcs in a directed graph 
finding all solutions can be desirable for many applications  e g   the problem of finding all knights tour on a chessboard  henderson   apodaca        kyek  parberry  
wegener         for algorithms for this problem  see the already mentioned algorithm
of martello        and the algorithm of frieze and suen         the revision works as
follows  if no hc exists  the algorithm remains the same  consider now the case that
at least one hc exists  if the first hc has been found  the original ap sat algorithm
terminates in this case  the revised algorithm at this stage saves the first hc  and
then continues to search for the next hc  in the pseudo code of the appendix  we
only need to replace stop with by save in rows        and     note that
for the revised algorithm  the sat part is always invoked if at least one hc exists 
furthermore  like the original ap sat algorithm  this revised algorithm works also
for the symmetric case  but is less effective 
   the ap sat algorithm used a restart scheme  i e   it repeatedly solved a series of ap
instances  which were derived by modifying costs of the arcs appeared in the previous
ap solution  although the restart scheme and the random restart scheme  which was
developed for constraint problems in artificial intelligence  gomes  selman   kautz 
       follow the same design principle of trying to avoid to encounter the same
solutions again in subsequent runs  these two schemes are fundamentally different  as
its name indicated  the random restart scheme depends on random choices made for
variable and value selections in the process of search for a variable assignment for a
constraint problem  in contrast  our restart scheme is not random  the arcs in the
current ap solution will receive higher costs so that the subcycles in the current ap
solution will less likely be chosen again  in other words  the restart scheme we used
is somewhat deterministic and depends on solution structures of the problem 
   the method we used to exclude the subcycles in the solution to the current dap instance from the subsequent sat solving process follows in principle the popular idea
of adding no good constraints to a constraint satisfaction problem  frost   dechter 
      richards   richards        zhang  madigan  moskewicz   malik         specifically  these subcycles are forbidden by introducing additional constraints 

   experimental results
we have implemented the ap sat algorithm  the dhcp algorithm of martello        
the dhcp algorithms based on the absolute sat encoding  hoos        and the relative
sat encoding  prestwich        in c   and compared them to an algorithm based on
the award winning concorde tsp program  applegate et al                for the al   

fialgorithm for directed hamiltonian cyce problem

gorithm of martello we have implemented a version which terminates whenever a hc  if
one exists  is found  for the sat based algorithms we used the ap solver of jonker and
volgenant              and the minisat sat solver of een and sorensson              
to apply concorde  a dhcp instance was first transformed to an asymmetric tsp instance by the transformation in section     and then to a symmetric tsp instance by the
  point reduction method  jonker   volgenant         in our implementation  the   point
reduction works as follows for a graph g    v  e  with v    v    v            vn   
   make a copy of the vertices v    v            vn   and create the vertex set v       v     v    
        vn    
   define a new complete graph g  on the vertex set v  v   with  symmetric  cost
function c    v  v              by

   for    i   j  n
  for    i    j  n   vi   vj    e
c   vi   vj      

  for    i    j  n   vi   vj   
 e
c   vi   vj        for    i    j  n
c   vi    vj         for    i    j  n
then a directed hc exists on g if and only if a tsp tour of cost n exists on g    note that
 in contrast to the general version of the   point reduction  no value of  is required
here  we also tried the   point reduction method  which is in principle similar to the   point
reduction  but uses two  instead of one  copies of the vertex set and uses only cost values
from         for the details of the   point reduction  see the work of karp         our
experimental results  which are not included here  showed that the   point reduction runs
slower on average than the   point reduction  therefore  in the rest of the comparison  we
only consider the   point reduction 
after the   point reduction  concorde started with the worst possible solution value
as the initial upper bound and was terminated as soon as its lower bound indicates a hc
is impossible 
in addition to this comparison  we also experimentally analyzed the ap sat algorithm
including its asymptotic behavior  and applied it to study phase transitions of the dhcp 
all our experiments were carried out on a pc with an athlon     mp cpu with   gb of
memory 
    comparison of dhcp algorithms
in our experiments we first tested random asymmetric instances gn m and parameters
n                            and m   dcn log n log log n c with c                                
for each n and each c we generated    random instances and measured the cpu time for
these instances  furthermore  we tested real world and random instances from the dimacs
challenge  johnson et al               and non random instances  reinelt              
whereas tsplib contains    single asymmetric tsp instances with sizes from    to     
the dimacs challenge contains    asymmetric problem generators called amat  coin  crane 
disk  rect  rtilt  shop  stilt  super  and tmat  using each of these generators we generated   
   

fijager   zhang

instances     with     vertices     with     vertices    with      vertices  and   with     
vertices  leading to     instances  for each of the    problem generators    instances  overall 
to transform asymmetric tsp instances back to dhcp instances  it seems to be reasonable
to only keep the arcs of small weights while ignoring the ones with large weights  in other
words  to generate a dhcp instance we chose the m smallest arcs in the corresponding
asymmetric tsp instance  it is interesting to note that the most difficult problem instances
for most problems in tsplib and dimacs appear when the degree parameter c is around
   which is the value we used in our experiments  in contrast  the most difficult instances
of random graphs occur when the degree parameter c is      see section      
to investigate the variation of running time  we present one subfigure for each problem
class  i e   for the   random classes with sizes                           and for the   
dimacs classes amat  coin  crane  disk  rect  rtilt  shop  stilt  super  and tmat  the y axis
gives the average times plus their     confidence intervals  where all values are in seconds 
for the random classes the x axis describes the degree parameter c  and for the dimacs
classes it describes the size n  the results for the random instances are summarized in
figure   and for the dimacs instances in figures       as the tsplib class consists only
of    single instances with completely different sizes  structures and difficulties  we present
these results in table    if an experiment of a single algorithm on a single instance required
at least   hour or did not terminate due to a high memory requirement  we set the cpu
times as      seconds 

figures      and table   show that the two sat encodings are not competitive with
ap sat  concorde or the martello algorithm  furthermore  ap sat and concorde are
more stable than the martello algorithm  concorde failed to solve    dimacs instances
   coin    crane    rect    stilt    super types  within the maximal allowed time of   hour 
whereas the ap sat algorithm failed only on   instances  among these   instances on
which ap sat failed    are stilt types  and the remaining instance  super      could be
solved if we increased the maximal allowed time from   hour to   hours  see table     the
martello algorithm was unable to solve the instances with     or larger size because of its
high memory requirement  for the other instances  it failed on   random instance of size
    with degree parameter      on    dimacs instances     coin     crane     disk     rect 
  stilt types   and   tsplib instances  see table     nevertheless  the martello algorithm
outperformed concorde on smaller and easier instances  indicating that the former has
a worse asymptotic running time  overall  we observed that the ap sat algorithm is
clearly superior to the four other algorithms  among the      instances       random
instances      dimacs instances and    tsplib instances  tested  only on    instances 
one of the other four algorithms is faster than ap sat  these problem instances include  
random instances  namely   of size     with degree parameter        of size     with degree
parameters                respectively    dimacs instances  namely coin        rect      
stilt       stilt       stilt       stilt       stilt       stilt       and the tsplib instance
br    see table    
   

fialgorithm for directed hamiltonian cyce problem

figure    comparison of all algorithms on random instances 
size    
apsat
concorde
martello
abs  encoding
rel  encoding
      
     
   
  
 
   

apsat
concorde
martello

      

average running time

average running time

size    

     
   
  
 
   
    

    
     

     
      

      

                                                           

                                                           

degree parameter c

degree parameter c

size    

size    
apsat
concorde
martello

   
  
 
   
    

apsat
concorde

      

average running time

     

     
   
  
 
   
    

     

     

      

      

                                                           

                                                           

degree parameter c

degree parameter c
size     
apsat
concorde

      

average running time

average running time

      

     
   
  
 
   
    
     
      

                                                           

degree parameter c

   

fijager   zhang

figure    comparison of all algorithms on dimacs instances  part   
coin instances
apsat
concorde
martello
abs  encoding
rel  encoding
      
     
   
  
 
   

average running time

average running time

amat instances

apsat
concorde
martello
abs  encoding
rel  encoding
      
     
   
  
 
   

    

    

     

     

      

   

   

    

      

    

   

   

size

      
     
   
  
 
   

apsat
concorde
martello
abs  encoding
rel  encoding
      
     
   
  
 
   

    

    

     

     
   

   

    

      

    

   

   

size

     
   
  
 
   

average running time

average running time

      

apsat
concorde
martello
abs  encoding
rel  encoding
      
     
   
  
 
   

    

    

     

     
   

    

rtilt instances
apsat
concorde
martello
abs  encoding
rel  encoding

   

    

size

rect instances

      

    

disk instances
apsat
concorde
martello
abs  encoding
rel  encoding

average running time

average running time

crane instances

      

    

size

    

      

    

size

   

   

    

size

   

    

fialgorithm for directed hamiltonian cyce problem

figure    comparison of all algorithms on dimacs instances  part   
stilt instances
apsat
concorde
martello
abs  encoding
rel  encoding
      
     
   
  
 
   

average running time

average running time

shop instances

apsat
concorde
martello
abs  encoding
rel  encoding
      
     
   
  
 
   

    

    

     

     

      

   

   

    

      

    

   

   

size

      
     
   
  
 
   

apsat
concorde
martello
abs  encoding
rel  encoding
      
     
   
  
 
   

    

    

     

     
   

   

    

tmat instances
apsat
concorde
martello
abs  encoding
rel  encoding

average running time

average running time

super instances

      

    

size

    

      

    

size

   

   

    

size

   

    

fijager   zhang

table    comparison of all algorithms on tsplib instances 
instance  size 

ap sat

concorde

br       
ftv       
ftv       
ftv       
p       
ftv       
ftv       
ry  p     
ft       
ftv       
ftv       
ft       
ftv       
kro   p      
ftv         
ftv         
ftv         
ftv         
ftv         
ftv         
ftv         
ftv         
rbg         
rbg         
rbg         
rbg         

    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
    
    
    
    
    
    
     
    
    

running time for algorithm
martello absolute encoding
     
 
 
 
 
 
 
    
 
    
 
 
 
    
    
    
    
    
    
    
    
    
    
    
    
    

   

    
    
    
    
     
    
    
     
     
     
      
     
       
       
       
    
    
    
      
       
    
    
    
    
    
    

relative encoding
    
 
 
    
    
    
    
     
    
      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
     

fialgorithm for directed hamiltonian cyce problem

    analysis of ap sat
the efficacy of the ap sat algorithm may be due to the following reasons  instances
with no hc are most likely to have no dap solution either  and therefore the algorithm
terminates after the first ap call  on the other hand  instances with a hc are likely to
have multiple hcs  one of which can be found quickly by the ap or ksp steps  the only
difficult case is when there are many dap solutions  but none or a very few of them are
hcs  in this case the ap and ksp steps may fail  and the sat part will be invoked to find
a hc or to disprove the existence of a hc 
in the following we will analyze the instances where ap sat fails or requires much
time  and analyze the number r of computing variant ap instances  which we had set to
the size of the instance n  see the end of section       therefore we investigated the three
procedures in ap sat  namely ap  ksp and sat  we observed that the sat part was
invoked only on    out of all      instances tested  we considered these    and other two
instances  stilt     and super       on which ap sat did not terminate in   hour  to be
hard  to further analyze these    hard instances we increased the maximal allowed time
from   hour to   hours  in table   we present the running times of ap  ksp and sat  and
the number of calls to the three procedures  where the numbers of ap and ksp calls are
given in the same column  as these two numbers are equal or different by only one  see the
pseudo code in the appendix   furthermore  we add two additional pieces of information 
whether an instance has a hc or whether this is unknown  and whether ap sat terminated
on the instance in   hours  in table    memory means that this part terminated due to
a high memory requirement  note that the solution status of the instance stilt       no
hc  was known  since concorde  in contrast to ap sat  was able to solve it 
table   shows that the running time of ap ksp contributed to the majority of the
total running time of ap sat only on   out of the    hard instances  i e   coin       and
rect       and the two instances stilt     and super     on which sat is not invoked at
all  on   instances  ap sat did not terminate  on   out of these   instances  i e   stilt      stilt       stilt       stilt        and stilt        the sat part did not terminate in a
reasonable amount of time or the algorithm stopped due to a high memory requirement of
sat 
in order to determine r  we re ran all instances in table   with three different values of
r  i e   r      r   n    and r    n  the results  not presented  showed that when ap sat
was unable to terminate with r   n  i e   on the   instances stilt       stilt       stilt      
stilt        stilt        and stilt       it also failed to stop with other values of r  for all
remaining    instances  increasing r   n to r    n did not reduce the running times  this
is reasonable for the two instances coin       and rect      with a large ap ksp time 
as they have no hc  on the other hand  these two instances are the only ones on which
ap sat ran faster by using smaller values of r  namely coin       by using r   n   and
rect      by using r     
we thus conclude that r should not be increased  but rather be decreased  as it is hard
to estimate the memory requirements and the time of the sat part  one alternative for
difficult instances would be to start ap sat with a smaller parameter r and then to stop
the sat part after some time or after one unsuccessful call  after that the complete apsat algorithm can be restarted with a larger r  for most instances  however  the choice of
   

fijager   zhang

table    comparison of the performance of ap  ksp  and sat procedures in the ap sat
algorithm on    hard instances 
instance
br  
coin      
rect     
rect     
stilt     
stilt     
stilt     
stilt     
stilt     
stilt     
stilt     
stilt     
stilt      
stilt      
stilt    
super    

running time
ap
ksp
sat
 
 
   
      
     
    
    
    
    
    
    
    
    
 
    
   
    
     
    
    
    
    
    
    
    
    
    
     
             
     
    
memory
     
    
memory
                       
                       
        
      
 
        
      
 

number of calls
ak ksp sat
  
   
    
 
   
 
   
 
   
 
   
  
   
 
   
 
   
 
   
 
   
 
   
 
    
 
    
 
   
 
    
 

hc

termin 

no
no
no
no
no
yes
no
no
no
no
unknown
unknown
unknown
unknown
unknown
yes

yes
yes
yes
yes
yes
yes
yes
yes
yes
no
no
no
no
no
no
yes

figure    comparison of the performance of ap and ksp procedures in ap sat on random
instances of size      
ap
ksp

 

average running time

   
 
   
 
   
 
   
 
   
 
   
 
                                                           

degree parameter c

r is not relevant  more difficult problem instances are required to perform a comprehensive
analysis of r 
finally  in figure   we compare the times used by ap and ksp on random instances of
size      with degree parameter c                                
we observe that ap is more time consuming than ksp  with a smaller c this effect is
more obvious because most instances can be solved with a result of no hc after the first
ap call  and thus the ksp does not need to be invoked at all 
   

fialgorithm for directed hamiltonian cyce problem

    phase transitions of the dhcp
for random undirected graphs gn m   where m arcs are randomly chosen from all possible
n n       arcs over n vertices in the graph  komlos and szemeredi        proved a phase
transition of c  dn   log n   log log n   c with c     for the hcp  vandegriend and culberson        experimentally verified the theoretical result  where the constant c is between     
and       for the dhcp  where m arcs are randomly chosen from all possible n n     arcs 
mcdiarmid proved a phase transition of m   cdn log n log log n c with c             our
experiments were aimed to verify this result and determine the multiplicative constant c  as
a directed graph may contain twice as many arcs as the undirected counterpart  we would
expect the number of arcs to be doubled as well at the phase transition point  therefore
we tested m   dc  n   log n   log log n c with c                                                      
                                                where we expected the phase transition to occur
at c      we considered problem instances with n                                        
vertices and chose      independently generated random graphs for each n and for each c 
the phase transition result is shown in table   and figure    where the first parameter
is c and the second parameter the percentage of hamiltonian graphs among all graphs
considered  we observe a phase transition of the dhcp similar to that of the hcp  in
particular  it is evident from figure   that the phase transition becomes sharper  i e   there
is a crossover among the phase transition curves  when the problem size increases  which
is characteristic for phase transitions in complex systems  this crossover occurs around
the degree parameter c        which is substantially different from the expected value
of    in short  our observations verified the existence of a phase transition of the dhcp 
and the phase transition occurs at dc  n   log n   log log n c with approximately c       
furthermore  for the same constant c        the probability that gn m is hamiltonian
is      as a comparison  for undirected graphs  a constant between      and      was
found  vandegriend   culberson        

    asymptotic behavior of ap sat
an interesting characteristic of an algorithm is its asymptotic behavior  to quantify this
behavior for the ap sat algorithm  we revisited the experiments of section      i e   the
experiments that verified the phase transitions of the dhcp  as described earlier  we considered random problem instances with n                                         vertices
and chose      independently generated random graphs for each n and for each c  to
measure the worst case asymptotic behavior of ap sat  we only measured the cpu times
of the algorithm on the most difficult instances  i e   the instances with degree parameter
c        see section       the results can be found in figure    where the x axis is the
problem size and the y axis the average time required  since both  x  and y axis are in
logarithmic scale and the log log curve in figure   is nearly linear  the average running
time of ap sat can be considered to be polynomial on the number n of vertices in the
graph  this is reasonable  as for random instances the sat part was not called at all  see
section       and the ap and ksp combined has a complexity not worse than o n    
   

fijager   zhang

table    phase transition of random instances 
c
   
   
   
   
    
    
    
    
    
    
    
    
    
   
    
    
    
    
    
    
    
    
    
 
    
    
    
    
    
    
    
    
    
   
    
    
    
    
    
    
    
    
    
   
   
   
   
   
   
   
   
 

   
 
 
   
    
    
    
    
    
    
    
    
  
    
  
    
    
    
    
    
    
    
    
    
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
   

   
 
 
 
    
    
    
    
    
    
    
    
    
    
  
    
    
    
    
    
    
  
    
    
  
    
    
    
    
    
    
    
    
    
    
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
   

   
 
 
   
    
    
    
  
    
    
    
    
    
    
    
    
    
    
    
    
  
    
    
    
    
    
    
  
    
    
  
    
    
    
    
    
    
    
    
    
    
    
    
  
    
    
  
    
    
   
    
    
   

size
    
 
 
   
    
    
    
    
    
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
    
    
   
   

    
 
 
   
    
    
  
  
    
    
    
  
    
    
    
    
    
    
    
    
    
    
    
  
    
    
    
  
    
    
    
    
    
    
    
  
    
  
    
    
    
    
    
    
    
    
    
    
    
    
   
   
   

    
 
 
   
    
    
  
    
  
    
    
    
    
    
    
    
    
    
    
    
    
  
    
  
    
    
    
    
    
    
    
  
    
    
  
    
    
    
    
    
    
    
    
    
    
    
    
    
   
    
   
   
   

    
 
 
   
    
    
    
    
    
  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
    
    
    
    
    
    
    
  
    
    
    
  
    
    
    
    
    
    
    
    
    
    
   
   
    
   
   
   

fialgorithm for directed hamiltonian cyce problem

figure    phase transition of random instances 
   
size    
size    
size    
size     
size     
size     
size     

existence of hcs in  

  

  

  

  

 
   

   

   

 

   

   

degree parameter c

   

   

   

 

fijager   zhang

figure    asymptotic behavior of the ap sat algorithm 
      
apsat

average running time

     
   
  
 
   
    
     
      

   

   

   

    

    

    

    

size

   summary
the hamiltonian cycle problem  hcp  is an important  canonical combinatorial problem 
surprisingly  for the hcp in directed graphs  which we called directed hcp or dhcp  no
effective exact algorithm has been developed  our main result of this work is a novel and
effective exact algorithm for the dhcp  our algorithm utilizes an existing algorithm for
the assignment problem and an existing method for boolean satisfiability  sat   our work
includes a new sat formulation of the hcp and the ap  which can be potentially extended
to other problems such as the tsp  our experimental results on random and real problem
instances showed that our new algorithm is superior to four known algorithms including
one algorithm that takes advantage of the award winning concorde tsp algorithm  furthermore  the first phase transition result on combinatorial problems was done on the hcp
and later was extended to the dhcp  in this paper we experimentally verified the existence
of a phase transition of the dhcp and refined the location where such a phase transition
appears using our new exact dhcp algorithm 

acknowledgments
we thank david s  johnson at at t labs   research and gregory gutin at royal holloway
university of london for many discussions related to this work and their insightful comments
on our manuscript  this research was supported in part by nsf grants iis         and
dbi         to weixiong zhang 

   

fialgorithm for directed hamiltonian cyce problem

appendix a  pseudo code of ap sat algorithm
input directed non complete graph g    v  e  with  v     n 
  define matrix c as in section      m      
  define subcycle collection set w     
  for s              n
 
solve ap on instance matrix c with solution value g  ap solution
 v    vi      v    vi             vn    vin      vn   vin    number of cycles k 
 
if g  m
 
then stop with no hc 
 
else if k    
 
then stop with hc being the ap solution 
 
apply ksp to the cycles  and receive solution value h and complete
cycle  w    w            wn   w    
  
if h    
  
then stop with hc  w    w            wn   w    
  
for t              n
  
cvt  vit   cvt  vit    
  
m   n  max  ci j    i  j   e      
  
ci j   m for all  i  j  
  e 
  
add each subcycle of ap solution to w  
   start with the sat model explained in section     
   for each subcycle  v    v            vk    vk   v    of w add the clause
yv   v          yvk   vk  yvk  v  to the sat model 
   solve the sat model 
   if variable setting exists for the model 
  
then add all k subcycles of the solution of the sat model to w  
  
if k    
  
then stop with hc being the only
subcycle 
  
goto    
  
else stop with no hc 
output hc of g  or proof that no hc exists in g 

references
angluin  d    valiant  l g          fast probabilistic algorithms for hamiltonian circuits
and matchings  j  comput  system  sci                 
   

fijager   zhang

applegate  d l   bixby  r e   chvatal  v    cook  w j          concorde code 
http   www tsp gatech edu concorde html
applegate  d l   bixby  r e   chvatal  v    cook  w j          the traveling salesman
problem  a computational study  princeton university press 
applegate  d l   bixby  r e   chvatal  v   cook  w j   espinoza  d   goycoolea  m 
  helsgaun  k          certification of an optimal tour through        cities 
oper  res  lett               
bang jensen  j    gutin  g          chapter   in  digraphs  theory  algorithms and applications  springer  london  free available 
http   www cs rhul ac uk books dbook 
bertsekas  d p          a new algorithm for the assignment problem  math  program     
        
bollobas  b          random graphs  academic press  london 
bollobas  b   fenner  t i    frieze  a m          an algorithm for finding hamiltonian
paths and cycles in random graphs  combinatorica               
bondy  j a          basic graph theory  paths and circuits  in graham  r l   grotschel 
m   lovasz  l   eds    handbook of combinatorics i          north holland  amsterdam 
cheeseman  p   kanefsky  b    taylor  w m          where the really hard problems
are  in mylopoulos  j   reiter  r   eds    proc    th international conference on
joint artificial intelligence  ijcai            morgan kaufmann 
christofides  n          graph theory  an algorithmic approach  academic press  new
york 
chvatal  v          hamiltonian cycles  chapter    in lawler  e l   lenstra  j k   rinnooy
kan  a h g   shmoys  d b   eds    the traveling salesman problem  a guided tour
of combinatorial optimization  john wiley   sons  chichester 
cook  s a          the complexity of theorem proving procedures  proc   rd ann  acm
symp  on theory of computing  stoc           
cook  w j          tsp homepage 
http   www tsp gatech edu 
dechter  r          constraint processing  morgan kaufmann 
dellamico  m    toth  p          algorithms and codes for dense assignment problems 
the state of the art  discrete appl  math                  
een  n    sorensson  n          an extensible sat solver  in giunchiglia  e   tacchella  a 
 eds    proc   th international conference on theory and applications of satisfiability
testing  sat   lecture notes in comput  sci                
een  n    sorensson  n          minisat code 
http   minisat se
   

fialgorithm for directed hamiltonian cyce problem

frank  j   gent  i    walsh  t          asymptotic and finite size parameters for phase
transitions  hamiltonian circuit as a case study  inform  process  lett                
frieze  a m       a   finding hamiltonian cycles in sparse random graphs  j  combin  theory ser  b             
frieze  a m       b   an algorithm for finding hamilton cycles in random directed
graphs  j  algorithms            
frieze  a m    suen  s          counting hamilton cycles in random directed graphs 
random structures algorithms            
frost  d    dechter  r          dead end driven learning  proc    th national conference
on artificial intelligence  aaai            aaai press 
johnson  d s           th dimacs implementation challenge  the traveling salesman problem 
http   www research att com  dsj chtsp 
garey  m r    johnson  d s          computers and intractability  a guide to the theory
of n p completeness  freeman  new york 
glover  f   gutin  g   yeo  a    zverovich  a          construction heuristics for the
asymmetric tsp  european j  oper  res               
goldberg  a v    kennedy  r          an efficient cost scaling algorithm for the assignment problem  math  program              
goldengorin  b   jager  g    molitor  p          tolerance based contract or patch heuristic for the asymmetric tsp  in erlebach  t   ed    proc   rd workshop on combinatorial and algorithmic aspects of networking  caan   lecture notes in comput  sci              
gomes  c p   selman  b    kautz  h          boosting combinatorial search through
randomization  proc    th national conference on artificial intelligence  aaai  
         aaai press 
gould  r j          updating the hamiltonian problem  a survey  j  graph theory       
        
grebinski  v    kucherov  g          reconstructing a hamiltonian circuit by querying
the graph  application to dna physical mapping  ir    r      centre de recherche
en informatique de nancy 
gutin  g    moscato  p          hamiltonian page 
http   alife ccp   ac uk memetic  moscato hamilton html
henderson  r    apodaca  e          a knight of egodeth  zen raptured quietude  booksurge publishing 
hoos  h h          sat encodings  search space structure  and local search performance 
proc    th international joint conference on artificial intelligence  ijcai           
morgan kaufmann 
   

fijager   zhang

jin  h   han  h    somenzi  f          efficient conflict analysis for finding all satisfying
assignments of a boolean circuit  in halbwachs  n   zuck  l d   eds    proc    th
international conference on tools and algorithms for the construction and analysis
of systems  tacas   lecture notes in comput  sci                
johnson  d s   gutin  g  mcgeoch  l a   yeo  a   zhang  w    zverovich  a         
experimental analysis of heuristics for the atsp  chapter    in  gutin  g   punnen 
a p   eds    the traveling salesman problem and its variations  kluwer 
jonker  r    volgenant  a          transforming asymmetric into symmetric traveling
salesman problems  oper  res  lett                
jonker  r    volgenant  a          a shortest augmenting path algorithm for dense and
sparse linear assignment problems  computing             
jonker  r    volgenant  a          ap code 
http   www magiclogic com assignment html
kabadi  s n    punnen  a p          the bottleneck tsp  chapter    in  gutin  g   punnen  a p   eds    the traveling salesman problem and its variations  kluwer 
karp  r m          reducibility among combinatorial problems  in miller  r e   thatcher 
j w   eds    complexity of computer computations          new york  plenum 
karp  r m    steele  j m          probabilistic analysis of heuristics  chapter   in  lawler 
e l   lenstra  j k   rinnooy kan  a h g   shmoys  d b   eds    the traveling salesman problem  a guided tour of combinatorial optimization  john wiley   sons 
chicester 
kelly  l          hamilton cycles in directed graphs  phd thesis  university of birmingham  united kingdom 
komlos  m    szemeredi  e          limit distribution for the existence of a hamiltonian
cycle in a random graph  discrete math            
kyek  o   parberry  i    wegener  i          bounds on the number of knights tours 
discrete appl  math                 
lynce  i    marques silva  j          efficient haplotype inference with boolean satisfiability  proc    st national conference on artificial intelligence  aaai   aaai press 
martello  s          an enumerative algorithm for finding hamiltonian circuits in a directed graph  acm trans  math  software               
mcdiarmid  c j h          cluster percolation and random graphs  math  program  stud            
monasson  r   zecchina  r   kirkpatrick  s   selman  b    troyansky  l          determining computational complexity from characteristic phase transitions  nature     
    
prestwich  s          sat problems with chains of dependent variables  discrete
appl  math                  
posa  l          hamiltonian circuits in random graphs  discrete math              
   

fialgorithm for directed hamiltonian cyce problem

reinelt  g          tsplib  a traveling salesman problem library  orsa j  comput    
        
reinelt  g          tsplib library 
http   www iwr uni heidelberg de groups comopt software tsplib   
richards  e t    richards  b          non systematic search and no good learning 
j  automat  reason                 
skiena  s          stony brook algorithm repository 
http   www cs sunysb edu  algorith files hamiltonian cycle shtml
stojakovic  m    szabo  t          positional games on random graphs  random structures algorithms                  
vandegriend  b          finding hamiltonian cycles  algorithms  graphs and performance 
master thesis  university of alberta  canada 
vandegriend  b    culberson  j          the gn m phase transition is not hard for the
hamiltonian cycle problem  j  artificial intelligence res             
velev  m n    gao  p          efficient sat techniques for absolute encoding of permutation problems  application to hamiltonian cycles  proc   th symposium on abstraction  reformulation and approximation  sara           
zhang  w    korf  r e          a study of complexity transitions on the asymmetric
traveling salesman problem  artificial intelligence            
zhang  l   madigan  c f   moskewicz  m h    malik  s          efficient conflict driven
learning in a boolean satisfiability solver  proc  ieee acm international conference on computer aided design  iccad           

   

fi