journal artificial intelligence research                 

submitted        published      

lama planner 
guiding cost based anytime planning landmarks
silvia richter

silvia richter nicta com au

iiis  griffith university  australia
nicta qrl  australia

matthias westphal

westpham informatik uni freiburg de

albert ludwigs universitat freiburg
institut fur informatik
freiburg  germany

abstract
lama classical planning system based heuristic forward search  core feature
use pseudo heuristic derived landmarks  propositional formulas must true
every solution planning task  lama builds fast downward planning system  using
finite domain rather binary state variables multi heuristic search  latter employed
combine landmark heuristic variant well known heuristic  heuristics
cost sensitive  focusing high quality solutions case actions non uniform cost 
weighted search used iteratively decreasing weights  planner continues
search plans better quality search terminated 
lama showed best performance among planners sequential satisficing track
international planning competition       paper present system detail investigate features lama crucial performance  present individual results
domains used competition  demonstrating good bad cases techniques
implemented lama  overall  find using landmarks improves performance  whereas
incorporation action costs heuristic estimators proves beneficial  show
domains search ignores cost solves far problems  raising question
deal action costs effectively future  iterated weighted search greatly
improves results  shows synergy effects use landmarks 

   introduction
last decade  heuristic search become dominant approach domain independent satisficing planning  starting additive heuristic bonet geffner         implemented
hsp planning system  much research conducted search heuristic estimators
efficient calculate yet powerful guiding search towards goal state  planning system hoffmann nebel         using heuristic estimator based relaxed planning
graphs  broke ground showing best performance among fully automated systems international planning competition       continues state art today  ever since 
heuristic search approaches played prominent role classical sequential satisficing
tracks biennial competition  fast downward  helmert        winning      sgplan  chen  wah    hsu        placing first      
lama planning system youngest member line  winning sequential satisficing track international planning competition  ipc        lama classical planning
c
    
ai access foundation  rights reserved 

firichter   westphal

system based heuristic search  follows footsteps hsp  ff  fast downward
uses earlier work many respects  particular  builds fast downward extending
three major ways 
   landmarks  lama  fast downwards causal graph heuristic replaced variant
heuristic  hoffmann   nebel        heuristic estimates derived landmarks 
landmarks propositional formulas become true point every plan
task hand  porteous  sebastia    hoffmann         lama uses landmarks
direct search towards states many landmarks already achieved  via
preferred operators  landmarks used additional source search control
complements heuristic estimates  recent work  shown use landmarks
addition heuristic improve performance  leading problems
solved shorter solution paths  richter  helmert    westphal        
   action costs  landmark heuristic proposed earlier  richter et al        
heuristic adapted use action costs  however  lama focus purely
cost to go  i  e   estimated cost reaching goal given search node 
danger cost sensitive planner may concentrate much finding cheap plan 
expense finding plan within given time limit  lama weighs estimated
cost to go  as measure plan quality  estimated goal distance  as measure
remaining search effort  combining values two estimates 
   anytime search  lama continues search better solutions exhausted
search space interrupted  finding initial solution greedy best first search 
conducts series weighted searches decreasing weights  restarting search
time initial state improved solution found  recent work 
shown approach efficient planning benchmarks compared anytime
methods  richter  thayer    ruml        
international planning competition       lama outperformed competitors
substantial margin  result expected authors  previous work concerning
lamas putative core feature  landmark heuristic  richter et al          showed some 
tremendous improvement base configuration without landmarks  paper aims
provide reference description lama well extensive evaluation performance
competition 
detailed description lama  present distinguishing components planner
detail  describing landmarks generated used lama  action costs
incorporated heuristic estimators anytime search proceeds  aspects lama presented previous publications  richter et al              
helmert         however  aspects adequately covered publications  particular procedure finding landmarks  described detail 
relevant aspects described previous work  landmark heuristic  summarised
convenience reader  aim paper  together previous ones  form
comprehensive picture lama system 
experimental evaluation lama  building this  conduct experimental evaluation focusing aspects differentiate lama predecessor systems
   

fithe lama planner  guiding cost based anytime planning landmarks

fast downward  repeat comparisons published earlier work  comparison
lamas anytime method anytime algorithms  richter et al         
comparison lamas methods handling landmarks alternative landmark approaches
 richter et al          instead  aim elicit much performance lama
system whole enhanced three distinguishing features described
 landmarks  action costs anytime search   answer question  contrast several
variations planner using various subsets features 
find using cost sensitive heuristics pay ipc      benchmark tasks 
results show cost sensitive variant heuristic used lama performs significantly worse traditional unit cost version heuristic  similarly 
cost sensitive planners competition fared worse baseline planner ignored action costs  demonstrating cost based planning presents considerable challenge 
conduct full analysis reasons this  showcase problems cost sensitive
heuristic example domains provide informed hypotheses encountered effects 
landmarks prove particularly helpful context  unit cost case landmarks
lead moderate increase performance  case planning action costs
substantially improve coverage  the number problems solved   thus effectively mitigating
problems cost sensitive heuristic lama  anytime search significantly improves
quality solutions throughout even acts synergy landmarks one domain 

   preliminaries
use planning formalism state variables finite  rather binary  range  similar
one employed helmert         based sas  planning model  backstrom   nebel 
       extends conditional effects  lama handles axioms way
fast downward  helmert         formalise axioms here  since important
purposes 
definition    planning tasks finite domain representation  fdr tasks 
planning task finite domain representation  fdr task  given   tuple hv  s    s    o  ci
following components 
v finite set state variables  associated finite domain dv  
fact pair hv  di  also written v   d   v v dv   partial variable
assignment set facts  different variable   we use set notation
hv  di function notation s v    interchangeably   state variable
assignment defined variables v 
s  state called initial state 
s  partial variable assignment called goal 
finite set operators  operator hpre  effi consists partial variable assignment
pre called precondition  finite set effects eff  effects triplets hcond  v  di 
cond  possibly empty  partial variable assignment called effect condition  v
affected variable dv called new value v 
   

firichter   westphal

c   n   integer valued non negative action cost function 
operator   hpre  effi applicable state pre s  effects consistent 
i  e   state s  s   v    hcond  v  di eff cond s  s   v    s v 
otherwise  case  say operator applied resulting state s 
write s o  s   
operator sequences   ho            i  write s   s o           on    only defined operator applicable respective state   operator sequence called plan s  s     
p
cost sum action costs operators  ni   c oi   
state variable v planning task finite domain representation associated directed
graph called domain transition graph  captures ways value v may
change  jonsson   backstrom        helmert         vertex set graph dv  
contains arc two nodes d  exists operator change value
v d    formally 
definition    domain transition graph
domain transition graph  dtg  state variable v v fdr task hv  s    s    o  ci
digraph hdv   ai includes arc hd  d  iff   d    operator hpre  effi
hcond  v  d  eff  union conditions pre cond holds either contains v  
contain v   dv  

   system architecture
lama builds fast downward system  helmert         inheriting overall structure
large parts functionality planner  fast downward  lama accepts input
pddl    level   format  fox   long        edelkamp   hoffmann         including adl
conditions effects derived predicates  axioms   furthermore  lama extended
handle action costs introduced ipc       helmert  do    refanidis         fast
downward  lama consists three separate components 
translation module
knowledge compilation module
search module
components implemented separate programs invoked sequence 
following  provide brief description translation knowledge compilation modules 
main changes lama  compared fast downward  implemented search module 
discuss detail 
    translation
translation module  short translator  transforms pddl input planning task finitedomain representation specified definition    main components translator
efficient grounding algorithm instantiating schematic operators axioms  invariant
   

fithe lama planner  guiding cost based anytime planning landmarks

synthesis algorithm determining groups mutually exclusive facts  fact groups consequently replaced single state variable  encoding fact  if any  group satisfied
given world state  details component found recent article helmert        
groups mutually exclusive facts  mutexes  found translation later used
determine orderings landmarks  reason  lama use finite domain
representations offered ipc       object fluents   instead performs translation
binary finite domain variables  mutexes computed translation module
needed new encoding planning task  module extended lama retain
found mutexes later use landmarks 
changes made  compared translation module described helmert 
add capability handling action costs  implement extension concerning parsing
complex operator effect formulas  limit runtime invariant synthesis algorithm 
invariant synthesis may time critical  particular large  grounded  pddl input  limit
maximum number considered mutex candidates algorithm  abort it  necessary 
five minutes  note finding mutexes change way translation module
works  mutexes found  resulting encoding planning task contains simply
 binary domain  state variables pddl input  analysing competition results 
found synthesis algorithm aborted tasks one domain  cyber
security  
    knowledge compilation
using finite domain representation generated translator  knowledge compilation module responsible building number data structures play central role subsequent
landmark generation search  firstly  domain transition graphs  see definition    produced
encode ways state variable may change value operator applications axioms  furthermore  data structures constructed efficiently determining set
applicable operators state evaluating values derived state variables  refer
helmert        detail knowledge compilation component  lama inherits
unchanged fast downward 
    search
search module responsible actual planning  two algorithms heuristic search
implemented lama   a  greedy best first search  aimed finding solution quickly
possible   b  weighted search allows balancing speed solution quality 
algorithms variations standard textbook methods  using open closed lists  greedy
best first search always expands state minimal heuristic value h among open states
never expands state once  order encourage cost efficient plans without incurring
much overhead  breaks ties equally promising states preferring states
reached cheaper operators  i  e   taking account last operator path considered
state search space   the cost entire path could used expense increased
time space requirements  consider this   weighted search  pohl       
associates costs states expands state minimal f    value  f     w h   g 
weight w integer    g best known cost reaching considered state
   

firichter   westphal

initial state  contrast greedy search  weighted search re expands states whenever finds
cheaper paths them 
addition  search algorithms use three types search enhancements inherited fast
downward  helmert        richter   helmert         firstly  multiple heuristics employed
within multi queue approach guide search  secondly  preferred operators similar
helpful actions allow giving precedence operators deemed helpful
others state  thirdly  deferred heuristic evaluation mitigates impact large branching
factors assuming heuristic estimates fairly accurate  following  discuss
techniques resulting algorithms detail give pseudo code greedy best first
search  weighted search similar  point differences two
algorithms along way 
multi queue heuristic search  lama uses two heuristic functions guide search  namegiving landmark heuristic  see section     variant well known heuristic  see section     two heuristics used separate queues  thus exploiting strengths utilised
heuristics orthogonal way  helmert        roger   helmert         end  separate
open lists maintained two heuristics  states always evaluated respect
heuristics  successors added open lists  in case value corresponding heuristic open list   choosing state evaluate expand next 
search algorithm alternates different queues based numerical priorities assigned
queue  priorities discussed later 
deferred heuristic evaluation  use deferred heuristic evaluation means states
heuristically evaluated upon generation  upon expansion  i  e   states generated
greedy best first search  put open list heuristic value 
parent  removed open list evaluated heuristically 
heuristic estimate turn used successors  use deferred evaluation
weighted search analogous  using f   instead h sorting criterion open lists 
many states generated expanded  deferred evaluation leads substantial reduction number heuristic estimates computed  however  deferred evaluation incurs loss
heuristic accuracy  search longer use h values f    values differentiate
successors state  all successors associated parents value open list   preferred
operators helpful context provide alternative way determine promising
successors 
preferred operators  operators deemed particularly useful given state marked
preferred  computed heuristic estimators along heuristic value
state  see sections       use preferred operators  greedy best first search well
weighted search  planner maintains additional preferred operator queue
heuristic  state evaluated expanded  successor states reached via
preferred operator  the preferred states  put preferred operator queues  addition
put regular queues non preferred states   analogously regular states 
state preferred least one heuristic added preferred operator queues  allows
cross fertilisation information exchange different heuristics   states
preferred operator queues evaluated earlier average  form part queues
higher chance selected point time non preferred states  addition 
   

fithe lama planner  guiding cost based anytime planning landmarks

lama  like ipc      version fast downward  gives even higher precedence preferred
successors via following mechanism  planner keeps priority counter queue 
initialised    iteration  next state removed queue highest
priority  whenever state removed queue  priority queue decreased   
priorities changed outside routine  method alternate queues 
thus expanding states preferred queues regular queues equally often  increase use
preferred operators  lama increases priorities preferred operator queues large
number boost value      whenever progress made  i  e   whenever state discovered
better heuristic estimate previously expanded states  subsequently  next      states
removed preferred operator queues  another improving state found within     
states  boosts accumulate and  accordingly  takes longer states regular queues
expanded again 
alternative methods using preferred operators include one employed yahsp
system  vidal         preferred operators always used non preferred ones  contrast  scheme necessarily empty preferred queues switching back regular
queues  planner  hoffmann   nebel         emphasis preferred operators even
stronger yahps  search restricted preferred operators either goal
found restricted search space exhausted  in case new search started without preferred operators   compared approaches  method using preferred operators
lama  conjunction deferred heuristic evaluation  shown result substantial
performance improvement deliver best results classical setting operators unit costs
 richter   helmert         choice      boost value critical here  found
various values           give similarly good results  outside range
performance drop noticeably 
note using action costs  use preferred operators may even helpful
classical setting  example  operators cost    heuristic using pure
cost estimates might assign heuristic value   states state space  giving
guidance search all  preferred operators  however  still provide heuristic guidance
case case unit action costs  extreme example  similar cases
appear practice  e  g  ipc      domain openstacks  operators except one
opening new stack associated cost   
pseudo code  algorithm   shows pseudo code greedy best first search  main loop
 lines       runs either goal found  lines       search space
exhausted  lines        closed list contains seen states keeps track links
states parents  plan efficiently extracted goal state
found  line      iteration loop  search adds current state  initially
start state  closed list processes  lines        unless state processed
before  case ignored  line      contrast  weighted search processes states
whenever reached via path lower cost before  updates parent links
closed list accordingly  search selects next open list used  the one
highest priority  line      decreases priority extracts next state processed  lines
       processing state includes calculating heuristic values preferred operators
heuristics  lines      expanding it  inserting successors appropriate open
   

firichter   westphal

global variables 
  hv  s    s    o  ci
regff   pref   reglm   pref lm
best seen value
priority
  
  
  
  
  
  
  
  
  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

  planning task solve
  regular preferred open lists heuristic
  best heuristic value seen far heuristic
  numerical priority queue

function expand state s 
progress false
h  ff  lm 
h s   preferred ops h  s  heuristic value preferred operators given h
h s    best seen value h 
progress true
best seen value h  h s 
progress
  boost preferred operator queues
priority pref   priority pref         
priority pref lm   priority pref lm         
succesor states   s o    applicable  
s  succesor states
h  ff  lm 
add s  queue regh value h s 
  deferred evaluation
 
reached operator preferred ops h  s 
add s  queue pref value ff s   queue pref lm value lm s 
function greedy bfs lama
closed list
h  ff  lm 
  initialize landmark heuristics
best seen value h 
l  reg  pref  
  regular preferred open lists heuristic
lh
priority lh    
current state s 
loop
current state   closed list
  s 
extract plan tracing current state back initial state closed list
return
closed list closed list  current state 
expand state current state 
queues empty
return failure
  plan exists
q non empty queue highest priority
priority q  priority q   
  get lowest valued state queue q
current state pop state q 
algorithm    greedy best first search search enhancements used lama 
   

fithe lama planner  guiding cost based anytime planning landmarks

lists  lines        determined new best state found  lines       preferredoperator queues boosted       lines       
      restarting anytime search
lama developed international planning competition      tailored conditions competition several ways  detail  conditions follows 
previous competitions coverage  plan quality runtime used varying degrees order
determine effectiveness classical planning system  ipc      introduced new integrated
performance criterion  operator pddl input associated non negative integer
action cost  aim find plan lowest possible total cost within given time limit
   minutes per task  given planner solves task within time limit  new
performance measure depends plan quality  runtime  thus suggests guiding
search towards cheapest goal rather closest goal well using available time
find best plan possible 
guiding search towards cheap goals may achieved two ways  lama
implements  firstly  heuristics estimate cost to go  i  e   cost reaching goal
given state  rather distance to go  i  e   number operators required reach
goal  landmark heuristic heuristic employed lama therefore capable
using action costs  secondly  search algorithm take cost to go given
state account  cost necessary reaching state  case weighted
search used lama  make available time  lama employs anytime
approach  first runs greedy best first search  aimed finding solution quickly possible 
plan found  searches progressively better solutions running series weighted
searches decreasing weight  cost best known solution used pruning
search  decreasing weight time makes search progressively less greedy  trading
speed solution quality 
several anytime algorithms based weighted proposed  hansen   zhou       
likhachev  ferguson  gordon  stentz    thrun         underlying idea continue
weighted search past first solution  possibly adjusting search parameters weight
pruning bound  thus progressively find better solutions  anytime approach used lama
differs existing algorithms continue weighted search
finds solution  instead  start new weighted search  i  e   discard open lists
previous search re start initial state  resulting duplicate effort 
restarts help overcome bad decisions made early  comparatively greedy  search iterations
high weight  richter et al          explained follows  finding goal state
sg   open lists usually contain many states close sg search space 
ancestors sg expanded  furthermore  states likely low heuristic values
proximity sg   hence  search continued  even updating open
lists lower weights   likely expand states around sg considering states
close initial state  critical  means search concentrating
improving end current plan  opposed beginning  bad beginning plan 
however  may severe negative influence quality  may impossible improve
quality plan substantially without changing early operators 
   

firichter   westphal

   
    
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   

g 

   
   



   
   

   
   
   
   
   
   
   
   

g 

 a  initial search  w    

   
   
   
   
   
   

   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   

   
   

x



   
   

x
x
x
x

g 

           
            
           
            
           
            
       
        

   
   
   
   

g 

 b  continued search  w      

   
   
   
   

   
   



   
   

   
   
   
   
   
   

   
   
   
   
   
   
   
   

g 

   
   
   
   
   
   
   
   

g 
 c  restarted search  w      

figure    effect low h bias  grid states generated search  h values shown
f    values   a  initial weighted search finds solution cost     b  continued search
expands many states around previous open list  grey cells   finding another sub optimal solution
cost     c  restarted search quickly finds optimal solution cost   

   

fithe lama planner  guiding cost based anytime planning landmarks

consider example search problem shown figure    task reach goal state
 g  g   start state gridworld  agent move cost  
  neighbours cell blocked  heuristic values inaccurate estimates
straight line goal distances cells  particular  heuristic values underestimate distances
left half grid  conduct weighted search weight   figure  a  assuming
simplicity standard textbook search  i  e   preferred operators deferred evaluation  
heuristic values left happen lower right s  search
expands states left finds goal g  cost    grey cells generated 
expanded search phase  i  e   open list  figure  b  search continues
reduced weight      solution cost   consists turning right going g  
however  search first expand states open list f    value smaller   
expanding substantial number states  second solution finds path starts
left takes long way around obstacle g   cost    instead restart
empty open list first solution  figure  c   fewer states expanded  critical
state right expanded quickly optimal path found 
note example  particular systematic errors heuristic values
leads greedy search astray makes restarts useful  planning  especially using
deferred evaluation  heuristic values may fairly inaccurate  restarts useful 
experimental comparison tasks ipc      ipc       richter et al        
restarting approach performed notably better tested methods  dominating similar algorithms based weighted  hansen  zilberstein    danilchenko        hansen   zhou       
likhachev  gordon    thrun        likhachev et al          well anytime approaches
 zhou   hansen        aine  chakrabarti    kumar        
      using cost distance estimates
heuristic estimators used lama cost sensitive  aiming guide search towards
high quality solutions  focusing planner purely action costs  however  may dangerous 
cheap plans may longer difficult find  worst case could mean
planner fails find plan within given time limit  zero cost operators present particular
challenge  since zero cost operators always added search path free  even costsensitive search algorithm weighted may explore long search paths without getting
closer goal  methods suggested allow trade off putative cost to go
estimated goal distance  gerevini   serina        ruml   do         however  require user specify relative importance cost versus distance up front  choice
obvious context ipc       lama gives equal weight cost distance estimates adding two values computation heuristic functions  for details 
see sections       measure simple one  effect changes depending
magnitude variation action costs problem  smaller action costs are 
method favours short plans cheap plans  example    zero cost operators result estimated cost    whereas   operators cost   result estimated cost    lama would thus
prefer   operators cost     zero cost operators  contrast  action costs
planning task larger length typical plans  cost estimates dominate distance estimates lama completely guided costs  nevertheless simple measure proves
useful ipc      benchmarks  outperforming pure cost search experiments  so   

firichter   westphal


c

b

e

plane

box

truck

figure    simple logistics task  transport box location b location e 

phisticated methods automatically balancing cost distance  for example normalising
action costs given task respect mean median  topic future work 

   landmarks
landmarks subgoals must achieved every plan  first introduced porteous 
sebastia hoffmann        later studied depth authors  hoffmann 
porteous    sebastia         using landmarks guide search solution planning
intuitive approach humans might use  consider well known benchmark domain logistics 
goal deliver objects  e  g  boxes  various locations using fleet vehicles 
cities consist sets locations  trucks may transport boxes within city  whereas planes
used cities  example logistics task shown figure    arguably first
mental step human would perform  trying solve task figure    realise
box must transported two cities  left city  locations ad  right city
 location e   therefore  box transported plane  turn means
box airport location c  loaded plane  partitions
task two subproblems  one transporting box airport location c  one
delivering city  subproblems smaller easier solve
original task 
landmarks capture precisely intermediate conditions used direct search 
facts l    box c l    box plane landmarks task shown figure   
knowledge  well knowledge l  must become true l    automatically
extracted task preprocessing step  hoffmann et al         
lama uses landmarks derive goal distance estimates heuristic search  measures
goal distance state number landmarks still need achieved path
state goal  orderings landmarks used infer landmarks
achieved next  whether certain landmarks achieved once  addition 
preferred operators  helmert        used suggest operators achieve landmarks
need become true next  recently shown  method using landmarks leads
substantially better performance previous use landmarks hoffmann et al  
terms coverage terms plan quality  richter et al          discuss differences
approach detail section      following section define
   

fithe lama planner  guiding cost based anytime planning landmarks


plane 
e

c

b
box

plane 
f

truck 


truck 

figure    extended logistics task  transport box location b location f 
landmarks orderings formally  including useful special cases detected
efficiently 
    definitions
hoffmann et al         define landmarks facts true point every plan
given planning task  introduce disjunctive landmarks  defined sets facts
least one needs true point  subsume landmark definitions
general definition based propositional formulas  believe useful future work
topic landmarks  noted  however  lama currently supports fact
landmarks disjunctions facts  for details  see section       hoffmann et al  show
pspace hard determine whether given fact landmark  whether ordering holds
two landmarks  complexity results carry straight forward way
general case propositional formulas  repeat proofs 
definition    landmark
let   hv  s    s    o  ci planning task finite domain representation  let   ho           
operator sequence applicable s    let i  j             n  
propositional formula facts called fact formula 
fact f true time iff f s   ho            oi i  
fact formula true time iff holds given truth value facts time
i  time      considered true 
fact formula landmark iff plan   true time 
propositional formula facts added time iff true time
  time    it considered added time   true s    
fact formula first added time iff true time   time j   i 
note facts initial state facts goal always landmarks definition 
landmarks discussed earlier example task figure   facts  however 
complex landmarks may required larger tasks  consider extended version
   

firichter   westphal

example  city right two airports  multiple planes trucks 
depicted figure    previous landmark l    box c still landmark
extended example  however  l    box plane corresponding fact landmark
task  since neither box plane  box plane  landmark  disjunction box
plane  box plane    however  landmark  following refer landmarks
facts fact landmarks  disjunctions facts disjunctive landmarks 
use disjunctive landmarks shown improve performance  compared using fact
landmarks  richter et al          complex landmarks introduce additional difficulty
regard detection handling planning  mentioned before  lama currently
uses fact landmarks disjunctive landmarks  rather general propositional formulas 
extension complex types landmarks interesting topic future work   see keyder 
richter helmert        discussion conjunctive landmarks  
various kinds orderings landmarks defined exploited planning
phase  define three types orderings landmarks  equivalent formulations
definitions hoffmann et al         adapted fdr setting 
definition    orderings landmarks
let landmarks fdr planning task  
say natural ordering   written   plan
true time i  true time j   i 
say necessary ordering   written n   plan
added time i  true time   
say greedy necessary ordering   written gn  
plan first added time i  true time   
natural orderings general  every necessary greedy necessary ordering natural 
vice versa  similarly  every necessary ordering greedy necessary  vice versa 
knowing natural ordering necessary greedy necessary allows deducing additional
information plausible temporal relationships landmarks  described later
section  also  landmark heuristic lama uses knowledge deduce whether landmark
needs achieved once  theoretical concept  necessary orderings   always true
step   straightforward appealing greedy necessary orderings  
true step becomes true first time   however  methods find landmarks
conjunction orderings often find many landmarks using general
concept greedy necessary orderings  hoffmann et al          lama follows paradigm
finds greedy necessary  as well natural  orderings  necessary orderings  example
figure    box truck  must true box c box f  first
orderings greedy necessary  necessary  second neither greedy necessary
necessary  natural 
hoffmann et al         propose kinds orderings landmarks usefully exploited  example  reasonable orderings  first introduced context
top level goals  koehler   hoffmann         orderings necessarily hold given
planning task  however  adhering orderings may save effort solving task 
example task  reasonable load box onto truck  driving truck airport
   

fithe lama planner  guiding cost based anytime planning landmarks

c  however  order guaranteed hold every plan  possible  though reasonable  drive truck c first  drive b collect box  return c  idea
landmark must become false order achieve landmark   needed  
reasonable achieve  as otherwise  would achieve twice  
idea may applied iteratively  sometimes able find new  induced reasonable orderings
restrict focus plans obey first set reasonable orderings  hoffmann et al  call
reasonable orderings found second pass obedient reasonable orderings  authors
note conducting two iterations process worthwhile  typically
result notable additional benefit  following definition characterises two types
orderings formally 
definition    reasonable orderings landmarks
let landmarks fdr planning task  
say reasonable ordering   written r   every plan
added time first added time j   j  holds true
time  i              j  true time k j k 
say plan obeys set orderings o  orderings x o  regardless
type  holds first added time true time j i 
say obedient reasonable ordering regard set
orderings o  written
r   every plan obeying added time
first added time j   j  holds true time  i              j 
true time k j k 
definitions equivalent hoffmann et al          except care
plans rather arbitrary operator sequences  allowing us  theoretically  identify
reasonable orderings  practice  use approximation techniques hoffmann et al  
thus generating orderings 
problem reasonable obedient reasonable orderings may cyclic  i  e  
chains orderings r x       r landmarks may exist  hoffmann et al         
case natural orderings  definition implies cannot cyclic
solvable tasks 
addition  definitions given problematic special cases  note definition reasonable ordering r includes case exist   j
added time first added time j  i  e   case holds plans first
added  a   b  time     a  implies reasonable orderings
generalisation natural orderings  might regarded desirable property   b  may lead
undesirable orderings  example  holds r r pairs  
first added time plans  instance true initial state 
similarly  holds r   use definitions despite weaknesses here 
simply note planner create contentious orderings  lama
create reflexive orderings r   r   true initial state created
assumed proven must true strictly point plan  see section
   according personal communication authors  case overlooked hoffmann et al 

   

firichter   westphal

truck 
truck  b

box b

box truck 
truck  c
plane  c plane  c

box c

box plane  box plane 
box f
figure    partial landmark graph example task shown figure    bold arcs represent natural
orderings  dashed arcs represent reasonable orderings 

        re definition reasonable orderings  addressing problems definition hoffmann et al  identifying precisely wanted unwanted cases  topic future work  closely
connected question whether reasonable orderings interpreted strict orderings 
achieved  as definition obedience above   whether allow
achieving simultaneously  use strict sense obedience reasons consistency
previous work hoffmann et al   aligns better intended meaning
reasonable orderings  even though strict interpretation obedience fit contentious
cases discussed above 
landmarks orderings may represented using directed graph called landmark graph 
partial landmark graph extended example depicted figure    following section
    contains extensive description landmarks orderings discovered lama 
readers interested exact details process may skip description  central
rest paper  section     discusses approach finding using landmarks
relates previous work  section   describes landmarks used heuristic estimator
lama 
    extracting landmarks orderings
mentioned before  deciding whether given formula landmark deciding orderings landmarks pspace hard problems  thus  practical methods finding landmarks
incomplete  they may fail find given landmark ordering  unsound  they may falsely declare formula landmark  determine false ordering   several polynomial methods
proposed finding fact landmarks disjunctive landmarks  back chaining
goals task  using criteria based relaxed planning graph  porteous et al         hoffmann et al         porteous   cresswell         forward propagation planning graph
 zhu   givan        
   

fithe lama planner  guiding cost based anytime planning landmarks

algorithm used lama finding landmarks orderings partly based
previous back chaining methods mentioned above  adapting finite domain representation including conditional effects  addition  algorithm exploits finite domain representation using domain transition graphs find landmarks  discuss differences
method previous ones detail section      idea back chaining
start set known landmarks find new fact landmarks disjunctive landmarks
must true plan already known landmark may become true  procedure starts
set goal facts  stops new landmarks found  method
identifies new landmarks orderings considering  given fact landmark disjunctive
landmark true initial state 
shared preconditions possible first achievers  operator preconditions
effect conditions shared effects potentially first achieve   method
adapted previous work  see section      
fact landmarks v   d  domain transition graph  dtg  v  here  identify nodes
dtg  i  e   values d  v  must necessarily traversed order reach d 
restricted relaxed planning graph lacking operators could possibly achieve    there
subtleties involving conditional effects explained later   every landmark
occur last level graph achieved  
previous work  porteous et al         hoffmann et al          subsequently use discovered landmarks orderings derive reasonable obedient reasonable orderings postprocessing step  following  give detailed description step procedure
finding landmarks orderings lama  high level pseudo code algorithm  containing
steps described following sections             shown algorithm   
      back chaining  landmarks via shared preconditions possible first achievers
first achievers fact landmark disjunctive landmark operators potentially
make true applied end partial plan never made true before 
call fact precondition first achievers shared precondition  least
one first achievers must applied make true  must true achieved 
thus landmark  ordering gn   effect condition operator
treated precondition context  interested finding conditions
must hold become true  following use term extended preconditions
operator denote union preconditions effect conditions  
extended preconditions shared achievers fact calculated line    algorithm   
addition  create disjunctive landmarks selecting  precondition facts first
achievers  sets facts set contains one extended precondition fact first
achiever  line      one first achievers must applied make true  one facts
must true   disjunction thus landmark  ordering gn   since
number disjunctive landmarks exponential number achievers   restrict
disjunctions facts stem predicate symbol  deemed
helpful  hoffmann et al          furthermore  discard fact sets size greater
four  though found restriction little impact compared predicate restriction 
   

firichter   westphal

global variables 
  hv  s    s    o  ci
lg   hl  oi
queue
  
  
  
  
  
  
  
  
  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

  planning task solve
  landmark graph
  landmarks back chained

function add landmark ordering   x  
fact l       
  prefer fact landmarks
l l     
  remove disjunctive landmark
      x      x     l  
  remove obsolete orderings
l     var   var       abort overlap existing landmark
return
  l
  add new landmark graph
l l   
queue queue   
  x  
  add new ordering graph
function identify landmarks
lg hs   
  landmark graph starts goals  orderings
queue s 
orderings
  additional orderings  see section       
queue  
pop queue 
s     
rrpg restricted relaxed plan graph
preshared shared extended preconditions extracted rrpg
preshared
add landmark ordering   gn  
predisj sets facts covering shared extended preconditions given rrpg
predisj
s     
add landmark ordering   gn  
fact
prelookahead extract landmarks dtg variable using rrpg
prelookahead
add landmark ordering    
potential orderings potential orderings   f   f never true rrpg  
add orderings landmarks potential orderings

algorithm    identifying landmarks orderings via back chaining  domain transition graphs
restricted relaxed planning graphs 

   

fithe lama planner  guiding cost based anytime planning landmarks

p 



b

t 

e

t 

c

p 



f

figure    domain transition graph location box extended example  figure    

since pspace hard determine set first achievers landmark  hoffmann et al  
       use over approximation containing every operator possibly first achiever
 porteous   cresswell         intersecting extended preconditions  possibly 
operators lose correctness  though may miss landmarks  approximation first achievers done help restricted relaxed planning graph 
construction graph leave operators would add unconditionally 
ignore conditional effects could potentially add   relaxed planning graph
levels out  last set facts over approximation facts achieved
planning task  operator applicable given over approximating set achieves
possible first achiever  
      landmarks via domain transition graphs
given fact landmark l    v   l   use domain transition graph v find fact
landmarks v   l   line     follows  dtg contains node occurs every path
initial state value s   v  variable landmark value l  node corresponds
landmark value l  v  know every plan achieving l requires v takes value l   
hence fact l     v   l    introduced new landmark ordered naturally l 
find kinds landmarks  iteratively remove one node dtg test simple
graph algorithm whether s   v  l still connected not  removed node corresponds
landmark  improve procedure removing  preprocessing step  nodes
know cannot true achieving l  nodes correspond
facts l appear restricted rpg never adds l  removing nodes
may decrease number paths reaching l may thus allow us find landmarks 
consider landmark graph extended example  shown figure   
landmarks orderings found via back chaining procedure described previous
section  landmarks direct preconditions achieving successors graph 
two exceptions  box truck  box c  two landmarks however found
dtg method  dtg figure   immediately shows box location must take
value t  value c path initial value b goal value f 
   

firichter   westphal

      additional orderings restricted relaxed planning graphs
restricted relaxed planning graph  rrpg  described section        given landmark leaves operators could possibly achieve   used extract additional
orderings landmarks  landmark appear graph cannot reached
  thus introduce natural ordering   efficiency reasons  construct
rrpg  line      i  e   needed find possible first achievers
back chaining procedure  extract orderings facts
reached  line      facts f later recognised landmarks 
introduce ordering f  line     
      overlapping landmarks
due iterative nature algorithm possible find disjunctive landmarks
least one facts already known fact landmark  cases  let fact
landmarks take precedence disjunctive ones  i  e   disjunctive landmark discovered
includes already known fact landmark  add disjunctive landmark  conversely 
soon fact landmark found part already known disjunctive landmark  discard
disjunctive landmark including orderings    add fact landmark instead  keep
procedure resulting landmark graph simple  furthermore allow landmarks
overlap  whenever fact newly discovered disjunctive landmark part
already known landmark  add newly discovered landmark  cases handled
function add landmark ordering  lines       
      generating reasonable obedient reasonable orderings
want introduce reasonable ordering l r l  two  distinct  fact landmarks l
l  holds  a  l  must true time first achieving l   b  achieving
l  l would require making l  false achieve l  approximate  a   b 
proposed hoffmann et al         sufficient conditions  case  a   test l  s 
chain natural greedy necessary orderings landmarks l   l        ln  
n      ln    l  greedy necessary ordering l  gn ln    b  check whether  i  l
l  inconsistent  i  e   mutually exclusive   ii  operators achieving l effect
inconsistent l     iii  landmark l   inconsistent l  ordering
l   gn l 
inconsistencies facts easily identified finite domain representation
facts form v   v   d    i  e   map variable different values 
addition  lama uses groups inconsistent facts computed translator component 
second pass  obedient reasonable orderings added  done method
above  except reasonable orderings used addition natural greedy necessary
orderings derive fact landmark l  must true landmark l  finally  use
simple greedy algorithm break possible cycles due reasonable obedient reasonable orderings landmark graph  every time cycle identified  one involved reasonable
   note ordering  f  g  neither implies f g general  conversely   f  g  neither
implies f g 

   

fithe lama planner  guiding cost based anytime planning landmarks

obedient reasonable orderings removed  algorithm removes obedient reasonable orderings
rather reasonable orderings whenever possible 
    related work
orderings landmarks generalisation goal orderings  frequently
exploited planning search past  particular  approach irani cheng  irani  
cheng        cheng   irani        preprocessing procedure analyses planning
task extract necessary orderings goals  imposed search algorithm 
goal ordered goal b approach plan necessarily true b 
koehler hoffmann        introduce reasonable orderings goals 
hoffmann et al          article detailing earlier work porteous et al          introduce
idea landmarks  generalise necessary reasonable orderings goals landmarks 
propose methods finding using landmarks planning  proposed method finding
landmarks  subsequently extended porteous cresswell         closely
related ours  hoffmann et al  propose method finding fact landmarks proceeds three
stages  first  potential landmarks orderings suggested fast candidate generation procedure  second  filtering procedure evaluates sufficient condition landmarks candidate
fact  removing fail test  third  reasonable obedient reasonable orderings landmarks approximated  step largely identical approach ours 
except use different methods recognise inconsistencies facts 
generation landmark candidates done via back chaining goal much
approach  intersecting preconditions operators first achieve fact f
appear f relaxed planning graph  note even operators share
common precondition l  might first achievers f  appearing f relaxed
planning graph  l precondition  hence l landmark  test whether
landmark candidate l found via back chaining indeed landmark  hoffmann et al        
build restricted relaxed planning task leaving operators could add l  task
unsolvable  l landmark  sufficient  necessary condition  l necessary
solving relaxed task necessary solving original task  converse
true  verification procedure guarantees method hoffmann et al  generates true
landmarks  however  unsound orderings may established due unsound landmark candidates 
unsound landmarks pruned failing verification test  unsound orderings may
remain 
porteous cresswell        propose alternative approximation first achievers
fact f use  consider first achievers possibly applicable f
thus guarantee correctness found landmarks orderings  find disjunctive
landmarks  method landmark detection differs adding detection landmarks
via domain transition graphs  detection additional orderings via restricted relaxed planning
graphs  porteous cresswell additionally reason multiple occurrences landmarks  if
landmark achieved  made false re achieved several times plans  
not 
approach hoffmann et al         exploits landmarks decomposing planning task
smaller subtasks  making landmarks intermediary goals  instead searching goal
task  iteratively aims achieve landmark minimal respect orderings 
   

firichter   westphal

detail  first builds landmark graph  with landmarks vertices orderings arcs   possible
cycles broken removing arcs  sources resulting directed acyclic graph
handed base planner disjunctive goal  plan generated achieve one
landmarks   landmark  along incident arcs  removed landmark
graph  process repeats end state generated plan  landmark graph
becomes empty  base planner asked generate plan original goal   note even
though goal facts landmarks thus achieved previously  may violated
again  
base planner solving subtasks planner used  hoffmann et al        
experimented ff  found decomposition subtasks lead directed search  solving larger instances plain many domains  however  found
method leads worse average performance ipc benchmarks          
using fast downward base planner  richter et al          furthermore  method hoffmann et al  often produces solutions longer produced base planner 
disjunctive search control frequently switches different parts task may
destructive interactions  sometimes even leads dead ends  approach fails
solvable tasks  contrast  approach incorporates landmark information searching
original goal planning task via heuristic function derived landmarks  see next
section   recently shown  avoids possibility dead ends usually generates
better quality solutions  richter et al         
sebastia et al         extend work hoffmann et al  employing refined preprocessing technique groups landmarks consistent sets  minimising destructive interactions
sets  taking sets intermediary goals  avoid increased plan length
experienced hoffmann et al          however  according authors preprocessing
computationally expensive may take longer solving original problem 
zhu givan        propose technique finding landmarks propagating necessary
predecessor information planning graph  definition landmarks encompasses operators
necessary plan  called action landmarks   furthermore introduce notion
causal landmark fact landmarks required precondition operators
every plan  argue fact landmarks causal accidental effects
warrant sought explicitly  algorithm computes action landmarks causal
fact landmarks time propagating information construction relaxed
planning graph  extended variant algorithm able infer multiple occurrences
landmarks  gregory et al         build work find disjunctive landmarks
symmetry breaking 
similar work  zhu givan        use causal fact landmarks action landmarks
estimate goal distance given state  end  treat fact landmark virtual
action  sets operators achieve fact landmark  obtain distance estimate bin
packing  items packed bins real landmark actions  singletons  virtual
actions  bin may contain elements pairwise intersection elements
non empty  zhu givan employ greedy algorithm estimate minimum number bins
use value distance estimate  experimental results preliminary  however 
demonstrate significant advantage method planner 
   

fithe lama planner  guiding cost based anytime planning landmarks

   landmark heuristic
lama planning system uses landmarks calculate heuristic estimates  since know
landmarks must achieved order reach goal  approximate goal distance
state reached path  i  e   sequence states  estimated number landmarks
still need achieved onwards  landmarks given

l s    b l   accepted s    reqagain s   
l set discovered landmarks  accepted s    set accepted landmarks 
reqagain s    set accepted landmarks required again  following
definitions based given landmarks graph  l  o   




l         x  
  hi





 
 
accepted s    b
      hoi
accepted s         l     





  x     accepted s           

reqagain s    b accepted s         

s       gn       accepted s   
landmark first accepted state true state  landmarks ordered
accepted predecessor state generated  landmark
accepted  remains accepted successor states  initial state  accepted landmarks
true initial state predecessors landmark graph 
accepted landmark required true  a  forms part goal
 b  must true directly landmark  i  e   gn   accepted s 
latter case  since know must still achieved must true time step
  holds must achieved again  number  l s     heuristic value
assigned state s  pseudo code heuristic given algorithm   
landmark heuristic assign non zero value state goal state  since
goals landmarks always counted required per condition  a  above  however 
heuristic may assign non zero value goal state  happens plans found
obey reasonable orderings landmark graph  case goal state may
reached without landmarks accepted   hence  need explicitly test states goal
condition order identify goal states search 
note heuristic path dependent  i  e   depends sequence states
reached initial state  raises question happens state reached
via several paths  lama  heuristic state calculated once  first reached 
alternative option would re evaluate time new path discovered  taking
account information paths known time  karpas domshlak        note 
calculate landmarks accepted given set paths p accepted s  p  b

p accepted s     since holds landmark achieved along paths p must
   special case r become true simultaneously  could avoid accepting
 buffet   hoffmann         could modify definition reasonable orderings
r hold unless must become true strictly   general problem goal states may
assigned non zero value  however  still persists even modifications 

   

firichter   westphal

global variables 
  hv  s    s    o  ci
lg   hl  oi
accepted

  planning task solve
  landmark graph
  landmarks accepted states evaluated far

function lm count heuristic s   
  hi
  initial state


accepted s    l   s        x  
else
  ho            on    ho           
parent s      
  accepted parent      calculated
reached   l        x     accepted parent       
accepted s    accepted parent      reached
notaccepted l   accepted s   
reqgoal   n accepted s          s      

reqprecon accepted s              gn     accepted s   
return  notaccepted reqgoal reqprecon 
algorithm    landmark count heuristic 

achieved onwards  heuristic value derived analogous
way before 
landmark heuristic outlined estimates goal distance states  i  e   number
operator applications needed reach goal state given state  participate ipc      
made function cost sensitive weighting landmarks estimate minimum
cost  apart estimating goal distance counting number landmarks still need
achieved state  estimate cost to go state sum minimum costs
landmarks  cost counted landmark minimum action cost
first achievers   alternative  sophisticated methods computing costs landmarks
conceivable potential topic future work   heuristic value lama assigns
state however pure cost to go estimate  rather sum cost estimate
distance estimate  thus accounting costs to go goal distances states 
measure aims balance speed search quality plans  particular counter act
problems may arise zero cost operators  see section      
generate preferred operators along landmark heuristic  operator preferred
state applying achieves acceptable landmark next step  i  e   landmark whose predecessors already accepted  acceptable landmark achieved within one step 
preferred operators occur relaxed plan nearest acceptable landmark 
nearest landmark cost unaware setting one relaxed reachable minimal number
operators  cost sensitive setting landmark reachable cheapest hadd cost
 see section     cost distance estimates taken account  nearest
landmark computed building relaxed planning graph or  equivalently  performing relaxed exploration  which lama does  see section     determining earliest least
costly occurrence acceptable landmark structure  relaxed plan landmark
   

fithe lama planner  guiding cost based anytime planning landmarks

extracted  operators plan form preferred operators applicable
current state 

   cost sensitive ff add heuristic
first introduced landmark heuristic  richter et al          proved competitive own  compared established heuristics heuristic  hoffmann   nebel 
       however  joint use heuristic landmark heuristic multi heuristic
search improved performance planning system  compared using heuristic 
thus path lama follows  heuristic based relaxation planning task
ignores delete effects  fdr tasks translates allowing state variables hold several
values simultaneously 
heuristic state computed two phases  first phase  forward phase 
calculates estimate fact planning task costly achieve fact
relaxed task  concurrently  selects operator called best support fact f 
greedy approximation cheapest achiever  an achiever f costs making
applicable applying minimal among achievers f  starting s   second
phase  plan relaxed task constructed based best supports fact  done
chaining backwards goals  selecting best supports goals  recursively
selecting best supports preconditions already selected operators  union
best supports constitutes relaxed plan  i  e   fact best support added
relaxed plan once  even fact needed several times precondition   length
resulting relaxed plan heuristic estimate reported s 
forward phase viewed propagating cost information operators facts
relaxed planning graph  hoffmann   nebel         however  graph need
explicitly constructed compute heuristic  instead  form generalised dijkstra cheapestpath algorithm described liu  koenig furcy        used lama  propagates
costs preconditions applicable operators operators effects  method 
operator fact represented once  reducing time space requirements o nk  
n size relaxed planning task k depth relaxed planning graph 
o n   order deal conditional effects  operators n effects split n operators
one effect each  corresponding effect conditions moved preconditions
operators  n operators selected inclusion relaxed plan  original
operator included instead  again  operator included relaxed plan once  
cost estimate operator original heuristic depth relaxed planning
graph  case planning unit cost operators equivalent  fuentetaja  borrajo   
linares lopez        propagating costs via hmax criterion  bonet   geffner         hmax
criterion estimates cost operator maximum costs preconditions  plus
action cost operator    planning without action costs   cost fact
estimated cost cheapest achiever  zero fact true current state s 
originally proposed unit cost planning  heuristic adapted cost based planning
straightforward way using action costs cost propagation phase  reporting total cost
resulting relaxed plan  rather length  heuristic estimate 
using criteria cost propagation results variations heuristic  bryce   kambhampati        fuentetaja et al          one variant previously proposed litera   

firichter   westphal

ture  do   kambhampati        use hadd criterion  bonet   geffner         similar
hmax criterion except estimating cost operators via sum  rather maximum 
costs preconditions  following use term ff add variant
heuristic  independently us  keyder geffner        implemented ff add heuristic
call ha planner ff ha   ipc       formal specification ff add heuristic
found paper  heuristic function lama similar cost sensitive ff add
heuristic  however  landmark heuristic  lama purely guided action costs 
rather uses cost distance estimates equally  means cost propagation 
operator contributes action cost plus   distance  rather action cost 
propagated cost estimates 

   experiments
evaluate much central features lama contributes performance 
conducted number experiments comparing different configurations features 
focus detailed evaluation benchmark tasks international planning competition
 ipc        interested setting planning action costs  effect landmarks
classical planning tasks without actions costs studied previous work  richter et al  
       provide summarising results case  using domains ipcs          
section      benchmark set ipc      comprises   domains    tasks each  resulting
total     tasks  one domains  openstacks   two different formulations available
 strips adl   competition  report better result two formulations
planner 
described section    lama builds platform provided fast downward three
major ways      use landmarks      using cost sensitive heuristics guide search
cheap plans      employing anytime search continue search better solutions
time remains  examine usefulness landmarks  conduct experiments without
them  keeping planner features fixed  use action costs lama result
number design decisions  landmark heuristic ff add heuristic made
cost sensitive  however  rather focusing purely action costs  lama uses distance
estimates cost estimates combination  see section      balance speed quality
search  measure benefit combining approach  test three different approaches
dealing costs   a  using traditional cost unaware heuristics  distance estimates    b  using
purely cost sensitive heuristics  though using distance estimates tie breaking    c  using
combination distance cost estimates  lama  different choices regarding
landmarks approaches action costs thus result following six planner configurations 
f  use cost unaware ff add heuristic  estimating goal distance  
fc   use purely cost sensitive ff add heuristic  estimating cost to go  
f c   use ff add heuristic combines action costs distances 
fl  use cost unaware variants ff add heuristic landmark heuristic 
flc   use purely cost sensitive variants heuristics 
fl c   use variants combine action costs distances heuristics 
   

fithe lama planner  guiding cost based anytime planning landmarks

note contrast setting optimal planning  karpas   domshlak         landmark
heuristic competitive case  landmarks lama used provide
additional information already guided search  such  include configurations using landmarks heuristic estimators detailed results  however  provide
summarising results supporting claim competitive 
configuration run iterated  anytime  search  highlighting contribution
iterated search  report first solutions vs  final solutions  final solution
configuration last  best  solution finds within    minute timeout   note
quality solution always determined cost  irrespective whether heuristic used
calculate cost sensitive not   discussing three possible approaches costs  costunaware search  purely cost sensitive search  lamas combination distances costs 
write x  xc   x c denote three cost approaches independently heuristics used 
measure performance using criterion employed ipc       helmert
et al          planner configuration run    minutes per task  timeout  planner
aggregates ratio c  c total score c cost plan found  c cost
best known solution  e  g   reference solution calculated competition organisers 
best solution found participating planners  
experiments run hardware used competition  cluster machines intel
xeon cpus     ghz clock speed  time memory limits set values
competition  using timeout    minutes memory limit   gb  following 
first provide general overview results  discuss special cases  i  e   domains
results certain configurations deviate overall trend  try give plausible
explanations may happen 
    overview results
section  show purely cost based ff add configuration fc solves significantly
fewer tasks cost unaware counterpart f  fc finds higher quality solutions 
make low coverage  number solved tasks  measuring performance
ipc criterion  using landmarks improves quality slightly  cost unaware search using landmarks  fl  achieves highest ipc performance score amongst configurations  using
cost sensitive ff add heuristic  adding landmarks  resulting configurations flc fl c  
increases coverage substantially  incurring small loss quality  iterated search improves scores configurations significantly  lastly  using combination cost
distance estimates heuristics  x c   superior pure cost based search using iterated search  together  using landmarks combination cost distance estimates  fl c  
achieves nearly performance fl configuration 
following  support findings experimental data  section        performance terms ipc score   show cost sensitive ff add heuristic scores
lowly terms ipc criterion  landmarks combination cost distance estimates together make bad performance  furthermore  results demonstrate magnitude impact iterated search performance scores  section        coverage  
show bad performance cost sensitive ff add heuristic due solving fewer
tasks  use landmarks mitigates problem  section        quality   present
data showing purely cost sensitive ff add heuristic finds higher quality plans cost   

firichter   westphal

domain

base

c 

cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total
 total ipc      

 
  
  
  
  
  
  
  
  
   
     

 
  
  
  
  
  
  
 
  
   
     

domain

f

cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total

  
  
  
  
  
  
  
  
  
   

ipc planners
ff ha   ff has  
  
 
 
  
  
  
  
  
  
   
     

  
  
 
  
  
  
  
  
  
   
     

first solutions
fl flc
fc
f c

fl c

  
 
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
 
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

lama
  
  
  
  
  
  
  
  
  
   
     

slowed lama
  
   

fl c

  
  
  
  
  
  
  
  
  
   
  

  
  
  
  
  
  
  
  
  
   
  

  
  
  
  
  
  
  
  
  
   
  

final solutions  iterated search 
f
fc
f c
fl flc fl c
  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

table    performance scores  rounded whole numbers  planners scoring     points
ipc       top    experimental configurations  bottom   scores ipc planners recalculated  see text   lama        refer results achieved lama slowed
factors         respectively  fl c essentially ipc planner lama 

unaware ff add heuristic first search  iterated search  difference
disappears  furthermore  iterated search intermediate approach using cost distance
estimates scores higher purely cost based search  lamas approach using landmarks
combination cost distance estimates  fl c   thus effectively mitigates bad performance cost sensitive ff add heuristic 
      performance terms ipc score
scores planners scoring     points ipc      shown top part
table    apart lama  includes base planner run competition organisers  ff
preprocessing step compiles away action costs   ff ha   ff has   planners keyder
   

fithe lama planner  guiding cost based anytime planning landmarks

geffner        c  planner lipovetzky geffner         plans found
planners obtained competition website  helmert et al          however 
scores plans depend best known solutions tasks  scores show
thus differ ones published ipc       re calculated reflect new
best solutions found experiments  illustrate magnitude change  original total
scores ipc planners shown parentheses last table row 
configuration fl c results essentially planner  the ipc version of 
lama  report results again  minor corrections implemented lama
since competition  addition  planner makes arbitrary decisions points
execution due underlying programming library methods  leading varying results  however 
table   shows differences fl c lama small  furthermore
added columns table showing hypothetical results lama would obtained
search slowed constant factors         respectively  i  e   results obtained
cutting search   minutes     seconds  respectively   numbers show
lama still outperforms ipc planners even severe handicap  demonstrating
good performance lama mainly due efficient implementation 
bottom part table   contains results six experimental configurations
first search iteration  left     minute timeout  right   seen  use
landmarks iterated search lead significant improvements performance  even one
two features planner performs notably better competitors ipc      
 note however baseline planner performed badly cyber security due problems
reading large task descriptions   combination  benefits landmarks iterated
search grow further  cost unaware search use landmarks results   additional score points
first solutions    additional points final solutions  similar results hold
cost sensitive configurations  mainly due openstacks domain  using landmarks
highly detrimental solution quality first solutions  iterated search mitigates problem
improving quality similar levels without landmarks  overall  thus slight
synergy effect landmarks iterated search  making joint benefit two features
larger sum individual contributions  effect landmarks openstacks
domain discussed detail later 
use cost sensitive search pay experiments  cost unaware search
always least roughly equal  often substantially better cost sensitive configurations 
cost sensitive planning seems problem lama  participating planners ipc       notably  cost sensitive competitors lama fare worse
cost ignoring baseline  lama  best performance achieved using cost unaware search
landmarks iterated search  however  using combination cost distance estimates instead  fl c   leads performance almost equally good  particular  fl c substantially
better pure cost search flc iterated search used 
detailed view data provided figure    show performance
time six experimental configurations  data point     seconds  example  shows
score corresponding planner would achieved timeout     seconds 
top panel shows  cost sensitive search consistently worse cost unaware search using
ff add heuristic  using landmarks  see centre panel   two settings fl fl c achieve
better performance f  though fl c needs   minutes surpass f  fl within  
seconds  pure cost search  even landmarks  flc    performs worse f times 
   

firichter   westphal

   
   

score

   
   
   
f
fc
f c

   
   
 

  

   
time  seconds 

    

   
   

score

   
   
   
f
fl
flc
fl c

   
   
 

  

   
time  seconds 

    

   
   

score

   
   
   
f
fl
flc
fl c

   
   
 

  

   
time  seconds 

    

figure    score time using iterated search  top centre panel  without iterated search 
i  e   showing first solutions  bottom panel  

   

fithe lama planner  guiding cost based anytime planning landmarks

domain

base

c 

ff ha  

ff has  

lama

fl c

cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total

 
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

domain

f

fc

f c

fl

flc

fl c

cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

  
  
  
  
  
  
  
  
  
   

table    coverage planners scoring     points ipc       top    experimental
configurations  bottom   results ipc planners taken competition  fl c
essentially ipc planner lama 

bottom panel figure   shows using iterated search  performance   best
configurations fl  f  fl c   flc fairly similar eventually  cost sensitive approaches
need time cost unaware configurations reach performance levels 
      coverage
bad performance cost sensitive search surprising  given performance criterion
awards higher scores cheaper plans  one explanation could mainly due different coverage  finding plans high quality substantially harder finding plans low
quality  focusing nearest goals rather cheapest goals may solve tasks within
given time limit  table   show coverage considered planners configurations 
numbers confirm using landmarks  coverage cost unaware search indeed
substantially higher coverage cost sensitive search  however  landmarks  differences coverage various cost approaches small  particular  landmarks
improve coverage cost unaware search  bring cost sensitive configurations
   

firichter   westphal

domain
cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total

domain
cyber security
elevators
openstacks
parc printer
peg solitaire
scanalyzer
sokoban
transport
woodworking
total

fc   f
tasks c  ratio
  
  
  
  
  
  
  
  
  
   

    
    
    
    
    
    
    
    
    
    

fc   f
tasks c  ratio
  
  
  
  
  
  
  
  
  
   

    
    
    
    
    
    
    
    
    
    

f c   f
tasks c  ratio
  
  
  
  
  
  
  
  
  
   

    
    
    
    
    
    
    
    
    
    

f c   f
tasks c  ratio
  
  
  
  
  
  
  
  
  
   

    
    
    
    
    
    
    
    
    
    

flc   fc
tasks c  ratio
  
  
  
  
  
  
  
  
  
   

    
    
    
    
    
    
    
    
    
    

flc   fc
tasks c  ratio
  
  
  
  
  
  
  
  
  
   

    
    
    
    
    
    
    
    
    
    

fl c   f c
tasks c  ratio
  
  
  
  
  
  
  
  
  
   

    
    
    
    
    
    
    
    
    
    

fl c   f c
tasks c  ratio
  
  
  
  
  
  
  
  
  
   

    
    
    
    
    
    
    
    
    
    

table    average ratio first solution costs  top  best solution costs iterative search
 bottom  various pairs configurations commonly solved tasks 
coverage level cost unaware search  landmarks thus seem helpful
overcoming coverage problems cost sensitive search 
mentioned before  landmark heuristic however competitive  using
landmark heuristic ff add heuristic results ipc      performance scores
        iterated search  coverage points         three possible
cost settings  substantially worse performance scores greater     coverage
points greater     achieved lama configurations 
      quality
next step  look purely solution quality  firstly  want answer question whether
improvement coverage achieved landmarks cost sensitive search comes price
solution quality  i  e   whether using landmarks directs search close goals rather cheap
goals  secondly  would know solution quality differs cost sensitive
cost unaware configurations  particular  much quality lose combining
   

fithe lama planner  guiding cost based anytime planning landmarks

distance cost estimates  x c   opposed using pure cost search  xc    score used ipc
     table   incorporates coverage quality information counting unsolved tasks
  method allows ranking several planners solving different subsets total benchmark
set  interested examining quality independent coverage  must restrict focus tasks solved compared planners  table   contains quality information comparing
solution costs several configurations  compare configurations pair wise order
maximise number commonly solved tasks  top part table   contains comparisons
involving first solutions found configuration  bottom part table concerns
best solutions found iterative search  pair configurations show number
tasks solved both  geometric mean cost ratio plans find 
expected  cost sensitive configurations fc f c find cheaper plans costunaware configuration f average  particular pure cost search fc finds high quality
first plans  see first column top part table   fc f c   however  difference f large  domains  notably elevators  plans found
cost sensitive heuristics actually worse plans found cost unaware search 
landmarks deteriorate quality first plans fc   f c   starts worse
quality fc   noticeably deteriorated landmarks  configurations  however  main negative impact landmarks openstacks domain  plans become
nearly twice expensive fc       expensive f c   contrast  remaining
  domains average plan quality configurations landmarks even slightly better
average without landmarks 
note iterative search remarkable impact relative performance different configurations  looking solutions found iterative search  fc actually performs
worse f c   whereas way round first solutions  compare first two
columns top row versus bottom row table   explained extent
fact reasons cause fc low coverage prevent improving much time  show selected domains later  cost sensitive heuristic often
expands many nodes cost unaware search  leading observed behaviour 
likely due fact finding plans high quality hard thus unsuccessful many
benchmark tasks  example  domains cost sensitive search leads large local
minima exist cost unaware search  generally  good plans often longer
bad plans  may lead increased complexity particular domains heuristic
values inaccurate  showcase problems cost sensitive search detail
elevators parc printer domains later on 
iterative search  landmarks deteriorate quality either fc f c average 
negative impact openstacks domain longer present   this effect openstacks
domain discussed detail later  
summarising findings  say landmarks effectively support cost sensitive
ff add heuristic finding solutions  without steering search away good solutions  similarly  combining distance cost estimates x c leads search finding solutions quickly
without overly sacrificing quality  demonstrated superior anytime performance compared
pure cost search 
way example  present detailed results four nine competition domains 
choose domains deem particular interest results either exaggerate contradict general trends discussed far  domains elevators parc printer
   

firichter   westphal

 
 
 
 
 
 
 
 
 
figure    example elevators task 

highlight problems cost sensitive search  cyber security cost sensitive search performs
uncharacteristically well  openstacks domain landmarks lead usual
improvement  rather deterioration performance 
    elevators
elevators domain models transportation passengers building via fast slow elevators  elevator certain passenger capacity access certain floors  passengers
may change elevators get final destination  furthermore two different types
elevators different associated cost functions  contrast miconic domain  used
earlier international planning competition  bacchus         models transporting passengers via elevators  one elevator access floors
one  unit cost  operator  elevators  floors building grouped blocks  overlapping one floor  slow elevators operate within block access floors within
block  fast elevators access blocks  certain floors within block  in
first    ipc tasks every second floor     tasks every fourth floor   fast elevators
usually expensive slow elevators except distance two floors  elevator
types cost same  however  fast elevators may sometimes advantageous transporting
passengers blocks  as avoid need passengers switch elevators shared
floor blocks   usually higher capacity 
example task eight floors  grouped two blocks  shown figure   
total four elevators  two slow ones two fast ones  cost function used    ipc tasks
moving elevator current location target floor     n slow elevators      n
fast elevators  n distance travelled  the number floors current location
elevator target   operators concerning passengers boarding leaving elevators
free cost  assuming cost function  cheaper example transport passenger
located floor   using two slow elevators  changing floor    using direct fast elevator 
elevators one domains configurations using cost sensitive ff add heuristic
solve far fewer problems cost unaware counterparts  using landmarks increases coverage 
solve problem completely  furthermore  notable problems
cost sensitive configurations solve  solutions often worse quality solutions
cost unaware configurations  table   illustrates fact first solutions found using
   

fithe lama planner  guiding cost based anytime planning landmarks

task
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
avg 

quality  ipc score 
f
fc
f c
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    
         
    

f
  
  
  
  
  
  
  
  
  
  
  
  
  
   
  
  

length
fc
  
  
  
  
  
  
  
  
  
  
  
  
   
   
  
  

f c
  
  
  
  
  
  
  
  
  
  
  
  
  
   
  
  

table    comparison plan qualities  measured via ipc scores  plan lengths first
solutions f  fc   f c elevators  shown tasks solved three configurations 
bold print indicating best solution 

ff add heuristic  iterative search  not shown   solution quality f c improves
similar level f  whereas fc remains substantially worse 
full explanation configurations involving cost sensitive
ff add heuristic perform badly domain  several factors seem play role  firstly 
attempt optimise costs  cost sensitive ff add heuristic focuses relatively complex solutions
involving mainly slow elevators many transfers passengers elevators 
relaxed plans less accurate  i  e   translate less well actual plans   case
cost unaware heuristic  secondly  costs associated movements elevators dominate
heuristic values  causing local minima cost sensitive heuristic  thirdly  capacity
constraints associated elevators may lead plateaus bad quality plans particular
cost sensitive heuristic  following sections  describe factors detail 
lastly  found deferred heuristic evaluation technique used lama  see section      perform well domain  using deferred evaluation  fc configuration solves   additional tasks  though quality solutions remains worse f
configuration   partly explains ff ha   planner keyder geffner       
substantially higher coverage fc configuration domain  two planners use
heuristic  differ several aspects  apart deferred evaluation aspects include search algorithm used  greedy best first search vs  enhanced hill climbing  method
using preferred operators  maintaining additional queues preferred states vs  pruning nonpreferred successor states  
   

firichter   westphal

f
fc
f c

slow moves
   
   
   

fast moves
  
  
  

ratio fast slow
    
     
     

table    total elevator moves ratio fast slow moves first solutions found f  fc  
f c configurations     elevators instances solved three configurations 
      slow vs  fast elevators
examining results  found fc f c configurations tend produce plans
slow elevators used passengers  f configuration uses
fast elevators often  cf  table     surprising  individual passenger 
travelling starting point destination tends cheaper slow elevator  unless
distance short   whereas fewer operators typically required travelling fast
elevator  independence assumptions inherent ff add heuristic  see section    lead
constructing relaxed plans aim optimise transportation passenger individually 
rather taking synergy effects account 
plans produced fc f c longer  average  plans produced f  see
table     one reason predominant use slow elevators requires passengers
change elevators often  plans become longer involve passengers
travelling slow elevators  heuristic estimates may become worse  example 
relaxed plans extracted computation heuristic likely abstract away details
passengers travel elevator  e  g   since passenger picked
delivered certain location  elevator may teleport back location extra
cost relaxed plan pick deliver subsequent passengers   generally  found
relaxed plans initial state produced fc f c tend similar length cost
produced f  final solutions produced fc f c worse f  one reason
probably increased complexity planning passenger change overs
elevators combination worse relaxed plans poses problem cost sensitive
ff add heuristic 
      local minima due elevator movement costs
since action costs model distances  total cost relaxed plan depends target floors
relative current position elevator  fc f c   action costs moving
elevator usually dominate estimates ff add heuristic  consider two example tasks
figure    differ initial state elevators  elevators need travel
three floors solution plan  due abstracted delete effects relaxed plan initial state
include operators travel two floors starting floor elevator
 i  e   elevator teleported back starting floor without cost   left task 
relaxed cost visiting three floors lower right task  cost left task
sum going floor   floor    going floor   floor    resulting total cost
              right task  relaxed cost visiting floors cost going
floor   floor    floor   floor    resulting total cost               left
task  passenger boarded elevator floor    immediate successor states
   

fithe lama planner  guiding cost based anytime planning landmarks

action cost

action cost

 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 

figure    action cost effects elevators relaxed setting  travelling   floors costs    
travelling   floors costs     tasks solution cost       left task lower
relaxed cost      right task      

worse heuristic estimate due movement costs elevator  particular  correct action
moving elevator floor    to deliver passenger  results state worse heuristic
value  increased number waiting passengers floor    planning system would
therefore try boarding possible subsets passengers moving elevator  even
elevator moved floor    heuristic estimate improve passenger
dropped either  a  elevator moved back floor     b  second passenger
boarded elevator moved floor   
consequently  movement costs may dominate progress obtained transporting passengers
number successive states  words  planner often blindly achieve
progress move elevators towards middle position given remaining target floors 
order cost sensitive heuristic report progress  cost unaware heuristic  situation
less severe  number elevator movements relaxed plan increase 
hence planner encounters plateau search space rather local minimum  use
preferred operators may help escape plateau relatively quickly  whereas local minimum
much harder escape from  two approaches exist may circumvent problem  firstly 
use enforced hill climbing  hoffmann   nebel        rather greedy best first search
likely avoid exploration entire local minima  approach  breadth first search
conducted first state minima plateau improving state found  secondly 
improved heuristic could used approximates optimal relaxed cost h  exactly 
cost minima shown figure   brought independence assumptions inherent
ff add heuristic  estimate relaxed cost goal fact individually cheapest
possible way  optimal relaxed plan  however  costs left task right task 
accurate approximation optimal relaxed cost h  could therefore mitigate described
cost minima  keyder geffner        recently proposed improvement ff add
heuristic  shown particularly useful elevators parc printer domains 
   keyder   geffners approach  relaxed plan extracted ff add heuristic improved iteratively    
selecting fact f      fixing operators related f  because contribute achieving f
rely achievement       computing cheaper way achieving f given operators fixed
previous step 

   

firichter   westphal

      plateaus due capacity constraints
general  relaxed plans elevators domain often bad quality  one reasons
way capacity elevators encoded operators passengers boarding leaving
elevators  passenger p transported elevator e  one preconditions p leaving e
n passengers boarded e  n number greater    constructing relaxed
plan  ff add heuristic recursively selects operators achieve necessary precondition
cheapest way  results boarding passenger closest e initial state  even
passenger p  different p  achieve condition passenger boarded 
relaxed plan contain operators boarding p p  e  may furthermore
contain operators boarding p  whatever elevator e  deemed best transporting p   
hence  relaxed plans often contain many unnecessary boarding operators 
mentioned section      greedy best first search lama breaks ties equally
promising operators trying cheaper operator first  consequently  zero cost operators
passengers boarding leaving elevators tried first state  found soon one
passenger boarded certain elevator  relaxed plans next state often substantially
different  passengers assigned elevator  explained
fact soon one passenger elevator  precondition leaving elevator
least one person boarded  fulfilled  rather incurring additional cost  
example tasks examined  found effect results committing bad boarding
operators  lama may initially try bad boarding operator  e  g  boarding nearest passenger
elevator satisfy capacity precondition another passenger  described above 
relaxed plan successor state assigns passengers elevator  lower cost  due
improved heuristic value successor state  lama retains plan prefix  even though
first operator bad one  plausible  though explore experimentally 
effect stronger configurations involving cost sensitive heuristic  costs
relaxed plans vary strongly one state next 
importantly  capacity constraints lead plateaus search space  correct boarding leaving operators often recognised good operators  example  capacity
elevator c  boarding first c   passengers need transported elevator
usually leads improved heuristic values  however  boarding c th passenger result
state better heuristic value passengers need transported via
elevator  c th passenger boarding destroys precondition must
room elevator passengers board  similarly  correct leaving passenger may
lead improved heuristic value makes elevator empty passengers need
transported elevator later  because last passenger leaving destroys precondition
leaving must least one passenger boarded  
effects exist cost sensitive cost unaware heuristic  however 
typically occur within plateaus  f  local minima  fc   f c   created elevator positions 
described previous section  means affect cost sensitive configurations
severely  plateaus become particularly large several passengers waiting
floor  e  g  passengers accumulating floor shared two blocks order switch
elevators  planner tries board possible subsets people available elevators  as
zero cost boarding leaving operators always tried first   moving elevators even
dropping passengers floors  may still fail find state better heuristic value 
   

fithe lama planner  guiding cost based anytime planning landmarks

first plans
final plans

fc
f c
fc
f c

solved
  
  
  
  

original tasks
qual    f qual    f
 
  
 
  
 
  
 
 

capacity constraints
solved qual    f qual    f
  
  
 
  
  
 
  
 
  
  
  
  

table    relative qualities solutions original elevators domain modified variant
domain elevators unlimited capacity  shown total number tasks solved
cost sensitive configurations fc f c   well number tasks configurations find better worse plan cost unaware configuration f 
examining number states local minima configurations  found
fc f c indeed encounter many states f  example  percentage cases
state worse best known state typically around      in rare cases      f 
fc f c   hand  numbers usually      often     
large problems even     
verify capacity constraints indeed contribute bad performance costsensitive heuristic domain  removed constraints ipc tasks ran
resulting problems f  fc f c configurations  surprisingly  tasks become much
easier solve  elevators transport passengers once  interestingly though 
bad plan qualities produced cost sensitive configurations  relative cost unaware
configuration  indeed become much less frequent  table   shows 
summary  findings suggest bad performance cost sensitive ff add heuristic
elevators domain due bad quality relaxed plans  brought focus slow
elevators capacity constraints  plateaus local minima search space  resulting
movement costs elevators capacity constraints  
    parc printer
parc printer domain  do  ruml    zhou        models operation multi engine printer
capable processing several printing jobs time  sheet must printed needs pass
several printer components starting feeder travelling transporters 
printing engines possibly inverters ending finishing tray  various sheets
belonging print job must arrive correct order finisher tray  may travel
along different paths using various printing engines  colour printing engines ones
print black white  colour printing expensive  action costs operators
comparatively large  ranging               colour printing
expensive operator  operators printing black white cost roughly half much 
operators transporting sheets relatively cheap 
elevators domain  cost sensitive ff add heuristic perform well here 
fc f c failing solve many tasks cost unaware configuration f able
solve   note fc f c perform similarly domain  large action costs outweigh distance estimates f c    however  contrast elevators domain  fc f c
configurations result notably improved plan quality compared f  overview number
   

firichter   westphal

tasks solved   
avg  quality first solution
avg  quality final solution

f
  
    
    

f c
  
    
    

fl
  
    
    

fl c
  
    
    

table    coverage vs  quality parc printer domain  average qualities average ipc scores
calculated tasks solved configurations 

problems solved average quality first solutions shown table    using landmarks  differences cost sensitive cost unaware configurations strongly reduced 
three landmark configurations achieving better performance f configuration 
elevators  found quality relaxed plans poor  cost unaware case 
relaxed plan transports sheets feeder finishing tray via shortest path  irrespective
whether suitable printing engine lies path  path feeder finishing tray
passes printing engine  frequently involves printing wrong image paper 
additional operators relaxed plan handle transportation feeder suitable
printing engine print correct image sheet well  cost sensitive heuristic
used  relaxed plans furthermore become substantially longer  using many transportation operators
reach cheap printing engine  analogously elevators domain  increased complexity
associated longer plans  in combination bad quality relaxed plans  thus
likely reason bad performance cost sensitive heuristic  however  landmarks
mitigate problem  numbers solved tasks table   clearly show  landmarks found
domain encompass printing correct image sheet  disjunctive
landmark denotes possible printers sheet  helps counteract tendencies
cost sensitive ff add heuristic transport sheets wrong printers 
summary  parc printer elevators domain cost sensitive ff add heuristic
performs badly  though contrast elevators problem purely one coverage  solution quality  even elevators  landmarks overcome problems cost sensitive
configurations  improving similar performance levels cost unaware configurations 
    cyber security
cyber security domain stands domain cost sensitive configurations perform
significantly better cost unaware counterparts  especially looking first solutions 
 iterative search reduces gap  close completely   domain models vulnerabilities computer networks insider attacks  boddy  gohde  haigh    harp         task
consists gaining access sensitive information using various malware programs physically
accessing computers offices  action costs model likelihood attack fail  i  e   risk
exposed  example  many actions office attacker  using computer 
involve cost  whereas entering offices moderately costly  directly instructing
people install specific software high associated cost  particular  action costs used
model desire finding different methods attack setting  example  several
tasks domain differ costs associate certain operators 
cyber security domain  taking action costs account pays notably  fc
f c configurations solve     problems less  respectively  f configuration  see table    
   

fithe lama planner  guiding cost based anytime planning landmarks

ipc score first solutions
ipc score final solutions

f
     
     

fl
     
     

f c
     
     

fl c
     
     

table    ipc scores cyber security domain 

nevertheless result better total score  using landmarks  cost sensitive configurations
improved solve problems maintaining high quality solutions 
resulting even larger performance gap flc        points  fl c        points 
one side  fl        points  side 
plans found cost unaware search often involve physically accessing computers
offices sending viruses email  result large cost  lower costs
achieved complex plans making sophisticated use software  opposed elevators
parc printer domains  relaxed plans cyber security good quality 
explains performance cost sensitive heuristic negatively impacted longer
plans  using iterative search improves performance fl f nearly levels
cost sensitive counterparts  see table    
    openstacks
openstacks domain models combinatorial optimisation problem minimum maximum simultaneous open stacks  fink   vo        gerevini  haslum  long  saetti    dimopoulos        
task minimise storage space needed manufacturing facility  manufacturer receives number orders  comprising number products  one product
made time  manufacturer always produce total required quantity product
 over orders  beginning production different product  time first product order produced time products order produced 
order said open requires stack  a temporary storage space   problem consists
ordering products maximum number stacks open time minimised 
easy find solution problem  any product order solution  requiring n
stacks worst case n number orders   finding optimal solution np hard 
minimisation aspect modelled planning tasks via action costs  operator
opening new stacks cost    operators zero cost  domain
previously used ipc       gerevini et al          earlier formulation domain
unit costs  equivalent cost formulation described above  since number operators open stacks every plan given task  minimising plan length
equivalent minimising action costs 
noticed domain using landmarks resulted plans substantially worse quality 
compared using landmarks  particular  true first plans found  whereas
use anytime search improves results configurations similar levels  across cost
settings  using landmark heuristic combination ff add heuristic typically produces
plans majority orders started early  resulting large number simultaneously open stacks  whereas using ff add heuristic leads plans products
corresponding open orders manufactured earlier  starting new orders delayed
earlier orders shipped  mainly due fact landmarks found
   

firichter   westphal

    
    

f c
fl c

expanded nodes

    
    
    
    
    
    
    
   
 
 

  

  
tasks

  

  

  

figure    number expanded search nodes without landmarks first search iteration
 best first search  openstacks domain 

lama regarding opening stacks  means due choice action costs
domain  landmarks cost zero landmark heuristic able distinguish
plans different cost  landmarks found lama relate starting shipping orders
well making products   however  even landmarks regarding opening stacks
found  would helpful  landmarks state certain things must achieved 
certain things need achieved  landmarks thus used limit number
open stacks  landmark orderings furthermore helpful deciding order
products  product orders possiblewhich means natural orderings exist
corresponding landmarksand product order results form wasted effort captured
reasonable landmark orderings 
mentioned above  landmarks found lama minimal cost zero  therefore 
landmark heuristic fails estimate cost goal  distinguishes states via
number missing started shipped orders products   these goal distance estimates used
directly fl  combined all zero landmark heuristic cost estimates fl c   tiebreakers amongst zero cost estimates flc   resulting relative ranking states
landmark heuristic three cases   soon one stack open  order operator
starts achieves landmark minimal respect landmark orderings  namely
landmark stating must started   planner thus tends start orders soon possible 
landmark heuristic able take account future costs arise bad product
orderings  problem ff add heuristic  albeit less severe one  ff add
heuristic accounts cost opening  exactly  one new stack whenever least one stack
needed  heuristic thus prefer states require stacks 
landmark heuristic does  however  provide good estimate goal distance  since
landmark heuristic prefers states closer goal state regard costs  use results
   size disjunctions limited lama  would always find landmark stacks avail   
stacks avail    stacks avail n  stating least one n stacks must open point  however  landmark stating two stacks need open would require complex form landmarks
involving conjunction  lama cannot handle 

   

fithe lama planner  guiding cost based anytime planning landmarks

 

plan quality

   

   

   

   

 

f c
fl c
 

  

  
tasks

  

  

  

figure     plan quality  measured via ipc scores  without landmarks first search
iteration  best first search  openstacks domain 

 
  
  
  
  
cost   
  
  
  
  
 
    

plan quality

   
   
   
   
 

f c
fl c

   
time  seconds 
 

  

  
tasks

  

  

    

 

  
  
  
   tasks
  

  

figure     effect iterative search openstacks domain  left  plan quality  ipc score 
best plan found within    minutes without landmarks  right  evolution plan costs
landmarks  fl c   time 
plans stacks opened needed  reflected empirical results 
additional use landmark heuristic drastically reduces number expanded search nodes
 see figure     leads higher cost plans  see figure      without iterative search  lama
configuration fl c achieves       points domain  compared       points
using landmarks  configuration f c   
using iterative search  negative effect landmarks quality mitigated 
seen figure     fl c generates    distinct  time improved  plans per problem 
end  difference points merely       fl c vs        f c   score reached
less   minutes iterated search per task 
thus  openstacks example domain landmarks detrimental solution
quality  however  using landmarks provides benefit speeding planning reducing
   

firichter   westphal

number expanded nodes  allows iterative search effectively improve solution quality
given time limit final results using landmarks similar using
landmarks 
    domains previous competitions
tables      show results ipc domains previous years             domains contain action costs  cost sensitive configurations lama applicable
lama runs fl configuration  configurations examined lama thus fl
f  iterated search without  fl iterated search shown lama 
given results two ipc winning systems previous years  fast downward 
fast downward  ran current versions  particular fast downward evolved
substantially since      competition version  original causal graph heuristic
replaced better context enhanced additive heuristic  helmert   geffner         correspondence authors  version fast downward used one featuring recent
work richter helmert        
table   shows  lama performs better fast downward terms
ipc      criterion  true even turn landmarks iterated search lama 
turn options simultaneously  viewing large difference
scores iterated versus non iterated search lama  note domains best known
reference results used score calculation  in contrast      tasks 
reference results generated manually domain specific solvers competition
organisers   means planner producing best solution task awarded
highest possible score    even though better solutions might exist  may skew results favour
planner delivers cheaper solutions  i  e   exaggerate differences planners 
table    shows lamas edge fast downward due higher quality solutions rather
coverage  fast downward solves problems  compared ff  lama better coverage  gap lama substantially larger gap lama
fast downward  note f lama configurations roughly correspond results
published base heur earlier work  richter et al          however  subsequent changes
code support action costs negatively affect particular philosophers domain 
observe significant decrease coverage  one reasons difference
coverage lama closely related fast downward system 
comparing various experimental configurations lama  note use landmarks leads moderate improvements coverage solution quality  mentioned above 
iterative search significantly improves performance terms ipc      score 

   conclusion outlook
article  given detailed account lama planning system  system uses
two heuristic functions multi heuristic state space search  cost sensitive version
heuristic  landmark heuristic guiding search towards states many subgoals
already achieved  action costs employed heuristic functions guide search
cheap goals rather close goals  iterative search improves solution quality time
remains 
   

fithe lama planner  guiding cost based anytime planning landmarks

domain



f  downw 

lama

f

flfirst

ffirst

airport     
assembly     
blocks     
depot     
driverlog     
freecell     
grid    
gripper     
logistics          
logistics          
miconic      
miconic full adl      
miconic simple adl      
movie     
mprime     
mystery     
openstacks     
optical telegraphs     
pathways     
philosophers     
pipesworld notank      
pipesworld tank      
psr small     
rovers     
satellite     
schedule      
storage     
tpp     
trucks     
zenotravel     
total       
psr large     
psr middle     

  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
    



  
  
  
  
  
  
 
  
  
  
   
  
   
  
  
  
  
 
  
  
  
  
  
  
  
   
  
  
  
  
    
  
  

  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
 
  
  
  
  
  
  
  
   
  
  
  
  
    
  
  

  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
 
  
  
  
  
  
  
  
   
  
  
  
  
    
  
  

  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
 
  
  
  
  
  
  
  
   
  
  
  
  
    
  
  

  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
 
  
  
  
  
  
  
  
   
  
  
  
  
    
  
  

table    performance scores  rounded whole numbers  ff  fast downward lama
well experimental alternative configurations lama  f  without landmarks  flfirst   without
iterated search  ffirst   without landmarks without iterated search  

   

firichter   westphal

domain



f  downw 

lama

f

airport     
assembly     
blocks     
depot     
driverlog     
freecell     
grid    
gripper     
logistics          
logistics          
miconic      
miconic full adl      
miconic simple adl      
movie     
mprime     
mystery     
openstacks     
optical telegraphs     
pathways     
philosophers     
pipesworld notank      
pipesworld tank      
psr small     
rovers     
satellite     
schedule      
storage     
tpp     
trucks     
zenotravel     
total       
psr large     
psr middle     

  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
  
  
  
  
  
  
  
  
   
  
  
  
  
    



  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
 
  
  
  
  
  
  
  
   
  
  
  
  
    
  
  

  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
 
  
  
  
  
  
  
  
   
  
  
  
  
    
  
  

  
  
  
  
  
  
 
  
  
  
   
   
   
  
  
  
  
 
  
  
  
  
  
  
  
   
  
  
  
  
    
  
  

table     coverage  problems solved  ff  fast downward lama well experimental f configuration lama without landmarks 

   

fithe lama planner  guiding cost based anytime planning landmarks

conducted extensive experimental study set benchmark tasks
last international planning competition  order identify much features
planner contributes performance setting planning action costs  discussed
overall results provided plausible explanations deviating behaviour special cases 
noticeable outcome experiments using cost sensitive heuristics
produce desired outcome  particular  cost sensitive ff add heuristic performs significantly
worse ff add heuristic ignores costs  due cost sensitive heuristic solving
far fewer tasks leading little improvement solution quality tasks solve 
especially using iterated search  investigating reasons effect  found
cost sensitive ff add heuristic reacts strongly bad relaxed plans  i  e   particular
domains relaxed plans computed heuristic low quality costsensitive heuristic likely perform worse cost unaware heuristic  showed
elevators domain  action costs may introduce local minima search space without
action costs search space ff add heuristic would plateaus  moreover  increased
complexity planning cheaper goal potentially away initial state may
lead worse performance 
landmarks prove helpful context  mitigate problems costsensitive ff add heuristic  using landmarks  coverage cost sensitive search improved
nearly level cost unaware search  deteriorating solution quality  despite
mitigating effect landmarks  however  lama would still achieved slightly higher
score ipc      simply ignored costs  rather using cost sensitive heuristics 
cost unaware search  found landmarks improve coverage solution quality domains
ipcs           domains ipc       landmarks improved solution quality
cost unaware search  increase  already high  coverage 
iterative search improves results notably experimental configurations  raising
score lama quarter ipc      domains  openstacks domain  could
furthermore observe synergy effect iterative search landmarks  landmarks
usually improve quality  domain lead bad plans accounting action costs 
however  speed planning planner evaluates substantially fewer states  iterative
search effectively improves initial bad plans benefiting speed up provided
landmarks  general  use landmarks means quickly find good solutions 
using iterative search way improve plan quality time  overall  found domains
used ipc      constitute varied benchmark set reveals various strengths weaknesses
planning system 
building results presented article  identify several directions future work 
firstly  results suggest research cost sensitive heuristics needed  would
conduct thorough analysis short comings cost sensitive ff add heuristic  answer question whether might overcome  keyder geffner       
propose method extracting better relaxed plans best supports computed costsensitive ff add heuristic  resulting improved coverage  however  large ledge costunaware heuristic experiments suggests cost unaware ff add heuristic still better improved cost sensitive heuristic keyder geffner  would interesting
examine degree problems experienced ff add heuristic extend
delete relaxation heuristics  whether heuristics based delete relaxation could
effectively adapted action costs  addition  future work could explore benefit combin   

firichter   westphal

ing traditional distance estimators cost sensitive heuristics sophisticated ways
mechanism currently used lama  see discussion section        
secondly  believe useful future research improve definition reasonable
orderings  eliminating problems definition hoffmann et al  mentioned section     
thirdly  would extend use landmarks system several ways  one 
current approach take account whether landmark must achieved several
times  supporting multiple occurrences landmarks would beneficial openstacks
domain  example  could help minimise creation stacks accounting
costs  methods exist detecting multiplicity landmarks  porteous   cresswell       
zhu   givan         crucial develop techniques deriving orderings
individual occurrences landmarks  furthermore  would extend lama support
complex landmarks conjunctions simple formulas  addition representing
using landmarks landmark heuristic involves development new methods
detecting along corresponding orderings 

acknowledgments
authors thank malte helmert  charles gretton  sylvie thiebaux patrik haslum well
anonymous reviewers helpful feedback earlier drafts paper 
computing resources experiments graciously provided pompeu fabra university  thank hector palacios support conducting experiments 
nicta funded australian government  represented department broadband  communications digital economy  australian research council 
ict centre excellence program 
work partially supported deutsche forschungsgemeinschaft part transregional collaborative research center sfb tr   spatial cognition  project r   logospace  

references
aine  s   chakrabarti  p  p     kumar  r          awa  window constrained anytime heuristic search algorithm  veloso  m  m   ed    proceedings   th international joint
conference artificial intelligence  ijcai        pp           
bacchus  f          aips   planning competition  ai magazine              
backstrom  c     nebel  b          complexity results sas  planning  computational intelligence                
boddy  m   gohde  j   haigh  t     harp  s          course action generation cyber security
using classical planning  biundo  s   myers  k     rajan  k   eds    proceedings
fifteenth international conference automated planning scheduling  icaps       
pp        aaai press 
bonet  b     geffner  h          planning heuristic search  artificial intelligence              
bryce  d     kambhampati  s          tutorial planning graph based reachability heuristics 
ai magazine              
   

fithe lama planner  guiding cost based anytime planning landmarks

buffet  o     hoffmann  j          glitters gold  using landmarks reward shaping
fpg  proceedings icaps      workshop planning scheduling
uncertainty 
chen  y   wah  b  w     hsu  c  w          temporal planning using subgoal partitioning
resolution sgplan  journal artificial intelligence research             
cheng  j     irani  k  b          ordering problem subgoals  sridharan  n  s   ed    proceedings
  th international joint conference artificial intelligence  ijcai        pp     
     morgan kaufmann 
do  m  b     kambhampati  s          sapa  scalable multi objective heuristic metric temporal
planner  journal artificial intelligence research             
do  m  b   ruml  w     zhou  r          on line planning scheduling  application controlling modular printers  proceedings twenty third aaai conference artificial
intelligence  aaai        pp            aaai press 
edelkamp  s     hoffmann  j          pddl     language classical part  th
international planning competition  tech  rep       albert ludwigs universitat freiburg 
institut fur informatik 
fink  a     vo  s          applications modern heuristic search methods pattern sequencing
problems  computers operations research              
fox  m     long  d          pddl     extension pddl expressing temporal planning
domains  journal artificial intelligence research            
fuentetaja  r   borrajo  d     linares lopez  c          unified view cost based heuristics 
icaps      workshop heuristics domain independent planning  pp       
gerevini  a   haslum  p   long  d   saetti  a     dimopoulos  y          deterministic planning
fifth international planning competition  pddl  experimental evaluation
planners  artificial intelligence                  
gerevini  a     serina  i          lpg  planner based local search planning graphs
action costs  ghallab  m   hertzberg  j     traverso  p   eds    proceedings sixth
international conference artificial intelligence planning scheduling  aips        pp 
      aaai press 
gregory  p   cresswell  s   long  d     porteous  j          extraction disjunctive landmarks planning problems via symmetry reduction  proceedings fourth international workshop symmetry constraint satisfaction problems  pp       
hansen  e  a     zhou  r          anytime heuristic search  journal artificial intelligence
research             
hansen  e  a   zilberstein  s     danilchenko  v  a          anytime heuristic search  first results 
technical report cmpsci        university massachusetts  amherst 
helmert  m          fast downward planning system  journal artificial intelligence research             
helmert  m          concise finite domain representations pddl planning tasks  artificial
intelligence              
   

firichter   westphal

helmert  m   do  m     refanidis  i          ipc       deterministic part  web site  http   ipc 
informatik uni freiburg de 
helmert  m     geffner  h          unifying causal graph additive heuristics  rintanen 
j   nebel  b   beck  j  c     hansen  e   eds    proceedings eighteenth international
conference automated planning scheduling  icaps        pp          aaai press 
hoffmann  j     nebel  b          planning system  fast plan generation heuristic
search  journal artificial intelligence research             
hoffmann  j   porteous  j     sebastia  l          ordered landmarks planning  journal
artificial intelligence research             
irani  k  b     cheng  j          subgoal ordering goal augmentation heuristic problem
solving  mcdermott  j  p   ed    proceedings   th international joint conference
artificial intelligence  ijcai        pp            morgan kaufmann 
jonsson  p     backstrom  c          state variable planning structural restrictions  algorithms complexity  artificial intelligence                  
karpas  e     domshlak  c          cost optimal planning landmarks  proceedings
  st international joint conference artificial intelligence  ijcai        pp           
keyder  e     geffner  h          heuristics planning action costs revisited  proceedings
  th european conference artificial intelligence  ecai        pp         
keyder  e     geffner  h          trees shortest paths vs  steiner trees  understanding improving delete relaxation heuristics  proceedings   st international joint conference
artificial intelligence  ijcai        pp           
keyder  e   richter  s     helmert  m          sound complete landmarks and or graphs 
coelho  h   studer  r     wooldridge  m   eds    proceedings   th european conference artificial intelligence  ecai        pp         
koehler  j     hoffmann  j          reasonable forced goal orderings use
agenda driven planning algorithm  journal artificial intelligence research             
likhachev  m   ferguson  d   gordon  g  j   stentz  a     thrun  s          anytime search
dynamic graphs  artificial intelligence                    
likhachev  m   gordon  g  j     thrun  s          ara   anytime a  provable bounds
sub optimality  thrun  s   saul  l  k     scholkopf  b   eds    advances neural
information processing systems     nips       
lipovetzky  n     geffner  h          inference decomposition planning using causal consistent chains  gerevini  a   howe  a   cesta  a     refanidis  i   eds    proceedings
nineteenth international conference automated planning scheduling  icaps       
aaai press 
liu  y   koenig  s     furcy  d          speeding calculation heuristics heuristic
search based planning  proceedings eighteenth national conference artificial
intelligence  aaai        pp          aaai press 
pohl  i          heuristic search viewed path finding graph  artificial intelligence        
    
   

fithe lama planner  guiding cost based anytime planning landmarks

porteous  j     cresswell  s          extending landmarks analysis reason resources
repetition  proceedings   st workshop uk planning scheduling special
interest group  plansig      pp       
porteous  j   sebastia  l     hoffmann  j          extraction  ordering  usage landmarks planning  cesta  a     borrajo  d   eds    pre proceedings sixth european
conference planning  ecp        pp        toledo  spain 
richter  s     helmert  m          preferred operators deferred evaluation satisficing planning  gerevini  a   howe  a   cesta  a     refanidis  i   eds    proceedings nineteenth international conference automated planning scheduling  icaps        pp 
        aaai press 
richter  s   helmert  m     westphal  m          landmarks revisited  proceedings
twenty third aaai conference artificial intelligence  aaai        pp          aaai
press 
richter  s   thayer  j  t     ruml  w          joy forgetting  faster anytime search via
restarting  brafman  r   geffner  h   hoffmann  j     kautz  h   eds    proceedings
twentieth international conference automated planning scheduling  icaps       
aaai press  appear 
roger  g     helmert  m          more  merrier  combining heuristic estimators satisficing planning  brafman  r   geffner  h   hoffmann  j     kautz  h   eds    proceedings
twentieth international conference automated planning scheduling  icaps
       pp          aaai press 
ruml  w     do  m  b          best first utility guided search  veloso  m  m   ed    proceedings
  th international joint conference artificial intelligence  ijcai        pp      
     
sebastia  l   onaindia  e     marzal  e          decomposition planning problems  ai communications              
vidal  v          lookahead strategy heuristic search planning  zilberstein  s   koehler  j  
  koenig  s   eds    proceedings fourteenth international conference automated
planning scheduling  icaps        pp          aaai press 
zhou  r     hansen  e  a          beam stack search  integrating backtracking beam search 
biundo  s   myers  k     rajan  k   eds    proceedings fifteenth international
conference automated planning scheduling  icaps        pp        aaai press 
zhu  l     givan  r          landmark extraction via planning graph propagation  icaps     
doctoral consortium  pp         

   


