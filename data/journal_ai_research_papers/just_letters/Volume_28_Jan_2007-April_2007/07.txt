journal of artificial intelligence research                  

submitted        published      

discovering classes of strongly equivalent logic programs
fangzhen lin

flin cs ust hk

department of computer science and engineering
hong kong university of science and technology
clear water bay  kowloon  hong kong

yin chen

gzchenyin gmail com

department of computer science
south china normal university
guangzhou  p r  china

abstract
in this paper we apply computer aided theorem discovery technique to discover theorems about strongly equivalent logic programs under the answer set semantics  our discovered theorems capture new classes of strongly equivalent logic programs that can lead
to new program simplification rules that preserve strong equivalence  specifically  with
the help of computers  we discovered exact conditions that capture the strong equivalence
between a rule and the empty set  between two rules  between two rules and one of the two
rules  between two rules and another rule  and between three rules and two of the three
rules 

   introduction
in this paper we apply computer aided theorem discovery technique to discover theorems
about strongly equivalent logic programs under the answer set semantics  our discovered
theorems capture new classes of strongly equivalent logic programs that can lead to new
program simplification rules that preserve strong equivalence 
theorem discovery is a highly creative human process  generally speaking  we can
divide it into two steps   i  conjecture formulation  and  ii  conjecture verification  and
computers can help in both of these two steps  for instance  machine learning tools can
be used in the first step  i e  in coming up with reasonable conjectures  and automated
deduction tools can be used in the second step  i e  in verifying the correctness of these
conjectures 
while theorem discovery may make use of learning  these two tasks are fundamentally different  theorem discovery starts with a theory  and aims at finding interesting
consequences of the theory  while learning is mostly about induction  i e  it starts with
examples consequences  and aims at finding a theory that would explain the given examples consequences 
using computers to discover theorems is an old aspiration  there have been some
success stories  for instance  am  lenat        was reported to be able to come up with
some interesting concepts and theorems in number theory  and the remarkable systems
described by petkovsek  wilf  and zeilberger        can discover many identities  especially
hypergeometric identities involving sums of binomial coefficients that are important for the
analyses of algorithms  yet another example where interesting theorems can be discovered
c
    
ai access foundation  all rights reserved 

filin   chen

almost fully automatically is a recent work by lin        on discovering state invariants in
planning domains  lin showed that there are ways to classify many state constraints that
are useful in planning according to their syntactic properties  and enumerate them easily
for many domains  furthermore  for many of these constraints whether they are invariants
can be checked automatically  as a result  the system described by lin        can discover
many common constraints in planning domains  and for the logistics domain  it could even
discover a set of complete state invariants 
following this line of research  in this paper  we consider the problem of discovering
classes of strongly equivalent sets of logic program rules under answer set semantics  as
noted by lifschitz  pearce  and valverde         if two sets of rules are strongly equivalent 
then we can replace one by the other in any logic program without changing the semantics
of the program  thus identifying strongly equivalent sets of logic program rules is a useful
exercise that may have applications in program simplification 
this paper is organized as follows  in the next section  we briefly review the basic
concepts of logic programming under answer set semantics  then in section   we state in
more precise terms the type of theorems that we want to discover  in section   we prove
some general theorems that will help us prove these theorems  and in section    we describe
some of the theorems that we discovered  we then discuss an application to logic program
simplification in section    and finally we conclude this paper in section   

   answer set programming
traditional logic programming systems like prolog solve problems by query answering  the
user encodes knowledge about a domain by a set of rules  and solves a problem by issuing
queries to the set of rules  in contrast  answer set programming  asp   niemela       
lifschitz        marek   truszczynski        is a constraint based programming paradigm 
it is based on logic programming with answer set semantics  gelfond   lifschitz       
       to solve a problem  the user encodes the domain knowledge as a logic program in
such a way that the answer sets of the program will correspond to the solutions to the original
problem  compared to other constraint based programming paradigms  asp allows natural
encodings of recursive relations  and has built in facilities for default reasoning  several asp
solvers have been developed  niemela  simons    syrjanen        leone  pfeifer  faber 
eiter  gottlob  perri    scarcello        lin   zhao        lierler   maratea         to
date  asp has been used in space shuttle planning  nogueira  balduccini  gelfond  watson 
  barry         evolutional linguistics  erdem  lifschitz  nakhleh    ringe         and
others  in the following  we briefly review some basic notions in asp 
let l be a propositional language  i e  a set of atoms  in this paper we shall consider
logic programs with rules of the following form 
h         hk  p         pm   not pm          not pn

   

where hi s and pi s are atoms in l  so a logic program here can have default negation  not   
constraints  when k       and disjunctions in the head of its rules  in the following  if r is a
rule of the above form  we write hdr to denote the set  h         hk    psr the set  p         pm   
and ngr the set  pm          pn    thus a rule r can also be written as hdr  psr   not ngr  
the semantics of these programs are given by answer sets  gelfond   lifschitz         which
   

fidiscovering classes of strongly equivalent logic programs

are defined by a fixed point operator through what has been known as gelfond lifschitz
transformation  let x be a subset of l  and p a logic program  the gelfond lifschitz
transformation of p on x  written p x   is the set of rules obtained from p according to the
following two rules 
   if a rule of the form     is in p   and pi  x for some m      i  n  then delete this
rule 
   delete all literals of the form not pi in the bodies of the remaining rules 
for instance  if p is the set of following rules 
a  b 
c  not a
then p  a  is  a  b    and p  b  is   a  b     c    
clearly  for any x and p   p x is a set of rules which do not have the not  operator 
now a set x is an answer set of p if x is a minimal set of atoms that satisfies every rule
in p x   where x satisfies a rule of the form
h          h k  p         p m
if for some    i  k  hi  x whenever  p         pm    x  for instance  for the above
program  both  a  and  b  c  are answer sets  and they are the only answer sets of the
program 
two logic programs p  and p  are said to be equivalent if they have the same answer sets 
and strongly equivalent  lifschitz et al          under the language l   written p   se p   
if for any logic program p in l  p  p  and p  p  are equivalent  thus we write p    se p 
when p  and p  are not strongly equivalent   for example   a  b  and  a  c  are
equivalent  but not strongly equivalent  it can be shown that  a  not a   se   not a  
as in the abstract  we also say that a rule r is strongly equivalent to another rule r    written
r  se r    if  r   se  r     and two rules r  and r  are strongly equivalent to a rule r  written
 r    r     se r  if  r    r     se  r   and so on 
the notion of strong equivalence is important for asp for several reasons  first of all  it
helps us understand the answer set semantics  for instance  turner        showed that the
disjunctive rule  a  b   is not strongly equivalent to any set of normal rules  this implies
that there cannot be a modular translation from disjunctive logic programs to normal logic
programs  however 
  a  b      a  b  
is strongly equivalent to
  a  not b    b  not a     a  b   
this means that under the constraint   a  b   the disjunctive rule  a  b   can be replaced
by two rules without disjunction  secondly  as we mentioned in the introduction  if p  and
p  are strongly equivalent  then they are interchangeable regardless of where they occur 
thus if we have a large repertoire of pairs of strongly equivalent logic programs  we could
   

filin   chen

use them to transform a given program into one that is most suitable to the need in hand 
in particular  it could help us simplify a program for the purpose of computing its answer
sets  as we shall see  our discovered theorems will contribute significantly to this repertoire 
lifschitz et al         showed that checking for strong equivalence between two logic
programs can be done in the logic of here and there  a three valued non classical logic
somewhere between classical logic and intuitionistic logic  lin        provided a mapping
from logic programs to propositional theories and showed that two logic programs are
strongly equivalent iff their corresponding theories in propositional logic are equivalent 
this result will be used here both for generating example pairs of strongly equivalent logic
programs  and for verifying a conjecture  we repeat it here 
let p  and p  be two finite logic programs  and l the set of atoms in them 
theorem    lin        p   se p  iff in propositional logic  the following sentence is valid 
 
 
 
p  p      
 
 r  
 r   
   
pl

rp 

rp 

where for each p  l  p  is a new atom  and for each rule r of the form       r  is the
conjunction of the following two sentences 
p       pm  p m        p n  h       hk  

   

p  

   

  

p m



p m  

  

p n



h  

  

h k  

notice that if m   n      then the left sides of the implications in     and     are considered
to be true  and if k      then the right sides of the implications in     and     are considered
to be f alse 
in general checking if two sets of rules are strongly equivalent is conp complete  c f 
turner        pearce  tompits    woltran        lin        

   the problem
as we mentioned above  one possible use of the notion of strongly equivalent logic programs
is in program simplification  for instance  given a logic program  for each rule r in it 
we may ask whether it can be deleted without knowing what other rules are in p   i e 
whether  r  is strongly equivalent to the empty set  or we may ask whether a rule r in
p can be deleted if one knows that another rule r  is already in p   i e  whether  r  r   
is strongly equivalent to  r     in general  we may ask the following k m n question  is
 r         rk   u         um    se  r         rk   v         vn    thus our theorem discovery task is to come
up  for a given k m n problem  a computationally effective condition that holds if and only
if the answer to the k m n question is positive 
now suppose we have such a condition c  and suppose that when
 r         rk   u         um    se  r         rk   v         vn   
it is better to replace  u         um   by  v         vn   in the presence of r         rk for the purpose
of  say computing the answer sets of a program  one way to use this result to simplify a
given program p is to first choose k rules in p   and for any other m rules in it  try to find
   

fidiscovering classes of strongly equivalent logic programs

n rules so that the condition c holds  and then replace the m rules in p by the simpler n
rules 
however  even if checking whether c holds would take a negligible constant time  using
the above procedure to simplify a given logic program will be practical only when k  m  n
are all very small or when k is almost the same as the number of the rules in the given
program  and m and n are very small  thus it seems to us that it is worthwhile to solve
the k m n problem only when k  m  n are small  in particular  in this paper  we shall
concentrate on the       problem  whether a rule can always be deleted   the       problem
 whether a rule can always be replaced by another one   the       problem  in the presence
of a rule  whether another rule can be deleted   the       problem  in the presence of two
rules  whether a rule can always be deleted   and the       problem  if a pair of rules can
be replaced by a single rule  
an example of theorems that we want to discover about these problems is as follows 
for any rule r  r  se  iff  hdr  ngr    psr     

   

   some general theorems
in this section  we prove some general theorems that will help us verify whether an assertion
like     above is true 
let l be a propositional language  i e  a set of atoms  from l  construct a first order
language fl with equality  two unary predicates h  and h    three unary predicates hdr  
psr   and ngr for each logic program rule r in l  we assume that each rule in l has a unique
name   and three unary predicates xi   yi   and zi for each positive number i 
notice that we have used hdr   psr   and ngr to denote sets of atoms previously  but
now we overload them as unary predicates  naturally  the intended interpretations of these
unary predicates are their respective sets 
definition   given a set l of atoms  an intended model of fl is one whose domain is l 
and for each rule r in l  the unary predicates psr   hdr   and ngr are interpreted by their
corresponding sets of atoms  psr   hdr   and ngr   respectively 
conditions on rules in l  such as psr  ngr      will be expressed by special sentences
called properties in fl  
definition   a sentence of fl is a property about n rules if it is constructed from equality
and predicates xi   yi   and zi      i  n  a property  about n rules is true  holds  on a
sequence p    r         rn   of n rules if  p   is true in an intended model of fl   where  p  
is obtained from  by replacing each xi by hdri   yi by psri   and zi by ngri  
notice that since  p   does not mention predicates xi   yi   zi   h    and h    if it is true in
one intended model  then it is true in all intended models 
as we have mentioned above  we are interested in capturing the strong equivalence
between two programs by a computationally effective condition  more specifically  for some
small k  m  and n  we are interested in finding a property  about k   m   n rules such
that for any sequence of k   m   n rules  p    r         rk   u         um   v         vn   
 r         rk   u         um    se  r         rk   v         vn   iff  is true on p  
   

   

filin   chen

we shall now prove some general theorems that can help us verify the above assertion
for a class of formulas  
first of all  theorem   can be reformulated in fl as follows by reading h   p  as p
holds  and h   p  as p  holds 
theorem   p   se p  in l iff the following sentence
 
 
x h   x   h   x     
 r  
 r  
rp 

   

rp 

is true in all intended models of fl   where  r  is the conjunction of the following two
sentences 
 x psr  x   h   x    x ngr  x   h   x     x hdr  x   h   x   

   

 x psr  x   h   x    x ngr  x   h   x     x hdr  x   h   x   

   

in first order logic  if a prenex formula of the form  x y b is satisfiable  then it is
satisfiable in a structure with n elements  where b is a formula that contains no quantifiers 
constants  or function symbols  and n is the length of  x if it is non empty  and   when  x
is empty  we can prove a similar result for our first order languages and their intended
models here 
definition   a sentence of fl is an extended property about n rules if it is constructed
from equality and predicates xi   yi   and zi      i  n  and h  and h    an extended
property  about n rules is true  holds  on a sequence p    r         rn   of n rules in a model
m if  p   is true in m   where  p   is obtained from  by replacing each xi by hdri   yi by
psri   and zi by ngri  
definition   in the following  if p    r         rn   is a tuple of rules in l  and l  is a subset
of l  then we define the restriction of p on l  to be  r          rn     where ri  is
hdri  l   psri  l    not  ngri  l    
lemma   let  be an extended property in fl about n rules  and of the form  x y q 
where  x is a tuple of w variables  and q a formula that does not have any quantifiers  if
 holds on a sequence p of n rules in an intended model m of fl   then there is a subset
l  of l such that l  has at most w atoms  or one atom when w       and  holds on the
restriction of p on l  in an intended model of fl   
proof  suppose m is an intended model of fl such that m     p    thus there is a tuple
p  of w  or one when w      atoms in l such that m     y q p    x  
p   now let l  be the set
 
of atoms in p   and m defined as follows 
 each of the predicates h    h    xi   yi   and zi   i     is interpreted as the restriction
of its interpretation in m on l   
 for each rule r in l    the predicates hdr   psr   and ngr are interpreted the same as
they are in m   this is well defined as r is also a rule in l 
   

fidiscovering classes of strongly equivalent logic programs

then m   is an intended model of fl    let p   be the restriction of p on l    then p   is a
tuple of rules in l    since q has no quantifiers  and the language has no function symbols  
for any instantiation  u of  y in l    m    q p    x  
p   y   u  iff m      q p      x  
p   y   u   since
 
 
m     y q p    x  
p   we have m     y q p    x  
p   thus m       x y q p      
using theorem   and this lemma  we can show the following theorem which will enable
us to automate the verification of the if part of     when the property  is in the prenex
format 
theorem   without loss of generality  suppose m  n  if  is a property about k m n
rules of the form  x y q  where  x is a tuple of w variables  and q a formula that does not
have any quantifiers  then the following two assertions are equivalent 
 a  for any sequence of k   m   n rules  p    r         rk   u         um   v         vn    if  is true
on p   then  r         rk   u         um    se  r         rk   v         vn   
 b   b    if n      then for any sequence p    r         rk   u         um   v         vn   of rules with
at most w     k   m  atoms  if  is true on p   then
 r         rk   u         um    se  r         rk   v         vn   
 b    if n      then for any sequence p    r         rk   u         um   of rules with at most
k atoms  if  is true on p   then
 r         rk   u         um    se  r         rk   
where k is w    k if w    k      and k     otherwise 
proof  if  a  then  b  is obvious  we assume that  b  is true  and show that  a  holds as
well  suppose first that n      suppose p    r         rk   u         um   v         vn   is a sequence of
k   m   n rules in a language l such that  is true on p   and
 r         rk   u         um     se  r         rk   v         vn   
thus there is an intended model of fl that satisfies  p    and an intended model m of fl
that satisfies the following sentence 
 
 
 x h   x   h   x    
 r  
 r   
rp 

rp 

where p     r         rk   u         um    and p     r         rk   v         vn    as we noted after definition    m will also satisfy  p    thus m satisfies the following sentence
 
 
 
 
 p     x h   x   h   x     
 r   
 r     
 r   
 r         
rp 

rp 

rp 

rp 

where p     v         vn    and p     u         um   
now for any rule r  there is an extended property  x  y  of one rule that does not
mention any quantifiers such that  r  is equivalent to x  y  r   thus for any tuple q of t
rules vthere is an extended property  of t rules that does not mention any quantifiers such
that rq  r  is equivalent to  y   q   where  y is a tuple of  t variables 
thus there is
   

filin   chen

 a tuple z   of   k   m  variables  a tuple z   of variables  an extended property   of
k   m   n rules that does not have any quantifiers  and whose free variables are in z  
and z     and
 a tuple z   of   k   n  variables  a tuple v   of variables  and an extended property  
of k   m   n rules that does not have any quantifiers  and whose free variables are in
z   and z  
such that v     v     v     v   do not have common variables in them  and      is equivalent to the
following sentence 
   x h   x   h   x     z   z      z   z        p   
since we have assumed that m  n  thus there is an extended property   about k   m   n
rules that does not mention any quantifiers and function symbols  and whose free variables
are among z     z     and z   such that the above sentence is equivalent to the following sentence 
   x h   x   h   x    z    z     z        p   
now given the form of  assumed in the theorem  there is a tuple z   of w     k   m 
variables  a tuple z   of variables  and an extended property  of k   m   n rules that does
not mention any quantifiers  and whose free variables are among z     and z   such that the
above sentence is equivalent to  z     z     p   
by lemma    there is a subset l  of l that has at most w     k   m  atoms such that
 z     z     holds on p     where p   is the restriction of p on l    if
p      r          rk    u          u m   v          vn    
then this will mean that  is true on p     and  r          rk    u          u m     se  r          rk    v          vn    
this shows that if  b     then  a  
the proof that if  b    then  a  is exactly the same except now that
 
 
 
 r  
 r  
rp 

rp 

is equivalent to
 

 

rp 

 

 r  

 r   

rp 


the only if part of     can often be proved with the help of the following theorem 
theorem   let l  and l  be two languages  and f a function from l  to l    if p  and p 
are two programs in l  that are strongly equivalent  then f  p    and f  p    are two programs
in l  that are also strongly equivalent  here f  p   is obtained from p by replacing each
atom p in it by f  p  
proof  by theorem   and the fact that in propositional logic  if  is a tautology  and f a
function from l  to l    then f    is also a tautology  where f    is the formula obtained
from  by replacing each atom p in it by f  p   
for an example of using the theorems in this section for proving assertions of the form
     see section     
   

fidiscovering classes of strongly equivalent logic programs

   computer aided theorem discovery
given a k m n problem  our strategy for discovering theorems about it is as follows 
   choose a small language l 
   generate all possible triples
  r         rk     u         um     v         vn   

    

of sets of rules in l such that  r         rk   u         um    se  r         rk   v         vn   in l 
   formulate a conjecture on the k m n problem that holds in the language l  i e  a
condition that is true for a triple of the form      iff it is generated in step   
   verify the correctness of this conjecture in the general case 
this process may have to be iterated  for instance  a conjecture formulated in step   may
fail to generalize in step    so we either need to formulate a new conjecture or start all over
again in step   using a larger language 
ideally  we would like this process to be automatic  however  it is difficult to automate
steps   and     the number of possible patterns that we need to examine in order to come
up with a good conjecture in step   is huge  and we do not have a general theorem that
enables us to automate the verification part in step    while theorem   enables us to
automate the proof of the sufficient part of the assertion     for a class of formulas   we
do not have a similar result for the necessary part   as we shall see below  theorem   helps
a lot here  but it does not provide an automated procedure  nonetheless  computers play
a crucial role in all steps  and in the following we report some of the theorems discovered
using the above procedure 
    the       problem
this problem asks if a given rule is strongly equivalent to the empty set  thus can always
be deleted from any program  we have the following experimental result 
lemma   if a rule r mentions at most three distinct atoms  then r  se  iff
 hdr  ngr    psr     
using theorem    we can show the following result 
lemma   if there is a rule r of the form     such that r  se  and  hdr  ngr    psr    
is not true  then there is such a rule that mentions at most three atoms 
proof  suppose r  se   hdr  psr     and psr  ngr     suppose l is the set of atoms
in r  and a  b  c are three new atoms  let

p  hdr
 a
b
p  psr
f  p   

c
otherwise
   

filin   chen

by theorem    we also have f  r   se   by the construction of f   we also have
hdf  r   psf  r      and psf  r   ngf  r      and that f  r  mentions at most three distinct
atoms  
theorem    the       problem  lemma   holds in the general case  i e  without any
restriction on the number of atoms in r 
proof  we notice that the condition in lemma     hdr  ngr    psr      is equivalent to
the following property
x  x   x   z   x    y   x 
being true on  r   thus the if part follows from theorem   and lemma    the only if
part follows from lemma   and lemma    
the if part of the theorem is already well known  first proved by osorio et  al         
the only if part has also been proved recently by inoue and sakama         while we
did not discover anything new in this case  it is reassuring that the methodology works 
we notice here that there is no need to consider the   n   problem for n      because
for any n   r         rn   is strongly equivalent to  iff for each    i  n   ri   is strongly
equivalent to  
    the       and the       problems
the       problem asks if a rule can always be deleted in the presence of another rule  and
the       problem asks if a rule can always be replaced by another one  we first solve the
      problem  and the solution to the       problem will come as a corollary 
we have the following experimental result for the       problem 
lemma   for any two rules r  and r  that mentions at most three atoms   r    r    and
 r    are strongly equivalent iff one of the following two conditions is true 
   r   se  
   psr   psr    ngr   ngr    and hdr   hdr   ngr   
lemma   if there are two rules r  and r  such that  r    r     se  r     but none of the
two conditions in lemma   hold  then there are two such rules that mention at most three
atoms 
proof  suppose there are two rules r    r  such that  r    r     se  r     and none of the two
conditions in lemma   hold  let l be the set of atoms in r    r   
without loss of generality  suppose a  is an atom that makes the condition     in
lemma   false  if psr     a    is not empty  let a  be an atom in it  let l     a    a    a    
where a  is a new atom  and f be a function from l to l  as following 

a   a 
 a 
a 
a  psr     a   
f  a   

a 
otherwise
   

fidiscovering classes of strongly equivalent logic programs

clearly  f  r    and f  r    mention at most three distinct atoms  and by theorem   
 f  r     f  r      se f  r    
we show that none of the two conditions in lemma   hold for f  r    and f  r    either 
we show first that f  r      se   by theorem    we need to show that
s   psf  r      hdf  r     ngf  r     
is empty  if a   s  then by the construction of f   a   psr    hdr   ngr     a contradiction
with the assumption that r  is not strongly equivalent to   similarly  if a   s  then by
the construction of f   a   psr    hdr   ngr     a contradiction with the assumption that
r  is not strongly equivalent to   but then a  cannot be in s as a  cannot be in psf  r     
thus s must be empty 
we now show that it is not the case that psf  r     psf  r      ngf  r     ngf  r      and
hdf  r     hdf  r    ngf  r      by our assumption  a  is an atom that makes either psr   psr   
ngr   ngr    or hdr   hdr   ngr  false  there are three cases here  suppose a  makes
psr   psr  false  i e  a   psr  but a    psr    then by our construction of f   we also have
that a   psf  r    but a    psf  r      the other two cases are similar  
theorem    the       problem  lemma   holds in the general case  without any restriction on the number of atoms in r  and r   
proof  the condition in lemma   is equivalent to the following property
 x  x   x   z   x    y   x   
  x y   x   y   x     x z   x   z   x     x x   x    x   x   z   x    
being true on  r    r     thus the if part follows from theorem   and lemma    by noticing
that the above property can be written as x y  q as required by theorem    the only
if part follows from lemma   and lemma    
thus if a rule r  cannot be deleted on its own but can be deleted in the presence of
another rule r    then it must be the case that r  is redundant given r    if the body of r  is
satisfied  then the body of r  is satisfied as well  furthermore  r  can entail no more than
what can be entailed by r   hdr   hdr   ngr    
osorio et al         proved that  r    r     se r  if either psr  ngr     and hdr   ngr 
or psr   psr    ngr   ngr    and hdr   hdr    more recently  eiter et al         showed
that  r    r     se r  if r  s implies r   wang   zhou         i e  if there exists a set
a  ngr  such that hdr   hdr   a  ngr   ngr    a  and psr   psr   
as one can see  these are all special cases of the if part of theorem    our result is
actually more general  for instance  these special cases do not apply to
  c  b  not c     b  not c  
and
 c  b  not c  
but one can easily show that these two sets are strongly equivalent using our theorem 
from our solution to the       problem  we can derive a solution to the       problem 
   

filin   chen

theorem    the       problem  for any two rules r  and r    r   se r  iff one of the
following two conditions is true 
   r   se r   se  
   psr    psr    ngr    ngr    and hdr   ngr    hdr   ngr   
proof  by theorem    it is easy to see that r   se r  iff  r    r     se r  and  r    r     se r   

thus two rules r  and r  can always be interchanged if either both of them can be
deleted  strongly equivalent to the empty set  or they have the same body  and the same
consequences when the body is true  for instance  we have  a  b  not a   se   b  not a 
no matter what b is  because the two rules have the same body  and when the body is true 
the same consequence   a contradiction  as another example  we have
 a  b  not a   se  b  not a  
because the two rules have the same body  and  when the body is true  the same consequence 
b 
    the               and       problems
the       problem asks if a rule can be deleted in the presence of another two rules  the
      problem asks if two rules can be replaced by a single rule  and the       problem asks
if two rules can be replaced by another two rules  similar to the previous subsection  the
solution to the       and       problems will follow from a solution to the       problem 
the experiment on the       problem was more difficult because as it turned out  we
have to consider a language with six atoms in this case  in principle  given a language l 
every subset of l can be the hd  ps  or ng of a rule  thus when the size of l is six  there
are in principle                      possible rules  and           triples of them  however 
we can cut down the numbers significantly with the results that we already have proved 
first  we only have to consider rules that do not have common elements in any of the
two sets in  hd  ps  ng   if either hd and ps or ps and ng have a common element  then by
theorem    this rule can be deleted  if hd and ng have common elements  then according
to theorem    we obtain a strongly equivalent rule by deleting the common elements in hd 
in the following  we call such rules canonical  that is  a rule r is canonical if
hdr  psr   hdr  ngr   psr  ngr    
secondly  we do not have to consider isomorphic rules  if there is a one to one onto
function from l to l that maps  r    r    r    to  r     r     r      then these two sets of rules are
essentially the same except for the names of atoms in them 
thus by considering only canonical rules and using a certain normal form for triples of
rules that avoids isomorphic rules  we ended up with roughly     million triples of rules to
consider for verifying the following result  which took about    hours on a solaris server
consisting of   sun ultra sparc iii    mhz cpus with  gb ram 
for more details on the experiment on       problem  please refer to  chen  lin    li 
      
   

fidiscovering classes of strongly equivalent logic programs

lemma   for any three canonical rules r    r  and r  that mention at most six atoms 
 r    r    r     se  r    r    iff one of the following three conditions is true 
    r    r     se r   
    r    r     se r   
   there is an atom p such that 
    p   psr   psr      hdr   hdr   ngr   ngr   
    hdri    p   hdr   ngr  and psri    p   psr  and ngri    p   ngr    where
i       
    if p  psr   ngr    then hdr   hdr    
    if p  psr   ngr    then hdr   hdr    
the following lemma is the reason why we need to consider a language with six atoms
for this problem 
lemma   if there are three canonical rules r   r  and r  such that  r    r    r     se  r    r    
but none of the three conditions in lemma   hold  then there are three such rules that
mention at most six atoms 
proof  the proof of this lemma is tedious as we have to consider several cases  consider
the following statements about any three canonical rules r    r    r   
 i   r    r    r     se  r    r    
 ii   r    r      se  r     i e  psr    psr  or ngr    ngr  or hdr   ngr    hdr   ngr 
 iii   r    r      se  r     i e  psr    psr  or ngr    ngr  or hdr   ngr    hdr   ngr 
 iv   psr   psr      hdr   hdr   ngr   ngr      
 v  there is an atom p in the set  psr   psr      hdr   hdr   ngr   ngr     and another
different atom q such that one of the following three conditions is true 
   q  hdr   ngr  and q   hdr   ngr   
   q  psr  and q   psr   
   q  ngr  and q   ngr   
notice that this is the negation of condition       in lemma   
 vi  hdr   hdr    ngr    and there is an atom p  psr   ngr  such that for i        
hdri    p   hdr   ngr    psri    p   psr    and ngri    p   ngr   
since r  and r  are symmetric in the conditions in lemma    to prove this lemma  we need
only to prove the following three assertions 
 a  if there are three canonical rules r    r    r  which satisfy  i   iv   then there are three
canonical rules r     r     r   which mention at most six atoms  and satisfy  i   iv  as well 
   

filin   chen

 b  if there are three canonical rules r    r    r  which satisfy  i   iii  v   then there are
three canonical rules r     r     r   which mention at most six atoms  and satisfy  i   iii  v 
as well 
 c  if there are three canonical rules r    r    r  which satisfy  i   iii  vi   then there are
three canonical rules r     r     r   which mention at most six atoms  and satisfy  i  iii  vi  as well 
we now prove the above three assertions one by one 
 a  let a    a  be two atoms that make  ii  and  iii  true  if  psr   psr  psr      a    a   
is not empty  let a  be an atom in it  if psr    psr  psr   a    a     is not empty  let a 
be an atom in it  if  psr  psr     psr   a    a     is not empty  let a  be an atom in it 
finally let a  be a new atom different from a  to a    and l     a    a    a    a    a    a    
let f be a function from l to l  defined as following 

a 
a   a 




a
a   a 

 


a 
a   psr    psr   psr        a    a   
f  a   
a
a  psr     psr   psr    a    a    


  


a
a   psr   psr       psr    a    a    

  
a 
otherwise
for each    i     let ri  be as follows 
psri    psf  ri     ngri    ngf  ri     hdri    hdf  ri     ngf  ri    

    

we have that
 for each    i     ri  is a canonical rule  and ri   se f  ri    for this  we only
need to show f  ri     se  for each    i     to see this  notice that from
the definition of f   atoms other than a  and a  in psr  are mapped to  a    a    
and atoms other than a  and a  in hdr   ngr  are mapped to  a    a     thus
psf  r      hdf  r     ngf  r          by theorem    f  r      se   now f  r      se 
and f  r      se   because  ii  and  iii  hold for f  r     f  r     f  r    by definition
of f  
  i  holds for r     r     r     this is because by theorem   
 f  r     f  r     f  r       se  f  r     f  r     
and for each    i     ri   se f  ri   
  ii  and  iii  hold for r     r     r     as we mentioned  from the definition of f    ii 
and  iii  hold for f  r     f  r     f  r    
  iv  holds for r     r     r     again  we need only to show that  iv  holds for
f  r     f  r     f  r     to see this  notice that atoms other than a  and a  in
psr   psr  are mapped to  a    a     and atoms other than a  and a  in
hdr   hdr   ngr   ngr  are mapped to  a    a    
   

fidiscovering classes of strongly equivalent logic programs

 b  again let a    a  be two atoms that make  ii  and  iii  true  let p  q be the two witness
atoms in  v   if p os r       a    a    p  q  is not empty  let a  be an atom in it  let a 
be a new atom  and l     a    a    a    a    p  q   define f as follows 

a   a 

 a 


a 
a   a 



p
a p
f  a   
q
a q





a
a  psr     a    a    p  q 
 


a 
otherwise
define ri  by      as well for each    i    
 for each    i     ri  is a canonical rule  and ri   se f  ri    this can be seen in
the same way as for  a  above 
 by theorem     f  r     f  r     f  r      se  f  r     f  r      and thus
 r     r     r      se  r     r     
so  i  holds for r     r     r    
 from definition of f    ii  and  iii  hold for f  r     f  r     f  r     and thus they hold
for r     r     r   as well 
 again from the definition of f    v  holds for f  r     f  r     f  r     there is an atom
p in the set  psf  r     psf  r        hdf  r     hdf  r     ngf  r     ngf  r       and another
different atom q such that one of the following three conditions is true 
   q  hdf  r     ngf  r    and q   hdf  r     ngf  r     
   q  psf  r    and q   psf  r     
   q  ngf  r    and q   ngf  r     
 v  holds for r     r     r   as well because for each    i    
psri    psf  ri     ngri    ngf  ri     hdri   ngri    hdf  ri    ngf  ri    
 c  let a    a  be two atoms that make  ii  and  iii  true  let p be the witness atom in
 vi   and let q  hdr   hdr  but q   ngr    if p os r       a    a    p  q  is not empty  let
a  be an atom in it  let a  is a new atom  and let l     a    a    a    a    p  q   define f
as follows 

a 
a   a 




a
a   a 

 


p
a p
f  a   
q
a q





a
a  psr     a    a    p  q 

  
a 
otherwise
again define ri  by      as well for each    i    
 for each    i     ri  is a canonical rule  and ri   se f  ri    this can be seen in
the same way as for  a  above 
   

filin   chen

 again by theorem     f  r     f  r     f  r      se  f  r     f  r      and thus
 r     r     r      se  r     r     
so  i  holds for r     r     r    
 again from definition of f    ii  and  iii  hold for f  r     f  r     f  r     thus they
hold for r     r     r   as well 
 by the definition of f    vi  holds for f  r     f  r     f  r     hdf  r     hdf  r     
ngf  r      and there is an atom p  psf  r     ngf  r    such that for i         hdf  ri    
 p   hdf  r     ngf  r      psf  ri      p   psf  r      and ngf  ri      p   ngf  r       vi 
holds for r     r     r   as well because
psri    psf  ri     ngri    ngf  ri     hdri   hdf  ri    

theorem    the       problem  lemma   holds in the general case  without any restriction on the number of atoms in r    r    r   
proof  the assertion that r    r    and r  are canonical rules and satisfy one of the three
conditions in lemma   is equivalent to the following property
 x    x   x   y   x       x   x   z   x       y   x   z   x      
 x    x   x   y   x       x   x   z   x       y   x   z   x      
 x    x   x   y   x       x   x   z   x       y   x   z   x      
   x y   x   y   x     x z   x   z   x     x x   x    x   x   z   x     
  x y   x   y   x     x z   x   z   x     x x   x    x   x   z   x     
 x con   x   con   x   con   x   con   x   
being true on  r    r    r     where con   x  stands for
 y   x   y   x     x   x   x   x   z   x   z   x  
con   x  for
y  x    y     x   y    x   y   z   y      y   y   y   y     z   y   z   y   
 x   y    x   y   z   y      y   y   y   y     z   y   z   y   
con   x  for
y   x   z   x   y   x   y   x   y    
and con   x  for
y   x   z   x   y   x   y   x   y    
thus the if part follows from theorem   and lemma    by noticing that the above
property can be written as x y  q as required by theorem    the only if part follows
from lemma   and lemma    
   

fidiscovering classes of strongly equivalent logic programs

the conditions in lemma    theorem    are rather complex  and the reason why it
is difficult to automate step   of the procedure at the beginning of the section  these
conditions capture all possible cases when r  is subsumed by r  and r    and are difficult
to describe concisely by words  we give some examples 
consider the following three rules 
r     a   a   
r     a   not a   
r     a   not a    
we have that  r    r    r     se  r    r    because the condition     in lemma   holds 
however  if we change r  into r     a   not a    then p     r    r    r     and p     r    r   
are not strongly equivalent  one could check that condition       in lemma   does not hold 
and indeed  while p    a   a    has a unique answer set  a     p    a   a    has two
answer sets  a    and  a    a    
it is also easy to show by theorem   that a   not a  is subsumed by
  a    a    a      a    a   a     
and a    a   is subsumed by
  a   a      a   not a     
with the results that we have  the following theorem will yield a solution to the      
problem 
theorem    the       problem  for any three rules r    r  and r     r    r    and  r    are
strongly equivalent iff the following three conditions are true 
    r    r    r     se  r    r    
    r    r     se  r    
    r    r     se  r    
for example  we have
  a   a    not a      a    a   not a      se  a   not a    
while we have
   a    a       a    not a      se   a    
we have
  a   a    a      a   a    not a       se  a   a    
similarly  we have the following theorem
theorem     the       problem  for any four rules r    r    r    r     r    r    and  r    r   
are strongly equivalent iff the following four conditions are true 
   

filin   chen

    r    r    r     se  r    r    
    r    r    r     se  r    r    
    r    r    r     se  r    r    
    r    r    r     se  r    r    

   program simplification
we have mentioned that one possible use of the notion of strongly equivalent logic programs
is in simplifying logic programs  if p  se q  and that q is simpler than p   we can then
replace p in any program that contains it by q 
most answer set programming systems perform some program simplifications  however 
only smodels  niemela et al         has a stand alone front end called lparse that can be
used to ground and simplify a given logic program  it seems that lparse simplifies a grounded
logic program by computing first its well founded model  it does not  however  perform any
program simplification using the notion of strong equivalence  for instance  lparse        
the current version of lparse  did nothing to the following set of rules 
  a  not b    b  not a    a  a    nor does it replace the first rule in the following
program   a  not a    a  not b    b  not a   by the constraint  not a 
it is unlikely that anyone would be intentionally writing rules like a  a or b  a  not a 
but these type of rules can arise as a result of grounding some rules with variables  for
instance  the following is a typical recursive rule used in logic programming encoding of the
hamiltonian circuit problem  niemela        marek   truszczynski        
reached x   arc y  x   hc y  x   reached y   
when instantiated on a graph with cyclic arcs like arc a  a   this rule generates cyclic rules
of the form reached x   hc x  x   reached x   unless deleted explicitly  these rules will
slow down many systems  especially those based on sat  for instance  none of the graphs
tested using assat have self cycles consisting of an arc from a node to itself  lin   zhao 
       if these cycles are included  assat would run significantly longer 
it is thus useful to consider using the results that we have here for program simplification 
indeed  transformation rules such as deleting those that contain common elements in their
heads and positive bodies have been proposed  brass   dix         and studied from the
perspective of strong equivalence  osorio et al         eiter et al          our results
add new such transformation rules  for instance  by theorem    we can delete those
elements in the head of a rule that also appear in the negation as failure part of the rule 
theorems       and   can also be used to define some new transformation rules 

   concluding remarks and future work
donald knuth  in his forward to  petkovsek et al          said
science is what we understand well enough to explain to a computer  art is
everything else we do     science advances whenever an art becomes a science 
   

fidiscovering classes of strongly equivalent logic programs

and the state of the art advances too  because people always leap into new
territory once they have understood more about the old 
we hope that with this work  we are one step closer to making discovering classes of strongly
equivalent logic programs a science 
we have mentioned that the methodology used in this paper is similar to that in  lin 
       in both cases  plausible conjectures are generated by testing them in domains of
small sizes  and general theorems are proved to aid the verification of these conjectures
in the general case  however  while plausible conjectures are generated automatically in
 lin         they are done manually here  while the verifications of most conjectures in
 lin        are done automatically as well  they are done only semi automatically here 
overcoming these two weaknesses is the focus of our future work  specifically  we would
like to make step   of the procedure in section   automatic  and prove a theorem similar
to theorem   to automate the proofs of the only if parts of theorems like theorems      in the same way that theorem   makes the proofs of the if parts of these theorems
automatic  this way  we would be able to discover more interesting theorems in this area 
and more easily 

acknowledgments
an extended abstract of this paper appeared in proceedings of ijcai      we thank yan
zhang for his comments on an earlier version of the paper  we also thank the anonymous
reviewers for their useful comments  especially one of them for pointing out an error in
lemma   in an earlier version of the paper  this work was supported in part by the
research grants council of hong kong under competitive earmarked research grant
hkust       e  part of the second authors work was done when he was a student at sun
yat sen university  guangzhou  china  and a visiting scholar in department of computer
science and engineering  hong kong university of science and technology  hong kong 

references
brass  s     dix  j          semantics of  disjunctive  logic programs based on partial
evaluation  journal of logic programming              
chen  y   lin  f     li  l          selp   a system for studying strong equivalence
between logic programs  in proceedings of the  th international conference on logic
programming and nonmonotonic reasoning lpnmr        pp         
eiter  t   fink  m   tompits  h     woltran  s          simplifying logic programs under
uniform and strong equivalence  in proceedings of the  th international conference
on logic programming and nonmonotonic reasoning lpnmr        pp       
erdem  e   lifschitz  v   nakhleh  l     ringe  d          reconstructing the evolutionary
history of indo european languages using answer set programming  in proceedings of
the  th international symposium on practical aspects of declarative languages padl
       pp         
   

filin   chen

gelfond  m     lifschitz  v          the stable model semantics for logic programming  in
proceedings of the  th international conference and symposium on logic programming iclp slp   pp           
gelfond  m     lifschitz  v          classical negation in logic programs and disjunctive
databases  new generation computing                  
inoue  k     sakama  c          equivalence of logic programs under updates  in proceedings of the  th european conference on logics in artificial intelligence jelia   pp 
       
lenat  d  b          on automated scientific theory formation  a case study using the am
program  in machine intelligence    pp          jean hayes  donald michie  and l 
i  mikulich  eds  ellis horwood 
leone  n   pfeifer  g   faber  w   eiter  t   gottlob  g   perri  s     scarcello  f         
the dlv system for knowledge representation and reasoning  acm transactions on
computational logic        
lierler  y     maratea  m          cmodels    sat based answer set solver enhanced
to non tight programs  in proceedings of the  th international conference on logic
programming and nonmonotonic reasoning lpnmr        pp         
lifschitz  v          action languages  answer sets and planning  in the logic programming
paradigm  a    year perspective  k r  apt  v w  marek  m  truszczynski  d s 
warren  eds  springer verlag 
lifschitz  v   pearce  d     valverde  a          strongly equivalent logic programs  acm
transactions on computational logic                
lin  f          reducing strong equivalence of logic programs to entailment in classical
propositional logic  in proceedings of the  th international conference on principles
of knowledge representation and reasoning kr       pp         
lin  f          discovering state invariants  in proceedings of the  th international conference on principles of knowledge representation and reasoning kr       pp     
    
lin  f     zhao  y          assat  computing answer sets of a logic program by sat solvers 
artificial intelligence                    
marek  v  w     truszczynski  m          stable logic programming   an alternative logic
programming paradigm  in the logic programming paradigm  a    year perspective 
k r  apt  v w  marek  m  truszczynski  d s  warren  eds  springer verlag 
niemela  i   simons  p     syrjanen  t         
smodels  a system for answer
set programming  in proceedings of the  th international workshop on nonmonotonic reasoning  breckenridge  colorado  usa   corr  arxiv cs ai         
http   www tcs hut fi software smodels  
niemela  i          logic programs with stable model semantics as a constraint programming
paradigm  annals of mathematics and artificial intelligence                   
   

fidiscovering classes of strongly equivalent logic programs

nogueira  m   balduccini  m   gelfond  m   watson  r     barry  m          an a prolog
decision support system for the space shuttle  in proceedings of the  rd international
symposium on practical aspects of declarative languages padl        pp         
osorio  m   navarro  j  a     arrazola  j          equivalence in answer set programming  in
selected papers of the   th international workshop on logic based program synthesis
and transformation lopstr        pp       
pearce  d   tompits  h     woltran  s          encodings for equilibrium logic and logic
programs with nested expressions  in proceedings of   th portuguese conference on
artificial intelligence epia        pp         
petkovsek  m   wilf  h  s     zeilberger  d          a   b  wellesley  mass    a k peters 
turner  h          strong equivalence for logic programs and default theories  made easy  
in proceedings of the  th international conference on logic programming and nonmonotonic reasoning lpnmr        pp       
turner  h          strong equivalence made easy  nested expressions and weight constraints 
theory and practice of logic programming                  
wang  k     zhou  l          comparisons and computation of well founded semantics
for disjunctive logic programs  acm transactions on computational logic        
       

   

fi