journal artificial intelligence research                  

submitted        published      

discovering classes strongly equivalent logic programs
fangzhen lin

flin cs ust hk

department computer science engineering
hong kong university science technology
clear water bay  kowloon  hong kong

yin chen

gzchenyin gmail com

department computer science
south china normal university
guangzhou  p r  china

abstract
paper apply computer aided theorem discovery technique discover theorems strongly equivalent logic programs answer set semantics  discovered theorems capture new classes strongly equivalent logic programs lead
new program simplification rules preserve strong equivalence  specifically 
help computers  discovered exact conditions capture strong equivalence
rule empty set  two rules  two rules one two
rules  two rules another rule  three rules two three
rules 

   introduction
paper apply computer aided theorem discovery technique discover theorems
strongly equivalent logic programs answer set semantics  discovered
theorems capture new classes strongly equivalent logic programs lead new
program simplification rules preserve strong equivalence 
theorem discovery highly creative human process  generally speaking 
divide two steps   i  conjecture formulation   ii  conjecture verification 
computers help two steps  instance  machine learning tools
used first step  i e  coming reasonable conjectures  automated
deduction tools used second step  i e  verifying correctness
conjectures 
theorem discovery may make use learning  two tasks fundamentally different  theorem discovery starts theory  aims finding interesting
consequences theory  learning mostly induction  i e  starts
examples consequences  aims finding theory would explain given examples consequences 
using computers discover theorems old aspiration 
success stories  instance   lenat        reported able come
interesting concepts theorems number theory  remarkable systems
described petkovsek  wilf  zeilberger        discover many identities  especially
hypergeometric identities involving sums binomial coefficients important
analyses algorithms  yet another example interesting theorems discovered
c
    
ai access foundation  rights reserved 

filin   chen

almost fully automatically recent work lin        discovering state invariants
planning domains  lin showed ways classify many state constraints
useful planning according syntactic properties  enumerate easily
many domains  furthermore  many constraints whether invariants
checked automatically  result  system described lin        discover
many common constraints planning domains  logistics domain  could even
discover set complete state invariants 
following line research  paper  consider problem discovering
classes strongly equivalent sets logic program rules answer set semantics 
noted lifschitz  pearce  valverde         two sets rules strongly equivalent 
replace one logic program without changing semantics
program  thus identifying strongly equivalent sets logic program rules useful
exercise may applications program simplification 
paper organized follows  next section  briefly review basic
concepts logic programming answer set semantics  section   state
precise terms type theorems want discover  section   prove
general theorems help us prove theorems  section    describe
theorems discovered  discuss application logic program
simplification section    finally conclude paper section   

   answer set programming
traditional logic programming systems prolog solve problems query answering 
user encodes knowledge domain set rules  solves problem issuing
queries set rules  contrast  answer set programming  asp   niemela       
lifschitz        marek   truszczynski        constraint based programming paradigm 
based logic programming answer set semantics  gelfond   lifschitz       
       solve problem  user encodes domain knowledge logic program
way answer sets program correspond solutions original
problem  compared constraint based programming paradigms  asp allows natural
encodings recursive relations  built in facilities default reasoning  several asp
solvers developed  niemela  simons    syrjanen        leone  pfeifer  faber 
eiter  gottlob  perri    scarcello        lin   zhao        lierler   maratea        
date  asp used space shuttle planning  nogueira  balduccini  gelfond  watson 
  barry         evolutional linguistics  erdem  lifschitz  nakhleh    ringe        
others  following  briefly review basic notions asp 
let l propositional language  i e  set atoms  paper shall consider
logic programs rules following form 
h      hk p      pm   pm       pn

   

hi pi atoms l  logic program default negation  not   
constraints  when k       disjunctions head rules  following  r
rule form  write hdr denote set  h         hk    psr set  p         pm   
ngr set  pm          pn    thus rule r written hdr psr   ngr  
semantics programs given answer sets  gelfond   lifschitz        
   

fidiscovering classes strongly equivalent logic programs

defined fixed point operator known gelfond lifschitz
transformation  let x subset l  p logic program  gelfond lifschitz
transformation p x  written p x   set rules obtained p according
following two rules 
   rule form     p   pi x     n  delete
rule 
   delete literals form pi bodies remaining rules 
instance  p set following rules 
a  b
c
p  a   a  b    p  b    a  b     c    
clearly  x p   p x set rules operator 
set x answer set p x minimal set atoms satisfies every rule
p x   x satisfies rule form
h       h k p      p
  k  hi x whenever  p         pm   x  instance 
program   a   b  c  answer sets  answer sets
program 
two logic programs p  p  said equivalent answer sets 
strongly equivalent  lifschitz et al          under language l   written p   se p   
logic program p l  p p  p p  equivalent  thus write p    se p 
p  p  strongly equivalent   example   a b   a c 
equivalent  strongly equivalent  shown  a a   se   a  
abstract  say rule r strongly equivalent another rule r    written
r  se r     r   se  r     two rules r  r  strongly equivalent rule r  written
 r    r     se r   r    r     se  r   on 
notion strong equivalence important asp several reasons  first all 
helps us understand answer set semantics  instance  turner        showed
disjunctive rule  a  b   strongly equivalent set normal rules  implies
cannot modular translation disjunctive logic programs normal logic
programs  however 
  a  b      a  b  
strongly equivalent
  a b    b a     a  b   
means constraint   a  b   disjunctive rule  a  b   replaced
two rules without disjunction  secondly  mentioned introduction  p 
p  strongly equivalent  interchangeable regardless occur 
thus large repertoire pairs strongly equivalent logic programs  could
   

filin   chen

use transform given program one suitable need hand 
particular  could help us simplify program purpose computing answer
sets  shall see  discovered theorems contribute significantly repertoire 
lifschitz et al         showed checking strong equivalence two logic
programs done logic here and there  three valued non classical logic
somewhere classical logic intuitionistic logic  lin        provided mapping
logic programs propositional theories showed two logic programs
strongly equivalent iff corresponding theories propositional logic equivalent 
result used generating example pairs strongly equivalent logic
programs  verifying conjecture  repeat here 
let p  p  two finite logic programs  l set atoms them 
theorem    lin        p   se p  iff propositional logic  following sentence valid 
 
 
 
p p     
 
 r 
 r   
   
pl

rp 

rp 

p l  p  new atom  rule r form       r 
conjunction following two sentences 
p  pm p m   p n h  hk  

   

p  

   



p m



p m  



p n



h  



h k  

notice   n      left sides implications         considered
true  k      right sides implications         considered
f alse 
general checking two sets rules strongly equivalent conp complete  c f 
turner        pearce  tompits    woltran        lin        

   problem
mentioned above  one possible use notion strongly equivalent logic programs
program simplification  instance  given logic program  rule r it 
may ask whether deleted without knowing rules p   i e 
whether  r  strongly equivalent empty set  may ask whether rule r
p deleted one knows another rule r  already p   i e  whether  r  r   
strongly equivalent  r     general  may ask following k m n question 
 r         rk   u         um    se  r         rk   v         vn    thus theorem discovery task come
up  given k m n problem  computationally effective condition holds
answer k m n question positive 
suppose condition c  suppose
 r         rk   u         um    se  r         rk   v         vn   
better replace  u         um    v         vn   presence r         rk purpose
of  say computing answer sets program  one way use result simplify
given program p first choose k rules p   rules it  try find
   

fidiscovering classes strongly equivalent logic programs

n rules condition c holds  replace rules p simpler n
rules 
however  even checking whether c holds would take negligible constant time  using
procedure simplify given logic program practical k  m  n
small k almost number rules given
program  n small  thus seems us worthwhile solve
k m n problem k  m  n small  particular  paper  shall
concentrate       problem  whether rule always deleted         problem
 whether rule always replaced another one         problem  in presence
rule  whether another rule deleted         problem  in presence two
rules  whether rule always deleted         problem  if pair rules
replaced single rule  
example theorems want discover problems follows 
rule r  r  se iff  hdr ngr   psr     

   

   general theorems
section  prove general theorems help us verify whether assertion
    true 
let l propositional language  i e  set atoms  l  construct first order
language fl equality  two unary predicates h  h    three unary predicates hdr  
psr   ngr logic program rule r l  we assume rule l unique
name   three unary predicates xi   yi   zi positive number i 
notice used hdr   psr   ngr denote sets atoms previously 
overload unary predicates  naturally  intended interpretations
unary predicates respective sets 
definition   given set l atoms  intended model fl one whose domain l 
rule r l  unary predicates psr   hdr   ngr interpreted
corresponding sets atoms  psr   hdr   ngr   respectively 
conditions rules l  psr ngr      expressed special sentences
called properties fl  
definition   sentence fl property n rules constructed equality
predicates xi   yi   zi     n  property n rules true  holds 
sequence p    r         rn   n rules  p   true intended model fl    p  
obtained replacing xi hdri   yi psri   zi ngri  
notice since  p   mention predicates xi   yi   zi   h    h    true
one intended model  true intended models 
mentioned above  interested capturing strong equivalence
two programs computationally effective condition  specifically 
small k  m  n  interested finding property k     n rules
sequence k     n rules  p    r         rk   u         um   v         vn   
 r         rk   u         um    se  r         rk   v         vn   iff true p  
   

   

filin   chen

shall prove general theorems help us verify assertion
class formulas  
first all  theorem   reformulated fl follows reading h   p  p
holds  h   p  p  holds 
theorem   p   se p  l iff following sentence
 
 
x h   x  h   x    
 r 
 r  
rp 

   

rp 

true intended models fl    r  conjunction following two
sentences 
 x psr  x  h   x   x ngr  x  h   x    x hdr  x  h   x   

   

 x psr  x  h   x   x ngr  x  h   x    x hdr  x  h   x   

   

first order logic  prenex formula form  x y b satisfiable 
satisfiable structure n elements  b formula contains quantifiers 
constants  function symbols  n length  x non empty     x
empty  prove similar result first order languages intended
models here 
definition   sentence fl extended property n rules constructed
equality predicates xi   yi   zi     n  h  h    extended
property n rules true  holds  sequence p    r         rn   n rules model
 p   true    p   obtained replacing xi hdri   yi
psri   zi ngri  
definition   following  p    r         rn   tuple rules l  l  subset
l  define restriction p l   r          rn     ri 
hdri l  psri l     ngri l    
lemma   let extended property fl n rules  form  x y q 
 x tuple w variables  q formula quantifiers 
holds sequence p n rules intended model fl   subset
l  l l  w atoms  or one atom w       holds
restriction p l  intended model fl   
proof  suppose intended model fl     p    thus tuple
p  w  or one w      atoms l     y q p    x  
p   let l  set
 
atoms p   defined follows 
predicates h    h    xi   yi   zi      interpreted restriction
interpretation l   
rule r l    predicates hdr   psr   ngr interpreted
  well defined r rule l 
   

fidiscovering classes strongly equivalent logic programs

  intended model fl    let p   restriction p l    p  
tuple rules l    since q quantifiers  and language function symbols  
instantiation  u  y l       q p    x  
p   y   u  iff      q p      x  
p   y   u   since
 
 
    y q p    x  
p       y q p    x  
p   thus       x y q p     
using theorem   lemma  show following theorem enable
us automate verification part     property prenex
format 
theorem   without loss generality  suppose n  property k m n
rules form  x y q   x tuple w variables  q formula
quantifiers  following two assertions equivalent 
 a  sequence k     n rules  p    r         rk   u         um   v         vn    true
p    r         rk   u         um    se  r         rk   v         vn   
 b   b    n      sequence p    r         rk   u         um   v         vn   rules
w     k   m  atoms  true p  
 r         rk   u         um    se  r         rk   v         vn   
 b    n      sequence p    r         rk   u         um   rules
k atoms  true p  
 r         rk   u         um    se  r         rk   
k w    k w    k      k     otherwise 
proof   a   b  obvious  assume  b  true  show  a  holds
well  suppose first n      suppose p    r         rk   u         um   v         vn   sequence
k     n rules language l true p  
 r         rk   u         um     se  r         rk   v         vn   
thus intended model fl satisfies  p    intended model fl
satisfies following sentence 
 
 
 x h   x  h   x   
 r 
 r   
rp 

rp 

p     r         rk   u         um    p     r         rk   v         vn    noted definition    satisfy  p    thus satisfies following sentence
 
 
 
 
 p    x h   x  h   x    
 r 
 r    
 r 
 r         
rp 

rp 

rp 

rp 

p     v         vn    p     u         um   
rule r  extended property  x  y  one rule
mention quantifiers  r  equivalent x  y  r   thus tuple q
rules vthere extended property rules mention quantifiers
rq  r  equivalent  y   q    y tuple  t variables 
thus
   

filin   chen

tuple z     k   m  variables  tuple z   variables  extended property  
k     n rules quantifiers  whose free variables z  
z    
tuple z     k   n  variables  tuple v   variables  extended property  
k     n rules quantifiers  whose free variables
z   z  
v     v     v     v   common variables them       equivalent
following sentence 
  x h   x  h   x    z   z     z   z        p   
since assumed n  thus extended property   k     n
rules mention quantifiers function symbols  whose free variables
among z     z     z   sentence equivalent following sentence 
  x h   x  h   x   z    z     z        p   
given form assumed theorem  tuple z   w     k   m 
variables  tuple z   variables  extended property k     n rules
mention quantifiers  whose free variables among z     z  
sentence equivalent  z     z     p   
lemma    subset l  l w     k   m  atoms
 z     z     holds p     p   restriction p l   
p      r          rk    u          u m   v          vn    
mean true p      r          rk    u          u m     se  r          rk    v          vn    
shows  b      a  
proof  b     a  exactly except
 
 
 
 r 
 r  
rp 

rp 

equivalent
 

 

rp 

 

 r 

 r   

rp 


part     often proved help following theorem 
theorem   let l  l  two languages  f function l  l    p  p 
two programs l  strongly equivalent  f  p    f  p    two programs
l  strongly equivalent  f  p   obtained p replacing
atom p f  p  
proof  theorem   fact propositional logic  tautology  f
function l  l    f    tautology  f    formula obtained
replacing atom p f  p  
example using theorems section proving assertions form
     see section     
   

fidiscovering classes strongly equivalent logic programs

   computer aided theorem discovery
given k m n problem  strategy discovering theorems follows 
   choose small language l 
   generate possible triples
  r         rk     u         um     v         vn   

    

sets rules l  r         rk   u         um    se  r         rk   v         vn   l 
   formulate conjecture k m n problem holds language l  i e 
condition true triple form      iff generated step   
   verify correctness conjecture general case 
process may iterated  instance  conjecture formulated step   may
fail generalize step    either need formulate new conjecture start
step   using larger language 
ideally  would process automatic  however  difficult automate
steps       number possible patterns need examine order come
good conjecture step   huge  general theorem
enables us automate verification part step    theorem   enables us
automate proof sufficient part assertion     class formulas  
similar result necessary part   shall see below  theorem   helps
lot here  provide automated procedure  nonetheless  computers play
crucial role steps  following report theorems discovered
using procedure 
          problem
problem asks given rule strongly equivalent empty set  thus always
deleted program  following experimental result 
lemma   rule r mentions three distinct atoms  r  se iff
 hdr ngr   psr     
using theorem    show following result 
lemma   rule r form     r  se  hdr ngr   psr   
true  rule mentions three atoms 
proof  suppose r  se   hdr psr     psr ngr     suppose l set atoms
r  a  b  c three new atoms  let

p hdr

b
p psr
f  p   

c
otherwise
   

filin   chen

theorem    f  r   se   construction f  
hdf  r  psf  r      psf  r  ngf  r      f  r  mentions three distinct
atoms 
theorem    the       problem  lemma   holds general case  i e  without
restriction number atoms r 
proof  notice condition lemma     hdr ngr   psr      equivalent
following property
x  x   x  z   x   y   x 
true  r   thus part follows theorem   lemma   
part follows lemma   lemma   
part theorem already well known  first proved osorio et  al         
part proved recently inoue sakama        
discover anything new case  reassuring methodology works 
notice need consider   n   problem n     
n   r         rn   strongly equivalent iff   n   ri   strongly
equivalent  
                problems
      problem asks rule always deleted presence another rule 
      problem asks rule always replaced another one  first solve
      problem  solution       problem come corollary 
following experimental result       problem 
lemma   two rules r  r  mentions three atoms   r    r   
 r    strongly equivalent iff one following two conditions true 
   r   se  
   psr  psr    ngr  ngr    hdr  hdr  ngr   
lemma   two rules r  r   r    r     se  r     none
two conditions lemma   hold  two rules mention three
atoms 
proof  suppose two rules r    r   r    r     se  r     none two
conditions lemma   hold  let l set atoms r    r   
without loss generality  suppose a  atom makes condition    
lemma   false  psr     a    empty  let a  atom it  let l     a    a    a    
a  new atom  f function l l  following 

  a 
a 
a 
psr     a   
f  a   

a 
otherwise
   

fidiscovering classes strongly equivalent logic programs

clearly  f  r    f  r    mention three distinct atoms  theorem   
 f  r     f  r      se f  r    
show none two conditions lemma   hold f  r    f  r    either 
show first f  r      se   theorem    need show
  psf  r     hdf  r    ngf  r     
empty  a  s  construction f   a  psr   hdr  ngr     contradiction
assumption r  strongly equivalent   similarly  a  s 
construction f   a  psr   hdr  ngr     contradiction assumption
r  strongly equivalent   a  cannot a  cannot psf  r     
thus must empty 
show case psf  r    psf  r      ngf  r    ngf  r     
hdf  r    hdf  r    ngf  r      assumption  a  atom makes either psr  psr   
ngr  ngr    hdr  hdr  ngr  false  three cases here  suppose a  makes
psr  psr  false  i e  a  psr  a    psr    construction f  
a  psf  r    a    psf  r      two cases similar 
theorem    the       problem  lemma   holds general case  without restriction number atoms r  r   
proof  condition lemma   equivalent following property
 x  x   x  z   x   y   x  
  x y   x  y   x    x z   x  z   x    x x   x   x   x  z   x    
true  r    r     thus part follows theorem   lemma    noticing
property written x y  q required theorem   
part follows lemma   lemma   
thus rule r  cannot deleted deleted presence
another rule r    must case r  redundant given r    body r 
satisfied  body r  satisfied well  furthermore  r  entail
entailed r   hdr  hdr  ngr    
osorio et al         proved  r    r     se r  either psr  ngr    hdr  ngr 
psr  psr    ngr  ngr    hdr  hdr    recently  eiter et al         showed
 r    r     se r  r  s implies r   wang   zhou         i e  exists set
ngr  hdr  hdr  a  ngr  ngr    a  psr  psr   
one see  special cases part theorem    result
actually general  instance  special cases apply
  c b  c     b  c  

 c b  c  
one easily show two sets strongly equivalent using theorem 
solution       problem  derive solution       problem 
   

filin   chen

theorem    the       problem  two rules r  r    r   se r  iff one
following two conditions true 
   r   se r   se  
   psr    psr    ngr    ngr    hdr  ngr    hdr  ngr   
proof  theorem    easy see r   se r  iff  r    r     se r   r    r     se r   

thus two rules r  r  always interchanged either
deleted  strongly equivalent empty set  body 
consequences body true  instance   a b  a   se   b  a 
matter b is  two rules body  body true 
consequence   contradiction  another example 
 a  b a   se  b a  
two rules body  and  body true  consequence 
b 
                        problems
      problem asks rule deleted presence another two rules 
      problem asks two rules replaced single rule        problem asks
two rules replaced another two rules  similar previous subsection 
solution             problems follow solution       problem 
experiment       problem difficult turned out 
consider language six atoms case  principle  given language l 
every subset l hd  ps  ng rule  thus size l six 
principle                     possible rules            triples them  however 
cut numbers significantly results already proved 
first  consider rules common elements
two sets  hd  ps  ng   either hd ps ps ng common element 
theorem    rule deleted  hd ng common elements  according
theorem    obtain strongly equivalent rule deleting common elements hd 
following  call rules canonical  is  rule r canonical
hdr psr   hdr ngr   psr ngr    
secondly  consider isomorphic rules  one to one onto
function l l maps  r    r    r     r     r     r      two sets rules
essentially except names atoms them 
thus considering canonical rules using certain normal form triples
rules avoids isomorphic rules  ended roughly     million triples rules
consider verifying following result  took    hours solaris server
consisting   sun ultra sparc iii    mhz cpus  gb ram 
details experiment       problem  please refer  chen  lin    li 
      
   

fidiscovering classes strongly equivalent logic programs

lemma   three canonical rules r    r  r  mention six atoms 
 r    r    r     se  r    r    iff one following three conditions true 
    r    r     se r   
    r    r     se r   
   atom p that 
    p  psr  psr     hdr  hdr  ngr  ngr   
    hdri    p  hdr  ngr  psri    p  psr  ngri    p  ngr   
      
    p psr  ngr    hdr  hdr   
    p psr  ngr    hdr  hdr   
following lemma reason need consider language six atoms
problem 
lemma   three canonical rules r   r  r   r    r    r     se  r    r    
none three conditions lemma   hold  three rules
mention six atoms 
proof  proof lemma tedious consider several cases  consider
following statements three canonical rules r    r    r   
 i   r    r    r     se  r    r    
 ii   r    r      se  r     i e  psr    psr  ngr    ngr  hdr  ngr    hdr  ngr 
 iii   r    r      se  r     i e  psr    psr  ngr    ngr  hdr  ngr    hdr  ngr 
 iv   psr  psr     hdr  hdr  ngr  ngr     
 v  atom p set  psr  psr     hdr  hdr  ngr  ngr     another
different atom q one following three conditions true 
   q hdr  ngr  q   hdr  ngr   
   q psr  q   psr   
   q ngr  q   ngr   
notice negation condition       lemma   
 vi  hdr  hdr    ngr    atom p psr  ngr         
hdri    p  hdr  ngr    psri    p  psr    ngri    p  ngr   
since r  r  symmetric conditions lemma    prove lemma  need
prove following three assertions 
 a  three canonical rules r    r    r  satisfy  i   iv   three
canonical rules r     r     r   mention six atoms  satisfy  i   iv  well 
   

filin   chen

 b  three canonical rules r    r    r  satisfy  i   iii  v  
three canonical rules r     r     r   mention six atoms  satisfy  i   iii  v 
well 
 c  three canonical rules r    r    r  satisfy  i   iii  vi  
three canonical rules r     r     r   mention six atoms  satisfy  i  iii  vi  well 
prove three assertions one one 
 a  let a    a  two atoms make  ii   iii  true   psr   psr  psr      a    a   
empty  let a  atom it  psr    psr  psr   a    a     empty  let a 
atom it   psr  psr     psr   a    a     empty  let a  atom it 
finally let a  new atom different a  a    l     a    a    a    a    a    a    
let f function l l  defined following 

a 
  a 





  a 

 


a 
 psr   psr  psr        a    a   
f  a   

psr     psr  psr   a    a    


 



 psr  psr       psr   a    a    

 
a 
otherwise
     let ri  follows 
psri    psf  ri     ngri    ngf  ri     hdri    hdf  ri     ngf  ri    

    


     ri  canonical rule  ri   se f  ri    this 
need show f  ri     se      see this  notice
definition f   atoms a  a  psr  mapped  a    a    
atoms a  a  hdr  ngr  mapped  a    a     thus
psf  r     hdf  r    ngf  r          theorem    f  r      se   f  r      se
f  r      se    ii   iii  hold f  r     f  r     f  r    definition
f  
 i  holds r     r     r     theorem   
 f  r     f  r     f  r       se  f  r     f  r     
     ri   se f  ri   
 ii   iii  hold r     r     r     mentioned  definition f    ii 
 iii  hold f  r     f  r     f  r    
 iv  holds r     r     r     again  need show  iv  holds
f  r     f  r     f  r     see this  notice atoms a  a 
psr  psr  mapped  a    a     atoms a  a 
hdr  hdr  ngr  ngr  mapped  a    a    
   

fidiscovering classes strongly equivalent logic programs

 b  let a    a  two atoms make  ii   iii  true  let p  q two witness
atoms  v   p os r       a    a    p  q  empty  let a  atom it  let a 
new atom  l     a    a    a    a    p  q   define f follows 

  a 

a 


a 
  a 



p
a p
f  a   
q
a q






psr     a    a    p  q 
 


a 
otherwise
define ri       well     
     ri  canonical rule  ri   se f  ri    seen
way  a  above 
theorem     f  r     f  r     f  r      se  f  r     f  r      thus
 r     r     r      se  r     r     
 i  holds r     r     r    
definition f    ii   iii  hold f  r     f  r     f  r     thus hold
r     r     r   well 
definition f    v  holds f  r     f  r     f  r     atom
p set  psf  r    psf  r       hdf  r    hdf  r    ngf  r    ngf  r       another
different atom q one following three conditions true 
   q hdf  r    ngf  r    q   hdf  r    ngf  r     
   q psf  r    q   psf  r     
   q ngf  r    q   ngf  r     
 v  holds r     r     r   well     
psri    psf  ri     ngri    ngf  ri     hdri  ngri    hdf  ri   ngf  ri    
 c  let a    a  two atoms make  ii   iii  true  let p witness atom
 vi   let q hdr  hdr  q   ngr    p os r       a    a    p  q  empty  let
a  atom it  let a  new atom  let l     a    a    a    a    p  q   define f
follows 

a 
  a 





  a 

 


p
a p
f  a   
q
a q






psr     a    a    p  q 

 
a 
otherwise
define ri       well     
     ri  canonical rule  ri   se f  ri    seen
way  a  above 
   

filin   chen

theorem     f  r     f  r     f  r      se  f  r     f  r      thus
 r     r     r      se  r     r     
 i  holds r     r     r    
definition f    ii   iii  hold f  r     f  r     f  r     thus
hold r     r     r   well 
definition f    vi  holds f  r     f  r     f  r     hdf  r    hdf  r     
ngf  r      atom p psf  r    ngf  r            hdf  ri    
 p  hdf  r    ngf  r      psf  ri      p  psf  r      ngf  ri      p  ngf  r       vi 
holds r     r     r   well
psri    psf  ri     ngri    ngf  ri     hdri  hdf  ri    

theorem    the       problem  lemma   holds general case  without restriction number atoms r    r    r   
proof  assertion r    r    r  canonical rules satisfy one three
conditions lemma   equivalent following property
 x    x   x  y   x      x   x  z   x      y   x  z   x     
 x    x   x  y   x      x   x  z   x      y   x  z   x     
 x    x   x  y   x      x   x  z   x      y   x  z   x     
   x y   x  y   x    x z   x  z   x    x x   x   x   x  z   x    
  x y   x  y   x    x z   x  z   x    x x   x   x   x  z   x    
 x con   x  con   x  con   x  con   x   
true  r    r    r     con   x  stands
 y   x  y   x    x   x  x   x  z   x  z   x  
con   x 
y  x    y    x   y   x   y  z   y     y   y  y   y    z   y  z   y  
 x   y   x   y  z   y     y   y  y   y    z   y  z   y   
con   x 
y   x  z   x  y   x   y  x   y    
con   x 
y   x  z   x  y   x   y  x   y    
thus part follows theorem   lemma    noticing
property written x y  q required theorem    part follows
lemma   lemma   
   

fidiscovering classes strongly equivalent logic programs

conditions lemma    theorem    rather complex  reason
difficult automate step   procedure beginning section 
conditions capture possible cases r  subsumed r  r    difficult
describe concisely words  give examples 
consider following three rules 
r     a  a   
r     a  a   
r     a  a    
 r    r    r     se  r    r    condition     lemma   holds 
however  change r  r     a  a    p     r    r    r     p     r    r   
strongly equivalent  one could check condition       lemma   hold 
indeed  p   a  a    unique answer set  a     p   a  a    two
answer sets  a     a    a    
easy show theorem   a  a  subsumed
  a    a    a      a    a  a     
a    a  subsumed
  a  a      a  a     
results have  following theorem yield solution      
problem 
theorem    the       problem  three rules r    r  r     r    r     r   
strongly equivalent iff following three conditions true 
    r    r    r     se  r    r    
    r    r     se  r    
    r    r     se  r    
example 
  a  a    a      a    a  a      se  a  a    

   a    a       a    a      se   a    

  a  a    a      a  a    a       se  a  a    
similarly  following theorem
theorem     the       problem  four rules r    r    r    r     r    r     r    r   
strongly equivalent iff following four conditions true 
   

filin   chen

    r    r    r     se  r    r    
    r    r    r     se  r    r    
    r    r    r     se  r    r    
    r    r    r     se  r    r    

   program simplification
mentioned one possible use notion strongly equivalent logic programs
simplifying logic programs  p  se q  q simpler p  
replace p program contains q 
answer set programming systems perform program simplifications  however 
smodels  niemela et al         stand alone front end called lparse
used ground simplify given logic program  seems lparse simplifies grounded
logic program computing first well founded model  not  however  perform
program simplification using notion strong equivalence  instance  lparse        
current version lparse  nothing following set rules 
  a b    b a    a a    replace first rule following
program   a a    a b    b a   constraint a 
unlikely anyone would intentionally writing rules b a  a 
type rules arise result grounding rules variables 
instance  following typical recursive rule used logic programming encoding
hamiltonian circuit problem  niemela        marek   truszczynski        
reached x  arc y  x   hc y  x   reached y   
instantiated graph cyclic arcs arc a  a   rule generates cyclic rules
form reached x  hc x  x   reached x   unless deleted explicitly  rules
slow many systems  especially based sat  instance  none graphs
tested using assat self cycles consisting arc node  lin   zhao 
       cycles included  assat would run significantly longer 
thus useful consider using results program simplification 
indeed  transformation rules deleting contain common elements
heads positive bodies proposed  brass   dix         studied
perspective strong equivalence  osorio et al         eiter et al          results
add new transformation rules  instance  theorem    delete
elements head rule appear negation as failure part rule 
theorems         used define new transformation rules 

   concluding remarks future work
donald knuth  forward  petkovsek et al          said
science understand well enough explain computer  art
everything else do     science advances whenever art becomes science 
   

fidiscovering classes strongly equivalent logic programs

state art advances too  people always leap new
territory understood old 
hope work  one step closer making discovering classes strongly
equivalent logic programs science 
mentioned methodology used paper similar  lin 
       cases  plausible conjectures generated testing domains
small sizes  general theorems proved aid verification conjectures
general case  however  plausible conjectures generated automatically
 lin         done manually here  verifications conjectures
 lin        done automatically well  done semi automatically here 
overcoming two weaknesses focus future work  specifically  would
make step   procedure section   automatic  prove theorem similar
theorem   automate proofs parts theorems theorems      way theorem   makes proofs parts theorems
automatic  way  would able discover interesting theorems area 
easily 

acknowledgments
extended abstract paper appeared proceedings ijcai      thank yan
zhang comments earlier version paper  thank anonymous
reviewers useful comments  especially one pointing error
lemma   earlier version paper  work supported part
research grants council hong kong competitive earmarked research grant
hkust       e  part second authors work done student sun
yat sen university  guangzhou  china  visiting scholar department computer
science engineering  hong kong university science technology  hong kong 

references
brass  s     dix  j          semantics  disjunctive  logic programs based partial
evaluation  journal logic programming              
chen  y   lin  f     li  l          selp   system studying strong equivalence
logic programs  proceedings  th international conference logic
programming nonmonotonic reasoning lpnmr        pp         
eiter  t   fink  m   tompits  h     woltran  s          simplifying logic programs
uniform strong equivalence  proceedings  th international conference
logic programming nonmonotonic reasoning lpnmr        pp       
erdem  e   lifschitz  v   nakhleh  l     ringe  d          reconstructing evolutionary
history indo european languages using answer set programming  proceedings
 th international symposium practical aspects declarative languages padl
       pp         
   

filin   chen

gelfond  m     lifschitz  v          stable model semantics logic programming 
proceedings  th international conference symposium logic programming iclp slp   pp           
gelfond  m     lifschitz  v          classical negation logic programs disjunctive
databases  new generation computing                  
inoue  k     sakama  c          equivalence logic programs updates  proceedings  th european conference logics artificial intelligence jelia   pp 
       
lenat  d  b          automated scientific theory formation  case study using
program  machine intelligence    pp          jean hayes  donald michie  l 
i  mikulich  eds  ellis horwood 
leone  n   pfeifer  g   faber  w   eiter  t   gottlob  g   perri  s     scarcello  f         
dlv system knowledge representation reasoning  acm transactions
computational logic        
lierler  y     maratea  m          cmodels    sat based answer set solver enhanced
non tight programs  proceedings  th international conference logic
programming nonmonotonic reasoning lpnmr        pp         
lifschitz  v          action languages  answer sets planning  logic programming
paradigm     year perspective  k r  apt  v w  marek  m  truszczynski  d s 
warren  eds  springer verlag 
lifschitz  v   pearce  d     valverde  a          strongly equivalent logic programs  acm
transactions computational logic                
lin  f          reducing strong equivalence logic programs entailment classical
propositional logic  proceedings  th international conference principles
knowledge representation reasoning kr       pp         
lin  f          discovering state invariants  proceedings  th international conference principles knowledge representation reasoning kr       pp     
    
lin  f     zhao  y          assat  computing answer sets logic program sat solvers 
artificial intelligence                    
marek  v  w     truszczynski  m          stable logic programming   alternative logic
programming paradigm  logic programming paradigm     year perspective 
k r  apt  v w  marek  m  truszczynski  d s  warren  eds  springer verlag 
niemela  i   simons  p     syrjanen  t         
smodels  system answer
set programming  proceedings  th international workshop nonmonotonic reasoning  breckenridge  colorado  usa   corr  arxiv cs ai         
http   www tcs hut fi software smodels  
niemela  i          logic programs stable model semantics constraint programming
paradigm  annals mathematics artificial intelligence                   
   

fidiscovering classes strongly equivalent logic programs

nogueira  m   balduccini  m   gelfond  m   watson  r     barry  m          a prolog
decision support system space shuttle  proceedings  rd international
symposium practical aspects declarative languages padl        pp         
osorio  m   navarro  j  a     arrazola  j          equivalence answer set programming 
selected papers   th international workshop logic based program synthesis
transformation lopstr        pp       
pearce  d   tompits  h     woltran  s          encodings equilibrium logic logic
programs nested expressions  proceedings   th portuguese conference
artificial intelligence epia        pp         
petkovsek  m   wilf  h  s     zeilberger  d            b  wellesley  mass    k peters 
turner  h          strong equivalence logic programs default theories  made easy  
proceedings  th international conference logic programming nonmonotonic reasoning lpnmr        pp       
turner  h          strong equivalence made easy  nested expressions weight constraints 
theory practice logic programming                  
wang  k     zhou  l          comparisons computation well founded semantics
disjunctive logic programs  acm transactions computational logic        
       

   


