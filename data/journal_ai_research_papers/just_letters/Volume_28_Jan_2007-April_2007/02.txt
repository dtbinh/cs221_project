journal of artificial intelligence research                  

submitted       published     

generating hard satisfiable formulas by hiding
solutions deceptively
haixia jia

hjia cs unm edu

computer science department
university of new mexico

cristopher moore

moore santafe edu

computer science department
university of new mexico

doug strain

doug strain gmail com

computer science department
university of new mexico

abstract
to test incomplete search algorithms for constraint satisfaction problems such as  sat  we need a source of hard  but satisfiable  benchmark instances  a simple way to do
this is to choose a random truth assignment a  and then choose clauses randomly from
among those satisfied by a  however  this method tends to produce easy problems  since
the majority of literals point toward the hidden assignment a  last year  achlioptas 
jia and moore proposed a problem generator that cancels this effect by hiding both a
and its complement a  achlioptas  jia    moore         while the resulting formulas
appear to be just as hard for dpll algorithms as random   sat formulas with no hidden
assignment  they can be solved by walksat in only polynomial time 
here we propose a new method to cancel the attraction to a  by choosing a clause with
t     literals satisfied by a with probability proportional to q t for some q      by varying
q  we can generate formulas whose variables have no bias  i e   which are equally likely to be
true or false  we can even cause the formula to deceptively point away from a  we present
theoretical and experimental results suggesting that these formulas are exponentially hard
both for dpll algorithms and for incomplete algorithms such as walksat 

   introduction
to evaluate search algorithms for constraint satisfaction problems  we need good sources
of benchmark instances  real world problems are the best benchmarks by definition  but
each such problem has structures specific to its application domain  in addition  if we
wish to study how the running times of search algorithms scale  we need entire families of
benchmarks with varying size and density 
one way to fill this need is to generate random instances  for instance  for   sat we
can generate instances
 with n variables and m clauses by choosing each clause uniformly
from among the   n  possibilities  we can then vary these formulas according to their
size and their density r   m n  while such formulas lack much of the structure of realworld instances  they have been instrumental in the development and study of new search
methods such as simulated annealing  johnson  aragon  mcgeoch    shevon         the
c
    
ai access foundation  all rights reserved 

fijia  moore    strain

breakout procedure  morris         walksat  selman  kautz    cohen         and survey
propagation  mezard   zecchina        
however  if we wish to test incomplete algorithms such as walksat and survey propagation  sp   we need a source problems that are hard but satisfiable  in contrast  above a critical density r        the random formulas defined above are almost certainly unsatisfiable 
random formulas at this threshold appear to be quite hard for complete solvers  cheeseman  kanefsky    taylor        mitchell  selman    levesque        hogg  huberman   
williams         but for precisely this reason  it is not feasible to generate large problems
at the threshold and then filter out the unsatisfiable ones  while other classes of satisfiable
csps have been proposed  such as the quasigroup completion problem  shaw  stergiou   
walsh        kautz  ruan  achlioptas  gomes  selman    stickel        achlioptas  gomes 
kautz    selman         we would like to have problems generators that are native to
  sat 
a natural way to generate random satisfiable   sat formulas is to choose a random
truth assignment
a        n   and then choose m clauses uniformly and independently from
n
among the     clauses satisfied by a  the problem with this is that simply rejecting clauses
that conflict with a causes an unbalanced distribution of literals  in particular  on average
a literal will agree with its value in the hidden assignment     of the time  thus  especially
when there are many clauses  a simple majority heuristic or local search will quickly find
a  more sophisticated versions of this hidden assignment scheme  asahiro  iwama   
miyano        van gelder        improve matters somewhat but still lead to biased samples 
thus the question is how to avoid this attraction to the hidden assignment 
one approach  achlioptas et al         is to choose clauses uniformly from among those
that are satisfied by both a and its complement a  this is inspired by recent work on
random k sat and not all equal sat  achlioptas   moore      b   in which symmetry
with respect to complementation reduces the variance of the number of solutions  the idea
is that a and a cancel each others attractions out  making either one hard to find  indeed 
the resulting formulas appear to take dpll solvers exponential time and  in general  to
be just as hard as random   sat formulas with no hidden assignment  on the other
hand  walksat solves these formulas in polynomial time  since after a few variables are set
in a way that agrees with one of the hidden assignments  neighboring variables develop
correlations consistent with these  barthel  hartmann  leone  ricci tersenghi  weigt   
zecchina        
in this paper  we pursue an alternate approach  inspired by achlioptas and preres  who
reweighted the satisfying assignments in a natural way  achlioptas   peres         we hide
just one assignment  but we bias the distribution of clauses as follows 
   predefine a constant q     and generate a random truth assignment a        n
   do rn times  choose a random k tuple of variables  and choose from among the clauses
in which t     literals are satisfied by a with probability proportional to q t  
this penalizes the clauses which are more satisfied by a  and reduces the extent to which
variable occurrences are more likely to agree with a   note that the naive formulas discussed
above amount to the case q       as we will see below  by choosing q appropriately we can
rebalance the distribution of literals  so that each variable is as likely to appear positively
   

figenerating hard satisfiable formulas by hiding solutions deceptively

as often as negatively and no longer points toward its value in a  by reducing q further 
we can even make it more likely that a variable occurrence disagrees with a  so that the
formula becomes deceptive and points away from the hidden assignment 
we call these formulas q hidden  to distinguish them from the naive   hidden formulas discussed above  the   hidden formulas studied by achlioptas  jia and moore  achlioptas et al          and the   hidden formulas consisting of random   sat formulas with no
hidden assignment  like these other families  our q hidden formulas are readily amenable to
all the mathematical tools that have been developed for studying random k sat formulas 
including moment calculations and the method of differential equations  below we calculate
the expected density of satisfying assignments as a function of their distance from a  and
analyze the behavior of the unit clause  uc  algorithm on q hidden formulas  we then
present experiments on several complete and incomplete solvers  for certain values of q  we
find that our q hidden formulas are just as hard or harder for dpll algorithms as   hidden
formulas or   hidden formulas  and are much harder than naive   hidden formulas  in addition  we find that local search algorithms like walksat find our formulas much harder than
any of these other families  taking exponential as opposed to polynomial time  moreover 
the running time of walksat increases sharply as our formulas become more deceptive 

   the expected density of solutions and the bias of local search
for           let x be the number of satisfying truth assignments in a random q hidden
k sat formula that agree on a fraction  of the variables with the hidden assignment a 
that is  their hamming distance from a is      n  we wish to calculate the expectation
e x   
by symmetry  we can take a to be the all true assignment  in that case  a clause with
t     positive literals is chosen with probability q t        q k      here we normalize the
probabilities by summing over the kt clauses for all t       let b be a truth assignment
where n of the variables are true and    n are false  then  analogous to the calculation
by achlioptas  jia and moore  achlioptas et al          we use linearity of expectation  independence between clauses  the selection of the literals in each clause with replacement  and
stirlings approximation for the factorial to obtain  where  suppresses terms polynomial
in n  

n
pr b satisfies a random clause m
n
 m
 
k   t
x
k q      t kt
n
 
 
t      q k   
n
t  

e x    



 fk r q   n

where
f     

 
       



 

 q         k  k
     q k   

r

 

looking at figure    we see that the behavior of f near        changes dramatically
as we vary q  for q      i e   naive   hidden formulas   f         is positive  on the other
   

fijia  moore    strain

density of solutions with q    

density of solutions with r  
   

   
r  

 

   

q    

   

   

r  

q      
   

   

   

 

r  

   

r    

q  

   
r  

   

   

   

   

r  

   
 

   

   



   

   

   
 

 

   

   



   

   

 

figure    the nth root f    of the expected number of solutions which agree with the
hidden assignment on a fraction  of the variables  here k      the left part of
the figure shows f    for q      q         and q       at r      the right part
shows f    for q       and varying r  note that at r        we have f        for
all       
hand  if q is the positive root q  of
       q      q k     

   



then f          
    we call the resulting q  hidden formulas balanced  for k      q is the
golden ratio                     
this choice of q affects local search algorithms such as walksat in the following way 
if we start with a random assignment b  a step of walksat chooses a random unsatisfied
clause  and satisfies a literal   chosen randomly from that clause  the expected change
in the hamming distance d a  b  is then the probability that   agrees with a  minus the
probability that it doesnt  since all the clauses are equally likely to be unsatisfied by a
random assignment  this is the expectation of  t k    in a random clause  namely

e d a  b    

k   t
x
k q   t k    
t  

t      q k   

 

       q      q k 
 
     q k   

thus is zero when     holds  in which case walksat is equally likely to move toward or away
from a  thus  analogous to the calculation by achlioptas and peres  achlioptas   peres 
       when q   q  a given literal is equally likely to agree or disagree with a  and walksat
has no information about in which direction the hidden assignment lies   this argument
applies to the first o n      steps of walksat  since until then it is unlikely to have seen any
variable twice  
   

figenerating hard satisfiable formulas by hiding solutions deceptively

for smaller values of q such as q       shown in figure    f         becomes negative 
and we expect a local search algorithm starting at a random assignment to move away from
a  indeed  f    has a local maximum at some         and for small r there are solutions
with         when r is sufficiently large  however  f        for all         and as
n   the probability any of these alternate solutions exist is exponentially small  we
conjecture that for each q  q  there is a threshold rc  q  at which with high probability
the only solutions are those close to a  setting max f                 yields an upper
bound on rc  q   which we show in figure   below  for instance  the dotted line in figure  
shows that rc            
we call such formulas deceptive  since local search algorithms such as walksat  dpll
algorithms such as zchaff that use a majority heuristic in their splitting rule  and messagepassing algorithms such as sp will presumably search in the wrong direction  and take exponential time to cross the local minimum in f    to find the hidden assignment  our
experiments below appear to confirm this intuition  in addition  all three types of algorithms appear to encounter the most difficulty at roughly the same density rc  q   where we
conjecture the alternate solutions disappear 

   unit clause heuristic and dpll algorithms
unit clause  uc  is a linear time heuristic which permanently sets one variable in each
step as follows  if there are any unit clauses  satisfy them  otherwise  pick a random literal
and satisfy it  for random   sat formulas  uc succeeds with constant probability for
r        and fails with high probability for r        chao   franco         uc can
be thought as the first branch of a simple dpll algorithm s  whose splitting rule takes
a random unset variable and tries its truth values in random order  thus uc succeeds if s
succeeds without backtracking  on the other hand  it was showed that ss expected running
time is exponential in n for any r        cocco   monasson        cocco  monasson 
montanari    semerjian         also achlioptas  beame and molloy used lower bounds
on resolution complexity to show that s takes exponential time with high probability if
r         achlioptas  beame    molloy         in general  it appears that simple dpll
algorithms begin to take exponential time at exactly the density where the corresponding
linear time heuristic fails 
in this section  we analyze the performance of uc on our q hidden formulas  specifically 
we show that in the balanced case where q   q    uc fails for r       just as it does for
  hidden formulas  based on this  we conjecture that the running time of s  and other
simple dpll algorithms  is exponentially large for our formulas at the same density as for
  hidden ones 
we analyze the behavior of uc on arbitrary initial distributions of   sat clauses using
the method of differential equations  for simplicity we assume that a is the all true assignment  a round of uc consists of a free step  in which we satisfy a random literal  and the
ensuing chain of unit clause propagations  for    i    and    j  i  let si j   si j n be
the number
of clauses of length i with j positive literals and i  j negative ones  and let
p
si   j si j   let x   xn be the number of variables set so far  and let mt and mf be the
expected number of variables set true and false in a round  then we can model the discrete
   

fijia  moore    strain

stochastic process of the si j with the following differential equations for the si j  
ds  j
dx
ds  j
dx

 s  j
 x
 s  j
mf  j     s  j     mt     j s  j
  
 
 x
 mt   mf      x 
  

   

the unit clauses are governed by a two type branching process  with transition matrix


 
s     s   
m 
 
   x  s    s   
as in the calculation by achlioptas and moore  achlioptas   moore      a   as long as the
largest eigenvalue of m is less than    the branching process is subcritical  and summing
over the round gives




   
mf
 
   i  m   
 
   
mt
we then solve the equation     with the initial conditions s        and
 
qj
 
s  j  
j      q     
for     j     in the balanced case q   q    we find that uc succeeds on q hidden formulas
with constant probability if and only if r        just as for   hidden formulas  the reason
is that  as for   hidden formulas  the expected number of positive and negative literals are
the same throughout the process  this symmetry causes uc to behave just as it would on
random   sat formulas without a hidden assignment 
we note that for q   q    uc succeeds at slightly higher densities  at which it can find
one of the alternate solutions with         at higher densities where these alternate
solutions disappear  our experimental results below show that these deceptive formulas
take dpll algorithms exponential time  and for r   rc  q  they are harder than   hidden
formulas of the same density 

   experimental results
    dpll
in this section we discuss the behavior of dpll solvers on our q hidden formulas  we focus
on zchaff  zhang         the behavior of oksolver  kullmann        is similar  figure  
shows zchaffs running time on   hidden    hidden    hidden  and q hidden formulas for
various values of q 
balanced formulas  i e  with q   q              appear to be about as hard as   hidden
ones  including above the satisfiability threshold r       where   hidden formulas become
unsatisfiable  like   hidden formulas  these q   hidden formulas appear to peak in complexity near the satisfiability threshold  this is consistent with the picture given in the previous
two sections  namely  that these balanced formulas make it impossible for algorithms to
feel the attraction of the hidden assignment  in contrast  naive   hidden formulas are far
easier  since the attraction to the hidden assignment is strong 
   

figenerating hard satisfiable formulas by hiding solutions deceptively

zchaff performance with n    

zchaff performance with r    

 

  

 

  

median number of decisions over    trials

median number of decisions over    trials

 

  

q    
q    
q    
q    
q      
 hidden
 hidden
 hidden

 

  

 

  

 

  

 

 

  

q    
 hidden
q      
 hidden
 hidden

 

  

 

  

 

  

 

   

 

   

 
r

   

 

   

  
  

 

   

   

   

   

   

n

figure    the left part of the figure shows zchaffs median running time over    trials on
  hidden    hidden    hidden and q hidden formulas with n       and r ranging
from     to      the right part shows the median running time with r      
and n ranging from    to      note that   hidden formulas are almost always
unsatisfiable for r        

deceptive formulas  i e  with q   q    appear to have two phases  at low density they
are relatively easy  and their hardness peaks at a density rc  q   above rc  q  they take
exponential time  as for   hidden formulas  as r increases further the coefficient of the
exponential decreases as the clauses generate contradictions more quickly 
we believe that this peak rc  q  is the same threshold density defined earlier  see figure  
below  above which the only solutions are those close to the hidden assignment  the
situation seems to be the following  below rc  q   there are alternate solutions with   
     and zchaff is led to these by its splitting rule  above rc  q   these alternate solutions
disappear  and zchaff takes exponential time to find the vicinity of the hidden assignment 
since the formula deceptively points in the other direction  moreover  for a fixed r above
rc  q  these formulas become harder as q decreases and they become more deceptive 
to illustrate this further  the right part of figure   shows zchaffs median running
time on   hidden formulas    hidden formulas    hidden formulas  and q hidden formulas
for q   q   balanced  and q        deceptive   we fix r        which appears to be above
rc  q  for both these values of q  at this density  the   hidden    hidden  and balanced
q hidden formulas are all comparable in difficulty  while   hidden formulas are much easier
and the deceptive formulas appear to be somewhat harder 
    sp
survey propagation or sp  mezard   zecchina        is a recently introduced incomplete
solver based on insights from the replica method of statistical physics and a generalization of
belief propagation  we tested sp on   hidden formulas and q hidden formulas for different
values of q  using n       and varying r  for   hidden formulas  sp succeeds up to r        
   

fijia  moore    strain

quite close to the satisfiability threshold  for q hidden formulas with q   q    sp fails at
     just as it does for   hidden formulas  suggesting that it finds these formulas exactly as
hard as   hidden ones even though they are guaranteed to be satisfiable  for naive   hidden
formulas  sp succeeds at a significantly higher density  up to r       
presumably the naive   hidden formulas are easier for sp since the messages from
clauses to variables  like the majority heuristic  tend to push the algorithm towards the
hidden assignment  in the balanced case q   q    this attraction is successfully suppressed 
causing sp to fail at essentially the same density as for   hidden formulas  close to the satisfiability threshold  even though our q hidden formulas continue to be satisfiable at all densities  in contrast  the   hidden formulas proposed by achlioptas  jia and moore  achlioptas
et al         are solved by sp up to a somewhat higher density r       thus it seems that
the reweighting approach of q hidden formulas does a better job of confusing sp than hiding
two complementary assignments does 
for q   q    sp succeeds up to somewhat higher densities  each of which matches quite
closely the value rc  q  at which zchaffs running time peaks  see figure   below   building
on our conjecture that this is the density above which the only solutions are those close
to the hidden assignment  we guess that sp succeeds for r   rc  q  precisely because the
local gradient in the density of solutions pushes it towards the alternate solutions with
        above rc  q   these solutions no longer exist  and sp fails because the clauses send
deceptive messages  demanding that variables be set opposite to the hidden assignment 
    walksat
we conclude with a local search algorithm  walksat  for each formula  we did up to    
restarts  with     steps per attempt  where each step does a random or greedy flip with
equal probability  in the left part of figure   we measure walksats performance on  hidden    hidden  and q hidden formulas with various values of q  we use n       and r
range from   to    even for these relatively small formulas  we see that for the three most
deceptive values of q  there is a density at which the median running time jumps to    
flips  for instance  q hidden formulas with q       appear to be unfeasible for walksat for 
say  r     
we believe that  consistent with the discussion above  local search algorithms like
walksat greedily follow the gradient in the density of solutions f     for q   q    this
gradient is deceptive  and lures walksat away from the hidden assignment  at densities
below rc  q   there are many alternate solutions with        and walksat finds one of
them very easily  but for densities above rc  q   the only solutions are those near the hidden
assignment  and walksats greed causes it to wander for an exponentially long time in the
wrong region  this picture is supported by the fact that  as figure   shows below  the density at which walksats running time jumps upward closely matches the thresholds rc  q 
that we observed for zchaff and sp 
the right part of figure   looks at walksats median running time at a fixed density
as a function of n  we compare   hidden and   hidden formulas with q hidden ones with
q   q  and two deceptive values      and      we choose r        which is above rc  q 
for all three values of q  the running time of   hidden and   hidden formulas is only
polynomial  achlioptas et al         barthel et al          in contrast  even in the balanced
   

figenerating hard satisfiable formulas by hiding solutions deceptively

case q   q    the running time is exponential  and the slope of this exponential increases
dramatically as we decrease q and make the formulas more deceptive  we note that it
might be possible to develop a heuristic analysis of walksats running time in the deceptive
case  semerjian   monasson        cocco et al         

walksat performance with n    

 

 

 

  

 

  

 

  

q    
q    
q    
q    
q      
 hidden
 hidden

 

  

 

  

 

  

walksat performance with r    

  
median number of flips over    trials

median number of flips over    trials

  

 

 

  

q    
q    
q      
 hidden
 hidden

 

  

 

  

 

  

 

  

 

   

 

   

 
r

   

 

   

  
  

 

                                           
n

figure    the left part of the figure shows walksats median running time over    trials
with n       and r ranging from   to    the right part shows the median running
time with r       and n ranging from    to     

   the threshold density
as we have seen  there appears to be a characteristic density rc  q  for each value of q  q  at
which the running time of dpll algorithms like zchaff peaks  at which walksats running
time becomes exponential  and at which sp ceases to work  we conjecture that in all three
cases  the key phenomenon at this density is that the solutions with        disappear 
leaving only those close to the hidden assignment  figure   shows our measured values of
rc  q   and indeed they are quite close for the three algorithms  we also show the analytic
upper bound on rc  q  resulting from setting max f                  above which the
expected number of solutions with       is exponentially small 

   conclusions
we have introduced a simple new way to hide solutions in   sat problems that produces
instances that are both hard and satisfiable  unlike the   hidden formulas proposed by
achlioptas  jia and moore  achlioptas et al         where the attraction of the hidden
assignment is cancelled by also hiding its complement  here we eliminate this attraction
by reweighting the distribution of clauses as proposed by achlioptas and peres  achlioptas
  peres         indeed  by going beyond the value of the parameter q that makes our
q hidden formulas balanced  we can create deceptive formulas that lead algorithms in the
wrong direction  experimentally  our formulas are as hard or harder for dpll algorithms
   

fijia  moore    strain

  
upper bound
zchaff
sp
walksat

  
  

rc q 

 
 
 
 
 
 
   

   

   
q

   

   

figure    the density rc  q  at which the running time of zchaff peaks  walksat peaks or
exceeds     flips  and sp stops working  we conjecture all of these events occur
because at this density the alternate solutions with        disappear  leaving
only those close to the hidden assignment  shown also is the analytic upper
bound described in the text 

as   hidden formulas  i e   random   sat formulas without a hidden assignment  for local
search algorithms like walksat  they are much harder than   hidden or   hidden formulas 
taking exponential rather than polynomial time  our formulas are also amenable to all the
mathematical tools developed for the study of random   sat  here we have calculated their
expected density of solutions as a function of distance from the hidden assignment  and
used the method of differential equations to show that uc fails for them at the same density
as it does for   hidden formulas 
we close with several exciting directions for future work 
   confirm that there is a single threshold density rc  q  at which a  the alternate solutions
far from the hidden assignment disappear  b  the running time of dpll algorithms
is maximized  c  sp stops working  and d  the running time of walksat becomes
exponential 
   prove that simple dpll algorithms take exponential time for r   rc  q   in expectation
or with high probability 
   calculate the variance of the number of solutions as a function of   and giving
improved upper and lower bounds on the distribution of solutions and rc  q  

acknowledgments
h j  is supported by an nsf graduate fellowship  c m  and d s  are supported by nsf
grants ccr          eia          and phy          c m  thanks tracy conrad and
rosemary moore for their support 
   

figenerating hard satisfiable formulas by hiding solutions deceptively

references
achlioptas  d   beame  p     molloy  m          a sharp threshold in proof complexity  in
proc  stoc  pp         
achlioptas  d   gomes  c   kautz  h     selman  b          generating satisfiable problem
instances  in proc  aaai  pp         
achlioptas  d   jia  h     moore  c          hiding satisfying assignments  two are better
than one  in proc  aaai  pp         
achlioptas  d     moore  c       a   almost all graphs with average degree   are  colorable  in proc  stoc  pp         
achlioptas  d     moore  c       b   the asymptotic order of the random k sat threshold 
in proc  focs  pp         
achlioptas  d     peres  y          the threshold for random k sat is  k  ln    o k    in
proc  stoc  pp         
asahiro  y   iwama  k     miyano  e          random generation of test instances with
controlled attributes  dimacs series in disc  math  and theor  comp  sci      
barthel  w   hartmann  a   leone  m   ricci tersenghi  f   weigt  m     zecchina  r 
        hiding solutions in random satisfiability problems  a statistical mechanics
approach  phys  rev  lett               
chao  m     franco  j          probabilistic analysis of two heuristics for the   satisfiability
problem  siam j  comput                    
cheeseman  p   kanefsky  r     taylor  w          where the really hard problems are  in
proc  ijcai  pp         
cocco  s     monasson  r          heuristic average case analysis of the backtrack resolution of random   satisfiability instances  theor  comp  sci               
cocco  s   monasson  r   montanari  a     semerjian  g          approximate analysis of
search algorithms with physical methods  in percus  a   istrate  g     moore  c 
 eds    computational complexity and statistical physics  oxford university press 
hogg  t   huberman  b     williams  c          phase transitions and complexity  artificial
intelligence     
johnson  d   aragon  c   mcgeoch  l     shevon  c          optimization by simulated
annealing  an experimental evaluation  operations research                 
kautz  h   ruan  y   achlioptas  d   gomes  c   selman  b     stickel            balance
and filtering in structured satisfiable problems  in proc  ijcai  pp         
kullmann  o          investigating the behaviour of a sat solver on random formulas 
tech  rep  csr          university of wales swansea 
mezard  m     zecchina  r          random k satisfiability  from an analytic solution to a
new efficient algorithm  phys  rev  e             
mitchell  d   selman  b     levesque  h          hard and easy distributions of sat
problems  in proc  aaai  pp         
   

fijia  moore    strain

morris  p          the breakout method for escaping from local minima  in proc  aaai 
pp       
selman  b   kautz  h     cohen  b          local search strategies for satisfiability testing 
in proc   nd dimacs challange on cliques  coloring  and satisfiability 
semerjian  g     monasson  r          a study of pure random walk on random satisfiability
problems with physical methods  lncs               
shaw  p   stergiou  k     walsh  t          arc consistency and quasigroup completion  in
proc  ecai  workshop on binary constraints 
van gelder  a          problem generator mkcnf c  in proc  dimacs  challenge archive 
zhang  l          zchaff   ee princeton edu chaff zchaff php 

   

fi