journal artificial intelligence research                 

submitted       published     

proactive algorithms job shop scheduling
probabilistic durations
j  christopher beck

jcb mie utoronto ca

department mechanical   industrial engineering
university toronto  canada

nic wilson

n wilson  c ucc ie

cork constraint computation centre
university college cork  ireland

abstract
classical scheduling formulations assume fixed known duration activity  paper  weaken assumption  requiring instead duration
represented independent random variable known mean variance 
best solutions ones high probability achieving good makespan 
first create theoretical framework  formally showing monte carlo simulation
combined deterministic scheduling algorithms solve problem  propose
associated deterministic scheduling problem whose solution proved  certain conditions  lower bound probabilistic problem  propose investigate
number techniques solving problems based combinations monte carlo
simulation  solutions associated deterministic problem  either constraint programming tabu search  empirical results demonstrate combination use
associated deterministic problem monte carlo simulation results algorithms
scale best terms problem size uncertainty  experiments point
correlation quality deterministic solution quality
probabilistic solution major factor responsible success 

   introduction
proactive scheduling techniques seek produce off line schedule robust execution time events  paper  assume perfect knowledge
duration activity  durations determined execution time
observed activity finished  however  partial knowledge form
known probability distribution duration  execution time  activities
dispatched according sequences defined off line schedule measure
robustness probability given quality achieved  specifically 
paper  address problem job shop scheduling  and related generalizations 
durations activities random variables objective find
solution high probability good  ideally  minimal  makespan 
challenging problem even evaluating solution hard problem 
address problem  develop theoretical framework within formally
define problem  a  construct approach  based monte carlo simulation 
evaluating solutions partial solutions   b  show solving carefully defined
deterministic job shop scheduling problem results lower bound probabilistic
c
    
ai access foundation  rights reserved 

fibeck   wilson

minimum makespan probabilistic job shop scheduling problem  use framework
define number algorithms embodying three solution approaches 
   branch and bound search monte carlo simulation  search node 
search pruned almost certain  based monte carlo simulation 
partial solution cannot extended solution better current best
solution 
   iterative deterministic search descending lower bound  deterministic job
shop problem whose solution lower bound probabilistic job shop problem
defined using parameter  q  lower bound proof depends q less
equal q  i   problem instance dependent threshold value problem instance
difficult compute  starting high q value  use tree search
monte carlo simulation solve sequence deterministic problems decreasing
q values  q large  problems highly constrained easy solve  if
solutions exist   q descends  best probabilistic makespan previous
iterations used restrict search  able reach value q
q q  i  within cpu time limit  search approximately complete
subject sampling error 
   deterministic filtering search  deterministic scheduling algorithms based constraint
programming tabu search used define number filter based algorithms 
algorithms operate generating series solution candidates
evaluated monte carlo simulation 
empirical results indicate monte carlo based branch and bound
practical small problems  iterative search based descending q values
good as  better than  branch and bound algorithm small problems  performs
significantly better larger problems  however  even medium sized problems 
techniques inferior heuristic approaches based deterministic filtering 
contributions 

main contributions paper are 

introduction problem finding proactive schedules probabilistic execution guarantees class problems underlying deterministic scheduling
problem np hard 
development method generating lower bound probabilistic minimum makespan 
development particular monte carlo approach evaluating solutions 
design empirical analysis number approximately complete heuristic solution techniques based either constraint based constructive search tabu
search 
identification correlation deterministic probabilistic solution
quality key factor performance filter based algorithms 
   

fiproactive algorithms jsp

plan paper  next section define probabilistic job shop scheduling problem  illustrating example  section   discusses related work  section   
present theoretical framework  formally define problem  derive approach
generating lower bound based associated deterministic job shop problem 
show monte carlo simulation used evaluate solutions partial solutions 
six search algorithms defined section   empirical investigations results
appear section    section    shown results paper apply much
general classes scheduling problems  directions future work based theoretical
algorithmic extensions discussed 

   probabilistic job shop scheduling problems
job shop scheduling problem probabilistic durations natural extension
standard  deterministic  job shop scheduling problem  jsp  
    job shop scheduling problems
jsp involves set activities  ai positive duration di  
instance jsp  assumed either durations positive integers 
positive real numbers   partitioned jobs  job associated
total ordering set activities  activity must execute specified
unary capacity resource  activities require resource overlap
execution  activity started must executed entire duration 
represent formally another partition resource sets  two activities
resource set require resource 
solution consists total ordering resource set  conflict
jobs ordering  i e   union resource orderings job orderings acyclic
relation a  thus  ai aj resource set  solution either orders ai
aj  meaning aj starts sooner end ai    aj ai   set
solutions job shop problem labeled s  partial solution consists partial
ordering resource set extended solution 
let  partial  solution  path  or s path  sequence activities
ai immediately precedes aj sequence  either  i  ai aj
job  ai precedes aj job   ii  ai aj resource set
orders ai aj   length  len    path
p  of solution  equal
sum durations activities path  i e   ai di   makespan  make s  
solution defined length longest s path  s path    said
critical s path length equal makespan solution s  i e   one
longest s paths  minimum makespan job shop scheduling problem defined
minimum value make s  solutions s 
definitions focus solutions rather schedules  here  briefly indicate definitions relate to  perhaps immediately intuitive  definitions focusing
schedules  schedule assigns start time activity  considered
   empirical investigations examine integer case  shown below  theoretical results hold
case positive real number durations 

   

fibeck   wilson

function set activities set time points  defining activity
starts  set time points assumed either set non negative integers
set non negative real numbers  let starti start time activity ai
respect particular schedule  let endi   end time  starti   di   ai   aj a 
write ai aj constraint endi startj   schedule defined valid
following two conditions hold two different activities ai   aj a   a  ai precedes
aj job  ai aj    b  ai aj resource set 
either ai aj aj ai  since ai aj allowed overlap  
let z valid schedule  define make z   makespan z  maxai endi  
time last activity completed  minimum makespan defined
minimum value make z  valid schedules 
solution defines valid schedule sched s   activity started soon
immediate predecessors  if any  finished  activities without predecessors
started time point    so sched s  non delay schedule given precedence constraints
expressed s   immediate predecessor activity aj respect particular
solution defined activity immediate predecessor aj either
respect ordering job containing aj   respect ordering  associated
solution  resource set containing aj   shown makespan
sched s  equal make s  defined earlier  hence justifying definition 
conversely  given valid schedule z  define solution  call sol z  
ordering resource set relation defined above  z schedule 
makespan sched sol z    equal make sol z    less equal
makespan z  implies minimum makespan solutions equal
minimum makespan valid schedules  therefore  interested schedules
best makespans  need consider solutions associated schedules 
summarize  aiming find minimum makespan jsp  focus
searching solutions  rather schedules   i  schedule z 
exists solution   sol z  z consistent  i e   satisfies precedence constraints expressed s    ii  solution s  efficiently construct
schedule sched s  optimal among schedules consistent  and furthermore 
makespan sched s  equal make s   
jsp example  consider job shop scheduling problem involving two jobs five activities shown figure    first job consists sequence  a    a    a    activities 
second job consists sequence  a    a     three resources involved  a 
a  require first resource  hence activities a  a  cannot overlap  either  i 
a  precedes a     ii  a  precedes a    activities a  a  require second resource 
a  requires third resource  hence  resource sets  a    a      a     a    a    
four solutions 
sa involves orderings a  a  a  a   
sb defined a  a  a  a   
sc a  a  a  a   
sd a  a  a  a   
   

fiproactive algorithms jsp

a 

a 

a 

a 

a 

a 

a 

a 

a 

a 

a 

a 

a 

a 

solution sa
a 

a 

solution sb
a 

a 

a 

a 

a 

a 

a 

a 

solution sc

a 
solution sd

figure    example jsp four solutions 
duration activity ai di   sequence  a    a    a    sa  path  whose length
d   d   d    also  sa  path  a    a    a    a     len     d   d   d   d   
sa  paths subsequences one two  hence  make sa    makespan
solution sa   equal max d    d    d    d    d    d    d      d    d    max d    d    d    
particular  d       d       d       d      d       make sa        time units 
make sb         make sc        make sd         hence  minimum
makespan make sa        
let z   sched sa   schedule associated solution sa   generated
follows  a  predecessors  start a  beginning  setting z a         hence
activity a  starts time point   ends time point d    predecessor a 
a    set z a      d    similarly  set z a      d    activity a  ends
time point d    d    continuing  set z a      d    d    activity a  two immediate
predecessors  for solution  sa    a  a    a  set start soon
activities completed  time point max d    d    d    d    d    
activities completed a  completed  time point
max d   d   d    d   d    d    d   d   max d    d   d     confirms makespan
make sa   solution sa equal makespan associated schedule sched sa   
    independent general probabilistic job shop scheduling problems
independent probabilistic job shop scheduling problem defined way
jsp  except duration di associated activity ai random variable 
assume instance probabilistic jsp  either durations positive
integer valued random variables  positive real valued random variables 
 known  distribution pi   expected value   e di   variance i    var di   
   

fibeck   wilson

random variables fully independent  length path solution
random variable  write len    makespan make s  solution  the
length longest path s  therefore random variable  sometimes
refer random makespan s 
generalize non independent case  probabilistic job shop scheduling problem joint probability measure p durations vectors   the intention
efficiently sample joint density function  example  bayesian
network might used represent p    here  activity ai   distribution pi defined
appropriate marginal distribution  expected value variance i   
loosely speaking  probabilistic job shop scheduling problem  want find
small value possible solution whose random makespan is 
high probability  less  the deadline activities finish   time value
called probabilistic minimum makespan 
evaluating solution deterministic jsp  i e   finding associated makespan given
duration activity  achieved low degree polynomial time using longest
path algorithm  without ordering resource set  disjunctions resource
constraints must satisfied find solution turn easy problem
np complete jsp  garey   johnson         pert networks  hand  generalize
simple longest path problem allowing durations independent random variables 
leading  p complete problem  hagstrom         probabilistic jsp makes
generalizations  consequently  finding optimal solutions probabilistic jsp
appears hard  focus methods finding good solutions instead 
evaluating  approximately  solution probabilistic jsp done relatively
efficiently using monte carlo simulation  large number trials randomly
sample duration every activity generate makespan associated
trial  roughly speaking  approximately evaluate solution evaluating sampled
distribution makespans  approach described detail section     
almost solution techniques involve associating deterministic job shop problem
given probabilistic job shop problem  replacing  number q  random
duration mean distribution plus q times standard deviation  hence  set
duration di activity ai associated deterministic problem  q
case continuous time  case time points integers  set   bi  qi c 
certain values q  leads minimum makespan deterministic problem
lower bound probabilistic minimum makespan  shown section     
lower bound useful pruning branch and bound algorithm  generally 
show solving associated deterministic problem used help solve
probabilistic problem 
assumptions joint probability somewhat restrictive  example 
model allow activitys duration depend start time  however 
extended certain situations kind   despite restrictions  which common
related literaturesee section     model apply interesting class problems
   could allow duration activity probabilistically dependent start time  given
additional  very natural  coherence condition time point t    conditional probability
endi t    given starti   t  monotonically increasing t  i e   pr endi t   starti   t   
pr endi t   starti   t    t  t    condition ensures that  given solution 

   

fiproactive algorithms jsp

previously addressed  extending model richer representations
relaxing assumptions remains future work 
probabilistic jsp example  consider independent probabilistic job shop scheduling problem structure jsp example figure    durations
activities a    a  a  independent real valued random variables  referred
d    d  d    respectively  approximately normally distributed standard deviation                       means                    
durations activities a  a  deterministic  equal      respectively 
let sa  path  a    a    a    a     length len   approximately
normally distributed random variablewith mean              variance              
    hence standard deviation      
length sa  path      a    a    a    approximately normal random variable
mean    standard deviation       random  makespan make sa   solution
sa random variable equaling maximum random variables len   len      
general  maximum two independent normally distributed random variables
normally distributed  however  is  high probability  longer     distribution
make sa   approximately equal distribution len   

   previous work
considerable work scheduling uncertainty variety fields
including artificial intelligence  ai   operations research  or   fault tolerant computing 
systems  surveys literature  mostly focusing ai or  see work
davenport beck         herroelen leus         bidot        
highest level  two approaches problems  proactive scheduling 
knowledge uncertainty taken account generating off line
schedule  reactive scheduling decisions made on line deal unexpected
changes  significant work reactive scheduling and  indeed  techniques
combine reactive proactive scheduling least commitment approaches  see
surveys noted above   interest pure proactive scheduling  three categories
proactive approaches identified  redundancy based techniques  probabilistic
techniques  contingent policy based techniques  herroelen   leus         briefly
look turn 
    redundancy based techniques
redundancy based techniques generate schedule includes allocation extra
resources and or time schedule  intuition redundant allocations
help cushion impact unexpected events execution  example  extra time
consumed activity takes longer expected execute 
clear conflict insertion redundancy common measures schedule quality
 e g   makespan   focus work tends intelligent insertion redundancy
order achieve satisfactory trade off schedule quality robustness 
advantage delaying starting activity predecessors finished  allowing delay
would break assumptions underlying formulation 

   

fibeck   wilson

common fault tolerant scheduling real time guarantees reserve redundant
resources  i e   processors  time  former case  multiple instantiations given
process executed parallel error detection done comparing results
different instantiations  contrast  time redundancy  time reserved
re execution process fails  given fault model  either technique used
provide real time guarantees  ghosh  melhem    mosse        ghosh        
similar approach used work gao        davenport  gefflot beck
       context job shop scheduling  statistical information mean time
failure mean repair time machines used either extend duration
critical activities former work require solution produced must respect
constraints slack activity  given solution  slack room
activity move without breaking constraint increasing cost  typically 
formalized difference activitys possible time window solution  i e  
latest possible end time less earliest possible start time  duration activity 
advantage gaos approach purely modeling approach  problem
changed incorporate extended durations scheduling techniques used
solve problem  however  davenport et al  show reasoning slack shared
amongst set activities lead better solutions cost specialized solving
approaches 
leon  wu storer        present approach job shop scheduling
objective function modified linear combination expected makespan
expected delay assuming machines break that  execution time  disruptions dealt shifting activities later time maintaining sequence
original schedule  basic technique properly seen probabilistic
approach  authors show exact calculation measure intractable unless
single disruption assumed  likely multiple disruptions  authors
present number surrogate measures  empirically  best surrogate measure
deterministic makespan minus mean activity slack  unlike  gao davenport et al  
leon et al  provide formal probabilistic foundation  temporal redundancy plays
central role practical application approach 
    probabilistic techniques
probabilistic techniques use representations uncertainty reason likely outcomes
schedule executed   rather explicitly inserting redundancy attempt
create robust schedule  probabilistic techniques build schedule optimizes
measure probabilistic performance  performance measures typically come two forms 
expected value expected makespan expected weighted tardiness  probabilistic guarantee respect threshold value deterministic optimization measure 
example latter measure  discussed below  probability flow time
schedule less particular value 
optimal expected value scheduling problems widely studied  pinedo 
       many cases  approach takes form dispatch rules slightly
complicated polynomial time algorithms find optimal schedule tractable
   alternative representations uncertainty fuzzy sets used  herroelen   leus        

   

fiproactive algorithms jsp

problems  e g       machine problems  serve heuristics difficult
problems  one example work ai literature wurman wellman
       extends decision theoretic planning concepts scheduling  problem
studied assumes single machine  stochastic processing time stochastic set up time 
objective minimization expected weighted number tardy jobs 
authors propose state space search solve problem multi objective stochastic
dominance a   critical aspects work use number sophisticated path
pruning rules relaxation based heuristics evaluation promising nodes 
threshold measure used burns  punnekkat  littlewood wright       
fault tolerant  single processor  pre emptive scheduling application  objective find
minimum fault arrival rate tasks scheduled meet deadlines 
based fault model  probability observing fault arrival rate calculated
used measure schedule quality  optimization problem  then  find
schedule maximizes probability tasks meeting deadlines fault
arrival process 
one machine manufacturing context independent activities  daniels carrillo        define  robust schedule sequence maximizes probability
execution achieve flow time greater given threshold  underlying deterministic scheduling problem solvable polynomial time and  indeed 
minimum expected flow time schedule found polynomial time  shown
finding  robust schedule np hard  daniels carrillo present branch and bound
heuristic techniques solve problem 
    contingent policy based approaches
unlike approaches described above  contingent policy based approaches
generate single off line schedule  rather  produced branching contingent
schedule or  extreme  policy  specifies actions taken particular
set circumstances arises  given importance off line schedule terms
coordination entities context surrounding scheduling problem 
difference significant practical implications  see herroelen   leus       
discussion  
elegant example contingent scheduling approach just in case work
drummond  bresina swanson         given initial  deterministic schedule
single telescope observation problem  approach identifies activity likely fail
based available uncertainty information  point  new schedule produced
assuming activity does  indeed  fail  repeated application identification
most likely to fail activity generation new schedule results branching schedule
number likely contingencies accounted alternative schedules 
execution time  activity fails  execution switches alternative schedule
one exists  alternative exist  on line rescheduling done  empirical results
demonstrate significantly larger portion existing  branching  schedule
executed without revert rescheduling compared original deterministic
schedule 
   

fibeck   wilson

one weaknesses just in case scheduling surrounds combinatorics
multiple resources  multiple inter dependent telescopes  problem quickly becomes
intractable  policy based approaches markov decision processes  mdps   boutilier 
dean    hanks        applied problems  here  objective
produce policy mapping states actions direct on line execution
schedule  given state encountered  corresponding action taken  meuleau et
al         apply mdps stochastic military resource allocation problem weapons
must allocated targets  given limited number weapons uncertainty
effectiveness given allocation  mdp used derive optimal policy
states represented number remaining weapons targets  actions
weapon allocation decisions  goal minimize expected number surviving
targets  empirical results demonstrated computational challenges approach
  target     weapon problem required approximately   hours cpu time  albeit
now outdated hardware  
literature  substantial work  cited brucker  drexl  mohring 
neumann pesch        herroelen leus        stochastic resource constraint
project scheduling  generalization job shop scheduling  general form
approaches multi stage stochastic programming problem  objective finding
scheduling policy minimize expected makespan  context  scheduling
policy makes decisions on line activities execute  decisions need made
beginning schedule end time activity  information used
decisions must become known time decision
making  number different classes policy investigated  example 
minimal forbidden subset activities  f   set activities f cannot
executed simultaneously due resource constraints  subset f
executed  pre selective policy identifies set f waiting activity  j f  
j cannot started least one activity f  j  executed 
execution  j started least one activity f finished 
proactive problem  then  identify waiting activity minimal forbidden
subset expected makespan minimized  computational challenges
pre selective policies  in particular  due number minimal forbidden subsets 
led work different classes policy well heuristic approaches 
    discussion
work paper falls within probabilistic scheduling approaches
closely inspired  robustness work daniels carrillo         however  unlike
daniels carrillo  address scheduling model deterministic problem
underlies probabilistic job shop scheduling problem is  itself  np hard 
first work aware seeks provide probabilistic guarantees
underlying deterministic problem computationally difficult 

   theoretical framework
section  develop theoretical framework probabilistic job shop problems 
section      define compare solutions  using call  makespans 
   

fiproactive algorithms jsp

 makespan solution less time value d  least chance  
 random  makespan less d  useful idea far
solutions  makespan optimum  makespan  i e   minimum  makespan
solutions   section      describe approach finding lower bound
optimum  makespan  section     considers problem evaluating given solution  s 
using monte carlo simulation estimate  makespan s 
order separate theoretical contributions empirical analysis  summarize notation introduced section section      readers interested primarily
algorithms empirical results therefore move directly section   
section makes use notation introduced section    definitions section
    jsp  solution  paths solution  makespan solution  minimum
makespan  definitions section     probabilistic jsp random makespan
solution 
    comparing solutions probabilistic makespan
standard job shop problem  solutions compared considering associated
makespans  probabilistic case  makespan solution random variable 
comparing solutions less straight forward  map random makespan scalar
quantity  called  makespan  sums good is  solutions compared
comparing associated  makespans  simple idea prefer solutions smaller
expected makespan  however  may substantial probability makespan
solution much higher expected value  instead  take following
approach  confident random makespan solution d 
cannot confident makespan solution s  d  prefer
solution solution s   
fix value   used bound probabilities  although imagine
natural applications work  would quite small  e g   less     
assume range           probability event least    
say event sufficiently certain  experiments described section  
use value         sufficiently certain means occurs least    
chance 
let time value  let solution  said  achievable using
sufficiently certain jobs finish use solution s  is 
pr make s  d      make s  random makespan s 
said  achievable solution  achievable using
s  i e   exists solution making sufficiently certain jobs finish d 
time value  achievable maxss pr make s  d      
max solutions s 
define ach  s  set  achievable using s  define  s  
 makespan s  infimum  ach  s      minimum makespan 
defined infimum ach   set  achievable 
   is  greatest lower bound ach  s   fact  shown proposition   i    s  smallest
element ach  s   hence  ach  s  equal closed interval  d  s      i e   set time points
 s  

   

fibeck   wilson

  inf  d    maxss pr make s  d        sometimes refer  s 
probabilistic makespan s  refer probabilistic minimum makespan  
prefer solutions better  i e   smaller   makespans  equivalently  solution
considered better s  time value  achievable using
 achievable using s    optimal solutions ones whose  makespan equal
 minimum makespan 
prove technical properties  makespans  achievability relevant
mathematical results later sections  particular  proposition   ii  states minimum makespan  achievable  i e   exists solution makes
sufficiently certain jobs finish   smallest value satisfying
property 
lemma   notation 
 i  ach  



ss

ach  s  

 ii  exists solution ach   ach  s     s  
 iii    minss  s   minimum  s  solutions s 
proof 
 i   achievable
solution s  ach  s   true

ss ach  s  
 ii  consider following property    set time values a    time
value greater  i e       d     a  is  interval upper
bound  let b two sets property     either b b a   to show
this  suppose otherwise  neither b b a  exists x b
b a  x must different  assume  without loss
generality  x   y  property     contradiction required  
hence  b either equal equal b  using induction  follows
union finite number sets
property    one sets  set ach  s 
satisfies property     therefore  ss ach  s    achs  solution s    so   i  
ach   achs    implies    s    
 iii  let solution let time value  clearly   achievable using
s   achievable  implies  s   hence  minss  s  
 ii      s  solution s    minss  s   required 
 

proposition  
 i  let solution   s   achievable using s  i e   pr make s   s  
   
 ii   achievable  i e   exists solution pr make s      
   note probabilistic makespan number  a time value   opposed random makespan
solution  random variable 

   

fiproactive algorithms jsp

proof 
discrete case  set time values set non negative integers 
infimum definitions  s  minimum   i   ii 
follow immediately definitions 
consider case set time values set non negative real
numbers 
 
 
 i   m  n                   let gm   pr     make s d  s 
   let gn   pr  n  
 
 
make s   s  n    countable additivity axiom probability measures  gm  
p
p
gn   means l 
n m
n m gn tends gm l tends infinity  hence gl  
pl 
p
n m gn tends    so  limm gm          
l gn   g
 
      definition  s   pr make s 
pr make s   s   
 
   so                 pr make s 
 s     gm   pr make s   s   
 s     gm   implies pr make s   s       gm tends
  tends infinity 

 ii   part  ii  lemma    solution s     s   part  i  implies
pr make s       
 
probabilistic jsp example continued  continue example section    
section      set       corresponding     confidence  value       
 achievable using solution sa   since     chance paths
   simultaneously  shorter length       probability random
makespan make sa   less           
consider value ofd         since len    the random length   mean   
standard deviation       chance
len        approximately chance
normal distribution   standard deviations mean 
probability       therefore          achievable using solution   since
less      chance random makespan make sa   d 
 makespan  also referred probabilistic makespan  solution
therefore            fact   makespan  sa   approximately equal
       since approximately     chance  random  makespan make s  
       easy show          achievable using
solution     minimum makespan  equal  sa    hence       
    lower bound  minimum makespan
section show lower bound  minimum makespan found
solving particular deterministic jsp 
common approach generate deterministic problem replacing random
duration mean distribution  show  certain conditions  minimum makespan deterministic jsp lower bound probabilistic minimum
makespan  instance  example  minimum makespan deterministic
jsp     probabilistic minimum makespan        however  obvious
weakness approach take account spreads distributions  especially important since typically considering small value  
   

fibeck   wilson

      generate stronger lower bound taking account variances
distributions generating associated deterministic job shop problem 
generating deterministic jsp probabilistic jsp value q 
probabilistic job shop problem  generate particular deterministic job shop problem  depending parameter q    use transformation almost
algorithms section    deterministic jsp probabilistic jsp except
random duration replaced particular time value  solving corresponding
deterministic problem give us information probabilistic problem  deterministic jsp consists set activities  partitioned resource sets
jobs  total order job  duration activity
deterministic problem defined   qi   respectively mean
standard deviation duration activity ai probabilistic job shop problem 
hence  q      associated deterministic problem corresponds replacing random
duration mean  let makeq  s  deterministic makespan solution s  i e  
makespan associated deterministic problem  which defined length
longest s pathsee section       let makeq minimum deterministic makespan
solutions 
let solution  say probabilistically optimal  s      let
s path    path probabilistic deterministic problems   said
 deterministically  critical path critical path deterministic problem 
length deterministic
problem  lenq     p
equal sum
p
p durations
activities path 
ai  i   qi    equals
ai   q
ai  
introduce following rather technical definition whose significance made clear
proposition    q  sufficient exists  deterministically  critical path
probabilistically optimal solution pr len     lenq         i e  
chance random path length greater deterministic length 
following result shows  sufficient value q leads deterministic
minimum makespan makeq lower bound probabilistic minimum makespan
  therefore  lower bound deterministic minimum makespan lower
bound probabilistic minimum makespan 
proposition   probabilistic jsp  suppose q  sufficient  then  solution
s  pr make s  makeq         therefore  makeq  achievable  strict
lower bound  minimum makespan   i e     makeq  
proof  since q  sufficient  exists  deterministically  critical path  probabilistically  optimal solution pr len     lenq         lenq     
makeq  so    critical path  and  definition makeq   makeq  so  
makeq   so  pr len     makeq       definition makespan  sample
random durations vector  make so   least large len    so 
pr make so     makeq       hence  pr make so   makeq       pr make so    
makeq         implies  so     makeq since pr make so    so       
proposition   i   since probabilistically optimal solution     so   
  makeq   also  solution s   s    makeq    s    makeq  
implies makeq  achievable using s  i e   pr make s  makeq          
   

fiproactive algorithms jsp

      finding  sufficient q values
proposition   shows find lower bound probabilistic minimum makespan
find  sufficient value q  solve  or find lower bound for 
associated deterministic problem  section looks problem finding  sufficient
values q  breaking condition simpler conditions 
remainder section      assume independent probabilistic jsp 
let path solution  define e len    
p expected value
length  in probabilistic jsp   equal pai   define  
var len     variance length   equal ai i    since
assuming durations independent 
p
defining  adequate b  b    write b      b   equals ai  
qp
 
b
ai   say b  adequate  deterministically  critical path
 probabilistically  optimal solution  pr len     b         i e  
chance b standard deviations longer expected length 
duration normally distributed  len   normally distributed  since
sum independent normal distributions  even durations normally
distributed  len   often close normally distributed  cf  central limit
theorem extensions   so  pr len     b     approximately    b  
unit normal distribution  b value slightly less       
 adequate  given approximate normality 
defining b adequate values q  say q b adequate exists
 deterministically  critical path  probabilistically  optimal solution
lenq    b    
following proposition shows task finding  sufficient values q
broken down  follows almost immediately definitions 
proposition   q b adequate b  adequate  q  sufficient 
proof  since q b adequate  exists  deterministically  critical path
 probabilistically  optimal solution lenq    b     since b  adequate 
pr len     b         hence pr len     lenq         required 
 
establishing b adequate values q  value q b adequate
exists  deterministically  critical path  probabilistically  optimal solution
qp
p
p
p
 
lenq    b     equivalently 
ai  
ai   q
ai
ai   b
qp

q

mean i    ai  
 
meanp
 i   ai  
ai
number activities path   mean i   ai     m  ai  
activity ai uncertain  i e   standard deviation equals    
omitted summations means  becomes number uncertain
activities path  
is  q b

p

ai

i 



  written as  q

   

b


fibeck   wilson

well known  and quite easily shown   root qmean square collection
mean      ai  
numbers always least large mean  hence  mean  i    greater


equal    therefore  crude sufficient condition q b adequate is  q bm  
upper bound number uncertain activities path
probabilistically optimal solution  or could take upper bound number
uncertain activities path solution   particular  could generate badequate q choosing q   bm  
 sufficient value q  putting two conditions together using proposition
 
   q value little less    
 sufficient  given

lengths paths approximately normally distributed  upper bound
number uncertain activities path optimal solution  hence 
proposition    minimum makespan makeq associated deterministic problem
strict lower bound  minimum makespan   example         
              since      chance normal distribution
      standard deviations mean   set q little less
 
     

one sometimes generate larger  sufficient value q  hence stronger lower
bound makeq   focusing significantly uncertain activities  choose value

p      path   say
p activity aj  uncertain  with respect
 
 i   ai   j      i   ai    sum durations
activities  uncertain fraction sum durations
path  hence  activities  uncertain relatively small standard
deviations  define upper bound number  uncertain activities
involved path  probabilistically  optimal solution  shown 

b adequate 
slight modification earlier argument  q value    b

hence q value little less

        





 sufficient 

experiments described section   use  varying n  problems n jobs n
activities per job   solutions paths involving large numbers activities
unlikely good solutions  particular  one might assume that  problems 
optimal solution  deterministically  critical s path involving
 n activities  given assumption  following value q  sufficient 
 
  e g  
making makeq lower bound probabilistic minimum makespan  q      
 n
q 

     

 n

        motivates choice q  table   section     

probabilistic jsp example continued  number uncertain activities
running example  see section      figure   section         one
set     
using         leads choice q slightly less                
proposition   discussion  value q  sufficient  durations
associated deterministic problem given setting di     qi   d      
d        q    d        q    d        q   d       solution sa best solution
makespan makeq  sa                  q           q           q  hence  minimum
   

fiproactive algorithms jsp

deterministic makespan makeq equals approximately        lower bound
probabilistic minimum makespan        illustrating proposition   
however  sc clearly poor solution  could consider solutions 
 sa   sb   sd     deterministically  critical path solutions involves two
uncertain activities  within
range interest q values   set     
q                  leads stronger lower bound                   
tight lower bound  minimum makespan  
      discussion lower bound
example  able use approach construct tight lower bound
probabilistic minimum makespan  however  situation rather exceptional 
two features example enable tight lower bound  a  best
solution path almost always longest path   b  standard deviations
uncertain durations equal  analysis  root mean square
approximated  from below  mean  good approximation standard
deviations fairly similar  extreme case  non zero  standard deviations
durations  as example   root mean square actually equal
mean 
generally  number ways lower bound tend
conservative  particular 
choice often conservative us confident
genuine upper bound number uncertain activities path
optimal solution 
approximating root mean square standard deviations average
standard deviations  crude approximation standard deviations
durations vary considerably activities 
approximating random variable make s  random length particular path 
strength lower bound method  however  computationally feasible
reasonably large problems uses existing well developed jsp methods 
    evaluating solution using monte carlo simulation
given time value  d  want assess exists solution
chance random makespan greater d  methods
involve generating solutions  or partial solutions   testing condition 
noted earlier  evaluating solution amounts solving pert problem uncertain durations   p complete problem  hagstrom          p complete
problems computation dempster shafer belief  wilson         natural approach take monte carlo simulation  burt   garman         try perform
exact computation instead choose accuracy level require high
chance random estimate within true value  evaluation algorithm
   

fibeck   wilson

optimal complexity  low degree polynomial  potentially high constant factor
corresponding number trials required given accuracy 
evaluate solution  or partial solution  using monte carlo simulation perform
 large  number  n   independent trials assigning values random variable 
trial generates deterministic problem  check efficiently corresponding
makespan greater d  so  say trial succeeds  proportion trials
succeed estimate pr make s    d   chance random makespan
d  case independent probabilistic jsps  generate
random durations vector picking  using distribution pi   value random duration
di activity ai   general case  picking random durations vector still
efficient many situations  example  distribution represented bayesian
network 
      estimating chance random makespan greater
perform n trials  l              n  
 trial  l 
pick random durations vector using joint density function 
let tl      the trial succeeds  corresponding  deterministic  makespan greater
d  otherwise  set tl     
p
let   n  n
l   tl proportion trials succeed  estimate p 
p   pr make s    d   chance randomly generated durations vector leads
makespan  for solution s  greater d  expected value equal
q p  since
  pn
e tl     p e t     n l   e tl     p  standard deviation p  p 
n  
shown follows  v ar tl     e  tl       e tl       p p    p   p   variables
p
p  p 
 
tl independent v ar t     n   n
 n
  random variable n
i   v ar tl    
n
binomially distributed   because demoivre laplace limit theorem  feller 
       use normal distribution approximate  
means that  large n   generating value algorithm will 
high probability  give value close pr make s    d   choose accuracy level
    confidence level r  e g   r          choose n pr  t p        r 
particular  r        using normal approximation  choosing number n trials
   sufficient  fixed accuracy level confidence level r  number
trials n constant  depend size problem  algorithm
therefore excellent complexity  complexity  low order polynomial 
single deterministic propagation  must optimal clearly cannot hope beat
complexity deterministic propagation  however  constant factor    large
require high accuracy 
      solution good enough 
let time value let solution  suppose  based monte carlo
algorithm using n trials  want confident  achievable using  i e  
   

fiproactive algorithms jsp

pr make s    d     therefore need observed least little smaller
  since  only  estimate pr make s    d  
formalize this  shall use confidence interval style approach  let k    recall
p   pr make s    d  unknown quantity want find information
about  say p k implausible given result following condition
holds  p p
implies least k standard deviations expected value  i e  
p kn p   p  
case p   p k implausible given   unlikely
event would happened  example  k       given normal approximation  
event happen every    experiments  k     event
happen every        experiments 
pr make s    d  k implausible given result   confident
pr make s    d       achievable using s  upper bound
 s  hence  minimum makespan   confidence level  based
normal approximation binomial distribution   k   unit normal
distribution  example  k     gives confidence around       
similarly         say p k implausible given
result following condition holds  p implies
least k standard
p
deviations expected value  i e   p   kn p   p  
definitions k implausibility slightly informal  formal definitions
follows  suppose           k           n                   define 
p k implausible given p
p p    following
condition holds  p kn p   p   similarly  p k implausible given
p
p   p   following condition holds  p   kn p   p  
k implausibility conditions cannot tested directly using definition since
p unknown  fortunately  following result  gives equivalent conditions
easily checked 
proposition   definitions 
k
n

p
     
p
 ii  p k implausible given   kn      
 i  p k implausible given

p
proof   i   p k implausible given   setting p gives kn     
p
required  conversely  suppose kn       result follows k     
 

assume k      write f  x     x    k x  x 
  now  since
n
p
k      
k
 
n            
so  f       also  f  t     
n
since f  x  quadratic polynomial positive coefficient x    implies
either solution equation f  x       two solutions  since f     
    follows must either solution f  x       greater
 
  since p    
solution s   implies  p     f  p        p      k p  p 
n
q
p  p 
p p k
n   is  p k implausible given  
proving  i  
   

fibeck   wilson

q

  con ii  p k implausible given   setting p gives   k    
q n
q
   since      p implies p   k p  p 
since
versely    k    
n
n
right hand side strictly increasing function p  p k implausible given  
required 
 
part  i  result shows us evaluate solution respect
p bound
k

d  generate  using monte carlo simulation  least n      less
  confidence p     i e   pr make s    d     
confidence  achievable using solution s  i e   upper bound
probabilistic makespan  s   part  ii  used branch and bound algorithm
described section        determining backtrack node 
      generating upper approximation probabilistic makespan
solution
suppose that  given solution s  wish find time value large enough
confident probabilistic makespan d  i e  
upper bound  makespan  s   monte carlo simulation
adapted purpose  simulate values random makespan make s 
record distribution these  decide value k  corresponding desired
degree confidence  e g   k     corresponds       confidence  choose
minimal suchpthat associated value  generated simulation results  satisfies
kn       proposition   i   pr make s    d  k implausible
given   therefore confident pr make s    d     
confidence upper bound  makespan  s  s  balance
paper  use notation d s  represent  upper  estimate  s  found
way 

   searching solutions
theoretical framework provides two key tools use building search algorithms 
first  use monte carlo simulation evaluate solution partial solution  see
section       second  appropriate choice q value  solve associated
deterministic problem find lower bound  minimum makespan problem
instance  see section       section  make use tools  and
variations  define number constructive local search algorithms  describing
algorithms  recall important concepts notation introduced
earlier sections 
algorithms  explicitly deal case independent probabilistic jsps durations positive integer random variables  given approach 
however  algorithms valid 
generalized probabilistic case  assumptions noted section    provided efficient way sample activity durations 
   

fiproactive algorithms jsp

continuous random variables  provided deterministic solver
handle continuous time values 
    summary notation
remainder paper makes use notation concepts earlier sections 
briefly summarize below 
jsp probabilistic jsp  solution totally orders activities requiring
resource  i e   activities resource set   activity ai aj require
resource  either determines ai must completed time
aj starts  vice versa  see section       partial solution partially orders set
activities resource set  associated solution non delay schedule  relative
solution   activities without predecessors started time   
activities started soon predecessors completed  makespan
solution time jobs completed associated non delay
schedule  probabilistic jsp  see section       makespan make s  solution
random variable  since depends random durations 
quantity use evaluate solution  s    makespan  also known
probabilistic makespan s   defined section      probability  random 
makespan  s    approximately equal    more
precisely   s  smallest time value pr make s    d    
value therefore represents degree confidence required   minimum makespan
 also known probabilistic minimum makespan  minimum  s 
solutions s 
time value  achievable using solution chance
random makespan d   achievable using
 s   see section      
solutions probabilistic jsps evaluated monte carlo simulation  see section
      method derived generating upper approximation   use
notation d s  represent upper approximation  constructed d s 
approximately equal  s   high chance  s  less
d s see section        d s  thus represents probable upper bound probabilistic
minimum makespan 
probabilistic job shop problem often associate deterministic jsp  see section
      mapping parameterized  non negative real  number q  associated
deterministic jsp structure probabilistic jsp  difference
duration activity ai equal   qi   mean
standard deviation  respectively  duration ai probabilistic problem 
write makeq  s  makespan solution respect associated deterministic
jsp  makeq minimum makespan  minimum makeq  s  solutions s 
section      shown  using propositions     analysis section
       certain values q  time value makeq lower bound  
   

fibeck   wilson

    constructive search algorithms
four constructive search based algorithms introduced here  uses constraintbased tree search core search technique  incorporating simulation q values different ways  section  define constructive algorithm detail provide
description heuristics constraint propagation building blocks used
them 
      b b n  approximately complete branch and bound algorithm
given ability estimate probabilistic makespan solution  ability
test condition implies partial solution cannot extended solution
better probabilistic makespan  obviously applicable search technique branch andbound  b b  use monte carlo simulation derive upper  lower bounds
solution quality  able cover entire search space  approach
approximately complete  only approximately always small probability
miss optimal solution due sampling error  
b b tree  rooted  binary tree  associated node e tree
partial solution se   solution node leaf node  empty partial solution
associated root node  associated non leaf node e pair
activities  ai   aj   j    i  resource set  whose sequence determined
partial solution se   two nodes e extend se   one sequences ai aj  
adds opposite sequence  heuristic used choose sequence try first
described section       
value global variable always confidence  corresponding
choice ksee section        exists solution whose  makespan   s  
  whenever reach leaf node  e  find upper estimate     d se  
probabilistic makespan  s   monte carlo simulation based method
section        set    min d   d     variable initialized high value 
non leaf nodes  e  check see worth exploring subtree e 
perform monte carlo simulation partial solution  se   using current value  
generates result   use proposition   ii  determine pr make s e      
k implausible given   is  backtrack  since confident
exists solution extending partial solution se improves current best solution 
k chosen sufficiently large  confident miss good solution   
refer algorithm b b n performs b ranch and b ound simulation
n ode 
      b b dq l  approximately complete iterative tree search
internal node  e  tree  previous algorithm used monte carlo simulation
 but without strong propagation within trial  find lower bound probabilistic
makespans solutions extending partial solution se   alternative idea generating
   large number tests  need much higher confidence usual
confidence interval  fortunately  confidence associated k  based normal approximation
 
 
binomial  approximation tail normal distribution  approximately   k     e   k  
tends   extremely fast k increases 

   

fiproactive algorithms jsp

b b dq l   
returns solution lowest probabilistic makespan
 
 
 
 
 
 

 
 

 s     findfirstb bsimleaves     
q qinit
q   timed out
 s  d  findoptb bsimleaves d   q 
   n il
s 
end
q q qdec
end
return
algorithm    b b dq l  approximately complete iterative tree search

lower bound use approach section      find minimum makespan 
solutions extending se   associated deterministic problem based q value
 sufficient  minimum makespan  see proposition    lower bound
probabilistic makespan  standard constraint propagation deterministic durations
enables lower bound computed much faster simulation previous
algorithm  leaf node  simulation used b b n find estimate
probabilistic makespan solution 
basic idea requires selection q value  however  rather parameterize
algorithm  as others below   choose perform repeated tree
searches descending q value 
algorithm finds initial solution  line   algorithm    therefore initial
upper bound    probabilistic makespan q      subsequently  starting
high q value  one result deterministic lower bound   perform
tree search  leaf  e  reached  simulation used find d se   
high q value  likely deterministic makespan makeq  se   much greater
d se    since enforce constraint makeq  se   d se    finding d se  
simulation causes search return interior node  i  high tree
makeq  si   d se   si represents set solutions subtree node i 
makeq  si   deterministic lower bound makespan solutions  high
q values  commonly observed experiments nodes
meet criterion and  therefore  search able quickly exhaust search
space  happens  reduce q value small amount  qdec  e g         
restart tree search  eventually  often quickly  reach q value
exists full solution  se   makeq  se   d se    solution stored
current best set   d se    b b n  used upper bound
subsequent search 
algorithm   presents pseudocode basic algorithm  make use two functions
defined using pseudocode 
findfirstb bsimleaves c  q   creates jsp activity durations defined based
q value passed conducts branch and bound search monte carlo
   

fibeck   wilson

simulation used leaf node standard constraint propagation used
interior nodes  first solution found whose probabilistic makespan less
c returned value probabilistic makespan  c set
high line    backtracking needed find solution therefore one
leaf node visited one simulation performed 
findoptb bsimleaves c  q   findfirstb bsimleaves c  q  except
solution lowest probabilistic makespan returned rather first one found 
solution found  nil value returned  unless q value low enough
deterministic makespan lower bound probabilistic makespan 
function necessarily return globally optimal solution 
find starting solution q     serve initial upper bound optimal
probabilistic makespan  practice  b b dq l run limit cpu time 
q     reached within time limit  algorithm approximately complete 
noted above  possible  especially high q value  solution  se  
makeq  se   much larger d se    therefore search backtrack deepest
interior node makeq  si   d se    fact  assignment d se   value
global cut upper bound probabilistic makespan  technical reasons
beyond scope paper  standard constraint based tree search implementations
automatically handle global cuts  therefore modified standard behavior
repeatedly post upper bound constraint makeq  si   causing series backtracks
correct interior node 
refer algorithm b b dq l series b ranch and b ound
searches descending q values simulation used leaves tree 
b b dq l example novel constraint based search technique might
useful wider context  problem cost function expensive evaluate
inexpensive  parameterizable lower bound calculation  search based overconstraining problem  i e   choosing parameter value lead lower
bound  iteratively relaxing bounding function  may worth investigating 
discuss approach section   
      b b tbs  heuristic tree search algorithm
previous results algorithm similar b b n  beck   wilson        indicated
simulation responsible large percentage  e g        run time 
reduce number times require simulation simulating solutions
good deterministic makespan  deterministic filtering search central idea
rest algorithms investigated paper 
simple method filtering solutions first spend fixed amount cpu time
find solution  s    low deterministic makespan  makeq  s     using fixed q value
standard constructive tree search  then  search restarted using q value
whenever solution  si   found makeq  si   makeq  s     simulation run
evaluate d si    estimate probabilistic makespan   si    probabilistic
makespan found better lowest probabilistic makespan far  solution
stored  search continued entire tree explored maximum allowed
cpu time expired  algorithm   contains pseudocode 
   

fiproactive algorithms jsp

b b tbs q  
returns solution lowest probabilistic makespan found
 
 
 
 
 
 
 

 

 s   dinitial   findoptb b   q  tinitial  

solutions exist timed out
 s  d  findnextb b dinitial      q  time remaining 
d  simulate s 
d   
s  d 
end
end
return
algorithm    b b tbs  heuristic tree search algorithm
algorithm    make use number functions defined pseudocode 
findoptb b c  q  t   creates jsp activity durations defined based q
value passed conducts deterministic branch and bound search cpu
seconds using c upper bound deterministic makespan  search
tree exhausted time limit reached  best deterministic solution found
 i e   one minimum makespan   together deterministic makespan
returned  monte carlo simulation done 
findnextb b c  q  t   function produces sequence solutions  one solution
time called  whose deterministic makespan less c  problem
defined using q value cpu time limit  solutions produced
leaves b b search tree order encountered algorithm  note
algorithm    c value change  given enough cpu time  algorithm
evaluate probabilistic makespan solutions whose deterministic makespan
less equal dinitial  
simulate s   standard monte carlo simulation run solution d s  
estimate probabilistic makespan   s   returned 

algorithm complete  even choice q value results deterministic
makespans lower bounds probabilistic makespan 
guarantee optimal probabilistic solution deterministic makespan less
dinitial therefore  even infinite cpu time  may evaluated 
algorithm called b b tbs b ranch and b ound t imed b etter olution 
fixed cpu time spent find good deterministic solution  deterministic
solution found good better initial solution simulated 
      b b i bs  iterative heuristic tree search algorithm
extreme filtering algorithm first finds optimal deterministic solution uses
deterministic makespan filter choosing solutions simulate  using fixed
   

fibeck   wilson

b b i bs q  
returns solution smallest probabilistic makespan found
 
 
 
 
 
 
 
 
 

  
  

 s   dinitial   findoptb b   q  t    
simulate s  
i 
timed out
search complete
 s  makeq   findnextb b dinitial      i           q  time remaining 
simulate s 
 
s 
end
end
ii  
end
return
algorithm    b b i bs  iterative heuristic tree search algorithm

q value  optimal solution found simulated  cpu time remaining 
search series iterations starting using optimal deterministic makespan
bound  solutions deterministic makespan good  or  general  better
than  current bound found simulated  subsequent iterations  bound
deterministic makespan increased  resulting larger set solutions
simulated  solution lowest estimated probabilistic makespan returned 
larger problems  optimal deterministic makespan may found within cpu
limit  case  best deterministic solution found simulated returned
 i e   one simulation done  
formally  finding optimal deterministic solution makespan  make q  
series iterations beginning     executed  iteration  bound
deterministic makespans set makeq    i       solutions  se   whose deterministic
makespans  makeq  se   makeq      i       simulated one lowest
probabilistic makespan returned  algorithm   presents pseudocode depends
functions defined above 
algorithm complete  large enough cost bound greater
deterministic makespan activity permutations  simulated 
however  may grow unreasonably large therefore treat algorithm as 
practically  incomplete 
refer algorithm b b i bs b ranch and b ound i terative b est olution 
      heuristic constraint propagation details
algorithms described use texture based heuristics decide pair activities sequence sequence try first  heuristic builds resource profiles
combine probabilistic estimates contention activity resource
time point  maximum point resource profiles selected activity
   

fiproactive algorithms jsp

pair contends resource selected time point heuristically chosen 
sequence chosen one maximizes remaining slack  intuition
pair activities contending highly contended for resource time point
critical pair activities sequenced early search  otherwise  via
constraint propagation decisions  time windows activities may
pruned point neither sequence possible  texture based heuristics
complexity search node o mn    number resources n
number activities resource 
detailed description analysis texture based heuristic see work
beck fox        beck        
constraint propagation used  i e   algorithms except b b n  
use strong constraint propagation techniques constraint based scheduling  temporal
propagation  timetables  le pape  couronne  vergamini    gosselin         edge finder
 nuijten         balance constraint  laborie        
    local search algorithms
reason deterministic filtering search algorithm needs based
branch and bound  indeed  given approach finding simulating solutions
low deterministic makespans  algorithms based local search may perform better
constructive search algorithms 
section  present two deterministic filtering algorithms based tabu search   
define algorithm discuss details tabu search procedure itself 
      tabu tbs  tabu search analog b b tbs
central idea behind using tabu search deterministic filtering search generate
sequence promising deterministic solutions simulated  seems reasonable
create analog b b tbs using tabu search  fixed q fixed amount
tinitial cpu time  beginning run  solution lowest possible deterministic makespan  dinitial   sought  search restarted whenever solution  s 
found deterministic makespan makeq  s  dinitial   monte carlo simulation
used approximate probabilistic makespan  solution lowest estimated
probabilistic makespan returned 
algorithm   presents pseudocode simple approach  use following
functions  pseudo code given  
findbesttabu c  q  t   function analogous findoptb b c  q  t   tabu search
run cpu seconds solution lowest deterministic makespan
 based q value  less c returned 
findnexttabu c  q  t   function analogous findnextb b c  q  t   sequence
solutions  one solution time called  whose deterministic makespan less
   early experiments explored even simpler way using tabu search solve probabilistic jsp
incorporating simulation neighborhood evaluation  given search state  move operator  see
section       details  defines set neighboring states  neighbor  run monte
carlo simulation choose neighbor lowest probabilistic makespan  technique 
surprisingly  proved impractical considerable cpu time spent determine single move 

   

fibeck   wilson

tabu tbs q  
returns solution lowest probabilistic makespan found
 
 
 
 
 
 
 

 

 s   dinitial   findbesttabu   q  tinitial  

termination criteria unmet
 s  d  findnexttabu dinitial      q  time remaining 
d  simulate s 
d   
s  d 
end
end
return
algorithm    tabu tbs  local search filtering algorithm
c returned  problem defined using q value cpu time
limit  solution produced next solution found tabu search meets
makespan requirement 

call algorithm tabu tbs tabu t imed b etter olution 
b b tbs  c value updated iteration  initial search  line
   used find good deterministic solution simulation done solutions whose
deterministic makespan better solution found initial search 
      tabu i bs  iterative tabu search algorithm
core tabu search implementation fixed durations necessarily use entire
cpu time  see section        and  fact  especially small instances often terminates
quickly  therefore create iterative tabu based solver probabilistic
jsp similar b b i bs 
first phase  using time limit one second less overall time limit 
tabu search used find good deterministic solution  based fixed q value 
solution simulated  tabu search may terminate time
limit expired  remaining time spent generating solutions deterministic
makespan within fixed percentage initial solutions deterministic makespan 
b b i bs  iterations run increasing value starting     
iteration  simulate solutions found tabu search whose deterministic makespan
     i     dinitial   dinitial value deterministic makespan found
phase    solution lowest probabilistic makespan returned  
algorithm termed tabu i bs tabu i terative b est earch  pseudocode
algorithm presented algorithm   
      tabu search details
tabu search used find solutions problems deterministic durations tsab
algorithm due nowicki smutnicki         restricted move operator  termed
   tabuf algorithm proposed beck wilson        corresponds first iteration tabu i bs 

   

fiproactive algorithms jsp

tabu i bs q  
returns solution smallest probabilistic makespan found
 
 
 
 
 
 
 
 
 

  
  

 s   dinitial   findbesttabu   q  t    
simulate s  
i 
timed out
termination criteria unmet
 s  makeq   findnexttabu dinitial      i           q  time remaining 
simulate s 
 
s 
end
end
ii  
end
return
algorithm    tabu i bs  iterative tabu based filtering algorithm

n   blazewicz  domschke pesch        produces neighborhood swapping
subset pairs adjacent activities resource given solution  standard
tabu list ten moves done immediate past kept escape local minima 
use standard aspiration criteria accepting move tabu list resulting
solution better solution found far 
one important additions basic tabu search mechanism tsab
maintenance elite pool solutions  small set  i e      best solutions encountered far updated whenever new best solution
encountered  standard tabu search stagnates  i e   made large number
moves without finding new best solution   search returns one elite solutions
continues search it  solution removed set elite solutions  search
terminated either maximum cpu time reached elite solution pool
empty 
    summary algorithms
table   summarizes algorithms introduced above 

   empirical investigations
empirical investigations address two main issues  scaling behavior
approximately complete heuristic methods problem size uncertainty increase
whether using deterministic methods  represent uncertainty duration
extensions  useful approach  respect scaling  two interesting subquestions  first  approximately complete techniques compare
and  second  cross over point terms problem size heuristic
techniques out perform approximately complete techniques 
   

fibeck   wilson

deterministic
algorithm
b b

complete
yes

b b dq l

b b

yes

b b tbs

b b



b b i bs

b b

yes

tabu tbs

tabu



tabu i bs

tabu



name
b b n

description
b b simulation node find upper
lower bounds
b b deterministic durations used lower
bounds simulation done leaf node 
durations decrease iteration 
find good deterministic solution  s 
restart search  simulating whenever
deterministic solution good found 
find optimal deterministic solution  s 
restart search simulating whenever
deterministic solution within i  found
repeat increasing i 
find good deterministic solution  s 
restart search simulating whenever
deterministic solution good found 
find good deterministic solution  s 
possible  restart search simulating whenever
deterministic solution within i 
found  repeat increasing i 

table    summary algorithms introduced find probabilistic makespan
instance job shop scheduling problem probabilistic durations 

heuristic techniques necessary assign fixed durations activity 
standard approach use mean duration  however  cases
representation uncertainty surrounding duration  take
account want high probability      execution  general approach
heuristically use formulation lower bound  minimum makespans presented
section      duration activity ai defined   qi   q fixed
non negative value   respectively  mean standard deviation
duration ai   since longer limited producing lower bound 
flexibility selecting q  intuitively  want q value leads situation
good deterministic solutions low values probabilistic makespan  s  
experiment number q values based analysis section     shown table
   cases  set b          see section      corresponding         value q  
generated problem instance monte carlo simulation  simulating        paths
n activities 
    experimental details
empirical investigations examine four sets probabilistic jsps size              
            where       problem    jobs consisting    activities  
set  three uncertainty levels uj               considered  deterministic problem
generated using existing generator  watson  barbulescu  whitley    howe       
   

fiproactive algorithms jsp

q 
 

q 
     

 n

q 
q   q 
 

     

n

q 
meanai i 
meanai

q

table    q values used experiments  choices q  q  motivated
analysis section       

integer durations drawn uniformly interval          three probabilistic instances
different levels uncertainty produced setting mean duration
deterministic duration activity ai   randomly drawing  using uniform
distribution  standard deviation duration activity ai interval    
uj    distribution duration approximately normal  problem size 
generate    deterministic problems transformed    probabilistic instances 
problem sizes chosen elicit range behavior  small problems 
approximately complete algorithms expected able find prove
 approximate  optimality  larger problems  even underlying deterministic
problems could solved optimality within time limit used  chose use
existing generator rather than  example  modifying existing benchmark problems 
allowed us full control problem structure  three levels
uncertainty simply chosen low  medium  high uncertainty conditions
compare algorithms 
given stochastic nature simulation tabu search algorithm  algorithm run    times problem instance different random seeds  run
time limit     cpu seconds  monte carlo simulation uses n        independent
trials 
hardware used experiments    ghz pentium       mb main
memory running linux redhat    algorithms implemented using ilog scheduler
    
recall b b dq l algorithm  employ descending sequence q values 
problems except       problems  initial q value  qinit   set      
decrement  qdec               problems  qinit value     used 
change made observing qinit         initial tree search     
problems would often fail find solution prove none existed within reasonable
amount time  believe due problem instances size
solution q        satisfied constraint simulated makespan must
less equal deterministic approximation  i e   makeq  se   d se  see
section         yet search space sufficiently large require significant
amount search prove it  reducing qinit     results initial solution found
quickly instances 
primary evaluation criterion mean normalized probabilistic makespan  mnpm  
algorithm achieved relevant subset problem instances  we display
data different subsets examine algorithm performance different problem sizes
uncertainty levels   mean normalized probabilistic makespan defined follows 
   

fibeck   wilson

mnpm  a  l   

  x d a  l 
 l 
dlb  l 

   



l set problem instances  d a  l  mean estimate probabilistic
makespan found algorithm l    runs  dlb  l  lower bound probabilistic makespan l  problems except        dlb found solving
deterministic problems using q    simple  plausibly  sufficient q value  see section
    table     instance solved using constraint based tree search incorporating
texture based heuristics global constraint propagation used above  maximum
time     cpu seconds given   deterministic  problems smaller      
easily solved optimality  however  none      problems solved optimality 
this  dlb values chosen represent best solutions found 
true lower bounds 
    results analysis
table   presents overview results experiments problem size
uncertainty level  results q   q  shown heuristic algorithm 
large performance difference among non zero q values  q     q  q     return
issue section        cell table   mean value    independent
runs    problems  aside     instances  runs reached     cpu
second time limit  therefore  report cpu times 

problem
size
  
  
     
     

unc 
level
   
   
 
   
   
 
   
   
 
   
   
 

b b complete
n
dq l
             
             
      
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     

algorithms
b b heuristic
tbs
i bs
     
     
     
     
     
     
     
     
     
     
     
     
           
           
           
     
     
     
     
     
     

tabu
tbs
i bs
           
           
           
     
     
     
     
           
     
     
     
     
     
     
           
           
           

table    mean normalized probabilistic makespans algorithm    indicates
set runs have  high confidence  found approximately optimal
makespans  indicates problem sets normalization done
approximate lower bounds  lowest mnpm found problem set
shown bold 

   

fiproactive algorithms jsp

impression results gained looking bold entries indicate
lowest mean normalized probabilistic makespan  mnpm  found problem
set  b b n b b dq l find approximately optimal solutions smallest
problem set  b b dq l tabu i bs find lowest probabilistic makespans
        problems  performance complete b b techniques 
especially b b n  degrade       problems heuristic b b algorithms
find lowest probabilistic makespans  finally  largest problems  tabu based
techniques clearly superior 
one anomaly overall results table   seen b b n b b dq l
entries     problems  two three uncertainty levels algorithms terminate limit cpu time resulting approximately optimal solutions  however 
mean normalized probabilistic makespans lower b b dq l algorithm 
conjecture artifact b b dq l algorithm biases simulation
toward lower probabilistic makespan values  b b n  particular solution  s 
simulated find d s   b b dq l  solution may simulated multiple
times leading bias  illustration  assume b b dq l finds approximately
optimal solution searching tree corresponding q   q        subsequent
iteration q   q      q     provided deterministic makespan less previously identified probabilistic makespan  i e   makeq  s     d s     solution found
simulated again  actual identity current best solution used
determine solutions simulate  subsequent simulation  lower value
d s   generated  replace previous lowest probabilistic makespan value 
leads situation may re simulate solution multiple times  keeping
lowest probabilistic makespan found simulations  similar re simulation
possible tabu i bs algorithm 
test statistical significance results table    ran series randomized
paired t tests  cohen        p        results statistical tests
displayed table   different problem sizes  different uncertainty levels
collapsed that  example      statistics based    
instances  informal impression discussed reflected tests b bdq l tabu i bs dominating two smallest problem sizes  branch and bound
heuristic approaches performing best      problems  tabu based techniques
delivering best results       problems 
overview  primary interpretation performance algorithms
experiments follows  smaller problems          complete techniques
able cover entire search space least significant portion it  though
case b b dq l  solutions chosen simulation heuristically driven
deterministic makespan values  lower bound results section     ensure
good solutions found provided iterations small q values run within
cpu time limit        problems  complete techniques able
simulate sufficient variety solutions as  especially b b n  heuristic guidance
poor  note  however  b b dq l competitive with  and  many problems
sets  better tabu based algorithms       problems  believe
      results stem ability b b heuristic algorithms quickly find
   

fibeck   wilson

problem
size
  
  
     
     

statistical significance
 p       
 b b dq l  tabu i bs     b b tbs  b b i bs  tabu tbs  b b n 
 b b dq l  tabu i bs     b b i bs     b b tbs     tabu tbs     b b n 
 b b tbs  b b i bs     tabu i bs  b b dq l  tabu tbs     b b n 
 tabu tbs  tabu i bs     b b tbs  b b i bs     b b dq l     b b n 

table    statistically significant relationships among algorithms results
shown table    algorithms within set show significant difference 
  relation indicates algorithms left hand set significantly
lower mnpm algorithms right hand set  set indicated
represents complicated relationship amongst algorithms  tabu i bs  
tabu tbs pairs set show significant performance differences 

optimal deterministic solution systematically simulate solutions
deterministic makespans close optimal  contrast  tabu based algorithms
systematically enumerate solutions  finally  largest problems 
hypothesize tabu search techniques result best performance able
find better deterministic solutions simulate 
problem size  size problems increase  see not unexpected decrease
quality probabilistic makespans found  simple reasonable explanation
trend less search space explored within given cpu time
larger problems  likely factors contribute trend  e g  
quality lower bound may well systematically decrease problem size increases  
uncertainty level  normalized makespan values increase within problem size
uncertainty level rises  results calculated normalization
lower bound  possible observed decrease solution quality actually due
decrease quality lower bound rather reduction quality
solutions found algorithms uncertainty increases  test idea  table  
normalized     results using optimal probabilistic makespans found b b n
rather deterministic lower bound  table shows algorithms apart
b b dq l tabu i bs  trend increasing mean normalized probabilistic
makespan still evident  algorithms  least  putative decreasing quality
lower bound cannot entire explanation trend worse performance
results higher levels uncertainty  section        revisit question provide
evidence could explain algorithms perform worse uncertainty increased 
results lend credibility conjecture observed super optimal
performance b b dq l tabu i bs small problems due repeatedly
simulating solution  low levels uncertainty  repeated simulations truly
best solution vary greatly  resulting mnpm value    higher levels
uncertainty  distribution simulated makespans wider and  therefore  repeated
simulation solution biases results toward smaller probabilistic makespan values 
observe results b b dq l tabu i bs table   
   

fiproactive algorithms jsp

unc 
level
   
   
 

b b complete
n
dq l
     
     
     
     
     
     

algorithms
b b heuristic
tbs
i bs
     
     
     
     
     
     

tabu
tbs
i bs
           
           
           

table    mean normalized probabilistic makespans algorithm    
problem set normalized optimal probabilistic makespans found b b n 

balance section  turn detailed analysis algorithms 
      analysis  b b complete algorithms
performance b b n poor unable exhaustively search branchand bound tree  high computational cost running simulation every node
relatively weak lower bound partial solutions provide  conspire result technique
scale beyond small problems 
problem
size
  
  
     
     

uncertainty
   
   
 
 
 
   
         
   
   

level
 
 
    
   
   

table    lowest q value used problem size uncertainty level b bdq l  problems except        initial q value            
problems  initial q value    

b b dq l able perform somewhat better b b n larger problems even
able exhaustively search tree q      table   shows
minimum q values attained problem size uncertainty level  deterministic
durations defined q value serve guide prune search iteration and 
therefore  heuristic algorithms  see below   search heuristically guided
extent solutions low deterministic makespans low probabilistic
makespans  however  characteristics solutions found search unclear 
recall b b dq l starts high q value that  combination constraint
deterministic makespan must less equal best simulated probabilis   one idea improving lower bound investigate incorporate resourcebased propagators  e g   edge finding  evaluation partial solution  single trial
internal node  deterministic makespan found sampling distributions finding
longest path temporal network  sampling  however  possible apply
standard propagation techniques might insert additional edges precedence graph
thereby increase makespan  improving lower bound 

   

fibeck   wilson

tic makespan found far  significantly prunes search space  ideally  would
search high q find solutions good probabilistic makespans
wish find good solutions quickly simulated probabilistic makespan
values used prune subsequent search lower q values  therefore  effort
better understand b b dq l search  examine characteristics initial
solutions finds 
idea quality solutions produced high q values seen
comparing probabilistic makespan found high q  the first solution found 
best solution found run  table   presents comparison form f  
mean normalized makespans initial solutions found b b n b b dql  data indicate first solution found b b dq l much better
found b b n  b b n searches initial solution  upper bound
deterministic makespan constrain problem  solution therefore
easy find  i e   backtracking  little constraint propagation
heuristic information available guide search solution small makespan 
contrast  b b dq l searches initial solution  high q value means
searching highly constrained search space deterministic makespan must
less probabilistic makespan  therefore  tight upper bound
deterministic makespan  relative durations incorporate q values  
many cases  initial iterations fail find feasible solutions  quickly 
eventually  q value low enough allow feasible solution  however search
solution strongly guided propagation problem constraints  summary 
initial search b b n guidance constraint propagation toward good
solution b  dq l guided constraint propagation overly constrained
problem  table   shows that  experiments  guidance tends result better
initial solutions  believe observation may useful generally constraint
solving  see section    
provide fuller indication performance differences  table   presents
improvement first solution achieved  difference first solution
last solution  dl   found algorithm  dl value reported table    
larger problem sets  improvement made first solution b b dq l
greater  smaller problem sets  improvement b b n greater
b b dq l  however  suspect ceiling effect reduces amount b b dq l
improve  i e   initial solutions already quite close optimal  
      analysis  heuristic algorithms
turn performance heuristic algorithms  first examine hypothesis
performance dependent two factors  ability algorithms find
solutions low deterministic makespans correlation good deterministic
probabilistic makespans  turn analysis effect differing q
values heuristic algorithm performance 
finding good deterministic makespans  argued performance
heuristic techniques  and b b dq l  dependent upon ability find solutions
good deterministic makespans  provide evidence argument  looked
   

fiproactive algorithms jsp

problem
size
  
  
     
     

unc 
level
   
   
 
   
   
 
   
   
 
   
   
 

b b n
df
df l
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     

b b dq l
df
df l
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     

table    mean normalized makespan first solutions found algorithm
 df   difference mean normalized makespans first
last solutions  df dl   

quality best deterministic solutions found b b i bs tabu i bs 
hypothesize better performing algorithm found better deterministic
solutions worse performer 
table   presents results algorithm two largest problem sets     mean
normalized deterministic makespan  mndm   calculated follows 
mndm  a  l   

makeq  a  l 
  x
 l 
makeq min  l  b b bs 

   



l set problem instances  makeq  a  l  mean deterministic makespan found
algorithm l    runs  makeq min  l  b b bs  lowest deterministic
makespan found b b i bs algorithm runs problem l  mndm  therefore 
provides relative measure quality average deterministic makespans
two algorithms  higher value  worse average makespan found relative
b b i bs 
table   consistent hypothesis        problems  b b i bs
outperforms tabu i bs  former able find solutions lower mean deterministic
makespan        problems results reversed tabu i bs finding
better mean deterministic makespans better probabilistic makespans 
result lends support original motivation deterministic filtering algorithms  performance algorithms terms probabilistic solution quality
positively related quality deterministic solutions able find 
next section addresses question performance relationship observed 
    show             problems sets influenced conjectured
repeated simulation behavior tabu i bs 

   

fibeck   wilson

problem
size
     
     

uncertainty
level
   
   
 
   
   
 

mndm
b b i bs tabu i bs
     
     
     
     
     
     
     
     
     
     
     
     

table    mean normalized deterministic makespan  mndm  b b i bs tabui bs 

correlation deterministic probabilistic makespan  ability algorithms find good deterministic makespans would irrelevant
ability find good probabilistic makespans without correlation two 
reasonable expect level uncertainty problem instance impact
correlation  low uncertainty variations duration small  meaning
expect probabilistic makespan relatively close deterministic makespan 
uncertainty level high  distribution probabilistic makespans single
solution wider  resulting less correlation  hypothesize impact
uncertainty level contributes observed performance degradation  see tables     
heuristic techniques higher uncertainty levels problem size held constant 
examine hypothesis generated     new       deterministic jsp problem
instances generator parameters used above  standard deviations
duration activity     instances generated independently
five uncertainty levels uj                     resulting total     problem
instances      uncertainty level   instance four q
values  as table     randomly generated     deterministic solutions
simulated  using r statistical package  r development core team        
measured correlation coefficient problem set  cell table   result
      pairs data points  deterministic probabilistic makespans     random
deterministic solutions     problem instances 
uncertainty level
   
   
 
 
 

q 
      
      
      
      
      

q 
      
      
      
      
      

q 
      
      
      
      
      

q 
      
      
      
      
      

table    correlation coefficient  r  comparing pairs deterministic probabilistic makespans set       probabilistic jsps  cell represents
correlation coefficient       deterministic  probabilistic pairs 

   

fiproactive algorithms jsp

table   supports explanation performance heuristic techniques 
uncertainty level increases  correlation deterministic makespan
corresponding probabilistic makespan lessens  strength correlation somewhat
surprising  even highest uncertainty level standard deviation duration activity uniformly drawn     times mean duration 
correlation      q  q    positive indication heuristic
algorithms suggests may scale well higher uncertainty levels provided
reasonable q value used  examine impact q values original experiments implications deterministic probabilistic makespan correlation
next section 
emphasized results based correlations deterministic probabilistic makespans randomly generated solutions  addressed
correlations might change high quality solutions  might considered
appropriate population sample  one technical difficulty
design experiment examine this  ensure sufficiently randomized sample
population good solutions  also  result could depend strongly  rather
arbitrary  particular choice quality cutoff solutions 
effect q values  heuristic algorithms requires fixed q value   
experimented four different values  see table     table    displays significant pairwise differences among q values heuristic measured randomized
paired t tests  cohen        p        observed  almost
significant differences low levels uncertainty           smallest problem
set  higher levels uncertainty larger problems  using q  never better
using one higher q values many cases  q  results worst mean makespan 
among q values  majority problem sets algorithms
significant differences  given algorithm  never case lower q value leads
significantly better results higher q value 
correlation results table   provide explanation differences 
      problems  performance q  algorithms competitive
large difference correlations deterministic probabilistic solutions  i e  
uncertainty levels           uncertainty level    significant
reduction correlation coefficient q  corresponding reduction mean
normalized probabilistic makespans found algorithms using q   
    summary
results experiments summarized follows 
principled use simulation  b b n  useful small problems 
simulation time major component run time resulting little
exploration search space 
algorithm b b dq l  based idea iteratively reducing parameter determines validity lower bound  results equal performance small prob    addressing behavior b b dq l  q descends run algorithm 
examining algorithms fixed q values 

   

fibeck   wilson

problem
size
  

  

     

     

unc 
level
   
   
 

   
   
 

   
   
 

   
   
 


b b
tbs
i bs
q     q    q      q 
q     q    q   
 q    q    q      q 
 q    q    q      q 
 q    q    q      q 
 q    q    q      q 
 q    q      q 
 q    q      q 
q    q  
q    q    q 
 q    q      q 
q    q  

tabu
tbs
i bs
q     q 
 q    q    q      q 
 q    q    q      q 
q    q  
 q    q      q 
 q    q      q 
q    q  
 q    q    q      q 
q     q 
 q    q    q      q   q    q    q      q 
 q    q    q      q 

 q    q    q      q 

table     results pair wise statistical tests algorithm problem set 
notation   b indicates algorithm using q   achieved significantly
better solution  i e   lower probabilistic makespan  used q   b   
indicates significant differences  statistical tests randomized paired t
tests  cohen        p       

lems much better performance larger problems compared b b n 
work needed understand behavior algorithm  however preliminary evidence indicates able find good solutions quickly current
application domain 
series heuristic algorithms proposed based using deterministic makespan
filter solutions would simulated  demonstrated performance algorithms depends ability find good deterministic
makespans correlation quality deterministic probabilistic solutions  shown even problems quite high uncertainty
level  deterministic problems constructed lead strong deterministic probabilistic makespan correlation 
central success heuristic algorithms use q value governed
extent duration uncertainty represented durations activities
deterministic problems  shown incorporation uncertainty
data leads stronger correlation deterministic probabilistic makespans
corresponding ability find better probabilistic makespans 
   

fiproactive algorithms jsp

   extensions future work
section  look three kinds extensions work  first  show
theoretical framework fact applies far general probabilistic scheduling problems
job shop scheduling  section      discuss ways algorithms
probabilistic jsp presented paper might improved  finally  discuss
possibility developing central idea b b dq l algorithm solving approach
general constraint optimization problems 
    generalization scheduling problems
results paper derived important case job shop scheduling
problems  fact  valid much broader class scheduling problems  including
resource constrained project scheduling problems common form  e g   probabilistic
version deterministic problems studied work laborie         section 
describe extend framework approaches 
approach relies fact job shop scheduling problem  one focus
orderings activities  rather directly assignments start times activities 
specifically  definition minimum makespan based orderings equivalent
one based start time assignments  equivalence holds much generally 
first         give basic definitions properties immediate extensions defined section    then         characterize class scheduling
problems properties require  use logical expression represent
constraints problem        give key result relating schedule based
minimum makespan ordering based minimum makespan  section       discusses
extended class probabilistic scheduling problems  section       considers different
optimization functions 
      schedules  orderings makespans
section    given set activities  activity ai associated positive duration di  for deterministic case   schedule  for a  defined
function set activities set time points  which non negative
numbers   defining activity starts  let z schedule  makespan make z 
schedule z defined time last activity completed  i e  
maxai  z ai     di    say z orders ai aj aj starts earlier
ai ends  i e   z ai     di z aj   
essential aspect job shop problems approach one focus
orderings activities rather schedules  section   use term solution
ordering satisfies constraints given jsp  define ordering  on a 
strict partial order a  i e   irreflexive transitive relation set activities 
hence  ordering s  ai a   ai   ai  
  s   ai   aj    aj   ak   s 
 ai   ak   s   ai   aj   s  say orders ai aj   say
ai predecessor aj   path  or s path  sequence activities
ai precedes aj sequence  orders ai aj   length len   path
 in ordering  defined sum durations activities path 
   

fibeck   wilson

p
i e   ai di   makespan  make s   ordering defined length
longest s path  s path said critical s path length equal
makespan ordering s  i e   one longest s paths 
schedule associated ordering  schedule z define ordering sol z 
follows  sol z  orders activity ai aj z orders ai aj  
conversely  ordering one define non delay schedule  optimal
among schedules compatible ordering  starting activity soon
predecessors finish  let ordering  inductively define schedule z   sched s 
follows  ai predecessor  start ai time    i e   z ai        otherwise 
set z ai     maxaj pred ai    z aj     dj    pred ai   set predecessors ai  
fact acyclic guarantees defines schedule  section     
following two important properties  first states makespan ordering
equal makespan associated schedule  second states makespan
schedule better makespan associated ordering 
proposition  
 i  ordering s  make sched s     make s  
 ii  schedule z  make sol z   make z  
proof straight forward  follows easily induction schedule z
respects precedence constraints expressed ordering s  last activity
s path end earlier z length path  applying critical path
implies  ii  make sol z   make z   implies half  i   make sched s   make s  
working backwards activity finishes last sched s   choosing immediate
predecessor stage  one generates  in reverse order  path whose length equal
make sched s    hence showing make sched s   make s   proving  i  
      positive precedence expressions
define class scheduling problems  using call positive precedence expressions  ppes  represent constraints  scheduling problems assumes
preemption  so activities cannot interrupted started  use
makespan cost function 
activities ai aj   expression before i  j  interpreted constraint  on
possible schedules  activity aj starts earlier end activity ai  
expressions called primitive precedence expressions  positive precedence expression
defined logical formula built primitive precedence expressions  conjunctions
disjunctions   the term positive used since involve negations   formally 
set e positive precedence expressions  over a  defined smallest set
 a  e contains before i  j  ai aj a   b  e 
        e 
positive precedence expressions interpreted constraining schedules a 
let e ppe let z schedule  define z satisfies recursively
follows 
   

fiproactive algorithms jsp

z satisfies primitive precedence expression before i  j  z orders
aj   i e   z ai     di z aj   
z satisfies conjunction two constraint expressions satisfies
them 
z satisfies disjunction two constraint expressions satisfies
least one them 
similarly  ordering positive precedence expression recursively define
satisfies obvious way  satisfies before i  j  orders
aj   ordering satisfies     satisfies   ordering satisfies
    satisfies either  
positive precedence expressions powerful enough represent constraints
job shop scheduling problem  resource constrained project scheduling problem 
jsps positive precedence expressions  resource constraints job shop scheduling problem give rise disjunctions primitive precedence expressions  pair
activities ai aj require resource  expression before i  j  before j  i 
expresses ai aj overlap  one precedes other  
ordering activities job expressed terms primitive expressions  before i  j 
ai precedes aj within job  hence  constraints job shop problem
expressed positive precedence expression conjunctive normal form  i e   conjunction
disjunctions primitive precedence expressions 
rcpsps ppes  constraints resource constrained project scheduling problem
 rcpsp   pinedo        brucker et al         laborie   ghallab        laborie       
expressed positive precedence expression conjunctive normal form 
rcpsp  precedence constraints activities  expressed
primitive precedence expression  let conjunction these  rcpsp 
set resources  positive capacity  associated activity
resource r rate usage ai  r  resource r activity ai   following
resource constraints schedule  resource r  time point t  sum
ai  r  activities ai progress  i e   started
yet ended  must exceed capacity resource r 
define forbidden set  or conflict set  set activities whose total usage
resource exceeds capacity resource  let f set forbidden sets   if
wished  could delete f set superset set f 
could delete set h contains elements ai aj ai precedes aj
according    resource constraints expressed equivalently as  h f 
exists time every activity h progress  holds
h f  exist two activities h overlap  since pairs
activities h overlap activities h progress latest start time
activities h   i e   exists ai   aj h before i  j   hence  schedule satisfies
resource constraints satisfies positive precedence expression defined
   

fibeck   wilson


 

hf

 

before i  j  

ai  aj h
i  j

therefore  expression     represents rcpsp  i e   schedule satisfies constraints
rcpsp satisfies     
another class scheduling problems  represented positive
precedence expression  class based and or precedence constraints  gillies  
liu        mohring  skutella    stork        
      solutions minimum makespan
fixed positive precedence expression a  say schedule z valid
satisfies   say ordering solution satisfies   ordering satisfies
before i  j   then  construction  sched s  satisfies before i  j   follows immediately
schedule z satisfies before i  j  sol z  satisfies before i  j   following
result proved easily induction number connectives  
lemma   ppe a  solution  sched s  valid schedule 
z valid schedule  sol z  solution 
minimum makespan  for   defined infimum makespan valid
schedules  i e   infimum make z  valid schedules z  minimum solution
makespan defined minimum makespan solutions  i e   minimum
make s  solutions s  following key result links schedulebased definition minimum makespan solution based definition  follows
proposition   lemma    since solution valid schedule  i e   sched s  
value makespan  valid schedule z solution  i e  
sol z   least good value makespan 
proposition   let positive precedence expression a  minimum
makespan equal minimum solution makespan 
      probabilistic scheduling problems based ppes
probabilistic versions scheduling problems defined way
jsps  duration activity ai random variable  positive precedence
expression used represent constraints 
definitions sections     immediately extended much
general setting  results paper still hold  exactly proofs 
particular  probabilistic problem one associates corresponding deterministic
problem way  lower bound results section     based longest
path characterization makespan  monte carlo approach  or least usefulness 
relies fact makespan solution equal makespan associated
schedule  furthermore  algorithms section   extend  given one method
solving corresponding deterministic problem 
   

fiproactive algorithms jsp

ordering based policies use  based fixing partial ordering activities 
irrespective sampled values durations  known earliest start policies
 radermacher         policies studied rcpsps  see e g  
stork        however aim work minimize expected makespan  whereas
attempting minimize  makespan  
      different optimization functions
approach evaluating comparing solutions based use monte
carlo simulation generate sample distribution  techniques quite general 
much work paper generalizes immediately regular cost functions  regular means function monotonic sense increasing
end activity schedule decrease cost  regular function based
efficiently computable measurement sample distributions accommodated 
example  could easily adapt situations probability extreme solutions
important basing optimization function maximum sampled makespan  conversely  could use measures tightness makespan distribution situations
minimizing variance measure accuracy schedule important  furthermore  weighted combinations functions  e g    makespan plus measure
distribution tightness  could easily incorporated 
modify approach account ways comparing solutions
based sample distributions  example  could perform t tests using sample
distributions determine one solution significantly lower expected makespan 
    toward better algorithms probabilistic jsps
two directions future work algorithms presented paper  first 
b b n could improved make use deterministic techniques and or incorporate probabilistic reasoning existing deterministic techniques  example  number
deterministic lower bound formulations pert networks exist operations research literature  ludwig  mohring    stork        may used evaluate partial
solutions  similarly  perhaps dominance rules presented daniels carrillo       
one machine  robustness problem generalized multiple resources  another
approach improving b b n performance incorporate explicit reasoning
probability distributions standard constraint propagation techniques  techniques
longest path calculations edge finding make inferences based propagation
minimum maximum values temporal variables  believe many
techniques adapted reason probabilistic intervals  related work
done  example  simple temporal networks uncertainty  morris  muscettola   
vidal        tsamardinos        
second direction future work improvement heuristic algorithms 
key advantage algorithms make use deterministic techniques
scheduling  transforming probabilistic problems deterministic problems  bring
significant set existing tools bear problem  developments approach include adaptively changing q values search order find lead
solutions better values probabilistic makespan  d  s    deeper understanding
   

fibeck   wilson

relationship good deterministic solutions good probabilistic solutions 
building work here  necessary pursue work principled fashion 
course  proactive techniques sufficient  practice  schedules dynamic
need adapted new jobs arrive existing jobs canceled  execution time 
reactive component necessary deal unexpected  or sufficiently unlikely  disruptions
that  nonetheless  occur  complete solution scheduling uncertainty needs
incorporate elements reason uncertainty different levels granularity
different time pressures  see work bidot  vidal  laborie beck       
recent work direction 
    exploiting unsound lower bounds constraint programming
b b dq l algorithm may represent problem solving approach applied
beyond current application area  abstract away probabilistic jsp application 
central idea b b dq l exploit unsound lower bound  over constrain
search run subsequent searches gradually relaxed unsound lower bound 
approach may play strengths constraint programming  searching within
highly constrained spaces 
example  assignment problem  ap  well known lower bound traveling
salesman problem  tsp  used cost based constraint literature
 focacci  lodi    milano        rousseau  gendreau  pesant    focacci         given
tsp  p   let ap  p  q  corresponding assignment problem travel distances
multiplied q  is  let dij distance cities j p let d ij
distance cities j ap  p  q   d ij   dij q q    approach
similar b b dq l algorithm applied solve tsp 
would interesting investigate approach compares traditional
optimization approach constraint programming  may particularly useful applications evaluation partial solutions expensive exists
parameterizable  inexpensive lower bound 

   conclusion
paper  addressed job shop scheduling durations activities
independent random variables  theoretical framework created formally define
problem prove soundness two algorithm components  monte carlo simulation
find upper bounds probabilistic makespan solution partial solution 
carefully defined deterministic jsp whose optimal makespan lower bound
probabilistic makespan corresponding probabilistic jsp 
used two components together either constraint programming
tabu search define number algorithms solve probabilistic jsps  introduced
three solution approaches  branch and bound technique using monte carlo simulation
evaluate partial solutions  iterative deterministic search using monte carlo simulation
evaluate solutions series increasingly less constrained problems based
parameterizable lower bound  number deterministic filtering algorithms
generate sequence solutions deterministic jsp  simulated
using monte carlo simulation 
   

fiproactive algorithms jsp

empirical evaluation demonstrated branch and bound technique
able find approximately optimal solutions small problem instances  iterative
deterministic search performs well as  better than  branch and bound approach
problem sizes  however  medium large instances  deterministic filtering
techniques perform much strongly providing optimality guarantees 
experimentation demonstrated techniques using deterministic methods 
correlation deterministic makespan probabilistic makespan key factor
algorithm performance  taking account variance duration deterministic
problem led strong correlations good algorithmic performance 
proactive scheduling techniques seek incorporate models uncertainty offline  predictive schedule  goal techniques increase robustness
schedules produced  important schedule typically generated
executed isolation  decisions deliver raw materials
schedule up  down stream factories affected individual schedule  indeed 
schedule seen locus competing constraints across company supply
chain  fox         differences predictive schedule execution
significant source disruption leading cascading delays across widely separated entities 
ability  therefore  develop schedules robust uncertainty important 
paper represents step direction 

acknowledgments
work received support science foundation ireland grants    pi   c   
   in i     natural sciences engineering research council canada 
ilog  sa  authors would thank daria terekhov radoslaw szymanek
comments previous versions paper  preliminary versions work reported
paper published beck wilson              

references
beck  j  c          texture measurements basis heuristic commitment techniques
constraint directed scheduling  ph d  thesis  university toronto 
beck  j  c     fox  m  s          dynamic problem structure analysis basis
constraint directed scheduling heuristics  artificial intelligence                
beck  j  c     wilson  n          job shop scheduling probabilistic durations 
proceedings sixteenth european conference artificial intelligence  ecai    
pp         
beck  j  c     wilson  n          proactive algorithms scheduling probabilistic durations  proceedings nineteenth international joint conference artificial
intelligence  ijcai     pp           
bidot  j          general framework integrating techniques scheduling uncertainty  ph d  thesis  ecole nationale dingeieurs de tarbes 
   

fibeck   wilson

bidot  j   vidal  t   laborie  p     beck  j  c          general framework scheduling
stochastic environment  proceedings twentieth international joint
conference artificial intelligence  ijcai     pp       
blazewicz  j   domschke  w     pesch  e          job shop scheduling problem  conventional new solution techniques  european journal operational research 
            
boutilier  c   dean  t     hanks  s          decision theoretic planning  structural assumptions computational leverage  journal artificial intelligence research 
        
brucker  p   drexl  a   mohring  r   neumann  k     pesch  e          resource constrained
project scheduling  notation  classification  models methods  european journal
operational research           
burns  a   punnekkat  s   littlewood  b     wright  d          probabilistic guarantees fault tolerant real time systems  tech  rep  deva tr no      design validation  esprit long term research project no         available
http   www fcul research ec org deva 
burt  j  m     garman  m  b          monte carlo techniques stochastic network analysis  proceedings fourth annual conference applications simulation 
pp         
cohen  p  r          empirical methods artificial intelligence  mit press  cambridge  mass 
daniels  r     carrillo  j           robust scheduling single machine systems
uncertain processing times  iie transactions             
davenport  a  j   gefflot  c     beck  j  c          slack based techniques robust
schedules  proceedings sixth european conference planning  ecp       
davenport  a     beck  j  c          survey techniques scheduling uncertainty 
tech  rep   available at  http   www tidel mie utoronto ca publications php 
drummond  m   bresina  j     swanson  k          just in case scheduling  proceedings
twelfth national conference artificial intelligence  aaai      pp      
      menlo park  ca  aaai press mit press 
feller  w          introduction probability theory applications  third edition   john wiley sons  new york  london 
focacci  f   lodi  a     milano  m          hybrid exact algorithm tsptw 
informs journal computing                 
fox  m  s          constraint directed search  case study job shop scheduling  ph d 
thesis  carnegie mellon university  intelligent systems laboratory  robotics institute  pittsburgh  pa  cmu ri tr      
gao  h          building robust schedules using temporal protectionan empirical study
constraint based scheduling machine failure uncertainty  masters thesis 
department industrial engineering  university toronto 
   

fiproactive algorithms jsp

garey  m  r     johnson  d  s          computers intractability  guide theory
np completeness  w h  freeman company  new york 
ghosh  s          guaranteeing fault tolerance scheduling real time systems 
ph d  thesis  university pittsburgh 
ghosh  s   melhem  r     mosse  d          enhancing real time schedules tolerate
transient faults  real time systems symposium 
gillies  d  w     liu  j  w  s          scheduling tasks and or precedence constraints  siam j  comput              
hagstrom  j  n          computational complexity pert problems  networks     
       
herroelen  w     leus  r          project scheduling uncertainty  survey research
potentials  european journal operational research                  
laborie  p          algorithms propagating resource constraints ai planning
scheduling  existing approaches new results  artificial intelligence              
laborie  p          complete mcs based search  application resource constrained
project scheduling  proceedings nineteenth international joint conference
artificial intelligence  ijcai     pp         
laborie  p     ghallab  m          planning sharable resource constraints  proceedings fourteenth international joint conference artificial intelligence
 ijcai    
le pape  c   couronne  p   vergamini  d     gosselin  v          time versus capacity
compromises project scheduling  proceedings thirteenth workshop
uk planning special interest group 
leon  v  j   wu  s  d     storer  r  h          robustness measures robust scheduling
job shop  iie transactions               
ludwig  a   mohring  r     stork  f          computational study bounding
makespan distribution stochastic project networks  annals operations research 
          
meuleau  n   hauskrecht  m   kim  k   peshkin  l   kaelbling  l   dean  t     boutilier  c 
        solving large weakly coupled markov decision processes  proceedings
fifteenth national conference artificial intelligence  aaai     
mohring  r   skutella  m     stork  f          scheduling and or precedence constraints  siam j  comput                 
morris  p   muscettola  n     vidal  t          dynamic control plans temporal
uncertainty  proceedings seventeenth international joint conference
artificial intelligence  ijcai     
nowicki  e     smutnicki  c          fast taboo search algorithm job shop problem 
management science                 
nuijten  w  p  m          time resource constrained scheduling  constraint satisfaction approach  ph d  thesis  department mathematics computing science 
eindhoven university technology 
   

fibeck   wilson

pinedo  m          scheduling  theory  algorithms  systems   nd edition   prenticehall 
r development core team         r  language environment statistical computing 
r foundation statistical computing  vienna  austria  isbn               
radermacher  f  j          scheduling project networks  annals operations research 
          
rousseau  l   gendreau  m   pesant  g     focacci  f          solving vrptws
constraint programming based column generation  annals operations research 
            
stork  f          branch and bound algorithms stochastic resource constrained project
scheduling  tech  rep            technische universitat berlin  department mathematics 
tsamardinos  i          probabilistic approach robust execution temporal plans
uncertainty  methods applications artificial intelligence  proceedings
second hellenic conference artificial intelligence  vol       lecture notes
artificial intelligence  pp        
watson  j  p   barbulescu  l   whitley  l     howe  a          contrasting structured
random permutation flow shop scheduling problems  search space topology
algorithm performance  informs journal computing         
wilson  n          algorithms dempster shafer theory  in  kohlas  j   moral  s  
 eds   algorithms uncertainty defeasible reasoning  volume    handbook
defeasible reasoning  kluwer academic publishers 
wurman  p     wellman  m          optimal factory scheduling using stochastic dominance
a   proceedings twelfth conference uncertainty artificial intelligence
 uai     

   


