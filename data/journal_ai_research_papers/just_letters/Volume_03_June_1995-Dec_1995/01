journal artificial intelligence research               

submitted       published     

flecs  planning flexible commitment strategy
manuela veloso
peter stone

department computer science  carnegie mellon university
pittsburgh  pa            usa

veloso cs cmu edu
pstone cs cmu edu

abstract
evidence least commitment planners eciently handle planning
problems involve dicult goal interactions  evidence led common belief
delayed commitment  best  possible planning strategy  however  recently
found evidence eager commitment planners handle variety planning problems
eciently  particular dicult operator choices  resigned futility
trying find universally successful planning strategy  devised planner
used study domains problems best planning strategies 
article introduce new planning algorithm  flecs  uses flexible
commitment strategy respect plan step orderings  able use strategy
delayed commitment eager commitment  combination delayed eager
operator ordering commitments allows flecs take advantage benefits explicitly
using simulated execution state reasoning planning constraints  flecs vary
commitment strategy across different problems domains  course
single planning problem  flecs represents novel contribution planning
explicitly provides choice commitment strategy use planning  flecs
provides framework investigate mapping planning domains problems
ecient planning strategies 

   introduction
general purpose planning long history research artificial intelligence  several
different planning algorithms developed ranging pioneering gps  ernst
  newell        variety recent algorithms snlp  mcallester   rosenblitt 
      family  basic level  purpose planning find sequence
actions change initial state state satisfies goal statement  planners use
actions provided domain representations try achieve goal  however
different planners use different means end 
faced variety different planning algorithms  planning researchers  including authors  increasingly curious compare different planning methodologies  although general purpose planning known undecidable  chapman        
common belief least commitment planning  best   i e   efficient planning strategy planning problems  belief based evidence
least commitment planners eciently handle planning problems involve dicult
plan step interactions  barrett   weld        kambhampati        minton  bresina   
drummond         delayed commitments  particular step orderings  allow plan

c      ai access foundation morgan kaufmann publishers  rights reserved 

fiveloso   stone

steps remain unordered interactions visible   similar situations  eagercommitment planners may encounter severe eciency problems early commitments
incorrect orderings 
recently engaged investigation sorts planning problems would
handled eciently planning strategies  since planning driven heuristics 
identified different sets heuristics correspond different planning methods 
designed sets planning domains problems test different planning strategies 
studying impact different strategies different kinds planning problems 
came across evidence eager commitment planners eciently handle variety
planning problems  particular dicult operator choices  stone  veloso 
  blythe         up to date state allows make informed planning choices 
particularly terms operator alternatives available  similar situations  delayedcommitment planners may need backtrack incorrect operator choices  veloso  
blythe         came believe planner consistently better others
across different domains problems 
resigned futility trying find universally successful planning strategy 
felt need study domains problems best suited planning
methods   order so  devised implemented planner use
operator ordering commitment strategy along continuum between  one extreme
delayed commitment  other  eager commitment  planner completely
exible along one dimension planning heuristics  operator ordering commitments 
main contribution paper completely describe planning algorithm
put forth tool studying mapping heuristics domains problems 
rather risking possibility planner might get overlooked
relegated  architecture  section future paper  present flecs underlying
philosophy contribution right 
continuum heuristics explored planning algorithm lies
operator ordering commitment strategies delayed commitment eager commitment
backward chaining planners  situate within broad range planning
problem solving methods  one possible planning strategy search possible states
reached initial state find one satisfies goal  method 
called progression forward chaining  impractical  often many
accessible states world eciently search complete state space  alternative  several planners constrain search using regression  backward chaining 
rather considering possible actions could executed initial state
searching recursively forward state space  search backwards goal 
search driven set actions directly achieve goal 
two main ways performing backward chaining  several planners regression searching space possible plans  planners  noah  tweak  snlp 
   least commitment planners really delay commitments plan step orderings variable bindings 
throughout article use term delayed commitment contrast eager commitment
context step orderings 
   similar concerns regarding different constraint satisfaction algorithms led recently design
multi tac architecture  minton         system investigates given problem find
combination heuristics collection available ones solve problem ecient way 

  

fiflecs  planning flexible commitment strategy

descendants  chapman        mcallester   rosenblitt        mcdermott       
sacerdoti        tate        wilkins        plan space planners use delayedcommitment strategy  particular  delay decision ordering operators long
possible  consequently  planner reasons initial state set
constraints regressed goal  hand  planners gps 
strips  prodigy family  carbonell  knoblock    minton        fikes   nilsson 
      rosenbloom  newell    laird        use eager commitment strategy   use
backward chaining select plan steps relevant goals  eager commitment planners make explicit use internal representation state world  their internal
state  order operators possible reason updated version
state  trade risk eager commitment benefits using explicit
updated planning state 
article introduce planning algorithm  flecs  uses flexible commitment strategy respect operator orderings  flecs designed provide us
planning researchers framework investigate mapping domains
problems ecient planning strategies  algorithm represents novel contribution
planning introduces explicitly choice commitment strategy 
ability change commitment strategy makes useful studying tradeoffs
delayed eager commitments  flecs descendant prodigy    current
implementation directly top prodigy     extends prodigy    reasoning
explicitly ordering alternatives ability change commitment
strategy across different problems domains  course single
planning problem  
article gradually introduces flecs  section   gives top level view algorithm
describes different ways flecs makes use uniquely specified state
world  section   introduces concepts used flecs algorithm  provide
annotated example illustrate details planning concepts defined  section  
presents flecs s planning algorithm full detail explains algorithm step step 
discuss different heuristics guide flecs s choices  particular exible choice
commitment strategy  analyze advantages disadvantages delayed eager
plan step ordering commitments  section   shows specific examples planning domains
problems devised  support need use flecs s exible commitment
strategy  performed empirical analysis planning performance domains 
corresponding empirical results demonstrate tradeoffs discussed show evidence
exible commitment necessary  finally section   draws conclusions work 
   planners prodigy family include prodigy     minton  knoblock  kuokka  gil  joseph    carbonell         nolimit  veloso         prodigy     carbonell  blythe  etzioni  gil  joseph  kahn 
knoblock  minton  perez  reilly  veloso    wang         nolimit prodigy     opposed
prodigy     require linearity assumption goal independence search spaces
complete  fink   veloso         control commitment choices opposed
earlier total order planners 
   found needed new name algorithm flecs represents significant change
philosophy implementation prodigy    

  

fiveloso   stone

   top level view flecs
prodigy    flecs differ significantly state of the art planning systems

search solution planning problem combining backward chaining  or
regression  simulation plan execution  fink   veloso         back chaining 
commit total ordering plan steps make use uniquely specified
world state  planners maintain internal representation state update
simulating execution operators found relevant goal backward chaining  note
simulating execution planning differs interleaving planning execution 
since option  un simulating   rolling back  must remain open  interleaved planning
execution generally done separate modules planning  monitoring  executing 
replanning  ambros ingerson   steel         flecs either delay eagerly carry
plan simulation  way  planning algorithm exibility
able delay operator ordering commitments able use effects previously
selected operators help determine goals plan next operators
use achieve goals  short  emulate delayed commitment planners
eager commitment planners 
table   shows top level view flecs algorithm 
   initialize 
   terminate goal statement satisfied 
   compute pending goals applicable operators 
pending goals yet to be achieved preconditions operators
selected plan 
applicable operators preconditions satisfied
current state 
   choose subgoal apply   backtrack point 
subgoal  go step   
apply  go step   
   select pending goal  no backtrack point  operator achieve  backtrack point   go step   
   change state specified applicable operator  backtrack point   go step   
table    top level view flecs  step numbers made correspond
step numbers detailed version algorithm presented table  
 section     refines steps adds additional necessary step   
terms used table fully described along detailed version
algorithm section    section focus two main characteristics algorithm 
namely use internal state exibility respect commitment strategies 
  

fiflecs  planning flexible commitment strategy

    use simulated planning state
flecs uses internal state least four purposes  first  terminates every goal

given problem satisfied current version state  the current state  
point  complete plan  the sequence operators transformed initial state
current state  created planning process stop  second  every
cycle  algorithm uses internal state determine goals need planned
already achieved following means ends analysis strategy  unlike
planners analyze possible effects operators may
changed initial state  flecs simply checks particular goal true current
state   third  planner uses state determine operators may applied 
i e   whose preconditions true state  fourth  flecs use state
choose operator bindings likely achieve particular goal
minimum planning effort  blythe   veloso         summary  reference
algorithm table    flecs uses state determine 






goal statement satisfied  step    
goals still need achieved  step    
operators applicable  step    
operators try first planning  step    

planners keep internal state  four steps require considerable
planning effort even attempted all  contrast  flecs perform
steps sub quadratic time  furthermore  planners particular
methods choosing among possible operators achieve goal  particular use
state shown provide significant eciency gains prodigy     veloso   blythe 
      
since flecs use state  makes big difference whether chooses
change state  apply operator  given time  advantage applying operator
informed planning results four steps  however 
choice apply operator involves commitment order operator operators yet applied  commitment temporary since plan
found operator position  operator  un applied  simply
changing internal state back previous status  one may argue requirement operators applied explicit order opens possibility exponential
backtracking  however argument vacuous  planning undecidable  chapman 
       due use state  flecs reduce likelihood requiring backtracking
operator choice point  doing  may increase likelihood backtracking
operator ordering choice point  however  exibility able come
either side tradeoff 
   note since goal state fully instantiated  matching accomplished
constant time goal using hash table literals 

  

fiveloso   stone

    choice commitment strategies

order control tradeoff eager delayed state changes  flecs
toggle determines whether algorithm prefers subgoaling applying operator
step    option flecs considers first may affect path search space
consequently planning eciency  ability accommodate different types
search novel part algorithm  significance lies difference
subgoaling applying 
difference subgoaling applying illustrated figure    subgoaling
best understood regressing one goal  backward chaining  using means ends
analysis  includes choices goal plan operator achieve goal 
seen section      choices affected flecs s internal state  thus 
subgoaling without ever updating internal state  applying operator  lead
uninformed planning decisions  hand  subgoaling extensively  flecs
select large set operators appear plan deciding order
apply them  flecs takes account con icts   threats   among operators
orders appropriately applying them 
x




c

z

g



x



x




z

c




g



c



z

g

subgoaling

applying

operator achieves precondition
operator true state c 

preconditions operator x true state c 
applying x changes state c 

figure    diagram  fink   veloso        illustrates difference subgoaling applying  search node consisting  head plan   tailplan   head plan contains operators already applied
changed initial state  i  current state  c   tail plan consists
operators selected achieve goals goal statement  g 
operators selected achieve preconditions operators 
etc  figure shows planner could either subgoal apply given
search node 
applying operator flecs s way changing current internal state
future subgoaling decisions informed  however  applying operator commitment  temporary since backtracking possible  operator executed
  

fiflecs  planning flexible commitment strategy

other  essential tradeoff eagerly subgoaling eagerly
applying  eagerly subgoaling delays ordering commitments  delayed commitment  
eagerly applying facilitates informed subgoaling  eager commitment  
flecs switch  toggle  change behavior eager subgoaling
eager applying vice versa time  feature significant improvement flecs prodigy    predecessors  since saw evidence neither delayed commitment eager commitment search strategies consistently effective  stone et al          felt need provide flecs toggle  thus  flecs
combine advantages delayed commitments eager commitments  

   illustrative example

section present example illustrates detail planning situations
arise general planning problem  although planning may well understood
general  past descriptions planning algorithms directly addressed
situations full detail  flecs algorithm designed handle situations 
order describe flecs completely  need define several variables
maintained algorithm proceeds  since much easier understand algorithm
one familiar concepts variables denote  present annotated
example figures     formally presenting flecs  recommend
following variables functions c   g   p   o  a  a  c change throughout
annotated example  according definitions 
c represents current internal state planner  uses summarized
section     
g set goals subgoals planner aiming achieve 
goals fringe subgoal tree  goals g may goals
yet planned for  goals achieved  perhaps trivially  yet
used operator needs one preconditions  i e   operator
applied yet  
p set pending goals  goals g may need planned current
state 
stands set instantiated operators selected achieve goals
subgoals 
set applicable operators  operators whose preconditions satisfied
current state needed current state achieve goal 
goal g  a g  set ancestor goal sets   sequences goals
caused g become member g   trivially  goal ancestor
preconditions operator selected achieve goal  a g  set sets
g different sets ancestors  concept become clearer
example 
   section   discuss different heuristics guide choice discuss view toggle
perfect focus learning 

  

fiveloso   stone

operator o  c o  set goals selected achieve   causes 
applying establishes member c o   illustrated below  functions
c needed determine goals pending operators
applicable  analogous causal links used determine threats
planners  chapman        mcallester   rosenblitt        

sequence planning decisions example  figure   figure    designed illustrate uses flecs s variables functions  recommend
becoming familiar spending time carefully tracing values returning definitions throughout example  note figures show
tail plan mention applied operators state changes text  goals
circles  solid circles true dashed circles true current
state  operators boxes arrows pointing goals  produce  
i e   goals operators selected achieve  their causes   turn 
preconditions operators goals arrows pointing operators
 consume  them  operators applicable current state appear bold boxes 
changes functions c underlined captions 
present example  figure   shows initial planning situation 
consider planning problem three literals goal statement  g    g   g    i e  
g   fg   g   g g  one literal initial state  g   i e   c   fg g  none
goals true initial state  p   g   operators selected  i e       
therefore operators applicable  i e        point  since
top level goals  none goals ancestors  a g     a g     a g       
applicable operators  next step must subgoal one pending goals 

c   fg g
g   fg   g   g g
o  
p   fg   g   g g
a  

g

g

g

 

 

 

figure    example  initial specification planning situation 
figure   shows planning situation flecs subgoals g  g    suppose
operator o    preconditions g  g    selected achieve g   o  chosen
achieve g  indicated below  note operators  preconditions replace
causes set fringe goals g   since g  true current state  included
set pending goals p   g  cause o   c o     fg g  similarly 
  

fiflecs  planning flexible commitment strategy

c o     fg g  new goals nonempty ancestor sets  a g     a g     ffg gg 
a g     ffg gg  still applicable operators  o  cannot applied
g     c o  cannot applied g     c   therefore  flecs subgoals again 

c   fg g
g   fg   g   g   g g
  fo   o g
p   fg   g   g g
a  
g

g

g

 

 

 





 

 

g

g

g

 

 

 

figure    resulting planning situation subgoaling g  g   
figure   shows planning situation flecs subgoals g    suppose
operator selected achieve g  preconditions g  g    c o     fg  g 
a g     ffg gg  causes operators o  o  change  c o     fg g
c o     fg g previous step  similarly  a g    a g   remain unchanged 
however  g  two sets ancestor goals  a g     ffg g  fg gg  understand
need keep ancestor sets  consider possibility g  could achieved
unexpectedly side effect unrelated operator instead achieved o 
planned for  case  g  would remain pending goal since would needed
achieve g   again  since applicable operators  flecs must subgoal one
pending goals  i e   g   g   g  

c   fg g
g   fg   g   g   g g
  fo   o   o g
p   fg   g   g g
a  
g

 

g

g

g

 

 

 







 

 

 

figure    resulting planning situation subgoaling g   
  

g

g

g

 

 

 

fiveloso   stone

figure   shows planning situation flecs subgoals g    suppose o 
  operator precondition g    selected achieve g    since g  true
current state  o  first applicable operator  note necessarily ordered
o  o  since cause precondition operators  usual  cause
new operator stored  c o     fg  g  addition  ancestors g  must augmented
include two new ancestor sets  a g     ffg g  fg   g g  fg   g gg  although
applicable operator  let us assume flecs chooses delay commitment
order o  first step plan subgoals pending goal 

c   fg g
g   fg   g   g g
  fo   o   o   o g
p   fg   g g
  fo g
g

 

g



 

g

g

 

 

 







g

 

g

 

g

 

 

 

 

figure    resulting planning situation subgoaling g   
figure   shows planning situation flecs subgoals g    suppose operator o  achieve g  selected so  need update
causes operator ancestors precondition  c o     fg   g g
a g     ffg g  fg   g g  fg   g g  fg   g gg  rather subgoaling last remaining pending goal  g    let us apply o    note decision corresponds early
commitment terms ordering operators o    o   operators later selected
achieve g  unordered current planning constraints  flecs changes
delayed commitment strategy eager commitment strategy 
c   fg g
g   fg   g g
g
 
g

  fo   o   o   o g
 
 
p   fg g
  fo g
g

 



 

g

g

 

 





 

 

g

g

figure    resulting planning situation subgoaling g   
  

 

 

fiflecs  planning flexible commitment strategy

figure   shows planning situation flecs applied o    since operator o 
applied order achieve goals g  g   true current state
back fringe goal tree  i e   c g   notice stay g
eventually  consumed  o  o   however  since true
current state  pending goals  since g  precondition
one selected operator  a g     ffg gg before  o  o  applicable
preconditions true current state thanks o   let us assume
flecs maintains eager commitment strategy continues applying applicable operators  flecs orders o  o   since o  deletes precondition o   effects
shown  
c   fg   g   g g
g   fg   g   g   g g
g
  fo   o   o g

 
g
 
 
p   fg g
  fo   o g
g

 

g

g

 

 





 

 

g

g

 

 

figure    resulting planning situation applying o  figure   
figure   shows planning situation flecs applied o   suppose that  although
selected so  operator o  achieves g  side effect  perhaps o 
conditional effect visible planner  perhaps o  simply looked
promising o  operator achieve g  time selected 

c   fg   g   g   g   g g
g   fg   g   g   g   g g
  fo   o g
p  
  fo g
g

 

g

g

g

 



 

g

 

 

g



 

g

 

 

 

figure    resulting planning situation applying o  figure   
  

fiveloso   stone

case  g  c planning done longer needed  g  longer
pending goal  since sole ancestor already c   fortuitous achievement goal
reason need use functions c adjust sets pending goals
p applicable operators a  would wasted effort flecs plan achieve g  
note g  precondition o  well o   would pending goal since
would still relevant achieving g    point  ancestors g  must
reset  a g     ffg gg  since pending goals  flecs must apply
last remaining applicable operator  o  
figure   shows final planning situation flecs applied o    point
top level goals true current state  despite fact planning
tree remains  flecs recognizes work done terminates 
final plan o   o   o    sequence operators applied head plan  not
shown  corresponding steps figures          posteriori algorithm  veloso 
perez    carbonell        convert sequence partially ordered plan capturing
dependencies  o    fo   o g 

c   fg   g   g   g   g   g g
g   fg   g   g   g g
  fo g
p  
a  
g

g

 



 

g

g

 

g

 

 

 

figure    final planning situation applying o  figure   

   flecs  detailed description
aside variables functions introduced preceding section  need
define four things presenting complete algorithm  first  initial state
goal statement corresponding ground literals problem definition  second  given operator o  pre o   add o   del o  instantiated preconditions 
add list  delete list respectively  flecs takes values straight domain representation  may include disjunctions  negations  existentially universally quantified preconditions effects  conditional effects  carbonell et al         
conditional effects  add o  del o  determined dynamically  using state
time applied  third   relevant instantiated operators could achieve g 
 step    instantiated operators  operators fully specified bindings 
  

fiflecs  planning flexible commitment strategy

g   add o  g positive goal g   del o  g negative goal  fourth  toggle
variable determines avor search  described later 

    planning algorithm
present flecs planning algorithm full detail table     examining algorithm  notice fringe goals g   selected operators o  ancestor function a g  
cause function c o   current state c maintained incrementally 
hand  pending goals p   applicable operators a  toggle recomputed every
pass algorithm 
step   initializes variables  beginning planning process 
goals g goal statement  current state c initial
state  since operators yet selected  empty  ancestor function
cause function c initialized constant function maps everything   
practice  domain set goals domain c set operators
appear problem  however  since goals operators
determined algorithm first called  must initialize functions
unrestricted domains 
step   termination condition  called time new operator
applied  algorithm terminates successfully every goal g goal statement true 
satisfied  current state c   i e   g   c  
step    sets pending goals applicable operators computed based
current state  pending goals goals planner may need plan for  initially 
pending goals fringe goals currently true true
initial state   applicable operators selected operators whose preconditions
true state 
then  step   computes pending goals p applicable operators active
current state  pending goal active long fringe subgoal tree
still needs planned for  goal longer active every one ancestor sets
least one goal already achieved  purposes goal
selected longer exist  as case g  figure     applicable operator
active current state long would achieve goal still useful plan 
applicable operator longer active causes either true current
state longer active 
step   novel part algorithm  allows exible search strategy
within single planning algorithm  since step  flecs yet terminated 
must either active pending goals active applicable operators  i e   p must
non empty  however  one other  choice
made  if  hand  p non empty  either proceed
step   step    sake completeness  must keep options open 
option flecs considers first may affect amount search required  changing
   detail algorithm allows reader carefully study re implement flecs 
   since planner cannot backtrack beyond initial state  must keep goals initial state
pending goals sake completeness 

  

fiveloso   stone

   initialize 
c   current state
a  g   goal statement 
g   fringe goals
b  c   initial state 
p   pending goals
c      

  instantiated operators
d   g a g      

  applicable operators
e   o c o      
a  ancestor goal sets
c  causes
   terminate goal statement c  
   compute applicable operators pending goals p  
a  p   fg   g j g    c   g   initial stateg 
b    fa   j pre a  cg 
   adjust p contain active members 
a  p   p   fp   p j  s   a p    g   s t  g   cg 
b      fa   j  g   c a    g   c       s   a g   g   s t  g   c   g 
   subgoal apply 
a  set reset toggle sub app  i e  set default delayed eager commitment 
b       go step   
c  p      go step   
d  choose apply subgoal  backtrack point  
toggle   sub   p   c   subgoal first  go step   
toggle   app  apply first  go step   
   choose goal p p  not backtrack point  
choose goal true current state using means ends analysis 
a  get set r relevant instantiated operators could achieve p  
b  r    
i  p   p   fp g 
ii  p     fail  i e   backtrack  
iii  go step   
c  choose operator r  backtrack point  
choose operator minimum conspiracy number  i e  operator
appears achievable least amount planning 
d      fog 
e  g    g   fp g    pre o  
f  c o    c o    fp g 
g   g   pre o  a g    a g    ffp g   j   a p  g 
h  go step   
   choose operator  backtrack point interactions  
use heuristic find operators fewer interactions   similar one used
saba heuristic 
a  apply a  c    c   add a     del a 
b      fag 
c   g   pre a  a g    a g    fs   a g  j   c a      g 
d  g    g   c a     fg   pre a  j a g     g 
e  c a      
f  go step   
 

table    full description flecs 
  

 

fiflecs  planning flexible commitment strategy

value toggle  done pass loop  flecs change
type search works problem 
pass body algorithm visits either step   step   
subgoaling  step     active pending goal p chosen p   note unlike
corresponding choice step    choice subgoals backtrack point  however 
operators could achieve goal  another goal chosen  step  b  
means ends analysis used heuristic prefer subgoaling goals currently
true  next  operator chosen could achieve chosen goal  step  c  
either new operator existing one figure    o   already
selected achieve g   selected achieve g    choice operator backtrack
point  unless heuristic provided  minimum conspiracy number heuristic
used determine operator tried first  blythe   veloso         short 
heuristic selects instantiated operator appears achievable least
amount planning 
returning top loop  affected variables updated  first 
added using set union operator never appears twice  step  d  
second  o s preconditions added g   p removed  step  e   p
operator selected achieve it  longer fringe subgoal tree  third 
cause augmented include p  step  f   fourth  ancestor sets o s preconditions
augmented include sets goals comprised p ancestors  step  g  
explained figure    ancestor sets must included  finally  since state
changed all  termination condition cannot met  algorithm returns step   
applying operator  step     applicable operator chosen a 
heuristic analyzes applicable operators used choose best possible operator  one heuristic analyzes interactions operators identifying
negative threats  similarly saba heuristic  stone et al          short 
heuristic prefers operators delete preconditions of  whose effects
deleted by  operators  choice applicable operator backtrack point
orderings interacting applicable operators considered  different orderings
completely independent operators need considered  completely independent operators interactions neither among ancestor
sets  since application one operator make difference application
another  need consider one ordering operators 
chosen  promptly applied  step  a   application involves changing
current state prescribed a  note conditional effects  expanded
point  next  relevant variables updated  first  updating involves removing
set selected operators  step  b   second  ancestors a s preconditions
ancestor sets include  step  c   need
planning  figure   shows example precondition  g   still
ancestor remaining  third  since applied  preconditions goals
reason longer fringe  causes  step  d  
unachieved must re achieved  fourth  case ever selected operator
achieve goal  c a  reset    step  e   finally  since current state
altered  algorithm returns step   termination condition checked 
  

fiveloso   stone

    discussion  backtracking  heuristics  properties
one pay close attention placement backtrack points algorithm 
particular  three  subgoal apply choice step    choice operator
achieve goal step    choice applicable operator step    however 
choice goal subgoal step    backtrack point prodigy
algorithm  backtrack point here  flecs need backtrack point
choice apply apply operator given time left open step  
significantly different orders applying applicable operators considered step   
explained previous subsection  different orderings completely independent operators considered  nevertheless  orderings could lead solution
considered  therefore  backtracking choice subgoal would cause redundant
search  elimination backtrack point significant improvement flecs
previous implementations  namely nolimit prodigy     note new backtrack
points added offset eliminated backtrack point 
flecs s explicit failure point step   occurs algorithm chosen
subgoal  none pending goals relevant operators  failures
implicit  is  backtrack point  choices unsuccessfully tried
algorithm backtracks  presented  algorithm terminates unsuccessfully
entire search space exhausted  causes failure  goal loops 
state loops  depth bounds  time limits  incorporated manner
prodigy     carbonell et al         
choice point  heuristic determine branch try  first  
step    goal chosen using means ends analysis  operator minimum
conspiracy number chosen achieve goal  step    choice mechanism
saba heuristic used determine applicable operator try first  step   
toggle  changed time  determines whether default commitment
strategy eager subgoaling eager applying  note pending goals
true current state  or pending goals   planner may apply
applicable operator regardless value toggle  similarly  applicable
operators  planner must subgoal even toggle indicates prefer applying  toggle
new variable guide heuristic search existing choice point branching factor
two  represent addition new backtrack point  discussed throughout 
provides flecs ability change commitment strategy  suggested
name  toggle one two values  sub app indicating eager subgoaling eager
applying respectively 
describe domain independent heuristic could used guide changes
value toggle  heuristic allow eager commitments reason
believe need backtrack resulting operator linearization 
case  setting toggle app increase planning eciency converting
partially ordered set operators sequence leads single possible state 
used guide subsequent planning  process equivalent starting new
smaller planning problem previous choices embedded state 
situation described similar arises alpine system
constructs ecient abstraction hierarchies  knoblock         alpine guarantee
  

fiflecs  planning flexible commitment strategy

planning hierarchically using generated abstraction hierarchies lead backtracking across refinement spaces  figure    illustrates flecs use abstraction
planning information control value toggle  toggle changes app particular abstract planning step completely refined abstraction hierarchies preserve
alpine s ordered monotonicity property  need backtrack
resulting operator ordering  toggle change back sub  flecs continue
planning updated state information 
abstraction level
   begin
toggle sub 
s 

   continue planning 
toggle sub 

build partial
order plan
first step
abstract plan

s 

   continue
done   

s 
   set toggle app 
commit ordering
compute new state 

s 

s 
   another
step abstract
plan  commit again 
toggle app 

figure     using abstraction information guide changes toggle 
abstraction driven heuristic one method exploiting choice point  similarly 
minimum conspiracy number heuristic saba heuristic ways
guide choices instantiated operator applicable operator respectively 
heuristics used always changed  claim ones provide
defaults best possible  heuristic work time 
planning algorithm present sound complete searches entire
search space  using technique iterative deepening  korf         flecs sound
terminates reached goal statement result applying
operators  is  application operator sequence returned final plan
entirely simulated time planner terminates  thus preconditions
operator true time operator executed  operators
executed  goal statement satisfied  consequently  flecs sound 
since step algorithm prunes search space  flecs iteratively
increasing depth bound complete  solution planning problem  flecs
find one  insure property  need show flecs consider possible
operators may achieve goal well orderings interacting applicable operators 
flecs maintaining backtracking points choice operator  step  c 
points operator ordering could affected  choice applicable
operator  step    choice whether subgoal apply  step  d   selecting
  

fiveloso   stone

 apply  commits ordering operators currently applicable least
one currently applicable operators  note completeness achieved even without
maintaining choice goals subgoal backtrack point  step     since regardless
order operators chosen  applied according possible
interactions  i e   similarly resolving negative threats   thus flecs s search space
significantly reduced prodigy     still preserving completeness   see
appendix formal proofs flecs s soundness completeness  

   empirical analysis heuristics control commitment strategy

seen  flecs introduces notion exible choice point delayed
eager operator ordering commitments  appreciate need exibility  consider
two extreme heuristics  always eagerly subgoaling  delaying commitment  always
eagerly applying  eager commitment   former heuristic chooses subgoal long
least one active pending goal  subgoal always applying saba  
latter chooses apply long active applicable operators  subgoal
every try apply savta   section show empirical results demonstrate
extremes lead highly sub optimal search particular domains 
indeed  believe single domain independent search heuristic perform well
domains  stone et al          reason equipped flecs
ability use either extreme domain independent heuristic moderate
heuristic  in between  two  every iteration algorithm 
opportunity change eagerly subgoaling eagerly applying vice versa  one could
define different heuristics guide choice  one could leave choice user
interactively 
exibility search method provides algorithm ability search sensibly wide variety domains  algorithm exible susceptible
coming across domains cannot handle eciently  barrett   weld        veloso  
blythe        kambhampati         flecs s exibility makes possible study
heuristics work best situations  addition  exible choice perfect learning
opportunity  since single search method solve planning problems  use
learning techniques help us determine experience search strategies try 
illustrate need different search strategies  provide one real world situation
eagerly subgoaling leads directly optimal solution  one eagerly
applying so  one intermediate policy best  examples
intended exhaustive demonstration flecs s capabilities  rather  examples
intended illustrate need consider problems traditional goal ordering
problems motivate potential impact flecs 

    eagerly subgoaling better

first  consider class tasks following true  operators initially
executable  must performed specific order operator deletes
preconditions operators supposed executed earlier  instance 
suppose single paint brush several objects need painted
different colors  paint brush washed fairly well  never comes completely
  

fiflecs  planning flexible commitment strategy

clean  reason  ever use lighter paint darker paint  darker
paint show painted object whole project ruined  perhaps
shade red darker shade green  paint chair red seat
green legs  better paint legs first 
consider range colors ordered light dark  white  yellow  green         
black  initially  could paint object color  however  start painting
something black  paint used  order represent situation
planner  created domain operators shown table   
operator 
preconds 
adds 
deletes 

paint white  obj 

 usable white 
 white  obj  

paint yellow  obj 

 usable yellow 
 yellow  obj  
 usable white 






  
 

paint black  obj 

 usable black 
 black  obj  
 usable white 
 usable yellow 
  
 
 usable brown 

table    example domain delayed step ordering commitment results ecient
planning 
assume colors usable initial state  since painting object certain
color deletes precondition painting object lighter color  since precondition cannot re achieved  no operator adds predicate  usable    colors must
used specific order 
painting domain real world interpretation artificial domain dm   introduced  barrett   weld         operators dm   look like 
operator 
preconds  g
adds  fg g
deletes  jj   ig
since operator deletes preconditions operators numerically it 
operators applied increasing numerical order  thus  a  corresponds
operator paint white  a  corresponds paint yellow  etc  used domain
experiments  run sparc station  generated random problems
one fifteen goals  ten problems number goals  used
    problems test extreme heuristics  get data points  averaged
results ten problems number goals  raw data
contained online appendix  graph average time flecs took solve
problems versus number goals 
shown  stone et al           eagerly applying leads exponential behavior  as
function number goals  domain  eagerly subgoaling  using






j

   began study new planning algorithm   named flecs  prodigy     consider
version prodigy used  stone et al         preliminary implementation flecs 

  

fiveloso   stone

operator choice heuristic study  leads approximately linear behavior
backtracking  problem eagerly applying that  example  goal g 
solved g   flecs immediately apply a  backtrack
unsuccessfully tries apply a    eagerly subgoaling allows flecs build set
operators need apply order appropriately selecting
application order avoids con icts threats  figure    shows graphic comparison
two different behaviors 
eager subgoaling
eager applying

time  msec

    
    
    
    
   
 
 

 

 

 
 
     
number goals

  

  

figure     flecs s performance different heuristics domains dm    eager subgoaling applying correspond delayed commitments eager commitments
respectively 

    eagerly applying better

next  consider class tasks following true  several operators could
used achieve goal  operator used once  use similar
example  suppose trying paint different parts single object different colors 
however  suppose using multiple brushes never come clean 
use brush one color  never safely use again  instance  painted
green parts using brush   would need use brush   or brush besides brush  
paint red parts  table   represents operators new domain 
operator 

paint with brush 

 parts   color 
preconds   unused brush  
adds   painted  parts   color  
deletes   unused brush  

      paint with brush 

 parts   color 
 unused brush  
 painted  parts   color  
 unused brush  

table    example domain eager step ordering commitment use state
results ecient planning 
note operator used color  since deletes precondition 
used once  capture essential features domain artificial
domain called d   use once  operators d  use once look like 
  

fiflecs  planning flexible commitment strategy


g
f  g  g
g

operator 
preconds 
adds 
deletes 







operator achieve goal  since operator deletes precondition 
used once  operator corresponds painting different brush 
domain  better eagerly apply eagerly subgoal  eagerly
subgoaling causes flecs select operator achieve goals 
deterministic method selecting operators  such minimum conspiracy number
order appearance domain specification tie breaker   selects operator a 
achieve two different goals  however  since could apply a  once  would need
backtrack select different operator one goals  shown figure     eagerly
applying outperforms eagerly subgoaling case  generated results
way results previous subsection 
eager subgoaling
eager applying

time  msec

    
    
    
    
    
 
 

 

 

 
 
     
number goals

  

  

figure     flecs s performance different heuristics domains d  use once 

    intermediate heuristic

always possible find good solutions either always eagerly subgoaling 
first example  always eagerly applying  second  would need
include variable toggle flecs  could simply eager subgoal mode
eager apply mode  however  cases neither alternatives suces 
instead  need eagerly subgoal portions search eagerly apply
others  one heuristic changing commitment strategy abstraction driven
method described section      present domain use form
heuristic 
time consider class tasks following true  top level goals take
least three operators achieve  one irreversible  executed limited
number times  restricts bindings operators  one representative
class one way rocket domain introduced  veloso   carbonell        
sake consistency  however  present representative class domains
painting context  suppose painting walls rollers  paint wall
  

fiveloso   stone

need first  ready  wall  purpose example means decide
wall needs painted designate color roller paint wall  next
must fill selected roller appropriately colored paint  paint
wall  unfortunately  limited supply rollers never become clean
filled paint  must clean selected paint wall 
reason  must ready walls want paint roller
fill roller paint  reader familiar one way rocket domain 
 fill roller  operator analogous  move rocket  operator domain 
executed due limited supply fuel  must executed
fully loaded  table   shows possible set operators painting domain 
operator 

designate roller

fill roller

paint wall

 wall   roller   color   roller   color   wall   roller   color 
preconds   clean  roller  
 clean  roller  
 ready
 needs painting  wall  
 chosen
 wall   roller   color  
 roller   color    filled with paint
 roller   color  
adds   ready
 filled with paint
 painted  wall   color  
 wall   roller   color    roller   color  
 chosen  roller   color  
deletes 
 clean  roller  
 ready
 wall   roller   color  
 needs painting  wall  

table    example domain exibility commitments results ecient planning 
given domain representation  flecs dicult time apparently simple problems uses search strategy throughout entire search 
example  consider problem five walls two rollers  equivalent problem
one way rocket domain five objects two destinations  
initial state
 needs painting walla 
 needs painting wallb 
 needs painting wallc 
 needs painting walld 
 needs painting walle 
 clean roller  
 clean roller  

goal statement
 painted walla red 
 painted wallb red 
 painted wallc red 
 painted walld green 
 painted walle green 

  

optimal solution
 designate roller walla roller  red 
 designate roller wallb roller  red 
 designate roller wallc roller  red 
 fill roller roller  red 
 paint wall walla roller  red 
 paint wall wallb roller  red 
 paint wall wallc roller  red 
 designate roller walld roller  green 
 designate roller walle roller  green 
 fill roller roller  green 
 paint wall walld roller  green 
 paint wall walle roller  green 

fiflecs  planning flexible commitment strategy

flecs directly find solution always eagerly subgoaling always
eagerly applying  search eciently  must subgoal considered walls
need painted color  must apply applicable operators
continuing  explicit information domain telling use one roller red
one roller green    reason  flecs eagerly subgoals  initially selects
roller paint walls  extensively backtracks finding correct
bindings  flecs realize  ready  walls going
painted color filling roller  thus  flecs eagerly applies
operators  tries filling roller soon one wall  readied   note planning
variables would solve problem since planner would still need make
binding selections subgoaling beyond  paint wall   hence facing problems 
flecs tries solve problem using either strategy described 
succeed reasonable amount time  since flecs complete  would certainly
succeed eventually  eventually long time away dealing np hard
problem  neither commitment strategies leads solution problem
    seconds search time  lost  changing value toggle
appropriate times  flecs easily find solution problem  fact 
  seconds toggle manually changed appropriate times 
time sec  solution
eager applying
   

eager subgoaling
   

variable strategy
 
yes
flecs eagerly subgoals decided paint walla  wallb  wallc
roller   begin eagerly applying  three walls painted red  flecs
begin subgoaling without danger preparing walls wrong
roller  roller  still clean  example change state allows
minimum conspiracy number heuristic select correct instantiated operator 
general heuristic toggle set sub walls need
painted color considered  toggle set app
applicable operators applied  toggle set back sub
process continues  way  flecs need little backtracking
quickly reach solution  heuristic corresponds using abstraction hierarchy
deal separately interactions different colors different walls 

   conclusion

presented planner intended studying correspondence planning problems search heuristics suited problems  flecs
ability eagerly subgoal  thus delaying operator ordering commitments  eagerly apply 
thus maximizing advantages maintaining internal state  exibly interleave
two strategies  thus operate point continuum operator ordering
heuristics   one important dimension planning 
    problem common planning often syntactically correct way restrict bindings
domain representation maintaining intended exibility generality domain 

  

fiveloso   stone

paper  explained advantages disadvantages delayed eager
commitments  presented flecs algorithm full detail  carefully motivating
concepts illustrating clear examples  discussed different heuristics
guide flecs choice points discussed properties  showed examples
specific planning tasks corresponding empirical results support position
general purpose planner must able use exible commitment strategy  although
planning problems solvable complete planners  flecs may solve
problems eciently planners ability change
commitment strategy may fall worst case unique commitment strategy 
flecs provides framework study characteristics different planning strategies
mapping planning domains problems  flecs represents view
domain independent planning strategy uniformly ecient across different domains problems  flecs addresses particular operator ordering choice
exible planning decision  allows combination delayed eager operator ordering
commitments take advantage benefits explicitly using simulated execution
state reasoning planning constraints 
currently continuing work understanding tradeoffs among different
planning strategies along different dimensions  plan study effects eager versus
delayed commitments point operator instantiations  investigating
effects combining real execution flecs  finally  plan use machine learning
techniques flecs s choice points gain possibly automated understanding
mapping ecient planning methods planning domains problems 

appendix a  proofs
prove flecs sound iterative deepening complete  consider
flecs algorithm presented table    planning problem determined
initial state  goal statement  set operators available domain  plan
 totally ordered  sequence instantiated operators  returned plan generated
flecs planning problem sequence applied operators upon termination 
solution planning problem plan whose operators applied problem s
initial state reach state satisfies goal statement  justified solution
solution subsequence operators solution solution  flecs
terminates successfully termination condition met  step    

theorem   

flecs sound 
show flecs algorithm sound  is  algorithm terminates suc 

cessfully  returned plan indeed solution given planning problem 
assume flecs terminates successfully   o    o      on returned
plan  flecs applies operator preconditions operator satisfied
current state c  step     hence  construction  operators o    o        ok
k   n applied  preconditions operator ok   satisfied c  
point termination  current state c satisfies goal statement  step     c
reached initial state applying operators   therefore solution 
qed 
  

fiflecs  planning flexible commitment strategy

theorem   

flecs iterative deepening complete 

recall completeness  informally  means solution particular
problem  algorithm find it  show flecs s search space complete
flecs s search algorithm complete long explores branches search
space  example using iterative deepening  korf           iterative deepening involves
searching bound number search steps may performed
particular search path suspended expansion  solution found
particular depth bound  search repeated larger depth bound 
planning problem  assume   o   o      on justified solution 
show flecs searches iterative deepening  find solution 
flecs algorithm four choice points  three choice points backtrack
points  choice subgoaling applying  step  d   choice operator
use achieve goal  step  c   choice applicable operator apply
 step     one choice point backtrack point  choice goal subgoal
 step    
prove completeness  must show backtrack point  possible
choice lead flecs towards finding plan   matter choices flecs makes
non backtrack choice point  flecs explores branches search space
searching iterative deepening  must eventually find unless finds
solution  of length n  first 
proof involves constructing oracles tell flecs choices make
backtrack points find   matter choices makes choice
point  finds solution plan  
consider point search operators o   o   o          ok k  and
others  already applied  let oracles backtrack points
operate follows 
choice subgoaling applying  step  d   first oracle makes flecs choose
apply ok   applicable  i e   a   otherwise makes flecs subgoal 
flecs chooses apply  ok     a   reaches another choice point  namely choice
operator apply  step     another oracle makes flecs select precisely step ok    
flecs chooses subgoal  ok      a   let flecs choose goal p
set pending goals p  step     since step   backtrack point  cannot
oracle determine choice point  instead show that  independently
choice made point  flecs still find solution   find solution
consequence construction next oracle controls final choice point
 below   oracle guarantees p selected must either member goal
statement precondition operator  
final choice point selection operator achieve p  step  c   third
oracle makes flecs choose operator achieve p   since solution
planning problem since p either member goal statement precondition
operator   must operator achieves p  
one operator  one chosen  since operators selected 
    opposed breadth first search  iterative deepening harm eciency  combines eciency
searching depth first completeness searching breadth first 

  

fiveloso   stone

condition pending goals goal statement preconditions
operators maintained 
three oracles lead flecs justified solution   since justified  every
operator necessary achieve either goal goal statement precondition another operator  consequently  since third oracle chooses operators
  every operator eventually chosen applied prescribed
first two oracles  every operator applied  termination condition
met  since solution  flecs terminate successfully  qed 

acknowledgements
would recognize particular contributions jim blythe eugene fink
research  jim blythe highly responsible current implementation prodigy   
upon flecs based  eugene fink helped formalization algorithms
proofs  thank eugene fink  karen haigh  gary pelton  alicia perez  xuemei wang 
anonymous reviewers comments article 
research sponsored wright laboratory  aeronautical systems center  air
force materiel command  usaf  advanced research projects agency  arpa 
grant number f                 views conclusions contained document authors interpreted necessarily representing
ocial policies endorsements  either expressed implied  wright laboratory
u  s  government 

references

ambros ingerson  j     steel  s          integrating planning  execution  monitoring 
proceedings seventh national conference artificial intelligence  pp       
st  paul  mn 
barrett  a     weld  d  s          partial order planning  evaluating possible eciency
gains  artificial intelligence             
blythe  j     veloso  m  m          analysis search techniques totally ordered
nonlinear planner  proceedings first international conference ai planning systems  pp        college park  md 
carbonell  j  g   blythe  j   etzioni  o   gil  y   joseph  r   kahn  d   knoblock  c  
minton  s   perez  a   reilly  s   veloso  m     wang  x          prodigy    
manual tutorial  tech  rep  cmu cs         department computer science 
carnegie mellon university 
carbonell  j  g   knoblock  c  a     minton  s          prodigy  integrated architecture planning learning  vanlehn  k   ed    architectures intelligence 
erlbaum  hillsdale  nj  technical report cmu cs        
chapman  d          planning conjunctive goals  artificial intelligence              
  

fiflecs  planning flexible commitment strategy

ernst  g  w     newell  a          gps  case study generality problem solving 
acm monograph series  academic press  new york  ny 
fikes  r  e     nilsson  n  j          strips  new approach application theorem
proving problem solving  artificial intelligence             
fink  e     veloso  m          prodigy planning algorithm  technical report cmu cs        school computer science  carnegie mellon university 
kambhampati  s          desing tradeoffs partial order  plan space  planning  proceedings second international conference ai planning systems  aips    
pp        chicago  il 
knoblock  c  a          automatically generating abstractions planning  artificial
intelligence     
korf  r  e          depth first iterative deepening  optimal admissible tree search 
artificial intelligence                 
mcallester  d     rosenblitt  d          systematic nonlinear planning  proceedings
ninth national conference artificial intelligence  pp          
mcdermott  d  v          planning acting  cognitive science              
minton  s          integrating heuristics constraint satisfaction problems  case study 
proceedings eleventh national conference artificial intelligence  pp      
    
minton  s   bresina  j     drummond  m          commitment strategies planning 
comparative analysis  proceedings twelfth international joint conference
artificial intelligence  pp          
minton  s   knoblock  c  a   kuokka  d  r   gil  y   joseph  r  l     carbonell  j  g 
        prodigy      manual tutorial  technical report cmu cs        
school computer science  carnegie mellon university 
rosenbloom  p  s   newell  a     laird  j  e          towards knowledge level
soar  role architecture use knowledge  vanlehn  k   ed   
architectures intelligence  erlbaum  hillsdale  nj 
sacerdoti  e  d          structure plans behavior  american elsevier  new york 
stone  p   veloso  m     blythe  j          need different domain independent
heuristics  proceedings second international conference ai planning
systems  pp          
tate  a          generating project networks  proceedings fifth international
joint conference artificial intelligence  pp          
  

fiveloso   stone

veloso  m     blythe  j          linkability  examining causal link commitments partialorder planning  proceedings second international conference ai planning
systems  pp          
veloso  m  m          nonlinear problem solving using intelligent casual commitment 
technical report cmu cs         school computer science  carnegie mellon university 
veloso  m  m     carbonell  j  g          derivational analogy prodigy  automating
case acquisition  storage  utilization  machine learning              
veloso  m  m   perez  m  a     carbonell  j  g          nonlinear planning parallel
resource allocation  proceedings darpa workshop innovative approaches
planning  scheduling  control  pp          san diego  ca  morgan kaufmann 
wilkins  d  e          domain independent planning  representation plan generation 
artificial intelligence              

  


