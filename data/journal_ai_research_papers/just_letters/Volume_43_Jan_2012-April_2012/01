journal artificial intelligence research                

submitted        published      

robust local search solving rcpsp max
durational uncertainty
na fu
hoong chuin lau
pradeep varakantham

na fu      phdis smu edu sg
hclau smu edu sg
pradeepv smu edu sg

school information systems 
singapore management university 
   stamford road         singapore

fei xiao

feixiao gmail com

google inc 
     amphitheatre parkway mountain view 
ca       usa

abstract
scheduling problems manufacturing  logistics project management frequently modeled using framework resource constrained project scheduling
problems minimum maximum time lags  rcpsp max   due importance
problems  providing scalable solution schedules rcpsp max problems
topic extensive research  however  existing methods solving rcpsp max assume
durations activities known certainty  assumption hold
real world scheduling problems unexpected external events manpower
availability  weather changes  etc  lead delays advances completion activities 
thus  paper  focus providing scalable method solving rcpsp max
problems durational uncertainty  end  introduce robust local search
method consisting three key ideas   a  introducing studying properties two
decision rule approximations used compute start times activities respect dynamic realizations durational uncertainty   b  deriving expression robust
makespan execution strategy based decision rule approximations   c  robust
local search mechanism efficiently compute activity execution strategies robust
durational uncertainty  furthermore  provide enhancements local search
exploit temporal dependencies activities  experimental results illustrate
robust local search able provide robust execution strategies efficiently 

   introduction
research scheduling typically considered problems deterministic durations 
real world scheduling problems  unexpected external events manpower availability 
weather changes  etc  lead uncertainty durations activities 
growing interest account data uncertainty  herroelen   leus        beck  
wilson        rodrguez  vela  puente    hernandez arauzo        providing optimized schedules  paper focuses important issue durational uncertainty
scheduling problems  specifically  consider scheduling problems
complex resource constraints temporal dependencies activities 
c
    
ai access foundation  rights reserved 

fifu  lau  varakantham    xiao

broadly two approaches tackling scheduling problems durational
uncertainty  one adopt hybrid proactive reactive methods  e g   work
vonder  demeulemeester  herroelen         initial baseline schedule
computed offline  modified  if required  execution reactively based
occurrence external events  second approach  e g   paper mohring
stork         design schedule policies provide online decision rules
time t  policy decides task s  may start resource s  assign 
paper  adopt latter approach focus computation robust schedule
policy 
computational perspective  stochasticity adds great deal complexity
underlying deterministic scheduling problem  example  infinite resource project
scheduling problem processing times two possible discrete values  problem
computing expected makespan  or point cumulative distribution
optimal makespan    p hard  hagstrom        mohring 
       shown
p
scheduling problem   stoch pj   dj   d e  wj uj    problem computing
policy  i e   execution strategy  maximizing probability job completes exactly
deadline pspace hard  dean  goemans    vondrak         daniels carrillo
       consider one machine scheduling problem probabilistic durations 
objective capture likelihood schedule yields actual performance worse
given target level  shown np hard even though underlying
deterministic problem solved polynomial time 
concrete problem interest paper resource constrained project
scheduling problem minimum maximum time lags  abbrev  rcpsp max  
great importance manufacturing  logistics project management  though
problems shown np hard  bartusch  mohring    radermacher        
local search based techniques  demeulemeester   herroelen        achieved great
success solving problems  taking cue recent advancements
robust optimization  propose robust local search method solving rcpsp max
problem durational uncertainty risk management perspective  precisely 
 a  employ concepts robust optimization compute robust makespan
proven success probability  or risk failure  execution strategy   b  use
local search methods computing execution strategy seeks minimize robust
makespan 
recent approach  beck   wilson        provides techniques compute robust
baseline schedule risk management perspective  durations activities
modeled random variables  given value        interested compute schedule minimal  probabilistic  makespan probability successful
execution least   realizations durational uncertainty  main
contribution derive lower bound  makespan given schedule
solving deterministic problem  considered job shop scheduling problem  jsp 
represents special case rcpsp max  which problem interest
paper  
unlike jsps  complex resource constraints activity dependencies
rcpsp max problems durational uncertainty  account these  compute
execution strategy  also known commonly schedule policy  called partial order schedule
  

firobust local search solving rcpsp max durational uncertainty

 pos  instead schedule  combine techniques robust optimization classical
local search compute pos minimizes robust makespan  robust makespan
value probability realized makespan schedule  derived
pos  exceed greater       realizations uncertainty  thus 
compute upper bound makespan values opposed lower bound computation
work beck wilson        
specifically  make three key contributions paper  firstly  introduce
two decision rule approximations define expressions start times activities based
random variables used represent durational uncertainties   a  segregated linear
approximation sla   b  generalized non linear approximation  gnla   secondly 
derive expressions upper bound robust makespan employing one sided
chebyshevs inequality decision rule approximations above  finally  perform local
search execution strategy using robust makespan upper bound  provide
enhancements consider feedback robustness execution strategies improve
performance local search 
order demonstrate effectiveness methods  evaluate performance
benchmark problem sets rcpsp max job shop scheduling problems  jsps 
durational uncertainty  furthermore  make house comparison amongst various
enhancements developed paper  finally  due absence competing algorithms
solving rcpsp max problems provide indication performance provided
robust local search  compare existing best solver jsps durational
uncertainty 
next section  present brief background models solution concepts
referred paper  present decision rule approximations section  
computation robust makespan upper bound section    detailed description
robust local search enhancements provided section   section    finally 
experimental setup results provided section   

   preliminaries
section  briefly describe notations along scheduling models
robust optimization concepts relevance paper 
    definitions notations
given ben tal nemirovski         classify variables stochastic
optimization problem   types  adjustable non adjustable variables 
definition    non adjustable variables priori decisions must made
actual realization uncertainty 
definition    adjustable variables  also known recourse variables  wait and see
variables adjust part uncertain data become known 
example  scheduling problem rcpsp uncertain task durations 
non adjustable variables represent execution policy  e g   pos proposed
policella  smith  cesta  oddi         need constructed priori 
  

fifu  lau  varakantham    xiao

adjustable variables associated actual start times tasks 
set respect execution policy dynamic realizations uncertainty 
random variable denoted x bold face lower case letters x
represent vectors 
    rcpsp max
describe deterministic rcpsp max scheduling problem along extension handle durational uncertainty  explain execution policy uncertain
duration extension rcpsp max 
      deterministic rcpsp max
rcpsp max problem  bartusch et al         consists n activities  a    a         
activity aj  j         n   executed certain amount time units
without preemption  activity aj fixed duration processing time dj  
assumed non negative real number non negative integer number  addition 
dummy activities a     d    dn        introduced represent beginning
completion project  respectively 
start time schedule ss assignment start times activities a    a         i e 
vector ss    st a     st a        st an    st ai   represents start time activity ai
st a    assumed    let et ai   end time activity ai   since durations
deterministic preemption allowed 
st ai     di   et ai   

   

project makespan start time final dummy activity st an     
equals
st an        maxi      n et ai   
   
schedules subject two kinds constraints  temporal constraints resource
constraints  temporal constraints restrict time lags activities  minimum
time lag tijmin start time two different activities ai aj says
st aj   st ai   tijmin

   

specially  tijmin     means activity aj cannot started activity ai begins 
maximum time lag tijmax start time two different activities ai aj says

st aj   st ai   tijmax
   
tijmax     means activity aj cannot started activity ai begins 
definition  time lags connect start times two related activities  known
start to start time lags  start to end  end to end  end to start time lags easily transformed general start to start time lags deterministic case given bartusch
et al          schedule ss    st a     st a        st an    time feasible  time lag
constraints satisfied start times st ai    i         n   
resource unit reusable available another activity longer used
current activity  type resource limited capacity  ck  k            k 
  

firobust local search solving rcpsp max durational uncertainty

units  activity ai requires rik units resource type k k            k  let
a t     i         n   st ai   et ai    set activities processed
time instant t  schedule resource feasible time instant t  total demand
resource k exceed capacity ck   i e 
x
rik ck  
   
ia t 

schedule ss called feasible time resource feasible  objective
deterministic rcpsp max scheduling problem find feasible schedule
project makespan minimized 

figure    project instance 

 

time

figure    example schedule 

  

fifu  lau  varakantham    xiao

example    figure    show simple example deterministic rcpsp problem
special case rcpsp max precedence constraints  rather arbitrary time lags  activities expository purposes  circle indicates activity
number inside circle representing activity id  two numbers top
activity represent duration number units resource required
activity  example    activities one type resource  capacity
resource limited     noted activities      dummy activities introduced source sink dependency graph  arrows activities
represent temporal dependencies  feasible schedule makespan    represented
figure   
      rcpsp max durational uncertainty robust makespan
paper  consider rcpsp max problems durational uncertainty  duration
activity specified sum mean value deviation  di   d i   zi   d i
mean di zi perturbation part expected value   standard
deviation   noted irrespective distribution type  always
represent di di   d i   zi d i mean zi perturbation part
e zi        addition  assume random variables   zi    corresponding
durational uncertainty independent other 
similar deterministic rcpsp max  start to start constraints still deterministic  however  unlike deterministic case  types constraints  end to start
etc   cannot converted deterministic start to start constraints   instead equivalent start to start constraint stochastic one shown following expressions
end to start constraint  noted even though converted constraints
stochastic  techniques still applicable  with minor modifications  types
time lag constraints  robust local search techniques depend computation
maximum sum random variables even stochastic time lag constraints
remains case  paper  purposes exposition  present techniques
assuming temporal dependencies provided start to start constraints 
st aj   et ai   tijmax
st aj    st ai     di   tijmax
st aj   st ai   tijmax   di
deterministic setting  start time schedules computed values makespan
used evaluate performance schedule  however  durational uncertainty involved  project makespan becomes random variable schedule
replaced execution strategy  following sections  introduce partial
order schedule  pos   policella et al          serves execution strategy
scheduling project 
given level risk        goal problem find strategy minimum value  across strategies  robust makespan  define
robust makespan makespan value probability feasible schedule  i e 
assignment start times activities  instantiated strategy completed
robust makespan least    
  

firobust local search solving rcpsp max durational uncertainty

      partial order schedule
partial order schedule  pos  first proposed policella et al          defined
set activities  partially ordered schedule total activity order
consistent partial order resource time feasible  mathematically  pos
represented graph node represents activity edges represent
precedence constraints activities  within pos  activity retains set
feasible start times  provide flexibility respond unexpected disruptions 
pos constructed given rcpsp instance via chaining algorithm  where
one algorithm described below  
 

figure    example pos
example    figure   provides pos problem instance introduced example   
   units resource shown left side figure 
unit represents chain  activity require multiple resource units hence
shown multiple resource units  instance  activity   shown resource units
        solid arrow activities represents temporal dependency provided
original problem  solid arrow activities     one example 
dotted arrow activities represents temporal dependency introduced since
activities executed resource unit  added remove resource
conflict  example dependency introduced activity   activity
   explanatory purposes consider one resource type example  however
general case  exists multiple resource types dependency diagram
every resource type 
      chaining algorithm
chaining procedure dispatching activities different resource units  henceforth
referred chains  based temporal resource feasibility  chaining
process  activity allocated one resource chains based number
resource requirement activity  chaining process  activity
scheduled executed resource unit  additional edge  indicating precedence
  

fifu  lau  varakantham    xiao

relationship  added last activity selected chain activity
eliminate possible resource conflicts 
following  describe basic chaining algorithm proposed policella et al 
        algorithm  feasible schedule first obtained using simple greedy heuristic 
consequently  pos constructed chaining method follows  first  set
activities sorted according start times given feasible solution  then 
activities allocated different chains order  chain corresponds
unit certain type resource  chain called available activity end time
last activity allocated chain greater start time activity
feasible schedule  activity allocated chain  precedence constraint
activity last activity chain posted  activities
require one unit one types resources  allocated
number chains number equal overall number resource units required
activity 
example    take figure   example  given schedule figure   input activities
first sorted according starting time sequence activities presented
as                       chaining procedure first picks activity   randomly allocates
five chains fulfill resource requirement  available chains belonging
dummy activity   thus  five chains     created posts precedence
relationship current last activity   activity    activity   becomes last
activity chains  activity   treated way  available chains
activity   belonging activity    activity   randomly assigned chain  
   edge activity   activity   indicating precedence relationship
added  procedure continues activities dispatched chains number
equals resource requirement  finally chained pos   yielded  however 
randomness chaining procedure  activity   allocated chains belong
three different activities  activity    activity   activity    tie together
execution three previously unrelated activities   activity    activity     activity    activity
    activity    activity     would decrease flexibility execution 
reduce inter dependencies activities much possible chaining
procedure  policella  cesta  oddi  smith        developed two heuristics  one direct
advantage approaches synchronization points solution reduced 
activities require one resource units allocated subset
chains  achieved scanning list available chains last activity
chain    a  requires multiple resource units   b  previously assigned
another resource unit allocated current activity 
activities precedence constraint defined original problem allocated
set chains  implemented choosing chain last
activity precedence constraint current activity 
example    figure   provides pos computed using mentioned chaining
algorithm rcpsp problem described example    allocating activity   
  

firobust local search solving rcpsp max durational uncertainty

 

figure    pos computed removed synchronization point
available chains divided two sets   chain     chain     chain    chain  
chain    first set contains chains last activity  i e  activity    already
ordered problem definition respect activity    chain  for example  chain    
randomly chosen set last activity activity    then  remaining
available chains activity   redivided two sets   chain     chain    chain  
chain    first set contains chains activity    i e  last activity first
picked chain  last activity second set remaining  activity   first
allocated chains belonging first subset satisfy remaining resource requirements 
case  synchronization points caused activities      activities    
allocated different chains disappeared 
    job shop scheduling problem  jsp  durational uncertainty
classical jsp consists set n jobs set machines  job ji  i         n 
consists sequence ni operations denoted oij  j         ni  
processed given order 
p convenience  enumerate operations jobs ok  
k         n n   nj   nj   operation ok positive duration denoted
dk must executed dedicated machine denoted mk   operation
started must executed entire duration  operations require
resource overlap execution  thus  operations partitioned two sets 
job sets resource sets  job sets referring operations corresponding job
resource sets referring operations require resource 
solution total ordering operations resource set  conflict
job ordering  path solution sequence operations follows
job ordering ordering various resource sets solution s  length
path equal sum durations operations path  makespan
solution make s  length longest path  minimum makespan
jsp problem defined minimum value makespans solutions  i e 
mins make s   operation ok associated start time st ok   end time
  

fifu  lau  varakantham    xiao

et ok    schedule assignment starting times st ok    k         n   operations
machines  objective find schedule optimizes total makespan
 makespan completion time last operation   maxn
k   et ok   
minimum value longest path solutions  job shop scheduling problem
special case rcpsp resources unary capacity activity  i e 
operation  consumes one resource 
propagate notations rcpsp max durational uncertainty
jsp durational uncertainty  i e  processing time activity  i e  operation 
dok modeled sum expected value d ok random part zok   dok  
d ok   zok   objective find robust makespan given level risk 
    segregated random variables
primitive random variable zk one zero mean  examples primitive random
variable include u  a  a   uniform distribution constants a  n      
 normal distribution mean   variance      mentioned earlier  assume
every uncertain distribution equal sum nominal value  mean 
deviation  represented one  or possibly more  primitive random variable z  straight
forward representation  one primitive random variable zk associated
uncertain variable  recent work chen  sim  sun  zhang         primitive
random variable zk represented   segregated random variables zk   read z plus  zk
 z minus  
z   z   z

   

z   max  z    

   

 



z   max  z      

   

following table    give examples respective values mean p  
variance p       segregated variables z   z  
z
u  a  a 
n      

v ar z 

p      

p  m

a 

 a 
  
     
 


 

 

 
 

table    values mean variance segregated variables uniform
normal distribution
underlying assumption use segregated random variables mean
variance individual segregated variables provided random variables
employed  aware mean variance values segregated variables
distributions normal uniform 
    decision rules optimization data uncertainty
optimization problems data uncertainty  decision rule specifies dependence
adjustable variables uncertainty parameters non adjustable variables  let z
  

firobust local search solving rcpsp max durational uncertainty

x denote set primitive random variables non adjustable variables respectively 
example linear decision rule framework proposed ben tal nemirovski
        setting value adjustable decision variable s x  z  assumed
affinely dependent subset n number primitive random variables 
s x  z    c   

n
x

ck  x zk

   

k  

ck  x     k n   coefficient derived x 
another example segregated linear decision rule framework proposed chen
et al          adjustable decision variable
assumed tobe affinely dependent
 

 
set n segregated random variables z    z            zn
  zn   hence  segregated
linear decision rule following general form 
s x  z    c   



pn

k  


 

c 
z
 
c
z
k k
k k  

    

show below  segregated linear decision rule allows us easily obtain upper
bound subset random variables  see eqn      possible linear
decision rule framework proposed ben tal nemirovski        
given mean variance segregated variable e zk      e zk     k  
 
 
  express expected value variance
v ar zk     mk
v ar zk      pk
adjustable variable as 
e s x  z     c   

n
x



c 
k k   ck k



    

k  

n n

x
   
 

v ar s x  z    
ck pk   ck mk  c 
 
c

k
k k

    

k  

   decision rules rcpsp max durational uncertainty
rcpsp max durational uncertainty  decision rule specifies dependence
activity start times durational uncertainty associated activities  make
comparison equation    x represents pos generated  tasks start
time associated adjustable variable s x  z   c  represents earliest start
time task pos  ck  x  encodes task k related task
pos 
scheduling context  start time activity dependent start times
preceding activities  i e  adjustable variables s x  z  dependent one another 
activity either start end activity  i e  series  end
multiple activities occurring simultaneously  i e  parallel   thus  adjustable variables
functions adjustable variables addition operator  to model serial
activities  and or maximum operator  to model parallel activities  
  

fifu  lau  varakantham    xiao

given number adjustable variables  may express sum adjustable
variable form segregated linear decision rule follows 
pm
 

i   si  x  z 
pm   pn npm    
i   ci  
k  
i   ci k zk

 

pm


i   ci k zk


 

    

similarly  given set c adjustable variables  may express upper bound
maximum variables adjustable variable form segregated
linear decision rule 
maxic  si  x  z  
n
p
n

p
n


 
 
maxic  c i     n
max
 c
 z
 
max
 c
 z
 
ic
ic
k  
k  
i k k
i k k

    

specifically  output solving rcpsp max involves pos represented
graph activities vertices precedence constraints activities
edges  given pos graph  x    v  e   v set activities e set
temporal dependencies  an edge  u  v  represents temporal dependency states
activity v occur activity u   activity v v   decision rule
computing start time defined recursively follows 
sv  x  z    max  d u   zu   su  x  z   
 u v e

    

equation    recursive expression defined combination sum maximum set random variables  noted combinations sum maximum random variables cannot computed exactly hence present two operational
decision rule approximations evaluate recursive expression equation      a  segregated linear approximation sla    b  general non linear approximation gnla  
noted sv computable long mean variance su computable
demonstrated approximations 
    segregated linear approximation  sla 
decision rule  duration activity defined based segregated random
variables introduced section      uncertain duration mean processing
time d    represent sum three components  mean d    lateness z    i e 
    
max d d         earliness z  i e  max d  d 
  d    z   z  

    

normally distributed duration  i e   z n        respective values mean
variance segregated variables summarized as 

e z       e z    
 
      
v ar z       v ar z    
 
 
  

    
    

firobust local search solving rcpsp max durational uncertainty

describe computation sv  x  z  representing durational uncertainty
activities using segregated random variables  upper bounds sum maximum
random variables derived linear functions segregated variables illustrated
below 
sum random variables   case project network involving k activities 
two either precedence constraints competing
resource units  solution form pos requires computation sum
activity durations  start time activity starting k activity project
expressed as 
p
sk  x   z    z      ki    d i   zi  zi   
    
p
thus  adjustable variable sk mean ki   d i uncertainty captured
pk
 
random variable  positive segregated component
i   zi
pk

negative segregated component
i   zi   mean variance segregated
variables known hence mean variance sk easy compute 
max random variables  consider activities executed concurrently 
upper bound start time activity starting parallel k activity
project network sla represented linear function positive segregated
components duration perturbations 
p
    
sk  x   z    z    maxi      k  d i     ki   zi   
thus  adjustable variable sk upper bound mean maxi      k  d i  
uncertainty
p captured random variable positive segregated component given ki   zi  negative segregated component  mean variance
segregated variables known hence mean variance sk easy
compute 
since  cases  sum max  sk expressed linearly subset random segregated variables  recursive computation straightforward  compared linear
decision rules  ben tal   nemirovski         superiority sla  chen et al         lies
ability linearly express upper bound subset random variables dissecting uncertainty positive negative components  approximation
increases tractability scalability  comes expense losing accuracy 
    general non linear approximation  gnla 
sla efficient  typically provide loose upper bounds robust makespan
due linear approximation computing max random variables  section 
describe general non linear approximation  gnla   restricted
affine dependencies  clarity comparison purposes  use g denote start
time instead used sla 
given mean variance values duration uncertainty  describe approximation involved computing mean variance sum max activities
  

fifu  lau  varakantham    xiao

used equation     recalled irrespective distribution
always represent   d    z  d  mean
uncertain duration d 
z perturbation part  thus  e z      
      sum random variables
compute sum stochastic durations serial k activity project network follows 
gk  x  z   

k
x

 d i   zi   

    

i  

case  similar representation sla  mean variance gk computed
follows 
since  zi  i      k random variables zero mean  calculate expected
value as 
k
k
x
x
 
e   di   zi     
d i  
i  

    

i  

 zi   assumed independent other  variance value computed
following expression 
k
k
x
x
 
v ar   di   zi     
v ar zi   
i  

    

i  

normal distribution zi n       
k
k
x
x
v ar   d i   zi     
i   
i  

    

i  

note expressions expected value variance case serial activities
identical ones used wu  brown  beck        
      max random variables
ease explanation  begin considering two activities executed parallel
extend analysis multiple parallel activities  gnla   unlike sla 
max random variables approximated expected value variance
max approximately calculated 
expected value variance max two variables
decision rule represent starting time activity  begin
completion two parallel activities defined as 
g   z  max d     d       max z    z    
note tighten bound eqn    replacing z     z   max z    z    
  

    

firobust local search solving rcpsp max durational uncertainty

derive expressions expected value variance adjustable variable 
i e   rhs term eqn     firstly  focus expected value 
e max d     d       max z    z       max d     d       e max z    z     

    

general case  difficult derive exact expression e max z    z     hence 
provide upper bound 
following propositions      compute expected value variance
general case e z     note assume e z      primitive random variables   calculate general case required computation
expected value variance two random variables  next subsection  
proposition    expected value maximum two general distributions  z 
z  nonnegativepmeans less
 
 
v ar z      v ar z       e z         e z       
   e z      e z        
proof  begin considering following two equalities 
max z    z      min z    z      z    z 
max z    z    min z    z       z  z    
sum two equalities 
 
max z    z       z    z     z  z     
 

    

thus  compute expected value maximum using following equation 
 
e max z    z        e z      e z      e z  z     
 

    

addition  using definition variance  obtain 
v ar z  z      e z  z      e z  z        
therefore 
p
e z  z    p e z  z    
  pe z       e z      e z   e z   
pe z       e z    
  v ar z      v ar z      e z       e z      
substituting final expression eqn    eqn    yields bound
p
e max z    z         e z      e z          v ar z      v ar z       e z         e z       

    

    

hence proof 
note paper  assume e z       thus  tighter bound obtained
eqn    
p
    
e max z    z        v ar z      v ar z    
  

fifu  lau  varakantham    xiao

special case  zi    i         k  normally identically distributed 
i e  zi n        know work clark        closed form
representation expected value maximum k     

e max z    z        

focus deriving expressions variance maximum two general
distributions  i e   v ar max z    z     
proposition    variance maximum two general distributions  z  z 
nonnegative means less v ar z      v ar z          e z            e z       
proof  eqn    
v ar max z    z          v ar z    z     z  z    
      v ar z    z      v ar z  z       cov
p  z    z     z  z     
 
   v ar z    z      v ar z  z        v ar z    z   v ar z  z    
    v ar z    z      v ar z  z     

    

firstly  consider following two equations 
v ar z  z      e z  z      e z  z     
 

    

 

v ar z  z      e z  z     e z  z    
subtracting second first yields

v ar z  z      v ar z  z       e z  z       e z  z       
now  substitute expression last term eqn    obtain 
v ar max z    z     v ar z      v ar z          e z    e z          e z  z       

    

specific distribution duration perturbation known  obtain
bound v ar max z    z     as 
v ar max z    z     v ar z      v ar z          e z            e z       

    

hence proof 
note paper  assume e z       thus  tighter bound obtained
eqn    
v ar max z    z     v ar z      v ar z    
    
interesting consider special case random variables normally
distributed  first state following lemma   
   found statistics texts  found online http   en wikipedia org wiki halfnormal distribution 

  

firobust local search solving rcpsp max durational uncertainty

lemma      x normally distributed x n           x  half normally
distributed 
r
 
e y    
 
    

normal distribution zi n        since z  z  normally distributed 
z  z  n              conclude lemma      z  z    follows half normal
distribution
r
 
e z  z              
 
    

thus  substitute expression eqn     express upper bound
variance value maximum duration perturbation two activities  zi n      
 
v ar max z    z       

 
 
                 
 


    

expected value variance max multiple variables
extending two k  k      parallel activities  completion time upper
bounded by 
gk  z  max  d i     max  zi   
    
i      k
i      k
following  first compute variance value rhs term
use similar procedure compute expected value  basic expression variance
rhs is 
v ar  max  d i     max  zi      v ar  max  zi    
    
i      k

i      k

i      k

obtain value v ar  max  zi    general probability distributions  take
i      k

advantage analysis provided two parallel activity case above  following
steps outline overall idea 
 a  firstly  group activity set  a         ak   couple set  c         cd k e   
 

element cj  j         d k  e  contains two different activities cj    aj    aj    chosen
activity set  note k odd  final element couple set contains
one activity 
 b  couple cj   apply maximum operator duration perturbations involving activities  denote cj   max zj    zj     zj  zj  duration perturbations
two activities involved cj   v ar cj   calculated based expression
two parallel activity case 
 c  max  zi     max  cj     note one activity contained
i      k

j      d k  e

cd k e k odd   then  build another couple set  c         cd k e   
 
 
method steps         used compute v ar  max  cj    based
j      d k  e

eqn    and or eqn    and or eqn    
  

fifu  lau  varakantham    xiao

numerous ways  exponential k  generating couple set  c         cd k e  
 
k activities parallel  couple sets lead different levels tightness
derived robust makespan  compute grouping provides best robust fitness
random variables generic distributions open problem  instead  focus
heuristic computes best grouping normal distribution zi n       
obtained solving following optimization problem 
x
max
j  j 

    
k
j      b   c

denotes grouping technique decision variable   cj   couple
set constructed activity set grouping method t  j  j  standard
deviations data perturbation durations activities contained cj   intuition
employing optimization problem obtained equation     noted
computing tighter bound variance implies considering highest possible value
product primitive variances  hence  reason employing optimization
problem equation    
proposition    solution optimization problem eqn    obtained
ordering k activities non increasing order variance values grouping
two nearest activities according order  i e  cj    aj    aj     j         b k  c
standard deviations following order 
                 b k c  b k c   
 

 

    

proof  suppose another grouping method t    elements couple
set except two couples   ordering different  i e   cm  
 am    an    cn    am    an     m    n   cm    am    am    cn    an    an   
  without loss generality  assume   n eqn    
m  m  n  n   

    

since t  supposed provide solution less   defined eqn      
i e 
              m  n          n  m          b k c  b k c 
 
 

              m  m          n  n          b k c  b k c   
 
 
therefore 
m  n    n  m  m  m    n  n   
equivalent to   m  n    n  m      
contradicts eqn     except case standard deviations equal 
case mixing order affect anything   thus  exists t 
different least two couples better objective value  general case
   noted ordering change one couple  method still produces
solution within couple variance computation consider order 

  

firobust local search solving rcpsp max durational uncertainty

t  multiple  more two  couples different easily derived
case  and omitted due space constraints  
hence proof 
analyzing expected value e  max  zi     apply procedure emi      k

ployed calculate variance  i e   based group solution returned
optimization problem  first calculate expected value couple then  get
final bound following eqn    and or eqn    and or eqn    
present  unable show effectivness grouping heuristic  equation     analytically general case  however  show intuition behind
grouping heuristic providing analytical comparison  example
four activities  normally distributed durations  executed parallel  i e  zi n       
assume          no loss generality  
representation makespan grouping heuristic  denoted mheu  
random grouping  denoted mran   are  respectively 
mheu   max d     d     d     d       max max z    z     max z    z    
mran   max d     d     d     d       max max z    z     max z    z     
let us first examine mean variance values mheu   eqn    
p
e max z    z        p       
e max z    z                 

    

    

eqn    
v ar max z    z                           
v ar max z    z                             

    

eqn     eqn     eqn    eqn     obtain bounds mean variance
values mheu    
q
p
p
p
 
 
 
 
 
 
e mheu   const                                     i   i                
    
p
v ar mheu             i   i                 
similarly  mean variance values mran calculated 
q
p
p
p
e mran   const                                           i   i                
    
p
v ar mran             i   i                 
eqn     bounds fitness mheu  denoted f itheu   mran  denoted
f itran   respectively represented function rhs eqn    eqn    
examine difference value two bounds  f itheu f itran   let us first
compare first term rhs mean values eqn    eqn     since
p
p
p
p
 
 
 
  p
                  p
          
       
   
    
 
 
 
 
 
 
 
 
 
 
                                                       
   calculation use robust fitness function provided definition    introduced section   
   note const eqn    eqn    max d     d     d     d     

  

fifu  lau  varakantham    xiao

proposition   
                     

    

                                                               

    

thus 

eqn     eqn     eqn    eqn     bounds mean variance
values mheu lower mran   given robust fitness function eqn    
conclude
f itheu f itran  

    

independent   words  grouping heuristic provide tighter
fitness bound random grouping 

   robust fitness function
makespan  start time dummy sink activity  rcpsp max durational uncertainty function non adjustable variables x random variables representing durational uncertainty z represented using s x  z  sla g x  z 
gnla  recall robust optimization problem find minimum value f
following probability bound observed   
p  s x  z  f       

    

one sided chebyshevs inequality  obtain bound robust objective value f function expected value variance adjustable fitness
function  i e  
q
q
    
v ar s x  z   f p  s x  z  f       
e s x  z      

hence  reformulate robust optimization problem follows 
min f
s t 

e s x  z    

q

q
 


v ar s x  z   f

    

model  derive robust fitness function used
local search framework 
definition    given       adjustable fitness function s x  z  defined above 
robust fitness function  f  x  z     defined
r
q
 
f  x  z      e s x  z    
v ar s x  z  
    

goal local search mechanism find local minima f   addition  local
search typically requires fitness function computed many times hence
imperative computation fitness function efficient 
   show computation sla robust fitness function  substituting g  obtain
fitness function gnla 

  

firobust local search solving rcpsp max durational uncertainty

    schedule infeasibility given pos
noted fitness function  f assumes schedule generated
pos  x always executable  however  due durational uncertainty maximum
time lags  schedule always executable  direct way measure ip r pos 
probability infeasibility pos  i e  probability pos lead infeasible schedule  lies computation probability infeasibility activity ai
ip r ai    exist feasible start time temporal constraints
respect ai satisfied  ip r pos  calculated probability
least one activity infeasible  however  due temporal dependencies activities
providing theoretical expression overall probability infeasibility open problem  therefore  propose simulation approach  simulate pos execution
multiple trials compute probability eciently approximately  illustration 
experimented benchmark j   instances psplib  kolisch  schwindt 
  sprecher        rcpsp max additional durational uncertainty follows
normal distribution mean   variance    generated      sample realizations
pos obtained sla  check infeasibility respect original temporal
 including maximum time lag  constraints  examples probability infeasibility
obtained simulation psp   psp   psp                     however 
problems psp   psp  etc  probability infeasibility   
maximal time lags much larger variance durational uncertainty 

   robust local search algorithm
section present decision rule approximations introduced sla  gnla
integrated robust fitness function local search mechanisms provide
solution problems represented rcpsp max durational uncertainty 
proposed algorithm outlined follows  steps           standard steps local
search algorithm  steps     represent departure standard local search deal
uncertainty 
   generate initial solution
usually obtained using simple greedy heuristic 
   generate neighborhood solutions
generate pool neighbor solutions current solution 
   employ one decision rule approximations  sla gnla 
adjustable variables check feasibility
candidate solution x solution pool  derive coefficients ck  x 
adjustable variable  subsequently  solution check constraint violation
reject feasible 
   evaluate robust fitness function f
feasible solution x  evaluate f obtain robust objective values 
solution lowest robust objective value current best robust solution 
  

fifu  lau  varakantham    xiao

   apply penalty  optional 
advanced local search strategies may require penalty applied prevent
caught local minima  case tabu search example 
tabu list updated tabu move applied  case iterated local search 
perturbation move applied current local minima 
   termination criteria
termination criteria met  return solution lowest robust fitness
function value else repeat optimization cycle determining next move 
algorithm   provides robust local search algorithm guided decision rule using
    g   g   g   obtain local search algosla  substituting snow

min
min
rithm using gnla  given rcpsp max durational uncertainty level risk
         algorithm returns pos  locally  minimal robust makespan 
 or g gnla   essence  perform robust local search neighborhood set
activity lists  activity list  al  defined precedence constraint feasible sequence
used heuristics generate earliest start time schedules solving standard
rcpsp problem  kolisch   hartmann        
different activity lists explored local moves  context  consider
activity list sequence activities satisfy non negative minimal time lag
constraint  due existence maximal time lag constraint rcpsp max  scheduling
activities earliest possible start time based order position activity list
may restrict schedule much may even return feasible schedule  thus 
schedule activity sequentially based order position activity list 
assign starting time randomly picking time domain feasible start
times 
according experiments  new randomized approach returns feasible
solutions earliest start time one  finding feasible schedule  pos
generated applying chaining procedure proposed policella et al          then 
 or g gnla  value computed according pos  intuitively  using
randomized approach may return schedule large baseline scheduled completion
time  however  apply shortest path algorithm resulting pos generate
earliest start time schedule smaller makespan 
mentioned above  may difficult find feasible schedule satisfies minimal
maximal time lag constraints using activity list  fact  believe set
activity lists  many may yield feasible schedule  overcome problem
follows  define set activity lists result feasible  or infeasible  schedules
f  or i   seek design local search algorithm following characteristics 
a  starting activity list i  local search move activity list f
within short time  b  starting activity list f   local search move
activity list minimal  or g gnla value  c  diversify
exploration activity lists f allowing local search move activity list
f activity list i  since activity lists f region may reachable
one another simple local moves  flavor strategic oscillation proposed
meta heuristics research 
  

firobust local search solving rcpsp max durational uncertainty

algorithm   robust local search
   generate activity list al randomly
   find start time schedule  ss randomly according al
   al f
  
p os chaining ss 

compute snow
according p os
  


  
update smin snow
   else
  
record first activity cannot scheduled
   end
      max iteration
al
   
   
shift activity ahead al randomly al
else
   
   
select two activities b c al randomly
   
swap b c al al
   
end
   
find randomized start time schedule ss  according al
   
al  f
p os   chaining ss   
   
   
compute according p os  

   
al snow



   
snow
   
al al 

   
smin



smin
   
   
end
   
end
   
else al
   
al al 
   
else
   
p rand      
p       
   
   
al al 
   
record first activity cannot scheduled
   
end
   
end
    end

  

fifu  lau  varakantham    xiao

detailed robust local search procedure given algorithm    procedure starts
randomly generating activity list al  sequence activities satisfy
non negative minimum time lag constraint  line     line    schedule ss produced
based ordering activities activity list al  first perform domain reduction
distance graph using floyd warshall algorithm  feasible range
start time activity based temporal constraints obtained 
schedule activity sequentially based order position activity list 
activity  first pick start time randomly feasible domain evaluate resource
constraints duration activity  i e  check current resource capacity exceeds
resource amount used activity   yes  set start time activity 
run shortest path algorithm reduce domains remaining activities  update
current resource capacity due consumption activity  resource constraints
satisfied  try set start time randomly prescribed maximum
numbers retries  start time current activity set  proceed iteratively
next activity according activity list  line    chaining   employed
generate pos baseline schedule  section         ax iteration refers
maximum number iterations robust local search  apply two different types
local moves  converge quickly activity list f  first local move designed
schedule activity causing temporal resource conflict earlier time 
randomly shift ahead first activity cannot scheduled current
activity list  line      activity list f  second local move randomly
pick two activities swap current activity list  satisfying nonnegative minimal time lag constraints  line         move accepted  results
smaller equal value  line         explore different activity lists  include
small probability accept move leads infeasible schedule  line        
probability move activity list f one set       minimal
 
value saved smin

worst case computational complexity analysis given follows  iteration
local search  three major components  randomized schedule generation  pos
construction fitness calculation  process randomized schedule generation 
perform domain reduction resource checking iteration  thus complexity
o n  n     h k w   n number activities  h maximum planning
horizon  k number types resources  w prescribed maximum number
retries activity setting randomized start time  pos construction
process works follows  set activities first sorted according start times
generated deterministic schedule sorting part costs o n logn   
proceeds allocate activity total units needed type resource  let
maxcap maximum capacity among resources  cost computing pos
o n logn   n k maxcap    determining fitness value generated
pos  examine edge edge check connected parallel serial
respect predecessors costs o n   e  e number edges pos
 e   n      thus  worst case complexity proposed robust local search algorithm
o t n  n     h k w   k maxcap    number iterations local search 
  

firobust local search solving rcpsp max durational uncertainty

   enhancing robust local search
section  describe two enhancements improve basic local search method
described section    firstly  describe ordering generation  pre processing
step used identify precedence ordering activities  precedence ordering
used focus local search activity lists  secondly  describe new chaining
method generate pos feasible schedule 
    ordering generation
ordering generation pre processing step identifies precedence relationships
pairs activities  key idea certain pairs activities  always better
 with respect robust makespan  ordering among activities  goal
identify pairs activities employ ordering focus local search
activity lists chaining method used compute pos feasible schedule 
deciding ordering pair activities  b  two key steps 
 i  sample set generation  generate two sets activity lists  first set consists
activity lists occurs b  second set generated swapping activities
b every activity list first set   ii  order determination  step  first
compute pos robust makespan activity lists two sets  comparing
robust makespan values corresponding activity lists two sets  determine
ordering activities  explain steps following subsections 
problem n activities  cn  pairs activities  decide
orders pairs  ordering computation needs implemented cn  times 
computationally expensive  based observation  first propose pairsselection heuristic selectively choose certain number activities pairs whose ordering
significant impact robust makespan 
pairs selection heuristic picks activity pair   a  precedence related
original problem definition   b  exists least one type resource 
total demand activities exceeds resource capacity  intuition behind
picking activity pair two activities cannot executed parallel
deciding ordering relationship imperative eliminate resource conflict  one main
advantage heuristic number pairs activities need ordered
significantly reduced  now  describe two steps ordering generation below 
      sample set generation
first randomly generate activity lists initial sample set denoted  
element activity list represented ali sequence activities 
        m  i e 
   ali  ali    a    a       an           m   
pair activities  ak   al   resulting pairs selection heuristic  define
two sample sets represented ak al al ak   ak al activity lists
  except activity list al ak   activities swapped 
ak al    aliak al  i        m   
  

fifu  lau  varakantham    xiao

 
 a    a         ak      al      an   ali    a    a         al      ak      an  
 
aliak al  
ali
ali    a    a         ak      al      an  
similarly  al ak constructed incrementally selecting activity list
initial set al ak reverse order ak al   i e 
al ak    alial ak  i        m   
 
 a    a         al      ak      an   ali    a    a         ak      al      an  
alial ak  
 
ali
ali    a    a         al      ak      an  
thus  activity list sample set ak al share positions activities
except ak al corresponding activity list set al ak   al precedes ak  
      order determination
determine activity order selected pair activities based sample
sets obtained last phase  pair  ak   al    construct new instance posting
precedence constraint ak al al ak original instance  based new
instance  determine fitness denoted fiak al fial ak aliak al
alial ak   respectively 
note aliak al alial ak share elements positions except
order ak al   thus  order ak al considered reason
fitness aliak al alial ak differs  decide order ak al   define index
variable denoted ivak al measures percentage samples one
order ak proceeds al wins  i e 
p

ivak al  



min 

al
ak
f k
f l


ak al
ak    
 f
f l
 





 

define index parameter activities ak al denoted ipak al
benchmark index variable ivak al determining order ak al   parameter ipak al prescribed users different values  usually larger     
represent different levels confidence order ak al matters causing fitness
variance  thus represents different controllability ivak al  
value index variable ivak al larger value ipak al   set order
ak al since indicates higher probability b provide better robustness
b a  ivak al less   ipak al   set al ak   cases  order
ak al settled 
    improved chaining based robustness feedback
noted preliminaries section  activity a  may exist multiple
choices resource chains assigned  addition  different chaining heuristics lead poses different robust makespan values  section 
propose new chaining heuristic dispatches activities resource chains predicting
improvement robust makespan generated pos 
  

firobust local search solving rcpsp max durational uncertainty

algorithm   robustness feedback resource chaining  activity a  schedule s  order g 
   c find set available chains  c activity based
   p collect chains c last activity chain preceding problem
   collect chains c last activity chain ordered g
   p   
  
k get first available chain p
   else   
  
k get first available chain
   else
  
k get first available chain c
    end
    post constraint last activity chain k  denoted last k   activity
    requires one resource unit
   
c  chains c last activity last k 
   
c  c   c 
   
resource units required
   
choose first available chain belonging c 
   
chain feasible
   
choose first available chain belonging c 
   
end
   
end
    end
latest chaining method aims increase flexibility described section        chains first randomly picked superior subset  i e   chains
last activity already ordered  chains sharing last element   since objective makespan related time becomes concern  build work policella
et al         pick first available chain wherever available  updated chaining
method called robustness feedback based resource chaining 
example    figure   provides pos provided chaining heuristic used
example    seen  compared pos    key difference allocation
activity      new heuristic  seen parallelism
hence reduced robust makespan high probability 
employing ordering generation algorithm conjunction chaining
heuristic  consider information ordered pairs allocating resource
units activity  motivation activity activity b  for example 
b  ordered  high probability precedence relationship result
better solution  algorithm   provides pseudo code robustness feedback
resource chaining heuristic ordering 

   experimental evaluation
section  first evaluate scalability quality execution strategies
provided robust local search various enhancements introduced paper 
  

fifu  lau  varakantham    xiao

 

figure    pos robustness feedback chaining
secondly  establish benchmark performance  compare best known
technique solving jsp problems durational uncertainty  noted
robust local search method developed solve rcpsp max problems durational
uncertainty hence exploit structure present jsp problems  furthermore 
described earlier  optimization metrics approaches different 
    experimental setup
two sets problems consider described subsections
below  additionally  indicate algorithms compared data
sets section 
      rcpsp max durational uncertainty
problems considered rcpsp max durational uncertainty obtained
extending three benchmark sets available rcpsp max problems  j    j  
j   specified psplib  kolisch et al          set contains     problem
instances duration activity ranging       maximum number
activities j    j   j              respectively  activity ai   set
expected value d i stochastic duration corresponding deterministic duration
given benchmarks  assume duration uncertainty normally distributed 
i e  zi n        henceforth  refer j    j   j   rcpsp max problems
durational uncertainty  run algorithms problems four different duration
variabilities                    four increasing levels risk                          
  

firobust local search solving rcpsp max durational uncertainty

rcpsp max problems durational uncertainty  compare robust local
search guided using two decision rule approximations sla gnla  furthermore  compare different enhancements robust local search rcpsp max
problems durational uncertainty  compare five different variants robust local
search decision rule approximation   a   gnla  refers basic robust local search
guided gnla decision rule approximation   b   gnla rc  robust local search
new robustness feedback chaining heuristic guided gnla   c   gnla   refers
basic robust local search additional local search iterations  number
local search iterations determined based problem set  as described later    d 
 gnla og  order generation heuristic top gnla guided robust local search 
finally  e   gnla og rc  order generation robustness feedback
chaining heuristics gnla guided robust local search 
number local search iterations robust local search set       reduce
stochasticity effects robust local search  average    random executions
problem instance  code implemented c   executed core tm  
duo cpu     ghz processor fedoracore     kernel linux              fc   i     
      jsp durational uncertainty
jsps   gnla  compared probabilistic makespan results provided
beck wilson         benchmark problems  consider instances generated
using existing generator work watson  barbulescu  whitley  howe       
durations drawn uniformly interval         specifically  focus three
sets probabilistic jsps size               where    problems consists  
jobs consisting   activities each  set  three uncertainty levels            
considered 
    comparison sla gnla
first compare average robust makespan     problem instances obtained robust
local search guided decision rule approximations proposed section    
section      refer robust makespan computed using sla using gnla
g   figure   provides results three sets rcpsp max problems
durational uncertainty  results  show robust makespan affected
level risk standard deviation duration uncertainty  x axis represents
different combinations risk standard deviation durational uncertainty  shown
table figure    runs every instance takes couple seconds hence
report cpu times here  key observations conclusions interest figure  
follows 
irrespective   level risk increases  robust makespan decreases
sla gnla  clearly  lower risk planner willing take 
higher robust value generated execution strategy  method
capable quantifying trade off  help planner decide
desired strategies 
  

fifu  lau  varakantham    xiao

   

  

g 

s 

  

  

  

  

  
 

 

 

 

 

 

 

 

 

  

  

  

  

  

  

  

 a  results j  
   
   

g 

s 

   
   
   
  
  
  
 

 

 

 

 

 

 

 

 

  

  

  

  

  

  

  

 b  results j  
   
   

g 

s 

   
   
   
   
   
   
 

 

 

 

 

 

 

 

 

  

  

  

  

  

 c  results j  

figure    comparison robustness sla gnla 
  

  

  

firobust local search solving rcpsp max durational uncertainty

irrespective   degree duration variability increases  robust makespan
increases sla gnla  value becomes sensitive
level risk constrained small value  e g          
lower values   specifically       provides lower values robust
makespan g   hand  higher values                   g
provides superior performance   yet understand reason drop
performance         observed consistently across rcpsp max
benchmark problems 
problem instance  observe monotonicity absolute
difference robust makespan g risk values  level risk takes
value around        sla  slightly lower value g  gnla   however 
risk becomes       superiority gnla increases higher values risk 
figure   illustrates randomly picked j   instance         
pattern observed across problem instances j    j   j   
   

  

  

  

  

  

  

  

  

s 

  

s 

  

g 

  

g 

  

  

  

  

  

  

                                                    

                                                    

 a  results randomly selected j   example  b  results randomly selected j   example
  
  

figure    comparison robust makespan 
next  figure    compare quality execution strategies obtained using
sla gnla  precisely  compare distributions actual makespans
schedules computed using decision rule approximations  purpose  generate
set     samples realizations durational uncertainty test     instances
benchmark set different levels risk                     obtain
respective pos  compute actual makespans schedules derived
respective pos given realization samples  difference real makespans
obtained poss generated two different decision rule approximations observed
across board examples three sets values except       randomly
select three problem instances benchmark set present results figure   
figure   compares cumulative frequency distributions actual makespans 
observe gnla provided far better realized makespans sla   absolute
terms  well distributionally  j    except   cases  rest actual makespan
  

fifu  lau  varakantham    xiao

  

    
  

   
  
  

   

  

   

  

   

  

  

  

  

  

  

  

  

  

  

 a  results randomly selected j   example      

    

  

   
  
   
  
   
  

   

  

  
  

  

  

  

  

  

  

  

  

 b  results randomly selected j   example      
   
    
   
   
   

   

  

   
   

  
  
  

                                        

 c  results randomly selected j   example       

figure    comparison actual makespans gap g   lines left pictures top indicating  computed   actual simulation  computed g   actual g simulation  

  

firobust local search solving rcpsp max durational uncertainty

values obtained sla higher ones obtained gnla  similar trends
observed j   j   
illustrate difference quality absolute two upper bounds  provide
four lines  computed   actual   computed g actual g   indicating upper
bounds computed using algorithms simulation     samples 
    comparing robust local search enhancements
since  already shown gnla performs better sla  show performance enhancements gnla section  noted enhancements sla provided similar results conclusions gnla based enhancements
outperforming sla based enhancements  since ordering generation heuristic requires
additional rounds robust makespan computation  include benchmark called
 gnla    which gnla plus extra iterations local search  make fair comparison 
avoid complexity considering pairs activities  consider pairs
activities ordering would improve performance  proposed pairs selection
heuristic select pairs activities  number extra iterations local search
 gnla   benchmark number activity pairs picked pairs selection
heuristic times number samples used ordering generation process 
experimental results shows average number activity pairs     instances selected pairs selection heuristic j    j   j             respectively 
work  set        thus  extra iterations  gnla   benchmark
j    j   j                   respectively  performance enhancements shown figure   a   figure   b   figure   c  j    j   j   respectively 
charts  represented x axis robust makespan y axis  so 
lower values better y axis 
given key observations conclusions made results 
irrespective durational uncertainty   gnla rc   gnla og  provide
better robust makespan values  gnla   gnla   j   j   
indicates new robustness feedback chaining heuristic order
determination able provide robust partial ordered schedules j  
j    improvement seems increase number activities  i e 
difference obvious instances j   j    furthermore 
difference consistently observed across problems  however  improvement
consistent j   cases  gnla rc   gnla og 
perform  gnla   gnla    instance j   problems   gnla  
provides better performance  gnla rc   gnla og        
      
extra iterations local search  gnla   improve solution quality
much j    however  improves solution quality j   j    could
optimal solution obtained within      iterations smaller
problems 
cases   gnla rc og  provides lowest robust makespan among
enhancements  thus  og rc enhancements combination degrade
  

fifu  lau  varakantham    xiao

 a  results j  

  

firobust local search solving rcpsp max durational uncertainty

 b  results j  

  

fifu  lau  varakantham    xiao

 c  results j  

figure    comparison robust local search enhancements 

  

firobust local search solving rcpsp max durational uncertainty

mnpm
cb
g

problem size
  
ul     ul     ul  
     
     
     
     
     
     

problem size
  
ul     ul     ul  
     
     
     
     
     
     

problem size
    
ul     ul     ul  
     
     
     
     
     
     

table    comparison cb solver ul uncertainty level  
performance improvement obtained individually  cases  difference
significant j                 hand 
cases  gnla rc og  provide lowest robust makespan 
j                
    comparing jsps durational uncertainty
section  compare performance gnla approach  referred g  
best known solver job shop scheduling problems proposed beck wilson         referred cb   fair comparison two approaches  employ
mean normalized makespan  mnpm  metric defined beck wilson 
n p  a  l   

  x d a  l 
 l 
dlb  l 

    



l set problem instances  d a  l  probabilistic makespan  i e   robust
makespan work  instance l algorithm generated monte carlo simulation 
dlb  l  lower bound probabilistic makespan 
denote best mnpm values aross different algorithms reported beck
wilson cb  compare mnpm values work obtained
replacing d a  l  eqn    upper bound robust makespan pos
generated gnla guided local search  runs         instances took less
minute        instances took    minutes 
table   provides results  performance solver comparable cb solver
across problem instances  comparison illustrates local search mechanism
generic  different types scheduling problems  able provide performance
par near optimal approaches  performance comparable  cb provides
better mnpm values approach due following key reasons   a  approach
exploit structure specific jsps  jobs consisting sequence operations  
hope improve approach exploit near future   b  robust local
search reasons upper bounds  due chebyshev inequality   loose 

   related work
resource constrained project scheduling problem minimum maximum time
lags  rcpsp max   or known resource constrained project scheduling problem
generalized precedence relations  rcpsp gsr  strongly np hard combinatorial optimization problem  even decision problem determining whether
  

fifu  lau  varakantham    xiao

rcpsp max instance feasible solution np complete  bartusch et al         
survey recent developments new applications rcpsp max given
neumann  schwindt  zimmermann        
however  find much study considers rcpsp max uncertainty 
one paper dealing variable durations rcpsp max done lombardi
milano         activity durations range given lower upper bounds 
precedence constraint posting approach  policella  cesta  oddi    smith       
adopted  whereas work  consider rcpsp max durational uncertainty
activity duration modeled random variable known mean variance
values 
research scheduling uncertainty received much attention artificial
intelligence operations research communities  complete survey recent ai
papers robust project scheduling       one may refer work herroelen
leus        production scheduling  aytug  lawley  mckay  mohan    uzsoy 
       broadly  one may classify techniques tackle scheduling uncertainty
two categories  proactive scheduling design priori schedule schedule policy
take account possible uncertainty may occur  reactive scheduling modifies
re optimizes baseline schedule unexpected event occurs  interest
proactive scheduling concerned robust scheduling focuses
obtaining proactive schedules maintain high level performance uncertainty 
main idea proactive techniques build global solution hopefully
need revised execution time  one divide research area three
categories  according information uncertainties taken
account generating robust stable schedules would without using
information  bidot  vidal  laborie    beck            generating one complete generic
schedule proved execute correctly scenarios arising execution 
   generating flexible solution decisions postponed made
execution     generating conditional solution mutually exclusive decisions
developed the one chosen dependent observations execution 
markov decision processes  following  briefly look first two cases since
related work 
    generating generic schedule
first method making generic schedule insensitive online perturbations
produce complete robust schedule taking account possible scenarios  i e 
schedule strong controllability  vidal   fargier         rather dealing execution      confidence  probabilistic techniques proposed build schedules
probabilistic guarantee threshold value optimization metric
makespan  another example generic schedule generation fuzzy scheduling  herroelen   leus         instead stochastic variables probabilistic distributions  fuzzy
set scheduling use fuzzy numbers modeling uncertainties based possibility theory 
recent work rodrguez et al         modeled uncertain durations fuzzy numbers
improved local search solve job shop scheduling problem  following 
  

firobust local search solving rcpsp max durational uncertainty

provide details work related strong controllability probabilistic
techniques 
      strong controllable techniques
strong controllability introduced vidal fargier        simple temporal
networks uncertainty  stnu  controllability achievable polynomial
time  existence uncontrollable events controlled exogenous factors  often referred nature  stnu strongly controllable exists least
one universal schedule suits situation  schedule might computed off line
beforehand  strong controllability strictest form stnu  strongly controllable
network means schedule executed without regard contingent events 
useful applications contingent events cannot observed exactly 
      probabilistic techniques
instead generating global solution suitable realizations uncertainties  probabilistic techniques build schedule probabilistic guarantee deterministic
optimization measure respect threshold value  e g   find schedule
highest probability project makespan exceed particular value 
daniels carrillo        defined  robust schedule one maximum probability achieving given performance level  e g   total flow time greater
given threshold  presented branch and bound heuristic techniques find robust schedule one machine manufacturing context performs best within given
confidence level  job shop scheduling problem  beck wilson        consider
activity durations random variables  given level risk      interested
solution minimal  probabilistic  makespan probability execution
least    
    generating flexible schedule
another way producing robust schedule taking account uncertainty introduce
flexibility schedule  idea subset decisions made offline
rest postponed made online  decisions made information
becomes precise certain  bidot et al          following  discuss three
subcategories works deal generating flexible schedules 
      dynamic controllable techniques
stnu dynamic controllable  vidal   fargier        exists solution
always instantiated incrementally based outcomes contingent edges past 
execution strategy using dynamic controllability needed produce incremental
solution based subsequent revelation contingent events  morris muscettola
       proposed pseudo polynomial algorithm handle dynamic controllability stnus
based constraint satisfaction  techniques proposed wah xin       
optimize bounds durations contingent edges resulting stnu
dynamic controllable 
  

fifu  lau  varakantham    xiao

      redundancy based techniques
redundancy based scheduling another proactive technique scheduling  idea
generate schedule includes allocation extra resources and or time
schedule buffers help absorb impact unexpected events without
rescheduling execution  davenport  gefflot  beck        proposed techniques
generating robust schedules based insertion temporal slacks critical activities allocated possibly breakable resources  lambrechts  demeulemeester 
herroelen        analytically determined expected increase activity duration due
resource breakdown  based information  simulation based time buffering used
protect schedule disruptions caused resource availability 
      partial order schedule  pos 
even buffering  baseline schedules may become brittle face unpredictable execution dynamics quickly get invalidated  instead baseline schedule  another line
work consider design good schedule policies  one example notion
partial order schedules  pos  defined policella et al         seeks retain
temporal flexibility whenever problem constraints allow often absorb unexpected deviation predictive assumptions  considered robustness measures
fluidity flexibility  generating pos another example flexible approaches 
subset sequencing decisions made offline remaining decisions made online
using dispatching rule  bidot et al          different methods generating pos
compared terms robustness resulting schedules work rasconi  cesta 
policella         work  apply concept pos execution policy 
given rcpsp max instance  mean variance values segregated variables
data perturbations level risk  objective work determine pos
locally minimal robust value 
    scenario based optimization scheduling
another line work deals scheduling uncertainty based use
scenarios  scenario based optimization   example  kouvelis  daniels  vairaktarakis
       introduced concept robustness scheduling problems  considered uncertain processing times proposed methods generate robust schedule based
maximum absolute deviation robust solution possible scenarios
given scenario set  shortcoming kind approach scenarios assumed
known advance  scenario space usually exponentially large  noteworthy mention two notions solution robustness quality robustness 
solution robustness  or stability  refers insensitivity actual start times  whereas
quality robustness refers insensitivity solution quality  i e  makespan  different
scenarios  herroelen   leus         another pioneering scenario based optimization work
mulvey  vanderbei  zenios        handles tradeoff solution
robustness  if solution remains close optimal scenarios  model robustness
 if solution remains feasible scenarios  
  

firobust local search solving rcpsp max durational uncertainty

    robust optimization scheduling
recent development operations research saw potential applying concept
robust optimization deal uncertainty  ben tal nemirovski        bertsimas sim        proposed robust optimization models assumptions
underlying probability distribution data needed  idea often approximate
data uncertainty tractable  convex  uncertainty set  optimization performed
set  results robust counterpart formulation conic  such second order
cone  optimization problem solved polynomial time  however 
works reported literature applying robust optimization scheduling 
due mainly high degree combinational nature problem  one application
process scheduling problem chemical engineering  works janak 
lin  floudas        li ierapetritou         notable recent breakthrough
robust optimization tractable approximation models solve stochastic optimization
problems found chen et al          work makes use linear segregated decision rules relevant solving combinatorial scheduling problems durational
uncertainty work exploit mechanism incorporate local search 

   conclusion
given level risk       chosen planner  investigated problem finding
minimum      guaranteed makespan  i e  robust makespan  proposed methods
find schedule policy  pos  uncertainty dynamically realized 
execution policy result solution whose value good robust makespan 
first put forward new decision rule utilized scheduling help specify start times
activities respect execution policy dynamic realizations data uncertainty 
based decision rule  new fitness function derived evaluate robustness 
finally integrated local search framework produce solution
robust makespan  experimental results illustrate improved performance local search
new fitness evaluation  provider tighter bounds robust makespan
better partial order schedules compared existing method 
simplicity adopted upper bound approach assume independence among durational uncertainties  one future work treat correlations
durational uncertainties  since task duration could correlated others real
life  example  correlations occur external event peculiar single
task  universal  weather conditions  seasonal peaks  situations 
durational delays correlated direction  occurs  decision
rules proposed paper break unfortunately  since even covariances
pairs duration variables given  complex analytically model extent
one duration combination  resulting sum max operators 
durations change together  turn complicates analysis variance
makespan variable  hence robust makespan  extending work handle
covariances interesting future direction 

  

fifu  lau  varakantham    xiao

acknowledgments
paper extends previous research lau  ou  xiao        fu  varakantham 
lau         authors wish thank reviewers insightful comments 

references
aytug  h   lawley  m  a   mckay  k   mohan  s     uzsoy  r          executing production schedules face uncertainties  review future directions 
european journal operational research  vol          pp        
bartusch  m   mohring  r  h     radermacher  f  j          scheduling project networks
resource constraints time windows  annals operations research           
       
beck  j  c     wilson  n          proactive algorithms job shop scheduling probabilistic durations  journal artificial intelligence research                 
ben tal  a     nemirovski  a          robust optimization   methodology applications 
mathematical programming             
bertsimas  d     sim  m          robust discrete optimization network flows  mathematical programming           
bidot  j   vidal  t   laborie  p     beck  j  c          theoretic practical framework
scheduling stochastic environment  journal scheduling             
chen  x   sim  m   sun  p     zhang  j          linear decision based approximation
approach stochastic programming  operations research                 
clark  c  e          greatest finite set random variables  operations research 
          
daniels  r     carrillo  j          beta robust scheduling single machine systems
uncertain processing times  iie transactions         
davenport  a  j   gefflot  c     beck  j  c          slack based techniques robust
schedules  proceedings  th european conferences planning  ecp  
dean  b  c   goemans  m  x     vondrak  j          approximating stochastic knapsack
problem  benefit adaptivity  focs  pp         
demeulemeester  e  l     herroelen  w  s          project scheduling   research handbook 
kluwer academic publishers  boston 
fu  n   varakantham  p     lau  h  c          towards finding robust execution strategies
rcpsp max durational uncertainty  proceedings international conference
automated planning scheduling  icaps   pp       
  

firobust local search solving rcpsp max durational uncertainty

hagstrom  j  n          computational complexity pert problems  networks         
    
herroelen  w     leus  r          project scheduling uncertainty  survey
research potentials  european journal operational research  vol          pp 
       
janak  s   lin  x     floudas  c          new robust optimization approach scheduling
uncertainty  ii  uncertainty known probability distribution  computers
chemical engineering             
kolisch  r     hartmann  s          experimental investigation heuristics resourceconstrained project scheduling  update   european journal operational research 
kolisch  r   schwindt  c     sprecher  a          benchmark instances project scheduling problems  pp          kluwer academic publishers  boston 
kouvelis  p   daniels  r  l     vairaktarakis  g          robust scheduling two machine
flow shop uncertain processing times  iie transactions             
lambrechts  o   demeulemeester  e     herroelen  w          time slack based techniques
robust project scheduling subject resource uncertainty  open access publications
katholieke universiteit leuven urn hdl                   katholieke universiteit
leuven 
lau  h  c   ou  t     xiao  f          robust local search application generating
robust schedules  proceedings international conference automated planning
scheduling  icaps   pp         
li  z     ierapetritou  m  g          robust optimization process scheduling
uncertainty  industrial engineering chemistry research                    
lombardi  m     milano  m          precedence constraint posting approach
rcpsp time lags variable durations  proceedings   th international
conference principles practice constraint programming  cp    pp        
berlin  heidelberg  springer verlag 
mohring  r  h          scheduling uncertainty  bounding makespan distribution 
computational discrete mathematics  pp       
mohring  r  h     stork  f          linear preselective policies stochastic project
scheduling  mathematical methods operations research                 
morris  p     muscettola  n          temporal dynamic controllability revisited  proceedings   th national conference artificial intelligence  pp            aaai
press 
mulvey  j  m   vanderbei  r  j     zenios  s  j          robust optimization large scale
systems  operations research     
  

fifu  lau  varakantham    xiao

neumann  k   schwindt  c     zimmermann  j          resource constrained project
scheduling time windows  international series operations research management science             
policella  n   cesta  a   oddi  a     smith  s          solve and robustify  journal
scheduling                      s                 
policella  n   cesta  a   oddi  a     smith  s  f          precedence constraint posting
partial order schedules  csp approach robust scheduling  ai communications 
           
policella  n   smith  s  f   cesta  a     oddi  a          generating robust schedules
temporal flexibility   proceedings international conference automated planning scheduling  icaps   pp         
rasconi  r   cesta  a     policella  n          validating scheduling approaches
executional uncertainty  journal intelligent manufacturing               
rodrguez  i  g   vela  c  r   puente  j     hernandez arauzo  a          improved local
search job shop scheduling uncertain durations  proceedings international conference automated planning scheduling  icaps  
vidal  t     fargier  h          handling contingency temporal constraint networks 
consistency controllabilities  journal experimental theoretical artificial
intelligence           
vonder  s   demeulemeester  e     herroelen  w          classification predictivereactive project scheduling procedures  journal scheduling                 
wah  b  w     xin  d          optimization bounds temporal flexible planning
dynamic controllability  ieee international conference tools artificial
intelligence          
watson  j  p   barbulescu  l   whitley  l  d     howe  a  e          contrasting structured
random permutation flow shop scheduling problems  search space topology
algorithm performance  informs journal computing            
wu  c  w   brown  k  n     beck  j  c          scheduling uncertain durations  modeling beta robust scheduling constraints   computers operations research 
             

  


