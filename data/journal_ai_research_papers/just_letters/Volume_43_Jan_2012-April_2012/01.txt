journal of artificial intelligence research                

submitted        published      

robust local search for solving rcpsp max with
durational uncertainty
na fu
hoong chuin lau
pradeep varakantham

na fu      phdis smu edu sg
hclau smu edu sg
pradeepv smu edu sg

school of information systems 
singapore management university 
   stamford road         singapore

fei xiao

feixiao gmail com

google inc 
     amphitheatre parkway mountain view 
ca       usa

abstract
scheduling problems in manufacturing  logistics and project management have frequently been modeled using the framework of resource constrained project scheduling
problems with minimum and maximum time lags  rcpsp max   due to the importance
of these problems  providing scalable solution schedules for rcpsp max problems is a
topic of extensive research  however  all existing methods for solving rcpsp max assume
that durations of activities are known with certainty  an assumption that does not hold
in real world scheduling problems where unexpected external events such as manpower
availability  weather changes  etc  lead to delays or advances in completion of activities 
thus  in this paper  our focus is on providing a scalable method for solving rcpsp max
problems with durational uncertainty  to that end  we introduce the robust local search
method consisting of three key ideas   a  introducing and studying the properties of two
decision rule approximations used to compute start times of activities with respect to dynamic realizations of the durational uncertainty   b  deriving the expression for robust
makespan of an execution strategy based on decision rule approximations  and  c  a robust
local search mechanism to efficiently compute activity execution strategies that are robust
against durational uncertainty  furthermore  we also provide enhancements to local search
that exploit temporal dependencies between activities  our experimental results illustrate
that robust local search is able to provide robust execution strategies efficiently 

   introduction
research in scheduling has typically considered problems with deterministic durations  in
real world scheduling problems  unexpected external events such as manpower availability 
weather changes  etc  lead to uncertainty about durations of activities  there has been
a growing interest to account for such data uncertainty  herroelen   leus        beck  
wilson        rodrguez  vela  puente    hernandez arauzo        while providing optimized schedules  this paper also focuses on this important issue of durational uncertainty
in scheduling problems  more specifically  we consider scheduling problems where there are
complex resource constraints and temporal dependencies between activities 
c
    
ai access foundation  all rights reserved 

fifu  lau  varakantham    xiao

there are broadly two approaches for tackling scheduling problems with durational
uncertainty  one is to adopt a hybrid of proactive and reactive methods  e g   the work
of vonder  demeulemeester  and herroelen         where an initial baseline schedule is
computed offline  which is then modified  if required  during execution reactively based on
the occurrence of external events  the second approach  e g   the paper by mohring and
stork         is to design schedule policies that provide online decision rules such that at
time t  the policy decides which task s  may start and which resource s  to assign  in this
paper  we adopt the latter approach and focus on the computation of a robust schedule
policy 
from the computational perspective  stochasticity adds a great deal of complexity to the
underlying deterministic scheduling problem  for example  in the infinite resource project
scheduling problem where processing times have two possible discrete values  the problem
of computing the expected makespan  or any point on the cumulative distribution of the
optimal makespan   is  p hard  hagstrom        mohring 
       it has also been shown
p
that for the scheduling problem   stoch pj   dj   d e  wj uj    the problem of computing a
policy  i e   execution strategy  maximizing the probability that some job completes exactly
at the deadline is pspace hard  dean  goemans    vondrak         daniels and carrillo
       consider a one machine scheduling problem with probabilistic durations  with an
objective to capture the likelihood that a schedule yields actual performance no worse than
a given target level  this has been shown to be np hard even though the underlying
deterministic problem can be solved in polynomial time 
the concrete problem of interest in this paper is the resource constrained project
scheduling problem with minimum and maximum time lags  abbrev  rcpsp max   which
is of great importance in manufacturing  logistics and project management  though these
problems have been shown to be np hard  bartusch  mohring    radermacher        
local search based techniques  demeulemeester   herroelen        have achieved great
success in solving these problems  taking a cue from this and the recent advancements in
robust optimization  we propose a robust local search method for solving the rcpsp max
problem under durational uncertainty with a risk management perspective  more precisely 
we  a  employ concepts from robust optimization to compute the robust makespan with
proven success probability  or risk of failure  for an execution strategy  and  b  then use
local search methods for computing an execution strategy that seeks to minimize this robust
makespan 
a recent approach  beck   wilson        provides techniques to compute the robust
baseline schedule from a risk management perspective  where durations of activities are
modeled as random variables  given a value          they were interested to compute a schedule with minimal  probabilistic  makespan where the probability of successful
execution is at least     over all realizations of the durational uncertainty  the main
contribution there was to derive a lower bound for the  makespan of a given schedule by
solving a deterministic problem  they considered the job shop scheduling problem  jsp 
that represents a special case of rcpsp max  which is the problem of interest in this
paper  
unlike in jsps  there are complex resource constraints and activity dependencies in
rcpsp max problems with durational uncertainty  to account for these  we compute an
execution strategy  also known commonly as schedule policy  called partial order schedule
  

firobust local search for solving rcpsp max with durational uncertainty

 pos  instead of a schedule  we combine techniques from robust optimization with classical
local search to compute a pos that minimizes the robust makespan  the robust makespan
is a value for which the probability of realized makespan for any schedule  derived from
pos  does not exceed it is greater than        over all realizations of uncertainty  thus 
we compute an upper bound on makespan values as opposed to lower bound computation
in the work of beck and wilson        
more specifically  we make three key contributions in this paper  firstly  we introduce
two decision rule approximations to define expressions for start times of activities based
on random variables used to represent the durational uncertainties   a  segregated linear
approximation sla  and  b  generalized non linear approximation  gnla   secondly 
we derive expressions for the upper bound on robust makespan by employing the one sided
chebyshevs inequality on the decision rule approximations above  finally  we perform local
search for an execution strategy using the robust makespan upper bound  we also provide
enhancements that consider feedback about robustness of execution strategies to improve
the performance of local search 
in order to demonstrate the effectiveness of our methods  we evaluate the performance on
benchmark problem sets of rcpsp max and job shop scheduling problems  jsps  with
durational uncertainty  furthermore  we make an in house comparison amongst various
enhancements developed in this paper  finally  due to the absence of competing algorithms
for solving rcpsp max problems and to provide an indication of the performance provided
by robust local search  we compare against the existing best solver for jsps with durational
uncertainty 
in the next section  we present a brief background of the models and solution concepts
referred to in this paper  we then present the decision rule approximations in section   and
the computation of robust makespan upper bound in section    the detailed description of
robust local search and its enhancements are provided in section   and section    finally 
the experimental setup and results are provided in section   

   preliminaries
in this section  we briefly describe the notations along with the scheduling models and
robust optimization concepts of relevance to this paper 
    definitions and notations
as given by ben tal and nemirovski         we also classify the variables in a stochastic
optimization problem into   types  adjustable and non adjustable variables 
definition    non adjustable variables are a priori decisions that must be made before the
actual realization of the uncertainty 
definition    adjustable variables  also known as recourse variables  are wait and see
variables that can adjust themselves when part of the uncertain data become known 
for example  in a scheduling problem such as rcpsp with uncertain task durations 
the non adjustable variables will represent the execution policy  e g   the pos proposed by
policella  smith  cesta  and oddi         that need to be constructed a priori  while the
  

fifu  lau  varakantham    xiao

adjustable variables are associated with the actual start times of the tasks  which will be
set with respect to the execution policy and dynamic realizations of uncertainty 
a random variable will be denoted by x and bold face lower case letters such as x
represent vectors 
    rcpsp max
we now describe the deterministic rcpsp max scheduling problem along with the extension to handle durational uncertainty  we also explain the execution policy for an uncertain
duration extension of the rcpsp max 
      deterministic rcpsp max
the rcpsp max problem  bartusch et al         consists of n activities  a    a       an   
where each activity aj  j         n   is to be executed for a certain amount of time units
without preemption  each activity aj has a fixed duration or processing time dj   which is
assumed to be a non negative real number or non negative integer number  in addition 
dummy activities a  and an    with d    dn        are introduced to represent the beginning
and the completion of the project  respectively 
a start time schedule ss is an assignment of start times to all activities a    a       an   i e 
a vector ss    st a     st a        st an    where st ai   represents the start time of activity ai
and st a    is assumed to be    let et ai   be the end time of activity ai   since durations
are deterministic and preemption is not allowed  we then have
st ai     di   et ai   

   

and the project makespan which is also the start time of the final dummy activity st an     
equals
st an        maxi      n et ai   
   
schedules are subject to two kinds of constraints  temporal constraints and resource
constraints  temporal constraints restrict the time lags between activities  a minimum
time lag tijmin between the start time of two different activities ai and aj says that
st aj    st ai    tijmin

   

specially  tijmin     means that activity aj cannot be started before activity ai begins  a
maximum time lag tijmax between the start time of two different activities ai and aj says
that
st aj    st ai    tijmax
   
tijmax     means that activity aj cannot be started after activity ai begins 
in this definition  time lags connect start times of two related activities  known as
start to start time lags  start to end  end to end  end to start time lags can be easily transformed to the general start to start time lags for the deterministic case as given by bartusch
et al          a schedule ss    st a     st a        st an    is time feasible  if all the time lag
constraints are satisfied at the start times st ai    i         n   
a resource unit is reusable and available for another activity once it is no longer used
by the current activity  each type of resource has a limited capacity  ck  k            k 
  

firobust local search for solving rcpsp max with durational uncertainty

units  each activity ai requires rik units of resource of type k where k            k  let
a t     i          n   st ai    t  et ai    be the set of activities which are being processed
at time instant t  a schedule is resource feasible if at each time instant t  the total demand
for a resource k does not exceed its capacity ck   i e 
x
rik  ck  
   
ia t 

a schedule ss is called feasible if it is both time and resource feasible  the objective of
the deterministic rcpsp max scheduling problem is to find a feasible schedule so that the
project makespan is minimized 

figure    project instance 

 

time

figure    example schedule 

  

fifu  lau  varakantham    xiao

example    in figure    we show a simple example of a deterministic rcpsp problem
which is a special case of rcpsp max with only precedence constraints  rather than arbitrary time lags  between activities for expository purposes  each circle indicates an activity
with the number inside the circle representing the activity id  the two numbers on top of
each activity represent the duration and the number of units of the resource required by the
activity  in this example  there are   activities and one type of resource  with the capacity of
the resource limited to     it should be noted that the activities   and    are dummy activities introduced to have a source and sink in the dependency graph  arrows between activities
represent temporal dependencies  a feasible schedule with makespan of    is represented in
figure   
      rcpsp max with durational uncertainty and robust makespan
in this paper  we consider rcpsp max problems with durational uncertainty  the duration
of an activity is specified as a sum of its mean value and its deviation  di   d i   zi   where d i
is the mean of di and zi is the perturbation part with an expected value of   and standard
deviation   it should be noted that irrespective of its distribution type  we can always
represent di as di   d i   zi where d i is the mean and zi is the perturbation part with
e zi        in addition  we also assume that these random variables   zi    corresponding to
durational uncertainty are independent of each other 
similar to the deterministic rcpsp max  the start to start constraints are still deterministic  however  unlike the deterministic case  other types of constraints  end to start
etc   cannot be converted into deterministic start to start constraints   instead the equivalent start to start constraint is a stochastic one as shown in the following expressions for
an end to start constraint  it should be noted that even though the converted constraints
are stochastic  our techniques will still be applicable  with minor modifications  to all types
of time lag constraints  our robust local search techniques depend on the computation
of maximum and sum of random variables and even with stochastic time lag constraints
that remains the case  in this paper  for purposes of exposition  we present our techniques
assuming the temporal dependencies are provided as start to start constraints 
st aj    et ai    tijmax
st aj     st ai     di    tijmax
st aj    st ai    tijmax   di
in the deterministic setting  start time schedules can be computed and values of makespan
can be used to evaluate the performance of the schedule  however  when durational uncertainty is involved  the project makespan becomes a random variable and the schedule
is replaced by an execution strategy  in the following sections  we introduce the partial
order schedule  pos   policella et al          which serves as an execution strategy of the
scheduling project 
given a level of risk          the goal of our problem is to find such a strategy with a minimum value  across all strategies  of the robust makespan  we define the
robust makespan as a makespan value where the probability that any feasible schedule  i e 
an assignment of start times to activities  instantiated from the strategy can be completed
before robust makespan is at least     
  

firobust local search for solving rcpsp max with durational uncertainty

      partial order schedule
a partial order schedule  pos  was first proposed by policella et al          it is defined as
a set of activities  which are partially ordered such that any schedule with total activity order
that is consistent with the partial order is resource and time feasible  mathematically  a pos
can be represented by a graph where a node represents an activity and the edges represent
the precedence constraints between the activities  within a pos  each activity retains a set
of feasible start times  which provide the flexibility to respond to unexpected disruptions 
a pos can be constructed from a given rcpsp instance via a chaining algorithm  where
one such algorithm is described below  
 

figure    example of pos
example    figure   provides a pos for the problem instance introduced in example   
there are    units of the resource and that is shown on the left most side of the figure 
each unit represents a chain  an activity can require multiple resource units and hence
is shown on multiple resource units  for instance  activity   is shown on resource units
     and    a solid arrow between activities represents a temporal dependency provided
in the original problem  solid arrow between activities   and   is one such example  a
dotted arrow between activities represents a temporal dependency that is introduced since
both activities have to be executed on the same resource unit  it is added to remove resource
conflict  an example for this is the dependency introduced between activity   and activity
   for explanatory purposes we only consider one resource type in this example  however
in the most general case  there exists multiple resource types and a dependency diagram for
every resource type 
      chaining algorithm
chaining is a procedure of dispatching activities to different resource units  henceforth
referred to as chains  based on temporal and resource feasibility  during the chaining
process  each activity can be allocated to one or more resource chains based on the number
of resource requirement of the activity  during the chaining process  once an activity is
scheduled to be executed on a resource unit  an additional edge  indicating precedence
  

fifu  lau  varakantham    xiao

relationship  is added between the last activity of the selected chain and this activity so as
to eliminate all possible resource conflicts 
in the following  we describe the basic chaining algorithm proposed by policella et al 
        in this algorithm  a feasible schedule is first obtained using a simple greedy heuristic 
consequently  the pos is constructed through a chaining method as follows  first  the set
of activities are sorted according to their start times given in the feasible solution  then  all
activities are allocated to different chains in that order  where each chain corresponds to a
unit of a certain type of resource  a chain is called available for an activity if the end time
of the last activity allocated on this chain is no greater than the start time of the activity
in the feasible schedule  once an activity is allocated on a chain  a precedence constraint
between this activity and the last activity of the chain is posted  for those activities that
require more than one unit of one or more types of resources  they will be allocated to a
number of chains with the number equal to the overall number of resource units required
by the activity 
example    take figure   for example  given the schedule of figure   as an input activities
are first sorted according to their starting time and the sequence of activities can be presented
as                       the chaining procedure first picks activity   and randomly allocates
it to five chains to fulfill its resource requirement  the available chains are those belonging
to dummy activity   thus  five chains   through   are created which posts the precedence
relationship from the current last activity   to activity    activity   then becomes the last
activity on those chains  activity   is treated in the same way  the available chains for
activity   are those belonging to activity    activity   is then randomly assigned to chain  
through    and an edge between activity   and activity   indicating precedence relationship is
added  this procedure continues until all activities are dispatched to chains that the number
equals its resource requirement  and finally the chained pos   is yielded  however  because
the randomness of the chaining procedure  activity   is allocated to chains that belong to
three different activities  activity    activity   and activity    this will tie together the
execution of three previously unrelated activities   activity    activity     activity    activity
   and  activity    activity     which would decrease the flexibility of execution 
to reduce inter dependencies between activities as much as possible during the chaining
procedure  policella  cesta  oddi  and smith        developed two heuristics  one direct
advantage of such approaches is that synchronization points of a solution can be reduced 
 activities that require more than one resource units are allocated to the same subset of
chains  this is achieved by scanning the list of available chains where the last activity
in the chain    a  requires multiple resource units  and  b  was also previously assigned
another resource unit allocated to the current activity 
 activities with a precedence constraint defined in the original problem are allocated
to the same set of chains  this is implemented by choosing a chain that has a last
activity with precedence constraint with the current activity 
example    figure   provides the pos computed by using the above mentioned chaining
algorithm for the rcpsp problem described in example    when allocating activity   
  

firobust local search for solving rcpsp max with durational uncertainty

 

figure    pos computed with removed synchronization point
the available chains are divided into two sets   chain     chain    and  chain    chain  
chain    the first set contains chains for which the last activity  i e  activity    is already
ordered in problem definition with respect to activity    a chain  for example  chain     is
randomly chosen from this set with the last activity on it as activity    then  the remaining
available chains for activity   is redivided into two sets   chain    and  chain    chain  
chain    the first set contains the chains with activity    i e  the last activity of the first
picked chain  as the last activity and the second set are the remaining  activity   is first
allocated to chains belonging to the first subset to satisfy all remaining resource requirements 
in this case  the synchronization points caused by activities   and    activities   and   being
allocated to different chains has disappeared 
    job shop scheduling problem  jsp  with durational uncertainty
the classical jsp consists of a set of n jobs and a set of m machines  each job ji  i         n 
consists of a sequence of ni operations denoted as oij  j         ni   which have to be
processed in a given order  for
p convenience  we enumerate all operations of all jobs by ok  
where k         n and n   nj   nj   each operation ok has a positive duration denoted
as dk and must be executed on a dedicated machine denoted as mk   once an operation is
started it must be executed for its entire duration  no operations that require the same
resource can overlap in their execution  thus  operations can be partitioned into two sets 
job sets and resource sets  job sets referring to operations corresponding to a job and
resource sets referring to all operations that require the same resource 
a solution s is a total ordering of operations on each resource set  which does not conflict
with the job ordering  a path of a solution s is a sequence of operations which follows both
the job ordering and the ordering on various resource sets of the solution s  the length of
a path is equal to the sum of the durations of the operations in the path  the makespan
of a solution s make s  is the length of the longest path  the minimum makespan of
a jsp problem is defined to be the minimum value of makespans over all solutions  i e 
mins make s   each operation ok is associated with a start time of st ok   and end time of
  

fifu  lau  varakantham    xiao

et ok    a schedule is an assignment of starting times st ok    k         n   to all operations
on the machines  the objective is to find a schedule which optimizes the total makespan
 makespan is the completion time of the last operation   maxn
k   et ok    which is also the
minimum value of the longest path of all solutions  the job shop scheduling problem is
a special case of rcpsp in which resources have unary capacity and each activity  i e 
operation  consumes only one resource 
we can propagate the same notations from rcpsp max with durational uncertainty to
the jsp with durational uncertainty  i e  the processing time of each activity  i e  operation 
dok is now modeled as a sum of an expected value d ok and a random part zok   dok  
d ok   zok   the objective is to find the robust makespan with a given level of risk 
    segregated random variables
a primitive random variable zk is one which has zero mean  examples of a primitive random
variable include u  a  a   uniform distribution between constants a and a  and n      
 normal distribution with mean   and variance       as mentioned earlier  we assume
that every uncertain distribution is equal to the sum of its nominal value  mean  and its
deviation  represented by one  or possibly more  primitive random variable z  in a straight
forward representation  there is only one primitive random variable zk associated with an
uncertain variable  in the recent work by chen  sim  sun  and zhang         each primitive
random variable zk is represented by   segregated random variables zk   read z plus  and zk
 z minus  
z   z    z 

   

z   max  z    

   

 



z   max  z      

   

in the following table    we give examples of the respective values of mean p   m and
variance p     m   for the segregated variables z   and z   
z
u  a  a 
n      

v ar z 

p     m  

p  m

a 

 a 
  
     
 

a
 

 

 
 

table    values of the mean and variance for the segregated variables under uniform and
normal distribution
the underlying assumption with the use of segregated random variables is that the mean
and variance of the individual segregated variables is provided for the random variables
employed  we are not aware of mean and variance values for segregated variables for
distributions other than normal and uniform 
    decision rules for optimization under data uncertainty
in optimization problems with data uncertainty  a decision rule specifies the dependence of
adjustable variables on the uncertainty parameters and the non adjustable variables  let z
  

firobust local search for solving rcpsp max with durational uncertainty

and x denote the set of primitive random variables and non adjustable variables respectively 
an example is the linear decision rule framework proposed by ben tal and nemirovski
        where the setting value of an adjustable decision variable s x  z  is assumed to be
affinely dependent on a subset of the n number of primitive random variables 
s x  z    c   

n
x

ck  x zk

   

k  

where each ck  x      k  n   is a coefficient derived from x 
another example is the segregated linear decision rule framework proposed by chen
et al          where each adjustable decision variable
assumed tobe affinely dependent
   is

  
on a set of some n segregated random variables z    z            zn
  zn   hence  a segregated
linear decision rule has the following general form 
s x  z    c   



pn

k  


 
 
c 
z
 
c
z
k k
k k  

    

as we will show below  a segregated linear decision rule allows us to easily obtain an upper
bound on a subset of random variables  see eqn      which is not possible in the linear
decision rule framework proposed by ben tal and nemirovski        
given the mean and variance for each segregated variable e zk      e zk     k  
 
 
  we can express the expected value and variance of
and v ar zk     mk
v ar zk      pk
any adjustable variable as 
e s x  z     c   

n
x



c 
k k   ck k



    

k  

n n
o
x
      
 

v ar s x  z    
ck pk   ck mk   c 
 
c

k
k k

    

k  

   decision rules for rcpsp max with durational uncertainty
in rcpsp max with durational uncertainty  a decision rule specifies the dependence of
activity start times on the durational uncertainty associated with other activities  to make
the comparison with equation    x represents the pos to be generated  each tasks start
time is associated with the adjustable variable s x  z   where c  represents the earliest start
time of this task under the pos  and ck  x  encodes how task k is related to this task in the
pos 
in a scheduling context  the start time of an activity is dependent on the start times
of the preceding activities  i e  adjustable variables s x  z  are dependent on one another 
any activity will either start after the end of an activity  i e  in series  or after the end
of multiple activities occurring simultaneously  i e  in parallel   thus  adjustable variables
are functions of other adjustable variables through the addition operator  to model serial
activities  and or the maximum operator  to model parallel activities  
  

fifu  lau  varakantham    xiao

given m number of adjustable variables  we may express its sum as an adjustable
variable in the form of a segregated linear decision rule as follows 
pm
 

i   si  x  z 
pm   pn npm    
i   ci  
k  
i   ci k zk

 

pm

 
i   ci k zk

o
 

    

similarly  given some set c of adjustable variables  we may also express the upper bound
on the maximum of these variables as an adjustable variable in the form of a segregated
linear decision rule 
maxic  si  x  z  
n
o p
n
o
p
n


 
 
 maxic  c i     n
max
 c
 z
 
max
 c
 z
 
ic
ic
k  
k  
i k k
i k k

    

more specifically  the output of solving a rcpsp max involves a pos that is represented
as a graph with activities as vertices and precedence constraints between activities as the
edges  given a pos graph  x    v  e   where v is the set of activities and e is the set of
temporal dependencies  an edge  u  v  represents a temporal dependency that states that
activity v should occur after activity u   for any activity v  v   the decision rule for
computing its start time is defined recursively as follows 
sv  x  z    max  d u   zu   su  x  z   
 u v e

    

equation    is a recursive expression that is defined as a combination of sum and maximum on a set of random variables  it should be noted that combinations of sum and maximum of random variables cannot be computed exactly and hence we present two operational
decision rule approximations to evaluate the recursive expression of equation      a  segregated linear approximation sla   and  b  general non linear approximation gnla   it
should be noted that the sv is computable as long as mean and variance of su is computable
and this is demonstrated with both our approximations 
    segregated linear approximation  sla 
in this decision rule  the duration for each activity is defined based on the segregated random
variables introduced in section      for an uncertain duration d with mean processing
time d    we represent d as a sum of three components  its mean d    lateness z    i e 
     
max d  d         and earliness z   i e  max d   d 
d   d    z    z   

    

for a normally distributed duration  i e   z  n        the respective values of mean
and variance for the segregated variables can be summarized as 

e z       e z      
 
       
v ar z       v ar z     
 
 
  

    
    

firobust local search for solving rcpsp max with durational uncertainty

now we describe the computation of sv  x  z  by representing durational uncertainty for
activities using segregated random variables  upper bounds on both the sum and maximum
of random variables are derived as linear functions of segregated variables as illustrated
below 
 sum of random variables   in the case of a project network involving k activities 
any two of which have either precedence constraints in between or competing for the
same resource units  a solution in the form of pos requires computation of the sum of
activity durations  the start time of the activity starting after the k activity project
is expressed as 
p
sk  x   z    z      ki    d i   zi   zi   
    
p
thus  the adjustable variable sk a mean of ki   d i with uncertainty captured by
pk
 
a random variable  which has a positive segregated component of
i   zi and a
pk

negative segregated component of
i   zi   mean and variance of the segregated
variables are known and hence the mean and variance of sk are easy to compute 
 max of random variables  consider activities that are executed concurrently  the
upper bound on the start time of an activity starting after the parallel k activity
project network in sla is represented by a linear function of the positive segregated
components of duration perturbations 
p
    
sk  x   z    z     maxi      k  d i     ki   zi   
thus  the adjustable variable sk has an upper bound on the mean of maxi      k  d i  
with uncertainty
p captured by a random variable with the positive segregated component given by ki   zi  and no negative segregated component  mean and variance of
the segregated variables are known and hence the mean and variance of sk are easy
to compute 
since  in both cases  sum and max  sk is expressed linearly on a subset of random segregated variables  the recursive computation is straightforward  compared with other linear
decision rules  ben tal   nemirovski         the superiority of sla  chen et al         lies
in this ability to linearly express an upper bound on a subset of random variables by dissecting each uncertainty into its positive and negative components  while this approximation
increases tractability and scalability  it comes at the expense of losing accuracy 
    general non linear approximation  gnla 
while sla is efficient  it can typically provide loose upper bounds on robust makespan
due to the linear approximation for computing max of random variables  in this section 
we describe general non linear approximation  gnla   which is not restricted to only
affine dependencies  for clarity and comparison purposes  we use g to denote the start
time instead of s used in sla 
given the mean and variance values of duration uncertainty  we describe the approximation involved in computing mean and variance of the sum and max of activities that will
  

fifu  lau  varakantham    xiao

be used in equation     it should be recalled that irrespective of the distribution of the
 we can always represent d as d   d    z  where d  is the mean of d
uncertain duration d 
and z is the perturbation part  thus  e z      
      sum of random variables
we compute sum of all stochastic durations in a serial k activity project network as follows 
gk  x  z   

k
x

 d i   zi   

    

i  

in this case  we have a similar representation to sla  mean and variance of gk are computed
as follows 
since  zi  i      k are random variables with zero mean  we can then calculate the expected
value as 
k
k
x
x
 
e   di   zi     
d i  
i  

    

i  

because  zi   are assumed to be independent of each other  the variance value is computed
by the following expression 
k
k
x
x
 
v ar   di   zi     
v ar zi   
i  

    

i  

and under normal distribution where zi  n     i    we have
k
k
x
x
v ar   d i   zi     
i   
i  

    

i  

note that the expressions for expected value and variance in the case of serial activities are
identical to the ones used by wu  brown  and beck        
      max of random variables
for ease of explanation  we begin by considering two activities to be executed in parallel
and then extend the analysis to multiple parallel activities  in gnla   unlike in sla  the
max of random variables itself is not approximated but the expected value and variance of
the max are approximately calculated 
expected value and variance of max of two variables
the decision rule to represent the starting time of an activity  which will begin after the
completion of two parallel activities is defined as 
g   z   max d     d       max z    z    
note that we tighten the bound in eqn    by replacing z     z   with max z    z    
  

    

firobust local search for solving rcpsp max with durational uncertainty

we now derive the expressions for expected value and variance of the adjustable variable 
i e   the rhs term of eqn     firstly  we focus on the expected value 
e max d     d       max z    z       max d     d       e max z    z     

    

in the general case  it is difficult to derive an exact expression for e max z    z     and hence 
we provide an upper bound 
in the following propositions   and    we compute expected value and variance for the
more general case of e z      note that we assume e z      for all primitive random variables   we calculate for the more general case because it will be required in the computation
of expected value and variance for more than two random variables  next subsection  
proposition    the expected value for the maximum of two general distributions  z  and
z  with nonnegativepmeans is less than
 
 
v ar z      v ar z       e z         e z       
   e z      e z        
proof  we begin by considering the following two equalities 
max z    z      min z    z      z    z 
max z    z     min z    z       z   z    
we now sum the above two equalities 
 
max z    z       z    z     z   z     
 

    

thus  we can now compute the expected value of the maximum using the following equation 
 
e max z    z        e z      e z      e z   z     
 

    

in addition  by using the definition of variance  we obtain 
v ar z   z      e z   z       e z   z         
therefore 
p
e z   z    p e z   z    
  pe z       e z       e z   e z   
 pe z       e z    
  v ar z      v ar z      e z       e z      
substituting the final expression of eqn    into eqn    yields the bound
p
e max z    z          e z      e z          v ar z      v ar z       e z         e z       

    

    

hence the proof 
note that in this paper  we assume e z       thus  a tighter bound can be obtained
from eqn    
p
    
e max z    z         v ar z      v ar z    
  

fifu  lau  varakantham    xiao

in the special case where  zi    i         k  are normally and identically distributed 
i e  zi  n        we know from the work of clark        that there is a closed form
representation for the expected value of the maximum when k     

e max z    z         

now we focus on deriving expressions for variance of the maximum of two general
distributions  i e   v ar max z    z     
proposition    the variance for the maximum of two general distributions  z  and z  with
nonnegative means is less than v ar z      v ar z          e z            e z       
proof  from eqn     we have
v ar max z    z          v ar z    z     z   z    
      v ar z    z      v ar z   z       cov
p  z    z     z   z     
 
    v ar z    z      v ar z   z        v ar z    z   v ar z   z    
     v ar z    z      v ar z   z     

    

firstly  we consider the following two equations 
v ar z   z      e z   z       e z   z     
 

    

 

v ar z   z      e z   z      e z   z    
subtracting the second from the first yields

v ar z   z      v ar z   z       e z   z        e z   z       
now  we substitute this expression into the last term of eqn    to obtain 
v ar max z    z      v ar z      v ar z          e z     e z           e z   z       

    

when no specific distribution about duration perturbation is known  we can obtain a
bound for v ar max z    z     as 
v ar max z    z      v ar z      v ar z          e z            e z       

    

hence the proof 
note that in this paper  we assume e z       thus  a tighter bound can be obtained
from eqn    
v ar max z    z      v ar z      v ar z    
    
it is interesting to consider the special case when both random variables are normally
distributed  we first state the following lemma   
   this can be found in statistics texts  and found online at http   en wikipedia org wiki halfnormal distribution 

  

firobust local search for solving rcpsp max with durational uncertainty

lemma      if x is normally distributed x  n        then y    x  is half normally
distributed  with
r
 
e y     
 
    

under normal distribution zi  n     i    since z   z  is also normally distributed  and
z   z   n              we can conclude from lemma     that  z   z    follows half normal
distribution with
r
 
e z   z              
 
    

thus  if we substitute this expression into eqn     we can express an upper bound on the
variance value for the maximum duration perturbation of two activities  when zi  n     i  
as  
v ar max z    z         

 
 
                  
  


    

expected value and variance of max of multiple variables
extending from two to k  k      parallel activities  the completion time can be upper
bounded by 
gk  z   max  d i     max  zi   
    
i      k
i      k
in the following  we first compute the variance value of the above rhs term and then
use a similar procedure to compute the expected value  the basic expression for variance
of rhs is 
v ar  max  d i     max  zi      v ar  max  zi    
    
i      k

i      k

i      k

to obtain the value of v ar  max  zi    for general probability distributions  we take
i      k

advantage of the analysis provided for the two parallel activity case above  the following
steps outline the overall idea 
 a  firstly  we group the activity set  a         ak   into a couple set  c         cd k e    where
 

each element cj  j         d k  e  contains two different activities cj    aj    aj    chosen from
the activity set  note that when k is an odd  the final element in the couple set contains
just one activity 
 b  for each couple cj   we apply the maximum operator on duration perturbations of involving activities  denote cj   max zj    zj     where zj  and zj  are duration perturbations
of the two activities involved in cj   then v ar cj   can be calculated based on the expression
for the two parallel activity case 
 c  then we have max  zi     max  cj     note again just one activity is contained in
i      k

j      d k  e

cd k e when k is odd   then  we can build another couple set from  c         cd k e    and the
 
 
same method from steps     and     above is used to compute v ar  max  cj    based on
j      d k  e

eqn    and or eqn    and or eqn    
  

fifu  lau  varakantham    xiao

there are numerous ways  exponential in k  for generating the couple set  c         cd k e  
 
for k activities in parallel  each of these couple sets can lead to different levels of tightness of
derived robust makespan  to compute the grouping which provides the best robust fitness
for random variables with generic distributions is an open problem  instead  we focus on
a heuristic that computes the best grouping under normal distribution zi  n     i    it is
obtained by solving the following optimization problem 
x
max
j  j 
t
    
k
j      b   c

where t denotes the grouping technique and is also the decision variable   cj   is the couple
set constructed from the activity set under grouping method t  j  and j  are the standard
deviations of data perturbation for durations of activities contained in cj   the intuition for
employing this optimization problem is obtained from the equation     it should be noted
that computing a tighter bound on variance implies considering the highest possible value
of the product of primitive variances  hence  the reason for employing the optimization
problem of equation    
proposition    the solution t to the optimization problem of eqn    is obtained by
ordering the k activities in a non increasing order of their variance values and then grouping
all two nearest activities according to the order  i e  cj    aj    aj     where j         b k  c and
the standard deviations are in the following order 
                    b k c   b k c   
 

 

    

proof  suppose we have another grouping method t    in which all elements in the couple
set are the same as under t except two couples   where the ordering is different  i e   cm  
 am    an    and cn    am    an     m    n   where cm    am    am    and cn    an    an   
under t   without loss of generality  assume m   n and from eqn     we have
m   m   n   n   

    

since t  is supposed to provide a solution which is no less   defined in eqn     than t  
i e 
              m  n          n  m          b k c  b k c 
 
 

              m  m          n  n          b k c  b k c   
 
 
therefore  we have
m  n    n  m   m  m    n  n   
which is equivalent to   m   n    n   m       
this contradicts eqn     except the case where all standard deviations are equal  in which
case mixing the order does not affect anything   thus  there exists no such t  which is
different from t by at least two couples and has better objective value  the general case
   it should be noted that if there is an ordering change in only one couple  then the method still produces
the same solution because within a couple the variance computation does not consider the order 

  

firobust local search for solving rcpsp max with durational uncertainty

that t  has multiple  more than two  couples different from t can be easily derived from to
this case  and is omitted due to space constraints  
hence the proof 
as for analyzing the expected value e  max  zi     we apply the same procedure emi      k

ployed to calculate the variance  i e   based on the group solution returned by the above
optimization problem  we first calculate the expected value for each couple and then  get
the final bound following eqn    and or eqn    and or eqn    
at present  we are unable to show the effectivness of our grouping heuristic  equation     analytically in the most general case  however  we show the intuition behind the
grouping heuristic by providing an analytical comparison  on an example where there are
four activities  normally distributed durations  executed in parallel  i e  zi  n     i    and
we assume             no loss of generality  
the representation of makespan under our grouping heuristic  denoted as mheu   and
random grouping  denoted as mran   are  respectively 
mheu   max d     d     d     d       max max z    z     max z    z    
mran   max d     d     d     d       max max z    z     max z    z     
let us first examine mean and variance values of mheu   from eqn     we have
p
e max z    z         p       
e max z    z                  

    

    

from eqn     we have
v ar max z    z                              
v ar max z    z                                

    

from eqn     eqn     eqn    and eqn     we can obtain bounds of mean and variance
values of of mheu are    
q
p
p
p
 
 
 
 
 
 
e mheu    const                                      i   i                 
    
p
v ar mheu               i   i                  
similarly  mean and variance values of of mran can also be calculated 
q
p
p
p
e mran    const                                            i   i                 
    
p
v ar mran               i   i                  
from eqn     bounds of fitness of mheu  denoted by f itheu   and mran  denoted by
f itran   can then be respectively represented as a function of rhs of eqn    and eqn    
we then examine the difference value between the two bounds  f itheu  f itran   let us first
compare the first term of rhs of mean values in eqn    and eqn     since
p
p
p
p
 
 
 
  p
                   p
          
       
   
    
 
 
 
 
 
 
 
 
 
 
                                                        
   the calculation will use the robust fitness function provided in definition    introduced in section   
   note that const in eqn    and eqn    is max d     d     d     d     

  

fifu  lau  varakantham    xiao

and from proposition    we have
                      

    

                                                                  

    

thus 

from eqn     eqn     eqn    and eqn     we have that the bounds of mean and variance
values of mheu are lower than mran   given the robust fitness function in eqn     we
conclude that
f itheu  f itran   

    

which is independent of  and   in other words  our grouping heuristic can provide tighter
fitness bound than random grouping 

   robust fitness function
the makespan  start time of the dummy sink activity  for the rcpsp max with durational uncertainty is a function of non adjustable variables x and random variables representing durational uncertainty z and is represented using s x  z  for sla and g x  z  for
gnla  recall that the robust optimization problem is to find the minimum value f  for
which the following probability bound is observed   
p  s x  z   f          

    

from the one sided chebyshevs inequality  we can obtain a bound for the robust objective value f  as a function of its expected value and variance of the adjustable fitness
function  i e  
q
q
    
v ar s x  z    f   p  s x  z   f          
e s x  z      

hence  we can reformulate our robust optimization problem as follows 
min f 
s t 

e s x  z    

q

q
 


v ar s x  z    f 

    

from this model  we can now derive the robust fitness function which will be used in
our local search framework 
definition    given         and the adjustable fitness function s x  z  defined above 
the robust fitness function  f  x  z     is defined as
r
q
 
f  x  z      e s x  z    
v ar s x  z  
    

the goal of the local search mechanism is to find a local minima of f   in addition  local
search typically requires the fitness function to be computed many times and hence it is
imperative that the computation of fitness function is efficient 
   we show the computation of sla robust fitness function  by substituting s with g  we obtain the
fitness function for gnla 

  

firobust local search for solving rcpsp max with durational uncertainty

    schedule infeasibility of a given pos
it should be noted that the fitness function  f assumes that any schedule generated by the
pos  x is always executable  however  due to durational uncertainty and the maximum
time lags  the schedule is not always executable  a direct way to measure ip r pos  the
probability of infeasibility of the pos  i e  probability that the pos can lead to an infeasible schedule  lies in the computation of the probability of infeasibility of each activity ai
ip r ai    that there does not exist a feasible start time such that all temporal constraints
with respect to ai are satisfied  ip r pos  can be calculated as the probability that at
least one activity is infeasible  however  due to temporal dependencies between activities
providing a theoretical expression for the overall probability of infeasibility is an open problem  therefore  we propose a simulation approach  where we simulate pos execution over
multiple trials to compute this probability eciently and approximately  as an illustration 
we experimented with the benchmark j   instances from the psplib  kolisch  schwindt 
  sprecher        for rcpsp max with additional durational uncertainty that follows a
normal distribution with mean   and variance    we generated      sample realizations for
the pos obtained from sla  and check for infeasibility with respect to the original temporal
 including the maximum time lag  constraints  examples of the probability of infeasibility
obtained by our simulation for psp   psp   and psp   are            and        however 
for the other problems psp   psp  etc  the probability of infeasibility was    because the
maximal time lags were much larger than the variance of durational uncertainty 

   robust local search algorithm
this section will present how the decision rule approximations introduced by sla  gnla
are integrated with the robust fitness function and local search mechanisms to provide a
solution for the problems represented by rcpsp max with durational uncertainty  our
proposed algorithm is outlined as follows  steps         and   are standard steps in a local
search algorithm  steps   and   represent our departure from standard local search to deal
with uncertainty 
   generate initial solution
this is usually obtained using a simple greedy heuristic 
   generate neighborhood of solutions
generate a pool of neighbor solutions from the current solution 
   employ one of the decision rule approximations  sla and gnla  for all
adjustable variables and check feasibility
for each candidate solution x in the solution pool  derive the coefficients ck  x  for
each adjustable variable  subsequently  for each solution check constraint violation
and reject those that are not feasible 
   evaluate robust fitness function f
for each feasible solution x  evaluate f to obtain the robust objective values  the
solution with the lowest robust objective value is the current best robust solution 
  

fifu  lau  varakantham    xiao

   apply penalty  optional 
some advanced local search strategies may require a penalty to be applied to prevent
it from being caught at a local minima  in the case of tabu search for example  a
tabu list is updated when a tabu move is applied  in the case of iterated local search 
a perturbation move will be applied to the current local minima 
   termination criteria
if the termination criteria is met  return the solution with the lowest robust fitness
function value else repeat the optimization cycle by determining the next move 
algorithm   provides the robust local search algorithm guided by decision rule using
   s    s  with g   g   g   we obtain the local search algosla  by substituting snow
now
min
min
rithm using gnla  given the rcpsp max with durational uncertainty and the level of risk
           the algorithm returns the pos with the  locally  minimal robust makespan 
s   or g by gnla   in essence  we perform robust local search on the neighborhood set
of activity lists  an activity list  al  is defined as a precedence constraint feasible sequence
that is used by heuristics to generate earliest start time schedules in solving the standard
rcpsp problem  kolisch   hartmann        
different activity lists are explored by local moves  in our context  we only consider the
activity list as the sequence of activities which satisfy the non negative minimal time lag
constraint  due to the existence of maximal time lag constraint in rcpsp max  scheduling
activities to their earliest possible start time based on the order position in the activity list
may restrict the schedule so much that it may not even return in a feasible schedule  thus 
when we schedule each activity sequentially based on order position in the activity list  we
will assign its starting time by randomly picking a time from its domain of feasible start
times 
according to our experiments  this new randomized approach returns more feasible
solutions than the earliest start time one  after finding a feasible schedule  a pos will be
generated by applying the chaining procedure proposed by policella et al          then 
the s   or g by gnla  value will be computed according to the pos  intuitively  using
the randomized approach may return a schedule with a large baseline scheduled completion
time  however  we can apply the shortest path algorithm on the resulting pos to generate
the earliest start time schedule for a smaller makespan 
as mentioned above  it may be difficult to find a feasible schedule that satisfies minimal
and maximal time lag constraints using the activity list  in fact  we believe that in the set
of all activity lists  many may not yield a feasible schedule  we overcome this problem as
follows  we define the set of activity lists which result in feasible  or infeasible  schedules
as f  or i   we seek to design a local search algorithm with the following characteristics 
a  starting from an activity list in i  the local search should move to an activity list in f
within a short time  b  starting from an activity list in f   the local search should move
to the activity list with the minimal s   or g by gnla value  c  we also diversify the
exploration of activity lists in f by allowing the local search to move from an activity list
in f to an activity list in i  since activity lists in the f region may not be reachable from
one another by simple local moves  this has the flavor of strategic oscillation proposed in
meta heuristics research 
  

firobust local search for solving rcpsp max with durational uncertainty

algorithm   robust local search
   generate an activity list al randomly
   find a start time schedule  ss randomly according to al
   if al  f then
  
p os  chaining ss 

compute snow
according p os
  


  
update smin as snow
   else
  
record the first activity a which cannot be scheduled
   end if
    for i    to max iteration do
if al  i then
   
   
shift activity a ahead in al randomly as al
else
   
   
select two activities b and c in al randomly
   
swap b and c in al as al
   
end if
   
find randomized start time schedule ss  according to al
   
if al   f then
p os    chaining ss   
   
   
compute s  according to p os  

   
if al  i or s   snow
then


   
snow  s
   
al  al 

   
if s   smin
then


smin  s
   
   
end if
   
end if
   
else if al  i then
   
al  al 
   
else
   
p  rand      
if p        then
   
   
al  al 
   
record the first activity a which cannot be scheduled
   
end if
   
end if
    end for

  

fifu  lau  varakantham    xiao

the detailed robust local search procedure is given in algorithm    the procedure starts
by randomly generating an activity list al  which is a sequence of activities that satisfy the
non negative minimum time lag constraint  line     in line    a schedule ss is produced
based on ordering of activities in the activity list al  we first perform domain reduction
on the distance graph using the floyd warshall algorithm  so that the feasible range of the
start time for each activity based on the temporal constraints can be obtained  we then
schedule each activity sequentially based on the order position in the activity list  for each
activity  we first pick a start time randomly from the feasible domain and evaluate resource
constraints for the duration of the activity  i e  check if the current resource capacity exceeds
the resource amount used by that activity   if yes  we set the start time to that activity 
run the shortest path algorithm to reduce domains for the remaining activities  and update
current resource capacity due to consumption of that activity  if the resource constraints
are not satisfied  we will try to set the start time randomly again for a prescribed maximum
numbers of retries  once the start time of current activity is set  we proceed iteratively
to the next activity according to the activity list  in line    chaining   is employed to
generate a pos from a baseline schedule  section         m ax iteration refers to the
maximum number of iterations in the robust local search  we apply two different types of
local moves  to converge quickly to an activity list in f  the first local move is designed
to schedule the activity that is causing a temporal or resource conflict to an earlier time 
it will randomly shift ahead the first activity which cannot be scheduled in the current
activity list  line      when an activity list is in f  the second local move will randomly
pick two activities and swap them in the current activity list  while satisfying the nonnegative minimal time lag constraints  line         the move will be accepted  if it results
in a smaller or equal s  value  line         to explore different activity lists  we include
a small probability to accept the move which leads to an infeasible schedule  line        
the probability to move from an activity list in f to one in i is set at       the minimal
  
s  value will be saved as smin

the worst case computational complexity analysis is given as follows  for each iteration
in local search  there are three major components  randomized schedule generation  pos
construction and fitness calculation  in the process of randomized schedule generation  we
perform domain reduction and resource checking at each iteration  and thus the complexity
is o n   n     h  k  w   where n is the number of activities  h is the maximum planning
horizon  k is the number of types of resources  and w is the prescribed maximum number
of retries for each activity on setting the randomized start time  the pos construction
process works as follows  the set of activities are first sorted according to their start times
in the generated deterministic schedule and the sorting part costs o n  logn    then it
proceeds to allocate each activity the total units needed for each type of resource  let
maxcap be the maximum capacity among all resources  the cost for computing pos is
then o n  logn   n  k  maxcap    when determining the fitness value of generated
pos  we examine edge by edge to check if it is connected in parallel or in serial with
respect to its predecessors and it costs o n   e  where e is the number of edges in pos
 e   n      thus  the worst case complexity of our proposed robust local search algorithm is
o t n   n     h  k  w   k  maxcap    where t is the number of iterations in local search 
  

firobust local search for solving rcpsp max with durational uncertainty

   enhancing robust local search
in this section  we describe two enhancements to improve the basic local search method
described in section    firstly  we describe ordering generation  which is a pre processing
step used to identify precedence ordering between activities  this precedence ordering is
then used to focus the local search over activity lists  secondly  we describe a new chaining
method to generate pos from a feasible schedule 
    ordering generation
ordering generation is a pre processing step that identifies precedence relationships between
pairs of activities  the key idea is that for certain pairs of activities  it is always better
 with respect to robust makespan  to have the same ordering among activities  our goal is
to identify these pairs of activities and employ this ordering to focus the local search over
activity lists and in the chaining method used to compute pos from feasible schedule 
in deciding an ordering between a pair of activities  a and b  there are two key steps 
 i  sample set generation  generate two sets of m activity lists  the first set consists of m
activity lists where a occurs before b  the second set is generated by swapping activities a
and b in every activity list in the first set   ii  order determination  in this step  we first
compute pos and its robust makespan for all activity lists in the two sets  by comparing
the robust makespan values of corresponding activity lists in the two sets  we determine an
ordering between activities  we explain these steps in the following subsections 
for a problem with n activities  there are cn  pairs of activities  if we are to decide the
orders between all pairs  the ordering computation needs to be implemented for cn  times 
which is computationally expensive  based on this observation  we first propose a pairsselection heuristic to selectively choose a certain number of activities pairs whose ordering
can have a significant impact on the robust makespan 
the pairs selection heuristic picks an activity pair   a  if it is not precedence related in
the original problem definition  and  b  if there exists at least one type of resource  where
the total demand of both activities exceeds the resource capacity  the intuition behind
picking such an activity pair is that those two activities cannot be executed in parallel and
deciding an ordering relationship is imperative to eliminate the resource conflict  one main
advantage of the heuristic is that the number of pairs of activities that need to be ordered
is significantly reduced  now  we describe the two steps of ordering generation below 
      sample set generation
we first randomly generate m activity lists as an initial sample set denoted by t   each
element in t is an activity list represented as ali which is a sequence of all activities  where
i         m  i e 
t    ali  ali    a    a       an    i         m   
for each pair of activities  ak   al   resulting from the pairs selection heuristic  we define
two sample sets represented as t ak al and t al ak   t ak al has all the activity lists that are
in t   except that if an activity list has al before ak   then those activities are swapped 
t ak al    aliak al  i         m   
  

fifu  lau  varakantham    xiao

 
 a    a         ak      al      an   if ali    a    a         al      ak      an  
 
where aliak al  
ali
if ali    a    a         ak      al      an  
similarly  t al ak can be constructed by incrementally selecting each activity list from
the initial set t with al  ak and reverse the order if ak  al   i e 
t al ak    alial ak  i         m   
 
 a    a         al      ak      an   if ali    a    a         ak      al      an  
where alial ak  
 
ali
if ali    a    a         al      ak      an  
thus  each activity list in the sample set t ak al share the same positions of all activities
except ak and al with the corresponding activity list in set t al ak   where al precedes ak  
      order determination
we then determine the activity order of each selected pair of activities based on the sample
sets obtained from last phase  for a pair  ak   al    we construct a new instance by posting
a precedence constraint ak  al or al  ak to the original instance  and based on the new
instance  we determine the fitness which are denoted as fiak al and fial ak for aliak al and
alial ak   respectively 
note that aliak al and alial ak share the same elements and the same positions except
the order of ak and al   thus  the order of ak and al can be considered as a reason why the
fitness of aliak al and alial ak differs  to decide the order of ak and al   we define an index
variable denoted as ivak al that measures the percentage of samples where the one with the
order ak proceeds al wins  i e 
p

ivak al   

i

min 

a al
a ak
f k
f l
i
i
ak al
a ak    
 f
f l
 
i
i

m

 

we then define an index parameter for activities ak and al denoted as ipak al as a
benchmark for the index variable ivak al in determining the order of ak and al   the parameter ipak al can be prescribed by users and different values  usually larger than     
represent different levels of confidence that the order of ak and al matters in causing fitness
variance  and thus also represents different controllability of ivak al  
if the value of index variable ivak al is larger than the value of ipak al   we set the order
ak  al since there indicates a higher probability that a  b can provide better robustness
than b  a  if ivak al is less than    ipak al   we set al  ak   and in other cases  no order
between ak and al is settled 
    improved chaining based on robustness feedback
as noted in the preliminaries section  for each activity a  there may exist multiple
choices of resource chains to which it can be assigned  in addition  different chaining heuristics will lead to poses that can have different robust makespan values  in this section  we
propose a new chaining heuristic that dispatches activities to resource chains by predicting
the improvement in robust makespan of the generated pos 
  

firobust local search for solving rcpsp max with durational uncertainty

algorithm   robustness feedback resource chaining  activity a  schedule s  order g 
   c  find set of available chains  c for activity a based on s
   p  collect chains from c with last activity of chain preceding a in problem
   o  collect chains from c with last activity of chain ordered before a in g
   if p     then
  
k  get first available chain in p
   else if o     then
  
k  get first available chain in o
   else
  
k  get first available chain in c
    end if
    post constraint between last activity of chain k  denoted as last k   and activity a
    if a requires more than one resource unit then
   
c   chains in c which have last activity as last k 
   
c   c   c 
   
for all resource units required by a do
   
choose the first available chain belonging to c 
   
if chain above is not feasible then
   
choose the first available chain belonging to c 
   
end if
   
end for
    end if
in the latest chaining method which aims to increase flexibility as described in section        the chains are first randomly picked from a superior subset  i e   chains where
the last activity is already ordered  or chains sharing the same last element   since our objective is makespan related and time becomes a concern  we build on the work of policella
et al         and pick the first available chain wherever available  the updated chaining
method is called robustness feedback based resource chaining 
example    figure   provides the pos provided by this chaining heuristic when used on
example    as can be seen  compared to the pos in    the key difference is the allocation
of activity   and    with our new heuristic  it can be seen that there is more parallelism
and hence reduced robust makespan with high probability 
when employing the ordering generation algorithm in conjunction with the chaining
heuristic  we also consider the information about ordered pairs when allocating resource
units to an activity  the motivation is that once activity a and activity b  for example 
a  b  is ordered  there is a high probability that this precedence relationship can result
in a better solution  algorithm   provides the pseudo code for the robustness feedback
resource chaining heuristic with ordering 

   experimental evaluation
in this section  we first evaluate the scalability and quality of the execution strategies
provided by robust local search and the various enhancements introduced in this paper 
  

fifu  lau  varakantham    xiao

 

figure    pos by robustness feedback chaining
secondly  to establish a benchmark on the performance  we compare against the best known
technique for solving jsp problems with durational uncertainty  it should be noted that
the robust local search method is developed to solve rcpsp max problems with durational
uncertainty and hence does not exploit the structure present in jsp problems  furthermore 
as described earlier  the optimization metrics of both approaches are different 
    experimental setup
we have two sets of problems that we consider and those are described in the subsections
below  additionally  we also indicate the algorithms that are compared on each of the data
sets in this section 
      rcpsp max with durational uncertainty
the problems considered for rcpsp max with durational uncertainty were obtained by
extending the three benchmark sets available for rcpsp max problems  j    j   and
j   as specified in the psplib  kolisch et al          each set contains     problem
instances with duration for each activity ranging between   and     the maximum number
of activities for j    j   and j   are        and     respectively  for each activity ai   we set
the expected value d i of the stochastic duration as the corresponding deterministic duration
given by the benchmarks  and assume that duration uncertainty is normally distributed 
i e  zi  n        henceforth  we refer to j    j   and j   as these rcpsp max problems
with durational uncertainty  we run the algorithms on problems with four different duration
variabilities                     and four increasing levels of risk                           
  

firobust local search for solving rcpsp max with durational uncertainty

on rcpsp max problems with durational uncertainty  we compare the robust local
search that is guided using the two decision rule approximations sla and gnla  furthermore  we also compare the different enhancements to robust local search on rcpsp max
problems with durational uncertainty  we compare five different variants of robust local
search for each decision rule approximation   a   gnla  refers to basic robust local search
guided by gnla decision rule approximation   b   gnla rc  is the robust local search
with the new robustness feedback chaining heuristic guided by gnla   c   gnla   refers
to the basic robust local search with additional local search iterations  where the number
of local search iterations is determined based on the problem set  as described later    d 
 gnla og  is the order generation heuristic on top of gnla guided robust local search 
and finally  e   gnla og rc  has both order generation and robustness feedback
chaining heuristics on gnla guided robust local search 
the number of local search iterations for robust local search was set to       to reduce
the stochasticity effects of robust local search  we average over    random executions for
each problem instance  our code was implemented in c   and executed on a core tm  
duo cpu     ghz processor under fedoracore     kernel linux              fc   i     
      jsp with durational uncertainty
for jsps   gnla  is compared against the probabilistic makespan results provided by
beck and wilson         for the benchmark problems  we consider the instances generated
using an existing generator in the work of watson  barbulescu  whitley  and howe       
with durations drawn uniformly from the interval         specifically  we focus on three
sets of probabilistic jsps of size               where a    problems consists of  
jobs consisting of   activities each  and for each set  three uncertainty levels             are
considered 
    comparison between sla and gnla
we first compare the average robust makespan of     problem instances obtained by robust
local search that is guided by our decision rule approximations proposed in section     and
section      we refer to the robust makespan computed using sla as s  and using gnla
as g   figure   provides these results for all three sets of rcpsp max problems with
durational uncertainty  in these results  we show how the robust makespan is affected by
the level of risk  and the standard deviation  of duration uncertainty  x axis represents
different combinations of risk and standard deviation of durational uncertainty  as shown in
the table of figure    all runs on every instance takes a couple of seconds and hence we do
not report cpu times here  the key observations and conclusions of interest from figure  
are as follows 
 irrespective of the   as the level of risk  increases  the robust makespan decreases
with both sla and gnla  clearly  the lower risk that the planner is willing to take 
the higher is the robust value of the generated execution strategy  our method is
capable of quantifying this trade off  which can help the planner to decide on the
desired strategies 
  

fifu  lau  varakantham    xiao

   

  

g 

s 

  

  

  

  

  
 

 

 

 

 

 

 

 

 

  

  

  

  

  

  

  

 a  results of j  
   
   

g 

s 

   
   
   
  
  
  
 

 

 

 

 

 

 

 

 

  

  

  

  

  

  

  

 b  results of j  
   
   

g 

s 

   
   
   
   
   
   
 

 

 

 

 

 

 

 

 

  

  

  

  

  

 c  results of j  

figure    comparison of robustness between sla and gnla 
  

  

  

firobust local search for solving rcpsp max with durational uncertainty

 irrespective of   as the degree of duration variability  increases  the robust makespan
increases with both sla and gnla  and the value becomes more sensitive to  when
the level of risk is constrained to a small value  e g           
 for lower values of   more specifically for       s  provides lower values of robust
makespan than g   on the other hand  for higher values of                     g
provides superior performance to s    we do not yet understand the reason for drop in
performance for          but this is observed consistently across all the rcpsp max
benchmark problems 
for each problem instance  we also observe some monotonicity between the absolute
difference of robust makespan s  and g and risk values  when the level of risk  takes a
value around       s   sla  has a slightly lower value than g  gnla   however  when
risk becomes more than       the superiority of gnla increases with higher values of risk 
figure   illustrates this on a randomly picked j   instance with      and       the
same pattern is observed across all problem instances of j    j   and j   
   

  

  

  

  

  

  

  

  

s 

  

s 

  

g 

  

g 

  

  

  

  

  

  

                                                    

                                                    

 a  results from a randomly selected j   example  b  results from a randomly selected j   example
with   
with   

figure    comparison of robust makespan 
next  in figure    we compare the quality of the execution strategies obtained by using
sla and gnla  more precisely  we compare the distributions of the actual makespans of
schedules computed using these decision rule approximations  for this purpose  we generate
a set of     samples of realizations of durational uncertainty and test with all     instances
of each benchmark set with different levels of risk                and         to obtain
the respective pos  and then compute the actual makespans of schedules derived from the
respective pos under the given realization samples  this difference between real makespans
obtained from poss generated by two different decision rule approximations was observed
across the board in all examples of the three sets for all values of  except       we randomly
select three problem instances from each benchmark set and present the results in figure   
figure   also compares the cumulative frequency distributions of the actual makespans  we
observe that gnla provided far better realized makespans than sla   both in absolute
terms  as well as distributionally  for j    except in   cases  rest of the actual makespan
  

fifu  lau  varakantham    xiao

  

    
  

   
  
  

   

  

   

  

   

  

  

  

  

  

  

  

  

  

  

 a  results from randomly selected j   example with       

    

  

   
  
   
  
   
  

   

  

  
  

  

  

  

  

  

  

  

  

 b  results from a randomly selected j   example with       
   
    
   
   
   

   

  

   
   

  
  
  

                                        

 c  results from a randomly selected j   example with        

figure    comparison of actual makespans and gap between s  and g   lines in left pictures from top down indicating  computed s    actual s  by simulation  computed g   actual g by simulation  

  

firobust local search for solving rcpsp max with durational uncertainty

values obtained by sla were higher than the ones obtained by gnla  similar trends were
observed for j   and j   
to illustrate the difference of quality in absolute of the two upper bounds  we provide
four lines  computed s    actual s    computed g and actual g   indicating the upper
bounds computed using the algorithms and in simulation over the     samples 
    comparing robust local search enhancements
since  we have already shown gnla performs better than sla  we will only show the performance of our enhancements over gnla in this section  it should be noted that enhancements over sla provided similar results and conclusions with gnla based enhancements
outperforming sla based enhancements  since ordering generation heuristic requires
additional rounds of robust makespan computation  we also include a benchmark called
 gnla    which is gnla plus extra iterations of local search  to make a fair comparison 
to avoid the complexity of considering all pairs of activities  we only consider those pairs
of activities where ordering would improve performance  we proposed the pairs selection
heuristic to select these pairs of activities  the number of extra iterations of local search
for the  gnla   benchmark is the number of activity pairs picked by the pairs selection
heuristic times the number of samples m used in the ordering generation process  the
experimental results shows that the average number of activity pairs of all     instances selected under the pairs selection heuristic for j    j   and j   are        and    respectively 
in our work  we set m        thus  the extra iterations of the  gnla   benchmark for
j    j   and j   are           and       respectively  the performance of all our enhancements is shown in figure   a   figure   b   figure   c  for j    j   and j   respectively 
in all the charts   is represented on the x axis and robust makespan on the y axis  so 
lower values are better on the y axis 
given below are some key observations and conclusions made from the results 
 irrespective of the durational uncertainty   gnla rc  and  gnla og  provide
better robust makespan values than both  gnla  and  gnla   for j   and j   
this indicates that the new robustness feedback chaining heuristic and the order
determination are able to provide more robust partial ordered schedules for j   and
j    this improvement seems to increase further with more number of activities  i e 
the difference is more obvious for instances in j   than in j    furthermore  the
difference is consistently observed across all the problems  however  the improvement
is not consistent for j   and there are cases where  gnla rc  and  gnla og 
did not out perform  gnla  and  gnla    for instance in j   problems   gnla  
provides better performance than  gnla rc  and  gnla og  for         and
       
 the extra iterations of local search in  gnla   do not improve the solution quality
much for j    however  it improves the solution quality for j   and j    this could
be because the optimal solution is obtained within      iterations for the smaller
problems 
 in most cases   gnla rc og  provides the lowest robust makespan among all the
enhancements  thus  the og and rc enhancements in combination do not degrade
  

fifu  lau  varakantham    xiao

 a  results of j  

  

firobust local search for solving rcpsp max with durational uncertainty

 b  results of j  

  

fifu  lau  varakantham    xiao

 c  results of j  

figure    comparison of robust local search enhancements 

  

firobust local search for solving rcpsp max with durational uncertainty

mnpm
cb
g

problem size
  
ul     ul     ul  
     
     
     
     
     
     

problem size
  
ul     ul     ul  
     
     
     
     
     
     

problem size
    
ul     ul     ul  
     
     
     
     
     
     

table    comparison against cb solver ul uncertainty level  
the performance improvement obtained individually  in some cases  the difference is
significant such as in j   for        and          on the other hand  there are
cases where  gnla rc og  does not provide the lowest robust makespan  such as
in j   for        and         
    comparing on jsps with durational uncertainty
in this section  we compare the performance of our gnla approach  referred to as g  
with the best known solver for job shop scheduling problems proposed by beck and wilson         referred to as cb   for a fair comparison of the two approaches  we employ the
mean normalized makespan  mnpm  metric defined by beck and wilson 
m n p m  a  l   

  x d a  l 
 l 
dlb  l 

    

ll

where l is a set of problem instances  d a  l  is the probabilistic makespan  i e   robust
makespan in our work  for instance l by algorithm a generated by monte carlo simulation 
dlb  l  is a lower bound on the probabilistic makespan 
we denote the best mnpm values aross different algorithms reported by beck and
wilson as cb  we compare them with the mnpm values in our work which are obtained
by replacing d a  l  in eqn    with an upper bound of robust makespan from the pos
generated from gnla guided local search  all runs on      and      instances took less
than a minute  while        instances took about    minutes 
table   provides the results  the performance of our solver is comparable to cb solver
across all problem instances  this comparison illustrates that our local search mechanism
is generic  different types of scheduling problems  and is also able to provide performance
on par with near optimal approaches  while the performance is comparable  cb provides
better mnpm values than our approach due to the following key reasons   a  our approach
does not exploit the structure specific to jsps  jobs consisting of a sequence of operations  
we hope to improve our approach to exploit this in the near future   b  our robust local
search reasons with upper bounds  due to chebyshev inequality   which can be loose 

   related work
the resource constrained project scheduling problem with minimum and maximum time
lags  rcpsp max   or known as the resource constrained project scheduling problem
with generalized precedence relations  rcpsp gsr  is a strongly np hard combinatorial optimization problem  and even the decision problem of determining whether an
  

fifu  lau  varakantham    xiao

rcpsp max instance has a feasible solution or not is np complete  bartusch et al         
a survey of recent developments and new applications for rcpsp max has been given by
neumann  schwindt  and zimmermann        
however  we did not find much study that considers rcpsp max under uncertainty 
one such paper dealing with variable durations on rcpsp max is done by lombardi and
milano         where activity durations range between given lower and upper bounds 
a precedence constraint posting approach  policella  cesta  oddi    smith        was
adopted  whereas in our work  we consider rcpsp max with durational uncertainty where
each activity duration is modeled as a random variable with known mean and variance
values 
research on scheduling under uncertainty has received much attention in both artificial
intelligence and operations research communities  for a complete survey of recent ai
papers on robust project scheduling up to       one may refer to the work of herroelen
and leus        and of production scheduling  aytug  lawley  mckay  mohan    uzsoy 
       broadly  one may classify the techniques to tackle scheduling with uncertainty into
two categories  proactive scheduling is to design a priori schedule or a schedule policy that
take into account the possible uncertainty that may occur  reactive scheduling modifies
or re optimizes the baseline schedule when an unexpected event occurs  here our interest
is on proactive scheduling and we are concerned with robust scheduling which focuses on
obtaining proactive schedules that maintain a high level of performance against uncertainty 
the main idea of proactive techniques is to build a global solution which hopefully does
not need to be revised at execution time  one can divide the research in this area into three
categories  according to how and when the information of uncertainties can be taken into
account in generating more robust and stable schedules than they would be without using
this information  bidot  vidal  laborie    beck            generating one complete generic
schedule which is proved to execute correctly in most scenarios arising during execution 
   generating a flexible solution in which some decisions are postponed to be made until
execution     generating a conditional solution in which mutually exclusive decisions are
developed the one being chosen dependent on some observations during execution  like
markov decision processes  in the following  we briefly look at the first two cases since
they are related to our work 
    generating generic schedule
a first method for making a generic schedule that is insensitive to online perturbations is to
produce a complete and robust schedule by taking into account all possible scenarios  i e  a
schedule with strong controllability  vidal   fargier         rather than dealing with execution with      confidence  probabilistic techniques have been proposed that build schedules
with a probabilistic guarantee against a threshold value of an optimization metric such as
makespan  another example of such generic schedule generation is fuzzy scheduling  herroelen   leus         instead of stochastic variables and probabilistic distributions  fuzzy
set scheduling use fuzzy numbers for modeling uncertainties based on possibility theory 
a recent work by rodrguez et al         modeled uncertain durations as fuzzy numbers
and improved local search to solve the job shop scheduling problem  in the following 
  

firobust local search for solving rcpsp max with durational uncertainty

we provide further details on the work related to strong controllability and probabilistic
techniques 
      strong controllable techniques
strong controllability was introduced by vidal and fargier        over simple temporal
networks with uncertainty  stnu  for which controllability is achievable in polynomial
time  with the existence of uncontrollable events that are controlled by exogenous factors  often referred to as nature  an stnu is strongly controllable if there exists at least
one universal schedule that suits any situation  such schedule might be computed off line
beforehand  strong controllability is the strictest form of stnu  a strongly controllable
network means that the schedule can be executed without regard to the contingent events 
it is useful in applications where contingent events cannot be observed exactly 
      probabilistic techniques
instead of generating a global solution suitable for all realizations of uncertainties  probabilistic techniques build a schedule that has a probabilistic guarantee of a deterministic
optimization measure with respect to a threshold value  e g   find the schedule with the
highest probability that the project makespan will not exceed a particular value 
daniels and carrillo        defined a  robust schedule as one that has maximum probability of achieving a given performance level  e g   the total flow time is no greater than a
given threshold  they presented branch and bound and heuristic techniques to find a robust schedule in a one machine manufacturing context that performs the best within a given
confidence level  as for the job shop scheduling problem  beck and wilson        consider
activity durations as random variables  given a level of risk         they are interested
in a solution of minimal  probabilistic  makespan which has a probability of execution of
at least     
    generating flexible schedule
another way of producing robust schedule taking into account of uncertainty is to introduce
flexibility into the schedule  the idea is that only a subset of decisions are made offline and
the rest are postponed to be made online  so that decisions are only made when information
becomes more precise and certain  bidot et al          in the following  we discuss three
subcategories of works that deal with generating flexible schedules 
      dynamic controllable techniques
an stnu is dynamic controllable  vidal   fargier        if there exists a solution that can
always be instantiated incrementally based on the outcomes of contingent edges in the past 
an execution strategy using dynamic controllability is needed to produce an incremental
solution based on the subsequent revelation of contingent events  morris and muscettola
       proposed a pseudo polynomial algorithm to handle dynamic controllability of stnus
based on constraint satisfaction  techniques were proposed by wah and xin        to
optimize the bounds on durations of contingent edges such that the resulting stnu is
dynamic controllable 
  

fifu  lau  varakantham    xiao

      redundancy based techniques
redundancy based scheduling is another proactive technique for scheduling  the idea is
to generate a schedule that includes the allocation of extra resources and or time in the
schedule so that these buffers will help absorb the impact of unexpected events without
rescheduling during execution  davenport  gefflot  and beck        proposed techniques
for generating robust schedules based on the insertion of temporal slacks to critical activities that are allocated on possibly breakable resources  lambrechts  demeulemeester  and
herroelen        analytically determined the expected increase in activity duration due to
resource breakdown  based on this information  simulation based time buffering was used
to protect the schedule from disruptions caused by resource availability 
      partial order schedule  pos 
even with buffering  baseline schedules may become brittle in face of unpredictable execution dynamics and can quickly get invalidated  instead of baseline schedule  another line
of work is to consider design of good schedule policies  one such example is the notion
of partial order schedules  pos  defined by policella et al         which seeks to retain
temporal flexibility whenever the problem constraints allow it and can often absorb unexpected deviation from predictive assumptions  they considered robustness measures such
as fluidity and flexibility  generating pos is another example of such flexible approaches  a
subset of sequencing decisions are made offline and the remaining decisions are made online
by using a dispatching rule  bidot et al          different methods of generating pos were
compared in terms of the robustness of the resulting schedules in the work of rasconi  cesta 
and policella         in our work  we apply the concept of pos as the execution policy 
given an rcpsp max instance  mean and variance values of the segregated variables of
data perturbations and the level of risk  the objective of our work is to determine pos with
a locally minimal robust value 
    scenario based optimization in scheduling
another line of work that deals with scheduling under uncertainty is based on the use of
scenarios  scenario based optimization   for example  kouvelis  daniels  and vairaktarakis
       introduced the concept of robustness into scheduling problems  they considered uncertain processing times and proposed methods to generate a robust schedule based on the
maximum absolute deviation between the robust solution against all possible scenarios in a
given scenario set  a shortcoming of this kind of approach is that all scenarios are assumed
to be known in advance  and that the scenario space is usually exponentially large  noteworthy of mention are the two notions of solution robustness and quality robustness  where
solution robustness  or stability  refers to the insensitivity of actual start times  whereas
quality robustness refers to the insensitivity of solution quality  i e  makespan  to different
scenarios  herroelen   leus         another pioneering scenario based optimization work
is by mulvey  vanderbei  and zenios        which handles the tradeoff between solution
robustness  if a solution remains close to the optimal for all scenarios  and model robustness
 if a solution remains feasible for most scenarios  
  

firobust local search for solving rcpsp max with durational uncertainty

    robust optimization in scheduling
a recent development in operations research saw the potential of applying the concept of
robust optimization to deal with uncertainty  ben tal and nemirovski        and bertsimas and sim        proposed robust optimization models where no assumptions of the
underlying probability distribution of data are needed  the idea is often to approximate
data uncertainty by a tractable  convex  uncertainty set  and optimization is performed on
that set  this results in a robust counterpart formulation as a conic  such as second order
cone  optimization problem which can be solved in polynomial time  however  only a few
works have been reported in the literature on applying robust optimization to scheduling 
due mainly to a high degree combinational nature of the problem  one such application
is the process scheduling problem in chemical engineering  such as the works by janak 
lin  and floudas        and li and ierapetritou         a notable recent breakthrough
in robust optimization on tractable approximation models to solve stochastic optimization
problems is found by chen et al          this work makes use of linear segregated decision rules that are relevant to solving combinatorial scheduling problems with durational
uncertainty and our work exploit this mechanism and incorporate it into local search 

   conclusion
given a level of risk         chosen by the planner  we investigated the problem of finding
the minimum       guaranteed makespan  i e  robust makespan  and proposed methods
to find a schedule policy  pos  such that when uncertainty is dynamically realized  the
execution policy will result in a solution whose value is as good as robust makespan  we
first put forward a new decision rule utilized in scheduling to help specify the start times for
all activities with respect to execution policy and dynamic realizations of data uncertainty 
based on the decision rule  new fitness function was then derived to evaluate robustness 
which was finally integrated into a local search framework to produce the solution with
robust makespan  experimental results illustrate the improved performance of local search
with the new fitness evaluation  which provider tighter bounds on robust makespan and
better partial order schedules compared to the existing method 
for simplicity we have adopted an upper bound approach where we assume independence among the durational uncertainties  one future work is to treat correlations between
durational uncertainties  since a task duration could be correlated with some others in real
life  for example  correlations occur when an external event is not peculiar to a single
task  but more universal  such as weather conditions  seasonal peaks  in such situations 
the durational delays are correlated in the same direction  when this occurs  the decision
rules proposed in this paper break down unfortunately  since even if the covariances of
pairs of duration variables are given  it is very complex to analytically model the extent
to which one duration and any combination  resulting from sum and max operators 
of other durations change together  this in turn complicates the analysis on the variance
of the makespan variable  and hence the robust makespan  extending our work to handle
covariances is an interesting future direction 

  

fifu  lau  varakantham    xiao

acknowledgments
this paper extends previous research by lau  ou  and xiao        and fu  varakantham 
and lau         the authors wish to thank all reviewers for their insightful comments 

references
aytug  h   lawley  m  a   mckay  k   mohan  s     uzsoy  r          executing production schedules in the face of uncertainties  a review and some future directions  in
european journal of operational research  vol          pp        
bartusch  m   mohring  r  h     radermacher  f  j          scheduling project networks
with resource constraints and time windows  annals of operations research           
       
beck  j  c     wilson  n          proactive algorithms for job shop scheduling with probabilistic durations  journal of artificial intelligence research                 
ben tal  a     nemirovski  a          robust optimization   methodology and applications 
mathematical programming             
bertsimas  d     sim  m          robust discrete optimization and network flows  mathematical programming           
bidot  j   vidal  t   laborie  p     beck  j  c          a theoretic and practical framework
for scheduling in a stochastic environment  journal of scheduling             
chen  x   sim  m   sun  p     zhang  j          a linear decision based approximation
approach to stochastic programming  operations research                 
clark  c  e          the greatest of a finite set of random variables  operations research 
          
daniels  r     carrillo  j          beta robust scheduling for single machine systems with
uncertain processing times  iie transactions         
davenport  a  j   gefflot  c     beck  j  c          slack based techniques for robust
schedules  in proceedings of the  th european conferences on planning  ecp  
dean  b  c   goemans  m  x     vondrak  j          approximating the stochastic knapsack
problem  the benefit of adaptivity  in focs  pp         
demeulemeester  e  l     herroelen  w  s          project scheduling   a research handbook 
kluwer academic publishers  boston 
fu  n   varakantham  p     lau  h  c          towards finding robust execution strategies
for rcpsp max with durational uncertainty  in proceedings of international conference
on automated planning and scheduling  icaps   pp       
  

firobust local search for solving rcpsp max with durational uncertainty

hagstrom  j  n          computational complexity of pert problems  networks         
    
herroelen  w     leus  r          project scheduling under uncertainty  survey and
research potentials  in european journal of operational research  vol          pp 
       
janak  s   lin  x     floudas  c          a new robust optimization approach for scheduling
under uncertainty  ii  uncertainty with known probability distribution  computers and
chemical engineering             
kolisch  r     hartmann  s          experimental investigation of heuristics for resourceconstrained project scheduling  an update   european journal of operational research 
kolisch  r   schwindt  c     sprecher  a          benchmark instances for project scheduling problems  pp          kluwer academic publishers  boston 
kouvelis  p   daniels  r  l     vairaktarakis  g          robust scheduling of a two machine
flow shop with uncertain processing times  iie transactions             
lambrechts  o   demeulemeester  e     herroelen  w          time slack based techniques
for robust project scheduling subject to resource uncertainty  open access publications
from katholieke universiteit leuven urn hdl                   katholieke universiteit
leuven 
lau  h  c   ou  t     xiao  f          robust local search and its application to generating
robust schedules  in proceedings of international conference on automated planning
and scheduling  icaps   pp         
li  z     ierapetritou  m  g          robust optimization for process scheduling under
uncertainty  industrial and engineering chemistry research                    
lombardi  m     milano  m          a precedence constraint posting approach for the
rcpsp with time lags and variable durations  in proceedings of the   th international
conference on principles and practice of constraint programming  cp    pp        
berlin  heidelberg  springer verlag 
mohring  r  h          scheduling under uncertainty  bounding the makespan distribution 
in computational discrete mathematics  pp       
mohring  r  h     stork  f          linear preselective policies for stochastic project
scheduling  mathematical methods of operations research                 
morris  p     muscettola  n          temporal dynamic controllability revisited  in proceedings of the   th national conference on artificial intelligence  pp            aaai
press 
mulvey  j  m   vanderbei  r  j     zenios  s  j          robust optimization of large scale
systems  operations research     
  

fifu  lau  varakantham    xiao

neumann  k   schwindt  c     zimmermann  j          resource constrained project
scheduling with time windows  international series in operations research and management science             
policella  n   cesta  a   oddi  a     smith  s          solve and robustify  journal of
scheduling                      s                 
policella  n   cesta  a   oddi  a     smith  s  f          from precedence constraint posting
to partial order schedules  a csp approach to robust scheduling  ai communications 
           
policella  n   smith  s  f   cesta  a     oddi  a          generating robust schedules
through temporal flexibility   in proceedings of international conference on automated planning and scheduling  icaps   pp         
rasconi  r   cesta  a     policella  n          validating scheduling approaches against
executional uncertainty  journal of intelligent manufacturing               
rodrguez  i  g   vela  c  r   puente  j     hernandez arauzo  a          improved local
search for job shop scheduling with uncertain durations  in proceedings of international conference on automated planning and scheduling  icaps  
vidal  t     fargier  h          handling contingency in temporal constraint networks  from
consistency to controllabilities  journal of experimental and theoretical artificial
intelligence           
vonder  s   demeulemeester  e     herroelen  w          a classification of predictivereactive project scheduling procedures  journal of scheduling                 
wah  b  w     xin  d          optimization of bounds in temporal flexible planning
with dynamic controllability  ieee international conference on tools with artificial
intelligence          
watson  j  p   barbulescu  l   whitley  l  d     howe  a  e          contrasting structured
and random permutation flow shop scheduling problems  search space topology and
algorithm performance  informs journal on computing            
wu  c  w   brown  k  n     beck  j  c          scheduling with uncertain durations  modeling beta robust scheduling with constraints   computers and operations research 
             

  

fi