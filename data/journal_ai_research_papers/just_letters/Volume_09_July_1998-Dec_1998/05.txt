journal of artificial intelligence research                 

submitted       published      

the gn m phase transition is not hard for the hamiltonian
cycle problem
basil vandegriend
joseph culberson

department of computing science  university of alberta 
edmonton  alberta  canada  t g  h 

basil cs ualberta ca
joe cs ualberta ca

abstract

using an improved backtrack algorithm with sophisticated pruning techniques  we revise previous observations correlating a high frequency of hard to solve hamiltonian cycle
instances with the gn m phase transition between hamiltonicity and non hamiltonicity 
instead all tested graphs of     to      vertices are easily solved 
when we artificially restrict the degree sequence with a bounded maximum degree 
although there is some increase in diculty  the frequency of hard graphs is still low  when
we consider more regular graphs based on a generalization of knight s tours  we observe
frequent instances of really hard graphs  but on these the average degree is bounded by a
constant  we design a set of graphs with a feature our algorithm is unable to detect and so
are very hard for our algorithm  but in these we can vary the average degree from o    to
o n   we have so far found no class of graphs correlated with the gn m phase transition
which asymptotically produces a high frequency of hard instances 

   introduction

given a graph g    v  e    jv j   n  je j   m  the hamiltonian cycle problem is to find a
cycle c    v    v            vn   such that vi    vj for i    j    vi   vi       e and  vn   v      e   as
for any np c problem  we expect solving it to require exponential time in the worst case
on arbitrary graphs  assuming p    np   however  in recent years researchers examining
various np c problems such as sat and graph coloring have discovered that the majority
of graphs are easy for their algorithms to solve  only graphs with specific characteristics or
graphs which lie within a narrow band  according to some parameter  seem to be hard to
solve for these problems 
it is known  posa        komlos   szemeredi        that under a random graph model
 gn m   as the edge density increases there is a sharp threshold  the phase transition  such
that below that edge density the probability of a hamiltonian cycle is    while above it the
probability is    previous research  section      suggested that there is a high correlation
of dicult problems with instances generated with edge density near the phase transition 
using an improved hamiltonian cycle backtrack algorithm  section    that employs various
pruning operators and an iterated restart technique  we observe no hard instances at the
transition for large n  section   describes our results on gn m and related random graphs 
in an attempt to find a higher frequency of hard graphs  in section   we examine a low
degree random graph class we call degreebound graphs  however  these graphs are also
usually easy for our backtrack algorithm  although we do find a few hard graphs  analysis
of these graphs indicates a test for non hamiltonian instances discussed in section      in
c      ai access foundation and morgan kaufmann publishers  all rights reserved 

fivandegriend   culberson

section   we examine a graph class based on a generalization of the knight s tour problem 
these graphs are significantly harder for our algorithm in general  in section   we present a
constructed graph class which produces exponential behavior for our backtrack algorithm 
our experimental results provide evidence that the average degree of a graph is not a
sucient indicator for hard graphs for the hamiltonian cycle problem  with our backtrack
algorithm  the phase transition regions of the gn m and degreebound graph models are
generally asymptotically easy 

   a discussion of hardness and previous work
the concept of hardness of instances and hard regions within graph classes  considered from
an empirical basis  is not easy to define  in order to clarify what we mean  in this section
we present our notions of hardness  relating this to previous work 

    what is hardness 

a problem of size n is a set n of instances  for the hamiltonian cycle problem  n is
the set of undirected graphs on n vertices  any discussion of the hardness of a particular
instance of a problem is always with respect to an algorithm  or set of algorithms   in
general  different algorithms will perform differently on the instance  furthermore  for each
particular instance of hamiltonian cycle there is an associated algorithm that either correctly answers no or outputs a cycle in o n  time  to meaningfully talk about the hardness
of an instance  we must assume a fixed algorithm  or a finite class of algorithms  that is
appropriate for a large  infinite  class of instances  and then consider how the algorithm
performs on the instance  hardness of an instance is always a measure of performance
relative to an algorithm 
we are left with the question of how much work an algorithm must do before we consider
the instance hard for it  note that for a single instance the distinction between polynomial
and exponential time is moot  ideally  we would like to require the algorithm to take an
exponential  i e  an for some a      number of steps as size n increases  note that empirical
corroboration of such is practically impossible for sets of large instances  in practice  we
must be content with evidence such as failure to complete within a reasonable time for
larger instances 
we would also like an instance to exhibit some robustness before we consider it hard for
a given algorithm  ideally  for graph problems we would at a minimum require the instance
to remain hard with high probability under a random relabeling of the vertices  relabeling
the vertices produces an isomorphic copy of the graph  preserving structural properties such
as degree  connectivity  hamiltonicity  cut sets  etc  the design of algorithms is typically
based on identifying and using such properties  and as far as possible eciency should be
independent of the arbitrary assignment of labels 
let us refer to a  probabilistic  problem class as a pair  n   pn    where pn  x  is the
probability of the instance x given that we are selecting from n   problem classes are
sometimes called ensembles in the artificial intelligence literature  hogg         the usual
classes for graph problems are gn p  where to generate an n vertex graph  each pair of
vertices is included as an edge with probability p  and gn m where m distinct edges are
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

selected at random and placed in the graph  these two models are related  palmer       
for this paper we use the gn m model 
we do not consider mean or average run times in our definitions  the primary reason
is that for exponentially small sets of exponentially hard instances  it is impractical to
determine the average with any reasonable assurance  for example  if    n of the instances
require  n   n   time and the remainder are solved in o n    time then the average time is
quadratic  while if the frequency increases to       n the average time is exponential  even
for n       it would be utterly impractical to distinguish between these two frequencies
with empirical studies 
furthermore  and for similar reasons  if we want to promote a class as a benchmark class
for testing and comparing algorithms  low frequencies of hard instances are not generally
sucient  we will say that a problem class is maximally hard  with respect to an algorithm
or set of algorithms  if the instances generated according to the distribution are hard with
probability going to one as n goes to infinity 
as an example of maximally hard classes  empirical evidence suggests that a variety of
hidden coloring graph generators based on the gn p model are maximally hard for a large
variety of graph coloring algorithms  culberson and luo         these hard classes are
all closely related to a coloring phase transition in random graphs  in general  a phase
transition is defined by some parameterized probability distribution on the set of instances 
as the parameter is varied past a certain threshold value  the asymptotic probability of the
existence of a solution switches sharply from zero to one 
phase transitions are commonly considered to be identified with hard subsets of a particular problem  cheeseman  kanefsky    taylor         many np c problems can be
characterized by a  constraint  parameter which measures how constrained an instance is 
evaluation of a problem using this constraint parameter typically divides instances into
two classes  those that are solvable  and those that are unsolvable  with a sharp transition
occurring between them  when the problem is highly constrained  it is easily determined
that no solution exists  as constraints are removed  a solution is easily found 
different researchers  cheeseman et al         frank   martel        frank  gent   
walsh        have examined phase transitions on random graphs for the hamiltonian cycle
problem  the obvious constraint parameter is the average degree  or average connectivity 
of the graph  as the degree increases  the graph becomes less constrained  it becomes easier
both for a hamiltonian cycle to exist and for an algorithm to find one  these researchers
have examined how hamiltonicity changes with respect to the average degree  frank et
al         and frank and martel        experimentally verified that when using the gn m
model the phase transition for hamiltonicity is very close to the phase transition for biconnectivity  which occurs when the average degree is approximately ln n  or m   n ln n       
cheeseman et al         experimentally confirmed theoretical predictions by komlos and
szemeredi        that the phase transition  for the hamiltonian cycle problem  occurs when
the average degree is ln n   ln ln n  the papers also provided empirical evidence that the
time required by their backtrack algorithms increased in the region of the phase transition
and noted that the existence of very hard instances appeared to be associated with this
transition 
   note that the average degree equals  m n 

   

fivandegriend   culberson

as mentioned above  the k colorable gn p class appears maximally hard for all known
algorithms with respect to a phase transition defined by n  p and k  where k  n  logb n
and b          p   the hamiltonian cycle gn m class on the other hand does not appear
maximally hard for any value of m  in fact  for large n our algorithm almost never takes
more than o n  backtrack nodes and o nm  running time 
we will use a much weaker requirement and say an instance is quadratically hard if it
requires at least n  search nodes by the backtrack algorithm described in section    note
that 
 n    search nodes would take our algorithm 
 n    time  for practical reasons  we will
also use a weaker definition for robustness  and say that an instance is robustly quadratically
hard if our algorithm uses at least n  search nodes when the iterated restart feature is used
with a multiplying factor of     see section   for program details   we say a class is
minimally hard if there is some constant      such that the probability of a hard instance
is at least  as n     
in section   we examine gn m random graphs using our backtrack algorithm on graphs
of up to      vertices  the empirical evidence we collect suggests that in contrast to the
graph coloring situation  the hamiltonian cycle gn m class is not minimally quadratically
hard  even for m at or near the phase transition  and even if we drop our minimal robustness
requirement 
note that we do not dispute the claim that hard instances are more likely at the phase
transition than at other values of m  but rather claim that even at the transition the
probability of generating a hard instance rapidly goes to zero with increasing n 

    random graph theory and the phase transition

these results are not unexpected when one reviews the theoretical work on this graph class 
since asymptotically the graph becomes hamiltonian when an edge is added to the last
degree   vertex  bollobas         any algorithm that checks for a minimum degree   
will detect almost all non hamiltonian graphs  when the graph is hamiltonian  various
researchers  angluin   valiant        bollobas  fenner    frieze        have proven the
existence of randomized heuristic algorithms which can almost always find a hamiltonian
cycle in low order polynomial time  in particular  it is shown  bollobas et al         that
there is a polynomial time algorithm ham such that
 
 
 

 
if cn     
 e  c if cn   c
lim
pr
 ham
finds
a
hamilton
cycle 
 
e
n  
 
 
 
if cn    
where m   n   ln n   ln ln n   cn   
furthermore  as the authors point out  this is the best possible result in the sense
that this is also the asymptotic probability that a gn m graph is hamiltonian  and is the
probability that it has a minimum degree of    in other words  the probability of finding
a cycle is the same as the probability of one existing  given that it is trivial to check the
minimum vertex degree of a graph  this does not leave much room for the existence of hard
instances  for ham and similar algorithms  
another relevant theoretical result is that there is a polynomial time algorithm which
with probability going to one  finds some hamiltonian cycle when a graph has a hidden
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

hamiltonian cycle together with extra randomly added edges broder  frieze    shamir 
       for the algorithm to work  the average degree of a vertex needs only be a constant 
they claim the result can be easily extended to the case that the average degree is a growing
function of n  this is another indication that hamiltonian graphs near the phase transition
will be easy to solve by some algorithm 
for a non hamiltonian graph to be hard for an algorithm it must contain a feature
preventing the formation of a hamiltonian cycle which the algorithm cannot easily detect 
suppose a backtrack algorithm does not check for vertices of degree one  the algorithm may
then require exponential backtrack before determining the non hamiltonicity of the graph 
since the only way it can detect this is by trying all possible paths and failing  however 
degree one vertices are easily detectable  and so are not good indicators of hard instances 
they also disappear at the phase transition 
similarly  an algorithm might not check for articulation points  and as a result waste
exponential time on what should be easy instances  as n      the probability of an
articulation point existing  in gn m   goes to zero as fast as the probability of the existence
of a vertex of degree less than two  other features can lead to non hamiltonicity of course 
such as k cuts that leave k    or more components  bondy   murty         and these could
require time proportional to nk to detect  under the assumption that np  co np there
must also exist a set of non hamiltonian instances which have no polynomial proof of their
status 
however  it seems that at the phase transition the larger the feature the less likely it
is to occur  in fact  the theoretical results summarized above indicate this must happen 
although we know hard graphs exist  and we may expect these localized types of hard
graphs to be more frequent near the phase transition than elsewhere when using gn m to
generate instances  we also expect the probability of such instances to go to zero as n
increases 

   an overview of our backtrack algorithm
our backtrack algorithm comes from vandegriend         and is based upon prior work on
backtrack hamiltonian cycle algorithms  kocay        martello        shufelt   berliner 
       it has three significant features which we will discuss  first  it employs a variety of
pruning techniques during the search that delete edges that cannot be in any hamiltonian
cycle  this pruning is usually based upon local degree information  second  before the
start of the search the algorithm performs initial pruning and identifies easily detectable
non hamiltonian graphs  the third feature is the use of an iterated restart technique 
additionally  the program provides the opportunity to order the selection of the next vertex
during path extension using either a low degree first ordering  a high degree first ordering 
or a random ordering  we normally use the low degree first ordering 
at each level of the search  after adding a new vertex to the current path  search pruning
is used  the pruning identifies edges that cannot be in any hamiltonian cycle and removes
them from the graph   note that if the algorithm backtracks  it adds the edges deleted
at the current level of the search back to the graph   the first graph configuration that
the pruning looks for is a vertex x with   neighbours a  b of degree    since the edges
incident on a and b must be used in any hamiltonian cycle  the other edges incident on
   

fivandegriend   culberson

x can be deleted  the second graph configuration that the pruning looks for is a path
p    v            vk   of forced edges  so v        vk   are of degree     if k   n then the edge v    vk

cannot be in any hamiltonian cycle and can be deleted  if as a result of pruning  the degree
of any vertex drops below    then no hamiltonian cycle is possible and the algorithm must
backtrack  the use of these operators may yield new vertices of degree   and therefore the
pruning is iterated until no further changes occur 
a pruning iteration takes o n  time to scan the vertices to check for vertices with two
degree   neighbors  and o n  time to extend all forced degree two paths  since the iterations
terminate unless a new vertex of degree two is created  at most n iterations can occur  at
most o m  edges can be deleted  on backing up from a descendant  the edges are replaced
 o m   and the next branch is taken  thus  an easy upper bound on the pruning time for
a node searching from a vertex of degree d is o d n    m    but this is overly pessimistic 
note that along any branch from the root of the search tree to a leaf  at most n vertices
can be converted to degree    also note that along each branch each edge can be deleted at
most once  if the degree is high we seldom take more than a few branches before success 
the implementation is such that when several vertices have two neighbors of degree two at
the beginning of an iteration  all redundant edges are removed in a single pass taking time
proportional to n plus the number of edges removed and checked  in practice  on gn m
graphs it typically takes o n   m  time per search node on very easy hamiltonian instances
as evidenced by cpu measurements  with harder instances taking at most twice as long
per search node 
before the start of the recursive search  our algorithm prunes the graph as described
above  then the algorithm checks to see if the graph has minimum degree     is connected 
and has no cut points  if any of these conditions are not true  then the graph is nonhamiltonian and the algorithm is finished 
some non hamiltonian instances may be very easy or very hard to detect  depending
on which vertex the algorithm chooses as a starting point  in these cases local features
exist that could be detected if the algorithm starts near them  but otherwise the algorithm
may backtrack many times into the same feature without recognizing that only the feature
matters  the seemingly hard instance on gn for n       discussed in section     is such a
case  this is one type of  thrashing   and is a common problem in backtracking algorithms 
for example  hogg and williams        noticed a sparse set of very hard   coloring problems
that were not at the phase transition  baker        showed that these instances were most
often hard as a result of thrashing  and that they could be made easy by backjumping or
dependency directed backtracking 
to improve our algorithm s average performance we use an iterated restart technique 
the idea is to have a maximum limit m on the number of nodes searched  when the
maximum is reached  the search is terminated and a new one started with the maximum
increased by a multiple k  so mi     kmi    initially  m   kn  in our experiments  we
used k      by incrementing the search interval in this way  the algorithm will eventually
obtain a search size large enough to do an exhaustive search and thus guarantee eventual
completion  the total search will never be more than double the largest size allocated 
although random restarts are sometimes effective on non hamiltonian graphs  they are
more frequently effective on hamiltonian instances  during search  as edges are added
to the set of hamiltonian edges  the net effect is to prune edges from the graph  for a
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

hamiltonian graph to be hard  the algorithm must select some set of edges which causes the
reduced graph to become non hamiltonian  and this non hamiltonian subgraph must itself
be hard to solve  with iterated restart  for the instance to remain hard the algorithm must
make such mistakes with high probability  as a result  we expect fewer hard hamiltonian
instances 
random restarts are an integral part of randomized algorithms  motwani   raghavan 
      and are used frequently in local search and other techniques to escape from local
optima  johnson  aragon  mcgeoch    schevon        langley        selman  levesque 
  mitchell        gomes  selman    kautz         further discussion of the impact of
restarts can be found in the analysis of the experiments on gn m graphs in section   
the algorithm also provides for the possibility of checking for components and cut
vertices during recursive search after the pruning is completed at each search node  the
overhead of this extra work is o n   m  per search node and rarely seems to pay off  except
where noted these checks were not used in this study 
the experimental results reported in the remaining sections were run on a variety of
machines  the fastest of which is a     mhz pentium ii  all cpu times reported are
either from this machine  or adjusted to it using observed speed ratios on similar tests 
our algorithm terminated execution after    minutes   experimental results are frequently
reported as the ratio of the number of search nodes over the number of vertices  this node
ratio is used because we feel it provides a better basis for comparing results across different
graph sizes  since many of our results are o n   note that the number of search nodes is
calculated as the number of recursive calls performed 
we used several different methods of verifying the correctness of our algorithm and our
experimental results  the algorithm was independently implemented twice  and performs
automatic verification of all hamiltonian cycles found  we performed multiple sets of experiments on generalized knight s circuit graphs and compared the results  graph hamiltonian
or not  to our theoretical predictions  initial sets of experiments on gn m graphs and degreebound graphs were executed using two different pseudo random number generators  and
were repeated multiple times  our source code is available as an appendix 

   gn m random graphs

we consider random graphs of    to      vertices with m   dn    from previous work
 cheeseman et al         komlos   szemeredi        we expect the phase transition to occur
when d  ln n   ln ln n  thus we specify the constraint parameter  or degree parameter 
k   d   ln n   ln ln n  

    gn m using restart

for the premiere experiment  we generate gn m graphs with number of vertices n              
in steps of    n                 in steps of      n        and n         for each size n  the
degree parameter k ranges from                step size      from k                    step size
   since the time limit of    minutes is at least two orders of magnitude greater than the typical running
time  the limit is rarely used  on slower machines this limit was increased  the knight s tour graphs
reported in section   were run on a slower machine with a    minute time limit  although some instances
were run much longer 

   

fivandegriend   culberson

   
   
   
   
   
   
    
    

  hamiltonian

  

  

  

  

 
   

   

 

   
   
degree parameter k

   

   

 

figure      of hamiltonian graphs as a function of graph size and degree parameter for
gn m graphs 
     for other ranges of k   we generate      graphs for each data point and execute our
backtrack algorithm once on each graph  this is a grand total of      million graphs  of
which      million are of     or more vertices 
we use the pruning described in section    check for components and articulation points
after the initial pruning  and use iterated restart with a multiplicative factor of    we do
not check for components or articulation points during the recursive search 
we expect the phase transition for biconnectivity to be very similar to the phase transition for hamiltonicity  cheeseman et al         and we expect the phase transition for
minimum degree greater than   to be almost identical to the phase transition for hamiltonicity  bollobas        komlos   szemeredi         our experimental results matched
these expectations very closely  for the larger graphs of     to      vertices  the percentage
of hamiltonian graphs is plotted against the degree parameter in figure    we found that
the     point at which half the graphs are hamiltonian occurs when the degree parameter
k               more interestingly  all the curves pass close to a fixed point near k     
and it seems they are approaching a vertical line at this point  that is  they appear to be
converging on k    as a phase transition  precisely as theory predicts 
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

n
                             
nodes    n    n    n    n    n    n    n
table    maximum search nodes on gn m for large n
all graphs were solved  that is were either determined to be non hamiltonian  or a
hamiltonian cycle was found  we are primarily interested in asymptotic behavior  since
theories concerning the relation of the phase transition to hard regions are necessarily
asymptotic in nature  for graphs of     vertices or more  the longest running time was
under    seconds  on a graph of      vertices using         or    n  search nodes to find a
hamiltonian cycle 
all of the         non hamiltonian graphs in this range were detected during the initial
pruning of the graph  and thus no search nodes were expanded  of the         hamiltonian
gn m graphs  the vast majority           or        used only n search nodes  which means
that the algorithm did not need to backtrack at all   no quadratically hard graphs were
found in this range  table     lists the maximum number of search nodes expressed as a
factor of n to illustrate the linearity of the search tree 
these results appear to differ from those of frank et al          who found graphs
which took orders of magnitude more search nodes to solve   their hardest graph took
over   million nodes   we believe this is due to two factors  firstly  the algorithm used to
generate the results in their paper did not do an initial check for biconnectivity nor did it
use all of the pruning techniques used in our algorithm  secondly and more importantly  on
the small random graphs they used      vertices  the probability of obtaining certain hard
configurations  such as biconnected and non hamiltonian or non biconnected and minimum
degree     is much higher than when n is larger  as we discussed in section     
the experiments on small gn m graphs  between    and    vertices  confirm this conjecture  in this case we do find a small number of quadratically hard graphs  and a few
very hard graphs  we consider for purposes of this paper  that a very hard graph on less
than     vertices is any that takes at least         search nodes to solve  the very hard
graphs from this set of runs are given in table     
note that the very hardest took less than two minutes to solve  making our designation
of  very hard  questionable  also  note that the smallest graph in this set has    vertices 
somewhat larger than the    vertex examples found by frank et al          this is likely
because we do articulation point checking initially and better pruning  finally  all of these
very hard graphs are non hamiltonian  and all occur in classes that produce less than    
hamiltonian graphs  the hardest hamiltonian graph in contrast required only        search
nodes  on a graph of    vertices with degree parameter     
in figure   we plot the number of graphs that are quadratically hard for these small
graphs  for n from    to     all non hamiltonian graphs were detected during initial
pruning  one non hamiltonian graph at n      required search       n nodes   notice
that the number of quadratically hard hamiltonian graphs is far less than the number of
quadratically hard non hamiltonian graphs  and peaks for larger n  this is in accordance
with the discussion of random restarts in section   
   with    error in this measurement  this means that the algorithm might have backtracked over a
maximum of     n search nodes 

   

fivandegriend   culberson

vertices degree parameter seconds search nodes ratio
  
    
    
               
  
    
    
              
  
    
    
             
  
    
    
             
  
    
    
             
  
    
    
               
  
    
     
               
table    the hardest small graphs

  
non ham
ham

number of hard instances

  

  

  

  

  

 
  

  

  

  
  
  
number of vertices

  

  

figure    the number of quadratically hard graphs for small n 

   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

we ran additional tests for n from    to    in steps of    with the degree parameter
ranging from      to      with step size       generating      graphs at each point  in
this case  we invoked articulation point checking at each search node  again all graphs
were solved without timing out  and some very hard graphs were found  all of them nonhamiltonian  one    vertex graph required           search nodes  and required close to
   minutes to solve  it is unclear whether the extra checking helped  the smallest graph
requiring at least         nodes had    vertices  while the smallest requiring over a million
had    vertices  overall  the results were very similar to the first set of experiments on
small graphs 

    gn using restart
clearly  the more edges we add to a graph  the more likely it is to be hamiltonian  it
also seems that once a graph is hamiltonian  adding more edges makes it less likely to be
hard  in an attempt to find hard graphs for larger n  we modified the gn m generator so
that instead of adding a fixed number of edges  it instead added edges until every vertex
has degree at least two  and then stops  in a sense this produces graphs exactly on the
gn m phase transition  since a minimum degree of two is the condition that asymptotically
distinguishes hamiltonian from non hamiltonian graphs with high probability  we refer to
this distribution as the gn model 
initially we ran      graphs with this generator for n from     to      but no hard
instances were found  we increased the search to        graphs at each n  and included a
search at n         out of all these graphs  we found one very hard graph on     vertices 
even after a second attempt using more than    million search nodes  it was still unsolved 
doing post mortem analysis  we checked for cut sets of size   and   that would leave  
or    or more  components and found none  we also checked the pruned graph using the
odd degree test mentioned in section      but this too failed to show it is non hamiltonian 
finally  we set up our fast machine with unlimited time and no restarts  three search nodes
and less than     seconds later it was proven non hamiltonian 
detailed analysis  see the appendix  shows that the graph has a small feature that is
easily detected when one of a few starting points is selected  because we use an exponentially
growing sequence of searches  we only use a few restarts  in a test of     random starts
with a   second time limit   trials succeeded  using from   to   search nodes each to prove
the graph non hamiltonian 
we also ran        gn graphs at each even value of n from    to     the smallest
instances requiring at least         search nodes were at n       only   graphs requiring
more than a million nodes were found for n        two at n       one at n      and two at
n       two of these  one at     one at     initially timed out  but were solved in second
attempts in about     hour  neither was susceptible to an attack by     restarts as on the
    vertex graph 
table     shows the number of non hamiltonian graphs for each n       all of these
except the one mentioned above were detected during initial pruning  the remaining graphs
were all easily shown to be hamiltonian  with a maximum search ratio of     
clearly the probability of non hamiltonian graphs drawn from gn is decreasing with
n  it seems likely that the probability of hard instances is also going to zero 
   

fivandegriend   culberson

n
                        
non ham                
 
table    number of non hamiltonian graphs from gn

n k        k        k       

   
    
    

    
    
    

    
    
    

    
    
    

table    cpu seconds per      search nodes for gn m graphs

    gn m without using restart

we wanted to know how important the restart feature is asymptotically  we ran      gn m
graphs for n from     to       for each of the parameter settings in the premiere experiment 
but this time using the backtrack algorithm without the iterated restart feature  as before 
all non hamiltonian instances were detected during initial pruning  one quadratically hard
hamiltonian graph was found at n        with degree parameter       which required
         or     n  search nodes and took      seconds  a few other graphs were nearly
quadratic  for example on n        there were   graphs that required     n        n   
    n  and     n  search nodes  it seems that asymptotically  even in the absence of
iterated restarts  the gn m class does not provide hard instances with high probability 

    gn m summary

based on a set of timing runs  we present in table     an indication of how running time per
search node increases with the number of vertices n and degree parameter k  because the
times are usually so short  we cannot get reliable numbers for n        the times shown
are for the evaluation of      search nodes  and are averaged  total cpu divided by total
nodes searched  over graphs that were solved in less than    n search nodes  for instances
that require significantly more search nodes  the time per      nodes seems to increase
somewhat  but there are so few examples for large n that we are unable to provide exact
estimates  for n           the average time per      nodes for instances requiring more
than  n search nodes is      seconds at k              at k        and      at k        
note that this includes at least one instance that took  n search nodes  this table indicates
that the growth is approximately linear in n   m 
the experimental evidence clearly indicates that gn m random graphs are asymptotically
extremely easy everywhere  despite the existence of a phase transition  our results temper
the findings of the various researchers  cheeseman et al         frank et al         frank
  martel        studying phase transitions and the hamiltonian cycle problem  cheeseman et al  s explanation of their observed increase in diculty near the phase transition
was that  on the border  between the regions of low and high connectivity  there are many
   n        is the only value of n for which we have at least one instance requiring   n search nodes at
each of the three values of k  the times for      and      come from separate runs on      graphs per
sample point 

   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

almost hamiltonian cycles that are quite different from each other       and these numerous
local minima make it hard to find a hamiltonian cycle  if there is one   any search procedure based on local information will have the same diculty    cheeseman et al         
unfortunately  while their observations were accurate  their observed hardness was due to
their algorithms and the limited size of the graphs tested  not to intrinsic properties of the
hamiltonian cycle problem with respect to the phase transition on gn m graphs  we have
shown that an ecient backtrack algorithm finds the phase transition region of gn m graphs
easy in general 

   degreebound graphs
intuitively  the reason that it is so hard to generate a hard instance from gn m is that by
the time we add enough edges to make the minimum degree two  the rest of the graph is
so dense that finding a hamiltonian cycle is easy  alternatively  we see that to create a
non hamiltonian property or feature  we must have regions of low degree  while at the same
time meeting the minimal requirements that make the instance hard to solve  this problem
can be characterized as one of high variance of vertex degrees  the only region where we
get even a few hard graphs from gn m is when n is small enough that the average degree is
also low 
to avoid the consequences of this degree variation  in this section we use a different
random graph model gn d    p    d    p           for which n is the number of vertices and
di   pi is the percentage of vertices of degree i  as an example g     d         d        
represents the set of graphs of     vertices in which    are of degree   and    are of degree
   we refer to a graph generated under this model as a degreebound graph  in this paper
we only consider graphs whose vertices are of degree   or   
it is quite dicult to generate all graphs with a given degree sequence with equal probability  wormald         instead  we adopt two variations which generate graphs by selecting
available edges  in each case each vertex is assigned a free valence equal to the desired final
degree  in version   pairs of vertices are selected in random order  and added as edges
if the two vertices have at least one free valence each  this continues until either all free
valences are filled  a successful generation  or all vertex pairs are exhausted  a failure   if
failure occurs  the process is repeated from scratch  initial tests indicate about     of the
attempts fail in general  for eciency reasons  in the implementation an array of vertices
holds each vertex once  pairs of vertices  v  w are selected at random from the array and
if v    w  and  v  w  is not already an edge  then  v  w  is added as an edge  and the free
valence of each of v and w is reduced by one  when the free valence of a vertex is zero  the
vertex is deleted from the array  this step is repeated until only a small number  twice the
maximum degree  of vertices remains  and then all possible pairs of the remaining vertices
are generated and tested in random order 
in version   an array initially holds each vertex v deg v  times  pairs of vertices are
randomly selected  and if not equal and the edge does not exist  then the edge is added  and
the copies of the two vertices are deleted from the array  this is repeated until the array is
empty  or     successive attempts have failed to add an edge  the latter case is taken as
failure  and the process is repeated from scratch  this method seldom fails 
   

fivandegriend   culberson

neither of these two methods guarantees a uniform distribution over the graphs of the
given degree sequence  for example  given the degree sequence on five vertices f             g 
there are seven possible  labeled  graphs  one consists of two components  an edge and a
triangle  the other six are all four paths  thus all six are isomorphic to one another  of the
    permutations of the pairs of vertices          generate the graph on two components 
while for each four path there are         distinct permutations  the remaining permutations          do not yield a legal graph  thus  the first graph is      times as likely as
any of the other six  of course  a four path  counting all isomorphic graphs  is       times
as likely as the two component graph 
on the other hand  a version   test program  not our generator which prohibits degree
one vertices  consistently generated the first graph about        more often than any of
the others  based on several million random trials 

    experimental results on degreebound graphs

we test graphs of               vertices  step size           and      vertices with the mean
degree varying from                step size of      from      to       step size of      elsewhere  
we generate      graphs for each data point  execute our algorithm once on each graph 
and collect the results  this test was repeated for each of the two versions 
figure   shows the percentage of graphs which are hamiltonian as the mean degree and
graph size varies    there is a clear transition from a mean degree of      near    chance of
a hamiltonian cycle  to a mean degree of    for which robinson and wormald       predict
an almost      chance of a hamiltonian cycle on uniformly distributed graphs   for a
phase transition  we would expect the slope to grow steeper as the graph size increases 
figure   shows this increase in steepness 
note that the double points on the curve for n       are due to unavoidable discretization  since the total degree of a graph must be even  when the generators detect that the
total degree specified is odd  one of the minimum degree vertices is selected and its degree
incremented  thus  for example  whether the fraction of degree   vertices specified is      or
      the number of degree three vertices is     discretization effects also occur for n       
    and       but with lessened impact 
in table     we summarize the observed hard instances from these graphs  we note
that several instances exceeded our time bounds  and although these are certainly at least
quadratically hard  they are not included in the quadratically hard instances  the frequency
of hard instances appears to be decreasing with n on these graphs  in particular there are
no quadratically hard non hamiltonian instances over      vertices  except those that are
too hard to solve with our program 
interestingly  there turns out to be an o n   m  time test which shows that most of
the unresolved instances are non hamiltonian  this test is described briey in section     
we implemented the test as a separate program and tested each of the unresolved graphs 
with the results indicated in the last column of table      the remaining five graphs
remain unresolved  if this test were included in the initial pruning of our program  then
the instances enumerated in the last column of table     would all be solved  proven nonhamiltonian  without search 
   for these graphs  the mean degree is     plus the fraction of degree   vertices 

   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

   
version  
n      
   
   
   
   
    
    

  hamiltonian

  

  

  

  

 
  

  

  

  
  
  
  vertices of degree  

  

  

   

   
version  
n      
   
   
   
   
    
    

  hamiltonian

  

  

  

  

 
  

  

  

  
  
  
  vertices of degree  

  

  

figure      of hamiltonian graphs for degreebound graphs 
   

   

fivandegriend   culberson

version  
number of quadratically hard timed out
vertices no hc
hc
total no hc
   
 
 
 
 
   
  
 
 
 
   
 
 
  
  
   
 
 
  
  
   
 
 
  
  
    
 
 
 
 
    
 
 
 
 
version  
number of quadratically hard timed out
vertices no hc
hc
total no hc
   
 
 
 
 
   
 
 
 
 
   
  
 
  
  
   
 
 
  
  
   
 
 
  
 
    
 
 
 
 
    
 
 
 
 
table    number of hard graphs for degreebound graphs
thus  although these classes may provide a small rate of hard instances for our current
program  it is not clear they are even minimally hard  furthermore  it appears there exist
simple improvements to our program that would eliminate most of these hard instances 
in figure   we illustrate the distribution of the graphs that timed out  the other
quadratically hard graphs had similar distributions  about all that can be concluded is
that the hard instances seem to be distributed over a mean degree range from      to      
the backtrack program is a little faster on degreebound graphs than on gn m graphs 
as we would expect given fewer total edges  for      vertices  the times per      search
nodes ranged from      seconds for the easiest  no backtrack  instances to      seconds for
the harder ones 

    analysis of degreebound graphs

an analysis of the degreebound graph class led us to conjecture that the prime factor
determining the hamiltonicity of a graph was whether or not the graph had a degree  
vertex with   neighbours of degree    we label this a  d  configuration  or a  d  event  
a graph with a  d  configuration is non hamiltonian  the following informal analysis
provides evidence for our conjecture 
let e  n    represent the expected number of  d  configurations in a graph with n
vertices  let d    n be the number of degree   vertices and d          n the number of
d     n  n             assuming
degree   vertices  note that the mean degree d    d    
n
n
equal probability of all combinations 
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

number failed
version  

 
 
 
 

  

 
  
   

     degree  

   
    
number of vertices

  
    

number failed
version  

 
 
 
 

  

 
  
   

     degree  

   
    
number of vertices

  
    

figure    distribution of timed out instances for degreebound graphs
   

fivandegriend   culberson

  of mean degree for     hc point
vertices experimental
theoretical
   
    
    
   
    
    
   
    
    
   
    
    
   
    
    
    
    
    
    
    
    
table    experimental and approximate theoretical values for the location of the    
hamiltonian point for degreebound graphs of various sizes 

e  n      d 

 d  

 n   
 

  

n       n
  n  n      n     
   n       n    n  
   n      n     
 

we restrict ourselves to the asymptotic case  n      which gives us

e  n     n    n   n   n       
 

when e  n         the probability of having configuration  d  approaches    we
want to find  for which n            as n      this occurs when    o n       
since a hamiltonian cycle cannot exist if e   d        this tells us that the phase transition
asymptotically occurs when the mean degree equals    asymptotically  degreebound graphs
with d     are expected to be non hamiltonian while degreebound graphs with d    
are expected to be hamiltonian  ignoring other conditions   this agrees with results of
robinson and wormald        who proved that almost all   regular graphs are hamiltonian 
if we let    n     this gives us e  n        substituting this equation in our expression
for mean degree gives us d       n       table     lists mean degrees for different values of n
using this formula along with our experimentally determined values for the point where    
of the graphs are hamiltonian  they are remarkably similar  this suggests that the  d 
configuration is the major determinator of whether a degreebound graph will be hamiltonian or not  minor effects  which we have ignored  come from propagation of deleted edges
while pruning and other less probable cases such as those mentioned in section      since
the  d  configuration is detected by our algorithm before the search is started  this also
implies that the phase transition will be easy for our algorithm  since most non hamiltonian
graphs are instantly detected  this matches our experimental observations 

    a non hamiltonicity test for sparse graphs

while preparing the final version of this paper  we observed that in the  d  configuration
we could replace the vertex of degree three with a component of several vertices  in general 
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

if there are three vertices of degree two that form a minimal cut then the graph is nonhamiltonian  in fact  we can replace the three vertices by a minimal cut of any odd number
c of degree   vertices  and the claim of non hamiltonicity remains true 
checking all possible subsets of size c would be very expensive  but fortunately there is
an even more general condition that includes all of these as special cases and can be tested in
linear  i e o n   m   time  let f be a set of edges that are forced to be in any hamiltonian
cycle if one exists  for example  edges incident on a vertex of degree two are forced  let
g    g   f be the graph formed by deleting the forced edges from g  let c        ch be
components of g   and define the forced degree of component ci to be the number of end
points of forced edges  from f   in ci   if any component has an odd forced degree  then g
is non hamiltonian 
the proof of correctness of this test is simple  observe that if there is a hamiltonian
cycle in g then while traversing the cycle each time we enter a component  there must be a
corresponding exit  since the forced edges act as a cut set  that separates the components  
they are the only edges available to act as entries and exits to a component  all forced edges
must be used  therefore  if there is a hamiltonian cycle there must be an even number of
forced edges connecting any component to other components  each contributing one to the
forced degree of the component  each forced edge internal to  with both end points in  a
component contributes two to the forced degree  so if there is a hamiltonian cycle the total
forced degree of each component must be even 
to obtain the results in the last column of table      we first did the initial pruning  and
then applied the test to the pruned graphs  using only the forced edges incident on degree
two vertices 

   generalized knight s circuit graphs
in this section we examine a graph class based upon the generalized knight s circuit problem
in which the size of the knight s move is allowed to vary along with the size of the  rectangular  board  an instance of the generalized knight s circuit problem is a graph defined by
the   tuple  a  b     n  m where a  b is the size of the knight s move and n  m is the size
of the board  the vertices of the graph correspond to the cells  and thus jv j   nm  two
vertices are connected by an edge if and only if it is possible to move from one vertex to
the other by moving a steps along one axis and b along the other   see vandegriend      
for more information about this problem  
for this graph class there is no easy way to define phase transitions since there is
no clear parameter which separates the hamiltonian graphs from the non hamiltonian
graphs  although vandegriend       shows that there are ways of identifying groups of
non hamiltonian graphs   thus to find hard graphs  we look for graphs which take a significant amount of time to solve relative to their size  we perform   trial per graph  problem
instance  and report the ratio of search nodes to number of vertices 
we examined a total of     generalized knight s circuit graphs over ranges of a  b  n  m
 specific a  b  n triplets with m allowed to vary  for a   b     n      m       they
ranged in size from    to     vertices  of the     instances examined      graphs       
were found to be hamiltonian and     graphs        were found to be non hamiltonian 
   

fivandegriend   culberson

search nodes   of trials   of trials

 n
 
   
 n
  
    
  n
  
    
  n
  
   
  n
 
   
   n
 
   
   n
 
   
   n
 
   
    n
 
   
    n
 
   
    n
 
   
     n
 
   
     n
 
   
     n
 
   
table    histogram of the search node ratio of our backtrack algorithm on     hamiltonian
generalized knight s circuit instances 
for the remaining    graphs        our backtrack algorithm failed  reached the    minute
time limit   which implies these graphs are very hard for our backtrack algorithm 
a majority       of the non hamiltonian graphs were solved without any search  however  a significant number of the remaining graphs took many search nodes to solve   
graphs        took more than   n nodes and   graphs        took more than    n nodes 
the hardest graph took       n search nodes  n         so while the majority of the
non hamiltonian graphs were easy  a significant percentage of these generalized knight s
circuit graphs were quite hard for our algorithm 
a larger variance in hardness was observed with the hamiltonian graphs  table   shows
the distribution with respect to the number of search nodes required  unlike gn m and
degreebound graphs  these graphs could not be solved in only n search nodes  almost
all the graphs required at least  n search nodes      of the graphs required at least   n
nodes      required at least    n nodes and the hardest graph required       n nodes
 n        

   a hard constructed graph class
it is worthwhile when designing an algorithm to determine under what conditions and how
frequently it might fail to perform and just how badly it might do  the measure can be
in terms of how bad an approximation is  or how long an exact algorithm may take in the
worst case  there is a long tradition of designing instance sets that foil specific combinatorial algorithms  johnson        mitchem        olariu   randall        spinrad   vijayan 
       other special classes are intended to be more general  and are frequently based on
certain features or constructs together with some randomization to hide the features  culberson   luo        brockington   culberson        kask   dechter        bayardo jr   
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

schrag         the gn m class is frequently used to study graph algorithms over all possible
graphs 
in this section we consider a special construction for a hamiltonian graph which is
extremely hard  exponential increase in diculty with size  for our backtrack algorithm 
it consists mostly of special constructs tied together with some randomly chosen edges  it
bears some resemblance to graphs such as the meredith graph  bondy   murty        used
to disprove certain theoretical conjectures  this graph remains dicult when we vary the
neighbour selection heuristic or pruning techniques used by our backtrack algorithm  the
graph we construct we refer to as the interconnected cutset  iccs   graph 
our class is intended merely to show that exponentially hard classes clearly exist for
our algorithm  and many other backtrack algorithms using similar approaches  we do not
claim our graphs are intrinsically hard  as there is a polynomial time algorithm that will
solve this particular class 
the basic concept we use in constructing these graphs is the non hamiltonian edge 
which we define as an edge which cannot be in any possible hamiltonian cycle  note that
since the graphs are hamiltonian  each vertex must be incident on at least two edges which
are not non hamiltonian  our goal is to force the algorithm to choose a non hamiltonian
edge at some point  the key observation is that once such an edge is chosen  the algorithm
must backtrack to fix that choice  with multiples of these bad choices  after backtracking
to fix the most recent bad choice  the algorithm must eventually backtrack to an earlier
point to fix a less recent bad choice  which means the more recent choice must be redone 
with the algorithm making the bad choice again  the amount of work performed by the
algorithm is at least exponential in the number of bad choices  see vandegriend        for
more details 
the iccs graph is composed of k identical subgraphs iccss arranged in a circle 
to force the desired cycle we have a degree   vertex between each subgraph  since each
subgraph has a hamiltonian path between the connecting vertices  the iccs graph is
hamiltonian  due to the construction of the iccs subgraph  extra non hamiltonian edges
can be added between different subgraphs  these edges help prevent components from
forming during the search  which greatly reduces the effectiveness of the component checking
search pruning  see figure    heavy lines are forced edges that must be in any hamiltonian
cycle 
figure   contains a sample iccs subgraph  non hamiltonian edges are denoted by
dashed lines  and forced edges are denoted by heavy lines 
to see that the dashed lines cannot be part of any hamiltonian cycle observe that
any path through the iccss must enter and exit on an sc vertex  and between any two
sc vertices in sequence the path can visit at most one si vertex  thus  each such path
uses at least one more vertex from sc than from si   since initially jsc j   jsi j      any
hamiltonian cycle can enter and exit the iccss only once  and must alternate between
sc and si vertices  since the st vertices only have one edge leading to an si vertex 
these edges are forced  this also allows us to interconnect subgraphs without adding new
hamiltonian cycles by connecting vertices of sc of two different subgraphs  since these
additional edges are all non hamiltonian edges   by interconnecting the subgraphs in this
fashion  we strongly reduce the effectiveness of checking for components or cut points during
the search  in the current implementation  for each vertex in each sc we randomly choose a
   

fivandegriend   culberson

iccss

iccss

iccss

iccss

figure    a sample iccs graph 

si

sd
sc
st

st

to

sc vertices

in other subgraphs

connecting edges to adjacent subgraphs

figure    a sample iccs subgraph iccss  
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

vertex in another sc and add the edge  thus  the average number of such edges per vertex
is a little less than two  since some edges may be repeated 
one additional design element was added to handle various degree selection heuristics
that our algorithm could use  at each stage in the search  the neighbours of the current
endpoint of the partial path are arranged in a list to determine the order in which they will
be chosen by our backtrack algorithm  there are   main heuristics  sorting the list to visit
lower degree neighbours first  sorting to visit higher degree neighbours first  and visiting in
random order   our backtrack algorithm normally uses the lower degree first heuristic  
the sd vertex in the iccs subgraph is used to fool the low degree first heuristic  the
sd vertex is only incident to the two st vertices and to two vertices in si   which makes
it degree    when the algorithm enters a subgraph from the degree   connecting vertex  it
reaches one of the st vertices  from the st vertex  the choices are the sd vertex  degree
   and the one si vertex  degree jsc j      because it is not connected to the sd vertex and
the other st vertex   if jsc j     then the sd vertex will have a lower degree and thus will
be chosen first 
the high degree first heuristic avoids following the edge from the st vertex to the sd
vertex  and instead goes to the si vertex  from there it chooses one of the sc vertices  not
including sd or the other st vertex  which are not adjacent   from this point  its choice is
one of the si vertices  maximum degree   jsc j      or one of the sc vertices in a different
subgraph  degree  jsc j if that subgraph has not yet been visited   since the sc vertex
normally will have a higher degree  the algorithm will follow the non hamiltonian edge to
that vertex 
if the next neighbour is chosen at random  then from a st vertex  the algorithm has a
    chance of making the wrong choice  similarly  at each sc vertex the algorithm has a
small chance of following a non hamiltonian edge  as the number of subgraphs is increased 
the probability of the algorithm making all the right choices rapidly approaches   
another reason why the iccs subgraph is expected to be hard for a backtrack algorithm
is that there are many possible paths between the two st vertices  if a non hamiltonian
edge has previously been chosen  then the backtrack algorithm will try all the different
combinations of paths  and fail to form a hamiltonian cycle  before it backtracks to the
bad choice 
we performed experiments on various iccs graphs  we varied the number of subgraphs
from   to    and varied the independent set size  jsi j  from   to    we used our backtrack
algorithm as specified in section   with the addition of checking for components and cutpoints during the search  we executed our algorithm   times per graph  our results are
listed in table   for the low degree first heuristic  our experiments using the other degree
selection heuristics exhibited similar results 
we have also performed similar experiments using a randomized heuristic algorithm
 frieze        posa         due to the significant difference in operation between this
algorithm and backtrack algorithms  it easily solved these small iccs graphs  however its
performance rapidly decreased as the graphs were increased in size 
the average degree of iccs graphs with more than one subgraph lies within the following range 
jsi j         js  j       d  jsi j       js j    
i

i

   

fivandegriend   culberson

n  s jsi j

  
  
  
  
  
  
  
  
  
  

 
 
 
 
 
 
 
 
 
 

 
 
 
 
 
 
 
 
 
 

min
median
max
  
  
   
   
   
     
      
      
       
                               
  
  
   
      
      
      
                             
  
  
   
       
       
       
          

table    search nodes required by our backtrack algorithm on iccs graphs 
from this formula we see that as the size of each independent set is increased  the mean
degree increases linearly  however  as the number of subgraphs is increased  the mean
degree remains constant  the iccs graphs remain hard over a very wide range of mean
degrees  from o    to o n    therefore the average degree in this case is not a relevant
parameter for determining hardness 

   conclusions and future work
our backtrack hamiltonian cycle algorithm found gn m graphs easy to solve  along with
a majority of degreebound graphs  we have also performed similar experiments  vandegriend        using a randomized heuristic algorithm  frieze        posa        which had
a high success rate on gn m graphs  less so on degreebound graphs  more interestingly  the
existence of a phase transition for both problems did not clearly correspond to a high frequency of dicult instances  we suspect that other properties play a more important role
than does the average degree  this is supported by our results on generalized knight s circuit
graphs  which are all highly regular  with many symmetries   and for which the majority
have average degrees between   and    compared to a mean degree    on degreebound
graphs 
these results should not be surprising  since it has been shown that asymptotically for
randomly generated graphs  when the edge is added that makes the last vertex degree   
then with high probability the graph is hamiltonian  bollobas         in addition  ecient
algorithms have been shown to solve these instances in polynomial time with high probability  bollobas et al          since vertices of degree less than   are a trivially detectable
counter indicator  it is hardly surprising that asymptotically determining hamiltonicity of
graphs in gn m is easy 
we also observe that the performance of our backtrack algorithm can widely vary for
a single graph due to the selection of the initial vertex  multiple restarts of our backtrack
algorithm after a time limit was reached often resulted in superior performance  we suggest
a little randomization of the algorithm be used while empirically identifying intrinsically
hard random instances of any problem 
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

acknowledgements
this research was supported by natural sciences and engineering research council grant
no  ogp     

references

angluin  d     valiant  l  g          fast probabilistic algorithms for hamiltonian circuits
and matchings  j  comput  system sci                   
baker  a          intelligent backtracking on constraint satisfaction problems  ph d 
thesis  university of oregon 
bayardo jr   r  j     schrag  r          using csp look back techniques to solve exceptionally hard sat instances  in proc  of the second int l conf  on principles and practice of
constraint programming  vol       of lecture notes in computer science  pp        
bollobas  b   fenner  t  i     frieze  a  m          an algorithm for finding hamilton
paths and cycles in random graphs  combinatorica                 
bollobas  b          the evolution of sparse graphs  in bollobas  b   ed    graph theory
and combinatorics  pp         academic press  toronto 
bondy  j  a     murty  u  s  r          graph theory with applications  elsevier  amsterdam 
brockington  m     culberson  j  c          camouaging independent sets in quasirandom graphs   in johnson    trick  johnson   trick         pp        
broder  a  z   frieze  a  m     shamir  e          finding hidden hamiltonian cycles 
random structures and algorithms                 
cheeseman  p   kanefsky  b     taylor  w  m          where the really hard problems are 
in mylopoulos  j     reiter  r   eds    ijcai     proceedings of the twelfth international conference on artificial intelligence  pp          san mateo  ca  morgan
kaufmann 
culberson  j  c     luo  f          exploring the k colorable landscape with iterated
greedy   in johnson    trick  johnson   trick         pp          
frank  j   gent  i  p     walsh  t          asymptotic and finite size parameters for phase
transitions  hamiltonian circuit as a case study  information processing letters  in
press 
frank  j     martel  c          phase transitions in the properties of random graphs  in
cp    workshop  studying and solving really hard problems  pp        
frieze  a  m          finding hamilton cycles in sparse random graphs  journal of combinational theory  series b              
   

fivandegriend   culberson

gomes  c  p   selman  b     kautz  h          boosting combinatorial search through
randomization  in proceedings of the fifteenth national conference on artificial intelligence  aaai      pp           aaai press  the mit press 
hogg  t          which search problems are random   in proceedings of the fifteenth
national conference on artificial intelligence  aaai      pp           aaai press 
the mit press 
hogg  t     williams  c  p          the hardest constraint problems  a double phase
transition  artificial intelligence              
johnson  d  s          approximation algorithms for combinatorial problems  journal of
computer and system sciences             
johnson  d  s   aragon  c  r   mcgeoch  l  a     schevon  c          optimization by
simulated annealing  an experimental evaluation  part ii  graph coloring and number
partitioning  operations research                  
johnson  d  s     trick  m  a   eds            cliques  coloring  and satisfiability  second
dimacs implementation challenge         vol      american mathematical society 
kask  k     dechter  r          gsat and local consistency  in mellish  c  s   ed   
ijcai      proceedings of the fourteenth international joint conference on artificial
intelligence  pp          san mateo  ca  morgan kaufmann 
kocay  w          an extension of the multi path algorithm for finding hamilton cycles 
discrete mathematics               
komlos  m     szemeredi  e          limit distribution for the existence of a hamilton
cycle in a random graph  discrete mathematics            
langley  p          systematic and nonsystematic search strategies  in artificial intelligent
planning systems  proceedings of the first international conference  pp          
martello  s          algorithm      an enumerative algorithm for finding hamiltonian
circuits in a directed graph  acm transactions on mathematical software        
        
mitchem  j          on various algorithms for estimating the chromatic number of a graph 
the computer journal              
motwani  r     raghavan  p          randomized algorithms  cambridge university press 
new york 
olariu  s     randall  j          welsh powell opposition graphs  information processing
letters                
palmer  e  m          graphical evolution  an introduction to the theory of random graphs 
john wiley   sons  toronto 
posa  l          hamiltonian circuits in random graphs  discrete mathematics              
   

fithe gn m phase transition is not hard for the hamiltonian cycle problem

robinson  r  w     wormald  n  c          almost all regular graphs are hamiltonian 
random structures and algorithms                 
selman  b   levesque  h     mitchell  d          a new method for solving hard satisfiability
problems  in proceedings of the tenth national conference on artificial intelligence
 aaai      san jose  ca  pp          
shufelt  j  a     berliner  h  j          generating hamiltonian circuits without backtracking from errors  theoretical computer science               
spinrad  j  p     vijayan  g          worst case analysis of a graph coloring algorithm 
discrete applied mathematics                
vandegriend  b          finding hamiltonian cycles  algorithms  graphs and performance 
master s thesis  department of computing science  university of alberta  online at
 http   www cs ualberta ca  basil   
wormald  n  c          generating random regular graphs  journal of algorithms    
        

   

fi