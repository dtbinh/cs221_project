journal artificial intelligence research                 

submitted       published     

flaw selection strategies partial order planning

martha e  pollack

department computer science intelligent systems program 
university pittsburgh  pittsburgh  pa       usa

david joslin

computational intelligence research laboratory 
university oregon  eugene        usa

pollack cs pitt edu
joslin cirl uoregon edu

massimo paolucci

intelligent systems program 
university pittsburgh  pittsburgh  pa       usa

paolucci pitt edu

abstract

several recent studies compared relative eciency alternative aw selection
strategies partial order causal link  pocl  planning  review literature 
present new experimental results generalize earlier work explain
discrepancies it  particular  describe least cost flaw repair  lcfr  strategy
developed analyzed joslin pollack         compare strategies 
including gerevini schubert s        zlifo strategy  lcfr zlifo make
different  apparently con icting claims effective way reduce searchspace size pocl planning  resolve con ict  arguing much benefit
gerevini schubert ascribe lifo component zlifo strategy better
attributed causes  show many problems  strategy combines
least cost aw selection delay separable threats effective reducing
search space size  without excessive computational overhead  although
strategy thus provides good default  show certain domain characteristics
may reduce effectiveness 

   introduction
much current research plan generation centers partial order causal link  pocl 
algorithms  descend mcallester rosenblitt s        snlp algorithm  pocl
planning involves searching space partial plans  successors node
representing partial plan p refinements p   search problem  pocl
planning requires effective search control strategies 
pocl planning  search control two components  first  node selection  involves choosing partial plan refine next  partial plan selected
refinement  planner must perform aw selection  involves choosing either
threat resolve open condition establish 
past years  several studies compared relative eciency alternative aw selection strategies pocl planning extensions  peot   smith       
joslin   pollack        srinivasan   howe        gerevini   schubert        williamson  
hanks         studies motivated least part tension
attractive formal properties pocl algorithms  limitations putting

c      ai access foundation morgan kaufmann publishers  rights reserved 

fipollack  joslin    paolucci
practical use result relatively poor performance  date  pocl
algorithms cannot match eciency so called industrial strength planners
sipe  wilkins        wilkins   desimone        o plan  currie   tate        tate 
drabble    dalton         flaw selection strategy shown significant
effect eciency pocl planning algorithms  thus researchers viewed
design improved aw selection strategies one means making pocl planning
algorithms practical 
paper  review literature aw selection strategies  present new
experimental results generalize earlier work explain discrepancies
it  particular  describe least cost flaw repair  lcfr  strategy developed
analyzed joslin pollack         compare strategies  including
gerevini schubert s zlifo strategy         lcfr zlifo make different 
apparently con icting claims effective way reduce search space size
pocl planning  resolve con ict  arguing much benefit gerevini
schubert ascribe lifo component zlifo strategy better attributed
causes  show many problems  strategy combines least cost aw
selection delay separable threats effective reducing search space size 
without excessive computational overhead  although strategy thus
provides good default  show certain domain characteristics may reduce
effectiveness 

   background
    node flaw selection

although main ideas pocl planning literature
two decades  serious efforts comparing alternative plan generation algorithms
relatively recent  made comparisons possible development set
clear algorithms provable formal properties  notably tweak  chapman        
snlp  mcallester   rosenblitt         algorithms intended add
functionality known planning methods  rather capture essential elements
known methods readily analyzable fashion 
analyzing pocl algorithms  researchers found useful decouple search
control strategy underlying plan refinement process  figure   generic pocl
algorithm  highlight two search decisions   following convention  use
choose indicate node selection backtracking point  select indicate
aw selection not  given node may lead solution  may necessary
backtrack consider alternative nodes  hand  node lead
solution  solution found regardless order aws selected 
see weld s        tutorial paper discussion difference 
generic algorithm sketched figure must supplemented search strategies
implement choose select operators  pocl algorithms perform
node selection using best first ranking computes function number
   various versions well known algorithm appeared literature  weld        russell  
norvig        kambhampati  knoblock    yang         version give corresponds directly
given williamson hanks        

   

fiflaw selection strategies

pocl  init goal 

dummy plan make skeletal plan init goal  
nodes f dummy plan g 
nodes empty do 

choose  and remove  partial plan p nodes   node selection 
p aws
return p
else do 

select aw p   flaw selection 

add refinements p nodes 
return failure  because nodes become empty without aw free plan found  
figure    basic pocl planning algorithm
steps  denoted    open conditions  oc    unsafe conditions  uc   i e   threats 
partial plan  gerevini schubert        argued that  general  steps
open conditions included ranking function  adopt strategy
experiments  except otherwise indicated 
chosen node  pocl planning algorithm must select aw open condition threat within node repair  open conditions repaired establishment 
consists either adding new step unifying condition effect  along
causal link new step condition   else simply adding new
causal link existing step unifying effect  use term repair cost
denote number possible ways repair aw 
open condition o  repair cost r o      n  

  number conditions initial state unify given
current binding constraints 
  number conditions effects existing plan steps unify
given current binding constraints  counting existing plan
steps constrained occur step associated o 
n   number conditions effects operators library
unify given current binding constraints 
note time  repair cost open condition resolved may either
increase  new steps might achieve condition added plan  decrease 
steps already plan constrained temporal ordering variable binding
longer achieve condition 
considering cost threat repair  useful distinguish nonseparable
separable threats  nonseparable threats consist step s  effect e  
causal link s   f  s    e f complementary literals necessarily unify 
either complementary ground literals  e  f    else complementary
literals e  s variables identical with  forced binding constraint
   

fipollack  joslin    paolucci
equivalent variable position f  e g   e   p x    f    p x  z   
currently binding constraint   z    
nonseparable threats repaired two ways  promoting s   requiring
occur s    demoting it  requiring occur s    course  already
existing temporal ordering constraints may block one repair options 
two possible repairs   time  repair cost unresolved
nonseparable threat decrease 
separable threat consists step s  effect e   causal link s    f  s   
e f complementary literals unified  unification
forced  e g   e   p x  f   p y   exist binding
constraint x      circumstances  threat may disappear subsequent variable
binding blocks unification   a nonseparable threat may disappear subsequent
ordering constraint effect imposing promotion demotion   repair cost
separable threat may higher nonseparable threat 
promotion demotion used  separation  involves forcing variable
binding blocks unification  separation introduce one repair unbound
variable threat  example  effect p  x  y  z   threatens s     p  t  u  v    s   
three possible repairs  x    t     u  z    v   nonseparable threats 
repair cost separable threat remains unresolved decrease time 

    notation

aw selection strategies discussed literature typically
given idiosyncratic names  e g   dunf  lcfr  zlifo   useful  comparing them 
precise unifying notation  therefore specify aw strategy sequence
preferences  strategy begins attempting find aw satisfies first preference 
unable so  looks aw satisfies second preference 
on  ensure pocl algorithm using strategy complete  sequence
preferences must exhaustive  every aw must satisfy preference  aw satisfies
one preference strategy  assume first match counts 
principle  preference could identify feature aw  practice  however  aw
selection strategies made use small number features  type aw
 open condition  nonseparable threat  separable threat   number ways
repaired  time introduced plan  often  one aw
given feature  case tie breaking strategy may specified choosing
among relevant aws 
therefore describe preference using following notation

f aw typesgrepair cost rangetie breaking strategy
   alternative approach treats cases e f threats  required make planner
systematic  i e   guaranteed never generate node  mcallester   rosenblitt 
      
   conditional planners make use additional method threat resolution confrontation but
ignore within paper  peot   smith        etzioni  hanks  weld  draper  lesh    williamson 
       joslin        provides detailed account generalizing treatment aws types
planning decisions 

   

fiflaw selection strategies
indicates preference aw f specified type types  provided
repair cost f falls within range values specified   if restrictions
repair cost  omit repair cost range   one aw meets criteria 
tie breaking strategy applied select among them 
abbreviate aw type  o   for open condition    n   for nonseparable threat  
 s   for separable threat   use abbreviations common tie breaking strategies 
e g    lc   least  repair  cost    lifo   r   random   case lc  choice
must made aws repair cost  lifo selection used 
thus  example
fng   r
specifies preference nonseparable threats repair cost zero one 
one aw meets conditions  random selection made among them  use
term forced describe aws repair cost one less 
example complete aw selection strategy then 
fng   r   foglifo   fn sgr
strategy would begin looking forced nonseparable threat  one aw
meets criterion  strategy would select randomly among them  forced
nonseparable threats  would look open condition  repair cost  using
lifo scheme select among them  finally  neither forced nonseparable threats
open conditions  would randomly select either unforced nonseparable threat
separable threat 
distinguished aw type maximum repair cost  one
hand  tie breaking strategy  other  easy describe strategies use
something aw type main criterion selection  example  pure
lifo selection strategy would encoded follows   henceforth  give name
strategy boldface preceding specification  
lifo fo n sglifo

   flaw selection strategies

begin reviewing aw selection strategies proposed studied
literature date 

    threat preference delay

original snlp algorithm  mcallester   rosenblitt        adopted aw selection
strategy threats resolved open conditions  early versions
widely used ucpop planning system  penberthy   weld        same   snlp
specify principle selecting among multiple threats multiple opens  ucpop
used lifo purpose  employing notation above  describe basic
ucpop strategy as 
   current version ucpop  v     aw selection strategy run default dsep
strategy  discussed below  historical reasons  maintain name dsep strategy 
use ucpop older default strategy 

   

fipollack  joslin    paolucci

ucpop fn sglifo   foglifo
first study alternative aw selection strategies done peot smith        
relaxed requirement threats always resolved open conditions 
examined several strategies delaying resolution threats  analyzed five
different strategies delaying repair threats  these  two provably superior 
dsep dunf 
dsep  delay separable threats  motivated observation sometimes separable threats simply disappear planning process blocking variable bindings
introduced  pointed earlier  nonseparable threats may  disappear  
typically less frequent  moreover  resolution threats separable
nonseparable were delayed  nonseparable threats would disappear early side
effect step reuse  making disappearance even less frequent 
dsep strategy therefore defers repair separable threats end
planning process  however  ucpop  continues give preference nonseparable
threats 
dsep fnglifo   foglifo   fsglifo
actually  peot smith specify tie breaking strategy choosing among multiple
threats  indicated lifo  explored three different tie breaking
strategies selecting open conditions  fifo  lifo  least cost   list lifo 
one specify alternatives 
dsep lc fnglifo   foglc   fsglifo
dsep fifo fnglifo   fogfifo   fsglifo
peot smith prove search space generated pocl planner using dsep
never larger search space generated using ucpop strategy  result
holds tie breaking strategy open conditions lifo fifo  lc 
point return later paper 
peot smith s second successful strategy dunf  delay unforced threats   makes
use notion forced aws  stated earlier  aw forced
one possible way repair it  dunf strategy delays repair unforced threats 
dunf fn sg lifo   fn sg lifo   foglifo   fn sg   lifo
define dunf lc dunf fifo manner analogous used dsep lc
dsep fifo 
dunf lc fn sg lifo   fn sg lifo   foglc   fn sg   lifo
dunf fifo fn sg lifo   fn sg lifo   fogfifo   fn sg   lifo
peot smith proved dunf strategy would never generate larger search
space either remaining two strategies examined  proved
dsep dunf incomparable  exist planning problems dsep
generates smaller search space dunf  problems reverse
true 
   

fiflaw selection strategies
peot smith support theoretical results dsep dunf experiments
showing that  least domains examined  strategies result significant decrease search space size  decrease search correlated diculty
problem  consequently  problems get dicult  strategies reduce
search time well space  is  large enough problems   pay for 
overhead 
follow on work  peot smith        describe strategy called dmin  generates smaller search spaces dsep dunf  dmin combines process pruning
dead end nodes process aw selection  gives preference forced threats 
forced threats  checks see whether remaining nonseparable threats
could repaired simultaneously  so  leaves threats  selects open condition repair  open conditions  presumably selects remaining
unforced threat repair  hand  impossible repair unforced 
nonseparable threats  node dead end  pruned search
space  note dead end nodes recognized immediately  even without
complete consistency checking dmin  unrepairable aw cannot
subsequently become repairable  hence  node containing aw repair cost zero
dead end  consequently  aw selection strategies give highest priority
aws  joslin   pollack        joslin        

    least cost flaw repair

peot smith s work provided foundation subsequent exploration leastcost aw repair  lcfr  strategy  joslin   pollack         hypothesized power
dunf strategy might come relative ordering threats open conditions  instead fact dunf effect imposing partial preference
least cost aw selection  dunf always prefer forced threat  which  definition
repair cost one  thus  cases forced threat  dunf
make low cost selection  cases forced threats 
dunf select among open conditions  assuming any  hypothesis correct  version dunf makes selection using least cost strategy  i e  
dunf lc  ought perform better version uses one strategies  i e  
bare dunf dunf fifo   fact  selection low cost repairs causing
search space reduction  idea treating threat resolution differently open
condition establishment ought abandoned  instead  strategy always selects
aw minimal repair cost  regardless whether threat open condition 
ought show best performance  least cost flaw repair  lcfr  strategy  

lcfr fo n sglc
strong similarities lcfr certain heuristics proposed studied literature constraint satisfaction problems  csps  
perhaps surprising  given aw selection pocl planning corresponds
   lcfr strategy similar branch   branch n search heuristics included o plan system
 currie   tate         contribution original work topic isolate strategy
examine detail 

   

fipollack  joslin    paolucci
fairly strong ways variable selection constraint programming  flaws pocl planner represent decisions yet made  must made plan
complete  unbound variables play similar role constraint satisfaction problems
 csps    although exist number heuristics selecting variable branch
solving csp  kumar         one well known heuristic often quite effective
fail first principle  picks variable  most constrained  selecting
variable branch on  simple common implementation fail first principle
selects variable smallest domain  tsang        
intuition behind fail first principle one prune dead end regions
search early possible  unbound variables tightly constrained
likely points current partial solution  brittle  sense 
branching variables hope find contradiction  if one exists  quickly 
similarly  lcfr thought selecting  most constrained  aws  resulting
better pruning 
similar heuristic adopted recent work controlling search hierarchical task network  htn  planning  dynamic variable commitment strategy  dvcs   dvcs  lcfr  based minimal branching heuristic  experimental
analyses demonstrate dvcs generally produces well focused search  tsuneto  erol 
hendler    nau        
initial experimental results  presented joslin pollack         similarly
supported hypothesis uniform least cost aw repair strategy could highly
effective reducing size search space pocl planning  experiments 
compared lcfr four strategies  ucpop  dunf  dunf lc  defined
above  new strategy  ucpop lc previously called lcos  joslin   pollack 
      
ucpop lc fn sglifo   foglc
included ucpop lc help verify search space reduction results preference
aws minimal repair costs  true  ucpop lc ought generate
smaller search space dunf  even though delay threats  results
expected  ucpop dunf  least cost selection open conditions 
generated largest search spaces  ucpop lc generated significantly smaller spaces 
dunf lc lcfr generated smallest spaces 
time  observed lcfr incurred unwieldy overhead  often taking
longer solve problem ucpop  despite fact searching far fewer
nodes  part due particularly inecient implementation lcfr
using  part resulted fact computing repair costs bound take
time simply popping stack  as lifo strategy   finding aw particular
type  as strategy prefers threats   therefore explored approximation strategies 
reduce overhead aw selection accepting inaccuracy repair cost
calculation  example  developed  quick lcfr   or qlcfr  strategy 
calculates repair cost aw once  aw first encountered 
successor node aw remains unresolved  qlcfr assumes repair
   planning problems cast csps planner descartes  joslin   pollack        joslin 
       correspondence even direct 

   

fiflaw selection strategies
cost changed  experiments qlcfr showed promising means
making least cost approach suciently fast pay overhead  additional
approximation strategies studied srinivasan howe         experimented
three variations lcfr  along fourth  novel strategy moves
control burden user 

    threat delays revisited

recently  gerevini schubert        revived idea aw selection strategy
treat open conditions threats differently  suggested lifo
used tie breaking strategy deciding among open conditions  combine
ideas zlifo strategy 
zlifo fnglifo   fog lifo   fog new   fog   lifo   fsglifo
zlifo strategy gives highest priority nonseparable threats  forced open
conditions  neither nonseparable threats forced open conditions  zlifo
select open condition using lifo  defers separable threats end
planning process  name zlifo intended summarize overall strategy   z 
stands  zero commitment   indicating preference given forced open conditions 
repairing these  planner making commitment beyond must made
node ultimately refined complete plan   lifo  indicates
strategy used selecting among unforced open conditions 
open conditions repair cost exactly one  zlifo strategy uses tiebreaking strategy called  new   prefers repair open condition
established introducing new action repair open condition
established using element start state  gerevini schubert state
preference  gave improvements context russell s tire changing domain      without
significant deterioration performance domains         p        however
difference apparently dramatic  gerevini believes implementation
detail  though open possibility study might show preference
significant  gerevini        
gerevini schubert make three primary claims zlifo 
   pocl planner using zlifo tend generate smaller search space one
using pure lifo strategy 
   reduction search space using zlifo  relative lifo  correlated
complexity planning problem  where complexity measured number
nodes generated pure lifo strategy  
   zlifo performs comparably lcfr relatively easy problems  generates
smaller search space harder problems 
first two claims consistent found earlier lcfr studies 
lifo strategy pays attention repair costs  zlifo does  least indirectly 
initial preference nonseparable threats  repair cost
two  secondary preference forced opens 
   

fipollack  joslin    paolucci
third claim harder square earlier lcfr study  lifobased strategies  ucpop dunf  generated much larger search spaces
least cost based strategies  explains zlifo s performance  gerevini schubert
answer question follows 
based experience search processes ai general   a lifo  strategy
much recommend it  simple default  first place  overhead
cost low compared strategies use heuristic evaluation lookahead
prioritize goals  well  tend maintain focus achievement
particular higher level goal regression      rather attempting achieve
multiple goals breadth first fashion   p      
point overhead important one  zlifo relatively inexpensive control
strategy  competing strategy better job pruning search space may
end paying excessive overhead  second point addresses question
asking here  namely  zlifo could produce smaller search spaces  gerevini
schubert go say that 
 m aintaining focus single goal advantageous least
goals achieved independent  instance  suppose two
goals g  g  achieved various ways  choosing particular
method achieving g  rule methods achieving g  
maintain focus g  solved  attempting g  
total cost solving goals sum costs solving
independently  switch back forth  solutions
goals involve searches encounter many dead ends  combined cost
much larger  tend search unsolvable subtree
g  search tree repeatedly  combination various alternatives
g  search tree         p      
certainly plausible explanation  key remaining question  course  extent explanation carries many planning problems involve
interacting goals 

   experimental comparison flaw selection strategies

discussed previous section  several different proposals made
literature best reduce size search space pocl planning 
include 
giving preference threats open conditions 
giving preference certain kinds threats  either separable forced threats  
delaying threats open conditions resolved 
giving preference aws minimal repair cost 
giving preference recently introduced aws 
   

fiflaw selection strategies
moreover  different strategies combined preference schemes different ways 
apparently con icting claims made effects preferences
search space size 
resolve con icts  performed experimental comparisons pocl planners
using variety aw selection strategies  gave particular attention comparison
lcfr zlifo  apparently con icting claims  lcfr generates
search space treating aws uniformly  using least cost approach choose among
them  zlifo distinguishes aw types  non separable threats  open conditions 
separable threats   uses modified lifo approach select among aws
class  original lcfr studies would led us predict zlifo would generate
larger search spaces lcfr  gerevini schubert found opposite
true  aimed  then  explain discrepancy 
principal focus search space size  two reasons  first  puzzle raised
lcfr zlifo one space  time  mentioned earlier  easy see
zlifo would faster lcfr  even per node basis  least cost strategy
must compute repair costs  zlifo need pop stack containing right type
aws  puzzle us zlifo faster  generated smaller
search spaces  second  believe understanding effect search control strategies
search space size lead development approximation techniques produce
speed up well  qlcfr strategy  joslin   pollack        srinivasan howe s
strategies        examples this 
however  secondary goal analyze time requirements strategies
compared  therefore collected timing data experiments  discuss
section      strategy tends generate smallest search space achieves enough
reduction pay overhead  large 

    experimental design

conduct comparison  implemented set aw selection strategies ucpop
v     table   lists strategies implemented  except lcfr dsep dunfgen  discussed later  implemented strategies described section
  
tested strategies three problem sets  used earlier work  joslin
  pollack        gerevini schubert s        
   basic problems     problems taken test suite distributed
ucpop system  include problems variety domains  including
   note experiments earlier lcfr paper  joslin   pollack        gerevini
schubert s        zlifo paper run using earlier version  v    ucpop  result 
number nodes produced experiments sometimes differs reported
two papers  appears largely due fact ucpop v   puts elements new set
open conditions onto aw list reverse order way ucpop v    gerevini 
       discussed sections          studied uence ordering change
collecting data using modified version ucpop v   reversed order conditions
entered open list  resulting numbers similar previously published 
identical  leading us conclude additional subtle differences v  
v    however  experiments report run using version
ucpop  believe fair comparison strategies 

   

fipollack  joslin    paolucci
ucpop
ucpop lc
dsep
dsep lc
dunf
dunf lc
dunf gen
lcfr
lcfr dsep
zlifo

fn sglifo   foglifo
fn sglifo   foglc
fnglifo   foglifo   fsglifo
fnglifo   foglc   fsglifo
fn sg lifo   fn sg lifo   foglifo   fn sg   lifo
fn sg lifo   fn sg lifo   foglc   fn sg   lifo
fn s og lifo   fn s og lifo   fn s og   lifo
fo n sglc
fn oglc   fsglc
fnglifo   fog lifo   fog new   fog   lifo   fsglifo
table    implemented flaw selection strategies

blocks world  monkeys bananas problem  pednault s        briefcase andoce problem  russell s        tire changing world  etc 
   trains problems  three problems taken trains transportation domain
 allen  schubert    et al         
   tileworld problems  seven problems taken tileworld domain  pollack  
ringuette        
ran strategy problem twice  first time  imposed node limit 
       nodes basic problems          nodes trains tileworld
problems  second time  imposed time limit      seconds basic problems 
     seconds trains tileworld problems 
gerevini schubert experimented several different node selection strategies
trains tileworld domains  facilitate comparison used node
selection strategies did  basic problems  used   oc  
reporting results  make use raw counts nodes generated
computation time seconds taken  compute measure badly strategy
performed given problem set problems  call measure   overrun 
compute follows  let minimum node count given problem
strategies tested  let c node count particular strategy  
  overrun s       c   m  m     
thus  example  best strategy given problem generated     nodes 
strategy generated     nodes would       overrun problem 
strategy best given problem   overrun   problem 
section      make use similarly computed   overruns computation time 
strategy hit node limit  set c relevant node limit                 
compute node count   overrun   similarly  strategy hit time limit  used
relevant time limit            compute computation time   overrun 
   way ucpop completes basic iteration  sometimes go somewhat beyond
specified node limit terminating run  cases  used node limit value  rather
actual number nodes generated  computation   overrun 

   

fiflaw selection strategies
online appendix provides raw data node counts computation time taken 
experiments conducted  includes computed   overruns 
conducting experiments these  one set either node  time limit
cutoff strategy problem pair  however  always danger cutoffs
unfairly bias data  limits set way certain strategies fail
would instead succeeded limits increased slightly  carefully analyzed
data help eliminate possibility bias  details given appendix a 

    value least cost selection

described overall experimental design  turn analysis results  begin  sought re establish claims originally made earlier
work  specifically  wanted first reconfirm  using larger data set  least cost
aw selection effective technique reducing size search space generated
pocl planner  therefore ran experiment compared node
counts five strategies earlier studied lcfr  dunf  dunf lc  ucpop 
ucpop lc plus one new one  dunf gen  explained below 
results experiment shown figures      former log log
scatter plot  showing performance six strategies    problems
basic set  problems sorted minimal number nodes generated
six strategies  thus  left hand side graph includes problems
least one six strategies found relatively easy  right hand side
problems hard six strategies  omitted problems none
six strategies able solve  actual number nodes generated
strategy plotted y axis  minimal number nodes problem 
x axis  lcfr s performance highlighted line connecting data points 
graph shows that  general  lcfr generates small search spaces problem set 
relative strategies class  six problems lcfr
within     minimum  three get paid uget paid class
problems including two  hardest  problems  uget paid  uget paid   
discuss class problems section     
alternative view data given figure    shows aggregate performance six strategies  i e   average node count   overrun basic
problems  seen  lcfr smallest average   overrun 
figures     present similar views data tileworld domain  figure
  gives data trains problems  trains domain  six strategies
able solve easiest problem  trains    simply show actual node counts
figure    omitted two data points  extreme
inclusion graph made impossible see differences among strategies 
lcfr dunf gen   oc   uc node selection took                nodes 
respectively  solve problem 
tileworld trains problems  observed sorts interactions node aw selection strategies seen gerevini schubert  specifically 
lcfr performs relatively poorly   oc tileworld problems  performs
poorly   oc   uc trains problems  however  paired
   

fipollack  joslin    paolucci
     

nodes generated  log 

    
ucpop
dunf
ucpop lc
dunf lc
dunf gen
lcfr
   

  
  

   

    

     

minimum number nodes generated  log 

figure    basic problems  node counts strategies without forced flaw delay
node selection strategies  lcfr produces smallest search spaces strategies
class 
sum  lcfr tend produce smaller search spaces strategies
class  question remains  lcfr uses least cost strategy  side effect
prefer forced aws  since forced aws low cost aws  therefore
conceivable lcfr s performance mostly even fully due preference forced
aws   or greatly  uenced use least cost strategy unforced
aws  hypothesis could explain dunf lc consistently outperforms dunf 
ucpop lc consistently outperforms ucpop 
address issue included dunf gen experiment  dunf gen
simple strategy prefers forced aws kind  otherwise uses lifo regime 
would expect dunf gen lcfr perform similarly  since frequently make
decision  specifically  select aw node
forced aw  differ unforced aws  dunf gen
selecting recently introduced aw lcfr selecting least cost aw 
practice  dunf gen s performance closely mimicked lcfr s  basic
problem set marginally worse lcfr  fact  marginally better
reverse order planner adds preconditions new step
open list  see section       lcfr somewhat better dunf gen
trains tileworld problems  true regardless order
preconditions added open list  extent better varies 
thus  data inconclusive value using least cost strategy unforced
aws  lcfr clearly benefits selecting forced aws early  as side effect preferring
   

fiflaw selection strategies
    

    

node count   overrun

    

    

    

    

   

 
lcfr

dunf gen

ucpop lc

ucpop

dunf lc

dunf

figure    basic problems  aggregate performance strategies without forced flaw delay
      

     

nodes generated  log 

ucpop s oc
ucpop lc s oc
dunf s oc
dunf lc s oc
dunf gen s oc

    

dunf gen s oc uc
dunf gen s oc   uc f
lcfr s oc
lcfr s oc uc
lcfr s oc   uc f
   

  
  

   

    

minimum number nodes generated  log 

figure    tileworld problems  node counts strategies without forced flaw delay
   

fipollack  joslin    paolucci

     

     

     

     

     

     

    

ucpop
s oc

ucpop lc
s oc

dunf
s oc

dunf lc
s oc

lcfr
s oc

dunf gen
s oc

dunf gen
s oc   uc f

dunf gen
s oc uc

lcfr
s oc   uc f

lcfr
s oc uc

 

figure    tileworld problems  aggregate performance strategies without forced flaw
delay
   

   

nodes generated

   

   

   

   

   

   

ucpop
s oc

dunf
s oc

dunf gen
s oc   uc f

dunf gen
s oc

ucpop lc
s oc

dunf lc
s oc

lcfr
s oc

lcfr
s oc   uc f

 

figure    trains    node counts strategies without forced flaw delay
   

fiflaw selection strategies
least cost aws   may matter whether continues use least cost strategy
unforced aws  indeed generally sucient use least cost strategy
forced aws  zlifo s performance somewhat less puzzling  since zlifo prefers
forced aws  however puzzle completely resolved  all  dunf gen 
zlifo  prefers forced aws makes lifo based decisions unforced aws 
performance clearly inferior lcfr s  neither clearly superior 
even use lifo unforced aws obviously increase search space 
neither appear decrease it 

    comparing lcfr zlifo

next turn direct comparison lcfr zlifo  gerevini schubert compared
strategies problems  get complete picture performance
lcfr zlifo  ran problems three problem
sets 
data basic problem set shown figure    sorted problems
difference node counts produced lcfr zlifo  thus  problems
near left hand side graph lcfr generated smaller search
space  problems near right hand side ones zlifo space
advantage  omit problems neither strategy could solve 
seen  problems  notably r test   move boxes  monkey test   
lcfr generates much smaller search space zlifo  problems  notably
get paid   hanoi  uget paid   uget paid    zlifo generates much smaller search
space  problems lcfr worse strategies mentioned
section     
noted earlier  one major changes ucpop v   v  
v   puts elements new set open conditions onto aw list reverse
order v    ordering may make difference  particularly lifo based
strategies  indeed  researchers suggested one reason lifo based strategy
may perform well exploit decisions made system designers
writing domain operators  since sense natural list constraining
preconditions operator first  williamson   hanks         therefore collected
data modified version ucpop  preconditions step entered
onto open condition reverse order would normally entered 
discuss results modification detail next two sections 
now  simply present node counts lcfr zlifo reversed precondition
insertion  figure    seen  problems reversing
precondition ordering significant effect  notably fixb monkeytest   
large lcfr zlifo showed relative performance 
problems basic set  dicult discern obvious pattern performance  contrast gerevini schubert suggest  seem clear
correlation diculty problem  measured terms nodes generated 
relative performance lcfr zlifo   in fact  little dicult determine strategy s node count serve measure diculty  
hand  true aggregate  zlifo generates smaller search spaces lcfr
   

fir test 

   

uget paid 

uget paid 

monkey test 

hanoi

get paid 

get paid 

get paid 

uget paid 

uget paid

road test

fix 

fix 

get paid

fixa

r test 

fix 

test ferry

monkey test 

fix 

suss anom

two inv 

fix 

rat insulin

prodigy suss

two inv 

fixb

move boxes

nodes generated  log 

r test 

uget paid 

uget paid 

hanoi

get paid 

get paid 

test ferry

get paid 

uget paid 

ho demo

tow inv 

uget paid

tow inv 

road test

fix 

fix 

get paid

r test 

suss anom

fix 

fix 

fix 

monkey test 

prodigy suss

rat insulin

fixa

monkey test 

move boxes

nodes generated  log 

pollack  joslin    paolucci

     

    

   
lcfr  default

zlifo  default

  

 

figure    basic problems  node counts lcfr zlifo

     

    

   
zlifo reversed

lcfr reversed

  

 

figure    basic problems  node counts lcfr zlifo reversed precondition
insertion

fiflaw selection strategies
basic problems  default precondition ordering  zlifo obtains average
  overrun         lcfr obtains         reverse ordering  zlifo s average
  overrun         lcfr s         fact lcfr s relative performance
worse preconditions entered reverse direction results primarily
failure monkeytest  reverse direction 
trains data scant  neither lcfr zlifo solve hardest problem 
trains   regardless whether preconditions entered default reverse
order   in fact  none strategies studied able solve trains    but  least
preconditions entered default order  zlifo solve trains  
lcfr cannot  reverse precondition insertion  neither strategy solve trains  
data shown figure    note lcfr s performance essentially
node selection strategies shown 
finally  tileworld data  default order precondition insertion  shown
figure     place lcfr clearly generates smaller search spaces
zlifo  plotted data reverse precondition insertion 
strategies affected change  however  one notable
exception  reversed insertion  zlifo  with   oc     uc   f   much better 
indeed  well lcfr  return uence precondition ordering
tileworld problems section     
now  however  enough observe experiments show zlifo
tend generate smaller search spaces lcfr  basic problem set 
regardless order precondition insertion  trains one ordering  and
worse lcfr ordering   well lcfr
tileworld problems preconditions inserted reverse order 
exception tileworld problem set preconditions inserted default order 
lcfr better 

    value separable threat delay

first two analyses essentially aimed replicating earlier results literature 
namely lcfr results zlifo results  next address question
square results one another 
recall lcfr zlifo differ two key respects  first  lcfr treats aws
uniformly  zlifo distinguishes among aw types  giving highest preference nonseparable threats  medium preference open conditions  lowest preference separable
threats  second  lcfr uniformly makes least cost selections  zlifo uses lifo
strategy secondary aw type preferences  but giving preference forced open
conditions   comparisons made section     suggest use lifo strategy
unforced aws best make little difference search space size  may possibly lead generation larger search spaces  hand  first difference
presents obvious place look relative advantage zlifo  all  zlifo
delaying separable threats  peot smith demonstrated effectiveness
approach dsep strategy 
peot smith s proof dsep never generate larger search space ucpop
transfer lcfr  planning problems lcfr generate
   

fipollack  joslin    paolucci

      

nodes generated  log 

     

    
zlifo s oc
zlifo s oc   uc f
lcfr s oc
lcfr s oc   uc f
   

  

 
trains   default 

trains   reverse 

trains   default 

figure    trains problems  node counts lcfr zlifo
      

nodes generated  log 

     

zlifo s oc

    

zlifo s oc   uc f
lcfr s oc
lcfr s oc uc
lcfr s oc   uc f
   

  

 
tw ez

tw  

tw  

tw  

tw  

tw  

tw  

figure     tileworld problems  node counts lcfr zlifo
   

fiflaw selection strategies
smaller search space dsep  proof relies fact that  dsep  open conditions
selected order  regardless threats selected  selection
threat lcfr uence repair cost open condition  e g   promoting
action longer available potential establisher condition  
turn affect order remaining open conditions selected 
nonetheless  despite fact one can t guarantee delaying separable threats
lead reduction search space size  motivation behind dsep still appealing 
separable threats may often simply disappear subsequent planning  naturally lead reduction search space size  reason  implemented slightly
modified version lcfr  called lcfr dsep  separable threats
delayed  note relatively easy ucpop system  provides
switch  dsep switch  turned automatically delay repair
separable threats  defined earlier table    definition lcfr dsep is 
lcfr dsep fn oglc   fsglc
hypothesis zlifo s reduction search space size largely due
incorporating dsep approach  lcfr dsep ought  the best worlds  
combining advantages lcfr s least cost approach advantages dsep
approach 
basic problems  lcfr dsep proved smallest average node count  overrun basic problems strategies tested  moreover  true even
reversed order preconditions operator added open
list  figure    gives average node count   overruns unmodified ucpop v  
 labeled  default   modified version reversed precondition ordering
 labeled  reverse    reversing ordering effect conclusion lcfr dsep
generates smallest search spaces problems  fact  general little
affect relative performance strategies all  notable exception 
mentioned earlier  relative performance lcfr dunf gen ips 
detailed comparison  plot node counts basic problems lcfr 
zlifo  separable threat delay strategies figure     ease comparison 
show data sorted difference lcfr zlifo s node counts 
problems near left hand side graph are  again  lcfr generated
smaller search space zlifo  problems near right
generated larger search space  seen  lcfr dsep nearly always well
as  better lcfr  much better zlifo problems lcfr
good at  much better lcfr problems zlifo good at 
however  zlifo still outperforms lcfr dsep latter class problems 
another view data given figure     log log scatter plot basic
problems  strategies studied  time highlighted lcfr dsep s
performance  although problems produce minimal
search space  performance individual problems actually quite good  consistent
good aggregate performance 
least basic problems  augmenting simple lcfr strategy delay
separable threats reduces search space expected  turn suggests
lcfr generates larger search space zlifo  due large part fact
   

fipollack  joslin    paolucci

    

    

node count   overrun

    

    

default

    

reverse

    

    

   

 
lcfrdsep

dseplc

zlifo

dsep

lcfr

dunfgen

uc
pop lc

ucpop

dunflc

dunf

figure     basic problems  aggregate performance strategies

     

nodes generated  log 

    

zlifo
   

lcfr
lcfr dsep

  

uget paid 

hanoi

uget paid 

get paid 

get paid 

get paid 

test ferry

ho demo

uget paid 

tow inv 

tow inv 

uget paid

road test

fix 

prodigy p  

r test 

fix 

get paid

fix 

suss anom

fix 

fix 

prodigy suss

monkey test 

fixa

rat insulin

move boxes

monkey test 

r test 

 

figure     basic problems  node counts lcfr  zlifo  dsep strategies
   

fiflaw selection strategies
     

    
nodes generated  log 

ucpop
dsep
dunf
ucpop lc
dunf lc
zlifo
dunf gen
lcfr
dsep lc

   

lcfr dsep

  
  

   

    

     

minimum number nodes generated  log 

figure     basic problems  node counts strategies
delay separable threats  zlifo s primary advantage relative lcfr seems
use lifo strategy unforced threats  rather separable threat
delay component  combining separable threat delay least cost approach yields
strategy tends generate smaller search spaces either strategy
basic problem set  however  analysis trains tileworld problem sets reveals
situation little complicated comparison basic problems would
suggest  discuss next section 

    need domain information

tileworld trains domains problems challenge overly simple conclusions might
draw basic problem sets  consider set problems turn 
      tileworld problems

tileworld domain involves grid tiles holes  goal fill hole
tile  goal achieved fill operator  two preconditions 
agent must hole  must holding tile  encoding  agent
hold four tiles time  go operator used achieve  sub goal
hole  pickup operator used achieve  sub goal holding tile 
normal way  go precondition location  namely whatever location
agent move from  pickup precondition location tile 
problems tileworld problem set differ one another number holes
agent must fill  problem adds another hole 
   

fipollack  joslin    paolucci
      

lcfr s oc uc
     

lcfr s oc   uc f
dunf gen s oc uc

nodes generated  log 

dunf gen s oc   uc f
dunf gen s oc
lcfr s oc
lcfr dsep s oc uc
zlifo s oc   uc f

    

zlifo s oc
lcfr dsep s oc   uc f
dsep lc s oc
lcfr dsep s oc
dunf s oc
dsep s oc
   

ucpop lc s oc
dunf lc s oc
ucpop s oc

  
  

   

    

minimum number nodes generated  log 

figure     tileworld problems  node counts strategies
figures    gives log log plot various strategies tileworld problems 
preconditions entered default order  note lcfr  s   oc   uc  
strategy highlighted  three strategies almost indistinguishable lcfr
 s   oc   uc    namely  lcfr  s   oc     uc   f    dunf gen  s   oc   uc  
dunf gen s   oc     uc   f    strategies performed worse 
easily seen figure     gives aggregate performance leading strategies 
able solve seven tileworld problems  fact  leading strategies
able solve seven tileworld problems without generating      nodes
problem  contrast  remaining strategies failed least one  four 
seven problems  given limit         nodes generated 
originally surprising us tileworld problems  delaying separable threats actually seems hurt performance  strategies best
lcfr dunf gen delay separable threats  lcfr dsep  zlifo  dsep lc 
dsep generated larger search spaces  contrast would predicted
given experiments basic problem set 
understand result  looked detail planning trace problems 
revealed tileworld domain  early resolution separable threats
important advantage  imposes turns correct temporal ordering
steps going tile  to pick up   carrying hole  virtually
strategies create subplans one shown figure     goals involve filling
holes  planners insert steps go pick tile  go hole 
point  two separable threats      effect going hole   at x    threatens
link going tile picking  at z         effect going
   

fiflaw selection strategies
   

  

  

node count   overrun

  

  

  

  

  

  

  

 
lcfr
s oc uc

lcfr
s oc   uc f

dunf gen
s oc uc

dunf gen
s oc   uc f

dunf gen
s oc

figure     tileworld problems  aggregate performance leading strategies

at x 

go x y 

at y 
loc h y 
holding t 

 at w 
at w 

go w z 

at z 
tile t 
loc t z 

 at x 

fill h 

filled h 

pickup t 

figure     typical partial plan tileworld domain
tile   at w    threatens link going hole filling  at y    
threats separable  x w unbound  planner yet know
traveling from  one valid temporal ordering
resolve threats  going tile must precede picking tile  turn must
precede going hole  temporal ordering determined  planning goes
smoothly 
contrast  ordering decision made  planner often  get lost  
attempting find plans goes location hole
hole tile  many ways attempt this  many different
   

fipollack  joslin    paolucci
      

lcfr dsep s oc   uc f
     

zlifo s oc   uc f
lcfr s oc uc

nodes generated  log 

lcfr s oc   uc f
dunf gen s oc   uc f
lcfr dsep s oc uc
dunf gen s oc
dunf gen s oc uc

    

dunf lc s oc
lcfr dsep s oc
dsep lc s oc
lcfr s oc
zlifo s oc
ucpop lc s oc
   

dunf s oc
dsep s oc
ucpop s oc

  
  

   

    

minimum number nodes generated  log 

figure     tileworld problems  node counts reversed precondition insertion
tiles select  many different locations move among  planner may try many
alternatives determining fundamental inconsistency
plans  destined fail  larger number holes filled 
worse situation becomes 
sometimes planner may make right decision temporal ordering even
deferred separable threats  faced partial plan figure     planner
select threat  select among several open conditions  attempt
establish precondition going hole  at x    reusing effect going
tile  at z     reverse  attempt establish precondition going
tile  at w    reusing effect going hole  at x     course  first
solution right one  includes critical temporal ordering constraint 
second eventually fail 
order open conditions selected determine two
choices planner makes  preconditions entered default order  planners
delay separable threats end making latter  problematic choice  contrast 
preconditions entered reverse order  planners make turns
correct choice  thus  experiments reversed precondition
insertion  see different pattern performance  shown figures        
preconditions entered reverse order  larger number strategies
perform well  solving problems  particular    oc     uc   f node   preserve readability  figure     used       denote   oc           oc   u c  
        oc   u c     f  

   

fi   
ucpop    

dunf    

dsep    

ucpop lc    

lcfr    

zlifo    

dsep lc    

lcfr dsep    

dunf lc   

dunf gen    

dunf gen    

lcfr dsep    

dunf gen    

lcfr    

lcfr    

zlifo    

lcfr dsep    

node count   overrun

flaw selection strategies

     

     

     

     

     

     

     

     

     

    

 

figure     tileworld problems  aggregate performance strategies reversed
precondition insertion

fipollack  joslin    paolucci
     

     

     
trains 
trains 
     

    

dsep lc
s oc

lcfr dsep
s oc

lcfr dsep
s oc   uc f

zlifo
s oc   uc f

dunf
s oc

lcfr dsep
s oc uc

zlifo
s oc

dsep
s oc

 

figure     trains problems  node counts
selection  performance lcfr  dunf gen  zlifo  lcfr dsep virtually indistinguishable  important note leading strategies delay separable
threats lcfr dunf gen are affected much reversal precondition insertion tileworld problems  fact  lcfr s performance identical cases 
contrast  strategies use separable threat delay lcfr dsep  zlifo  dseplc all perform much better reverse precondition insertion  explained
analysis above 
sum  important tileworld domain planner recognize 
early possible  certain required temporal orderings
steps successful plan  every successful plan involve going tile going
hole  although exibility order multiple holes visited 
interleaving picking tiles dropping holes  strategies
studied  two different methods led temporal constraint added
plan  added planner selected separable threat resolve 
added selected one particular precondition resolve another 
      trains get paid problems

trains domain present somewhat different variation original conclusions 
trains domain involves set locations objects  goal transport various
objects specific starting locations specified destinations  gerevini schubert
studied three trains problems  strategies failed successfully complete
hardest  trains   within either         node      second limit  moreover 
many failed second hardest  trains    caution must therefore taken
interpreting results  limited number data points 
   

fiflaw selection strategies
figure    gives node counts trains domain  preconditions inserted
default order  show strategies able solve trains  trains  
results closer would predicted basic problem set
results tileworld  particular  lcfr dsep well  generating
much smaller search spaces lcfr  however  slightly worse zlifo 
recall saw pattern performance subset basic problems 
specifically get paid uget paid problems  there  lcfr dsep improved
lcfr  generate small search spaces zlifo  turns
similar factors uencing sets problems  instructive consider
detail planning done zlifo lcfr dsep get paid uget paid problems
understand occurring 
trains domain problems  get paid uget paid problems involve moving
particular objects specified locations  get paid uget paid domain three
objects  paycheck  dictionary  briefcase  generally formulated  initial
state three home  paycheck briefcase  goal deposit
paycheck bank  bring dictionary work  briefcase home 
dictionary paycheck moved briefcase  human 
solution problem obvious  dictionary must put briefcase 
must carried work  dictionary taken out  briefcase must
carried home  addition  stop must made bank  either way work
way home  point paycheck must taken briefcase
deposited 
zlifo lcfr dsep take different paths solving problem  zlifo begins
forming plans get paycheck bank dictionary work  goals
selected first forced  one way get paycheck
bank  carry there   similarly one way get dictionary oce  carry
there   contrast  two possible ways get briefcase home  either
leaving  i e   reusing initial state  carrying somewhere else
 i e   adding new step   lifo mechanism proceeds complete plans
achieving goals getting paycheck bank dictionary work 
beginning work remaining goal  getting briefcase home  point 
goal easy solve  needed plan route home wherever briefcase
end two errands 
lcfr dsep  zlifo  begins selecting forced goals getting dictionary
oce getting paycheck bank  however  instead next completing
plans goals  lcfr dsep continues greedily select least cost aws  thus
begins work achieving goal getting briefcase home  unfortunately 
point clear briefcase needs moved home from  hence lcfrdsep begins engage lengthy process  guessing  briefcase
end tasks  planned tasks   
    diculty lcfr dsep encounters greedily picking low cost aws might reduced
lookahead several planning steps  determine accurate repair cost  approach
taken branch n mechanism o plan  currie   tate         significant overhead involved
strategy  however 

   

fipollack  joslin    paolucci
key decision get paid uget paid domain and  turns out  trains
domain is related to  subtly different key decision tileworld domain 
get paid uget paid trains  key insight planner
important temporal ordering goals  goal getting briefcase home
going achieved goal taking dictionary work  however 
recognition constraint affected separable threat delay 
tileworld  instead  happens domains higher cost aw interacts
lower cost one  causing latter become fully constrained 
tempting think finally case lifo based strategy
advantageous  all  example  completely determining
achieve one goal  make much easier know solve another goal  use
zlifo  or alternative lifo based strategy  guarantee interactions
high  lower cost aws exploited  particular interactions
among two unforced aws  order goals agenda lead zlifo
make inecient choice  thus  modified problem briefcase
work initial state  zlifo lcfr dsep solved problem quickly
     nodes zlifo     lcfr dsep   note modification removes
problematic interaction low cost high cost aw 
finally  note effectiveness lifo strategies heavily dependent
order preconditions entered onto open list  figure    gives
node counts trains domain reverse precondition insertion 
plot strategies solve trains   trains   case 
two strategies  lcfr dsep dsep lc  strategies rely lifo
open condition selection  zlifo  dsep  dunf gen  ucpop  significantly worse
preconditions correct order  extent lifo
helps domains  appears ability exploit decisions made
system designers writing domain operators  suggested williamson
hanks        

    computation time
covered key questions set address  relative effects
alternative search control strategies search space size  and  particular 
reconcile apparently con icting approaches lcfr zlifo  concluded
lcfr dsep combines main advantages reducing search space size two
strategies  namely lcfr s use least cost selection mechanism  least forced aws 
zlifo s use separable threat delay  final question concerns price one
pay use lcfr dsep or matter  alternative strategies  achieve
reduction search space size  necessary spend vastly time processing 
strategies pay themselves 
answer questions  collected timing data experiments  figures   
   gives data basic problems  experiments run node
limit run time limit   as detailed appendix a  results
experiments node limit time limit similar   saw
little uence precondition ordering basic problems  analyze data
   

fiflaw selection strategies
     

     

     

trains 

     

trains 

     

    

 
lcfr dsep
s oc uc

lcfr dsep
s oc   uc f

lcfr dsep
s oc

dsep lc
s oc

figure     trains problems  node counts reversed precondition insertion
   

   

computation time   overrun

   

   
time limit
node limit
   

   

  

 
dsep lc

zlifo

lcfr dsep

dsep

figure     basic problems  aggregate computation time performance leading strategies
default precondition ordering  show one graph strategies  another
includes  leading strategies   make possible see distinctions among
them 
   

fipollack  joslin    paolucci
     

computation time   overrun

     

     

time limit

     

node limit

     

    

 
dseplc

zlifo

lcfrdsep

dsep

ucpop

uc
pop lc

dunfgen

lcfr

dunflc

dunf

figure     basic problems  aggregate computation time performance
timing data show lcfr dsep does  large  pay overhead
basic problems generating smaller search spaces  and therefore process
fewer nodes   run time limit  lcfr dsep s time performance almost
identical zlifo s  despite fact repair cost computations expensive
stack popping lifo strategy  run node limit  lcfr dsep
show worse time performance zlifo aggregate  still performs markedly better
strategies  change relative performance results cases
strategies fail node limit  lcfr dsep takes longer generate       
nodes 
another interesting observation dsep lc best time performance
basic problem set  perhaps surprise  dsep lc closely
approximates lcfr dsep  differs primarily preference nonseparable threats 
case tend low repair costs  whenever node includes nonseparable threat  dsep lc quickly select threat  without compute repair
costs  speed advantage outweighs cost processing extra nodes sometimes
generates 
figures       provide timing data trains tileworld domains   
real surprises  computation times taken parallel quite closely size
search spaces generated  strategies generate smallest search spaces
fastest  trains problems  see dsep lc serve
    omitted strategies poorly  performing worse node  time limit
experiments strategies graphed  note ran reverse order experiments
node limit 

   

fiflaw selection strategies
    

    

computation time   overrun

    

    
default node limit
default time limit
    

    

    

 
lcfr
   

dunfgen
   

lcfr
   

dunfgen
   

dunfgen
   

zlifo
   

lcfr
   

zlifo
   

lcfrdsep
   

lcfrdsep
   

dsep
   

figure     tileworld problems  aggregate computation time performance leading
strategies
good approximation technique lcfr dsep  although generates nodes
lcfr dsep  somewhat faster   

   conclusion
paper  synthesized much previous work aw selection partialorder causal link planning  showing earlier studies relate one another 
developed concise notation describing alternative aw selection strategies 
presented results series experiments aimed clarifying effects
alternative search control preferences search space size  particular  aimed
explaining comparative performance lcfr zlifo strategies  showed
neither aw selection strategies consistently generates smaller search spaces 
combining lcfr s least cost approach delay separable threats
included zlifo strategy  obtain strategy lcfr dsep whose space
performance nearly always good better lcfr zlifo given problem 
therefore concluded much zlifo s advantage relative lcfr due delay
separable threats rather use lifo strategy  although unable
resolve question whether least cost selection required unforced  well
forced aws  found evidence lifo strategy unforced aws better 
hand  separable threat delay clearly advantageous  open question exactly
advantageous  conducted preliminary experiments suggest
    interpreting trains timing data  important note strategies shown notably
ucpop  ucpop lc  dunf  failed solve trains  within either node time limit 

   

fipollack  joslin    paolucci
   

   

computation time   overrun

   

   

   

   

   

   

   

s oc uc
dunf gen

s oc
dunf gen

s oc
lcfr dsep

s oc
dunf lc

s oc
dsep lc

s oc   uc f
dunf gen

s oc   uc f
lcfr

s oc uc
lcfr

s oc   uc f
lcfr dsep

s oc   uc f
zlifo

s oc uc
lcfr dsep

 

figure     tileworld problems  aggregate computation time performance leading
strategies reversed precondition insertion
    

computation time   overrun

    

    
default   node limit
default time limit
    

   

s oc
ucpop

s oc
lcfr dsep

s oc uc
lcfr dsep

s oc   uc f
lcfr dsep

s oc
dsep lc

s oc   uc f
zlifo

s oc
zlifo

s oc
dunf

s oc
dsep

 

figure     trains problems  aggregate computation time performance leading strategies
   

fiflaw selection strategies

    
    

computation time   overrun

    
    
    
    
   
   
   
   

s oc
dsep

s oc   uc f
zlifo

s oc
zlifo

s oc uc
lcfr dsep

s oc   uc f
lcfr

s oc
dunf lc

s oc
lcfr

s oc
ucpop lc

s oc
lcfr dsep

s oc   uc f
lcfr dsep

s oc
dsep lc

 

figure     trains problems  aggregate computation time performance leading strategies reversed precondition insertion

   

fipollack  joslin    paolucci
much search space reduction results delaying separable threats
achieved making separation systematic  something ucpop v   do 
considered question computation time  showed often lcfr dsep
requires computation time comparable zlifo  lcfr dsep therefore
seen paying computational overhead search space reduction  moreover 
peot smith s dsep lc provides good approximation lcfr dsep  although
produces somewhat larger search spaces  quickly 
conclusions  however  tempered fact certain clusters problems  combined strategy  lcfr dsep  generate minimal search spaces 
saw  tileworld problems  important recognize need
particular temporal ordering among plan steps  recognition obtained
resolving separable threats early  trains get paid uget paid domains 
matters recognizing particular effect fact achieved one
way  recognized particular aw selected a aw happens
generally least cost aw available  lesson learned sets
problems although understand reasons lcfr zlifo perform
way do  combine best features create good default strategies pocl planning  clear domain dependent characteristics
identified trains tileworld domains must still taken account settling
aw selection strategy domain 

acknowledgments
martha pollack s work project supported air force oce scientific
research  f                 nsf young investigator s award  iri           david
joslin supported rome labs  rl arpa  f                 nsf cise
postdoctoral research award  cda           massimo paolucci supported
oce naval research  cognitive neural sciences division  n         j       
grateful alfonso gerevini providing us code used
earlier study  allowing us use experiments  would thank
arthur nunes yazmine deleon  assisted us carrying experiments done
preliminary stages work  finally  thank alfonso gerevini  len schubert 
michael wellman  anonymous reviewers helpful comments work 

appendix a  ruling ceiling effects
data collected using node limit  examined problems least
one strategies hit node limit  table    gives second worst node count
problems  shows that  basic problems least one strategy
failed  least one succeeded  second worst strategy generally created fewer
     nodes 
similarly  trains tileworld problems  cases except tw  
second worst strategy took fewer        nodes  and tw  took          recall
node limit basic problems        nodes  trains
tileworld problems         nodes  thus clear strategies hit
   

fiflaw selection strategies
problem
hanoi
r test 
monkey test 
monkey test 
get paid 
get paid 
get paid 
fixit
ho demo
fixb
uget paid 
uget paid 
uget paid 
prodigy p  
move boxes
move boxes  

default

reverse
    
    
    
     
   
    
    
     

trains 
trains 
tw  
tw  
tw  
tw  
tw  

     
   
    
    
    
    
     

    
    
    
     
   
    
    
     
     
    
   
    
    
    
    
     

     
      

     
      

     
    
     
    

     
   
    
     
    

figure     second worst node counts problems failing strategies
node limit substantially worse strategies succeed  even
succeed increasing node limit slightly  comparative performance would still
poor 
thus  using node limits imposed  making strategies look worse
actually are  hand  computing   overrun  may making
strategies look better actually are  use value         or
         nodes generated strategy hits limit  actual number nodes
might take  run completion  could significantly higher  why  analyses 
considered absolute performance strategies individual problems 
aggregate performance  measured average   overrun 
compared experiments run time limit
run node limit  basic problem set  time limit     seconds high
enough that  cases  strategies could compute significantly nodes
   

fipollack  joslin    paolucci
could node cutoff  nonetheless  results almost identical  nearly
cases  strategy failed node cutoff  failed time limit cutoff 
four exceptions this 
   hanoi         nodes limit  dsep fails      second time limit 
succeeds  taking        nodes 
   uget paid          node limit  ucpop lc fails      second
time limit  succeeds  taking        nodes 
   uget paid          node limit  ucpop lc fails      second
time limit  succeeds  taking        nodes 
   fixit         nodes limit  dsep lc  ucpop lc  zlifo fail 
    second time limit  succeed                        nodes
respectively  strategies fail solve problem either limit 
similarly strong correspondence results obtained
trains tileworld problems using node limit time limit  cases 
strategy able succeed within         node limit able succeed
within       second time limit  nature problems computation
time per node great  specifically 
   tw   dunf succeeded        nodes run node limit  failed
      second time limit 
   tw   lcfr dsep  with s oc node selection strategy  succeeded       
nodes  failed time limit 
   tw   lcfr dsep  with s oc uc node selection strategy  succeeded
        failed limit 
   tw   lcfr  with s oc node selection strategy  succeeded       nodes 
failed time limit 
one case strategy fail node limit succeed within time limit 
   tw   dsep  with s oc node selection strategy  failed         node
limit  succeeded         nodes using     second time limit  note
significantly worse second worst strategy  solved problem
generating        nodes 
given close correspondence experiments node time limits 
collected node limit data experiments reversed precondition
insertion 

   

fiflaw selection strategies

references

allen  j  f   schubert  l  k   ferguson  g  m   heeman  p  a   hwant  c  h   kato  t   light 
m   margin  n  g   miller  b  w   poesio  m     traum  b  r          trains
project  case study building conversational planning agent  experimental
theoretical artificial intelligence          
chapman  d          planning conjunctive goals  artificial intelligence                  
currie  k     tate  a          o plan  open planning architecture  artificial intelligence            
etzioni  o   hanks  s   weld  d   draper  d   lesh  n     williamson  m         
approach planning incomplete information  proceedings third international conference principles knowledge representation reasoning  pp 
        
gerevini  a          personal communication 
gerevini  a     schubert  l          accelerating partial order planners  techniques
effective search control pruning  journal artificial intelligence research    
       
joslin  d          passive active decision postponement plan generation  ph d 
thesis  intelligent systems program  university pittsburgh 
joslin  d     pollack  m  e          least cost aw repair  plan refinement strategy
partial order planning  proceedings twelfth national conference artificial
intelligence  aaai   pp            seattle  wa 
joslin  d     pollack  m  e           early commitment  plan generation ever good
idea   proceedings thirteenth national conference artificial intelligence
 aaai   pp            portland  or 
kambhampati  s   knoblock  c  a     yang  q          planning refinement search 
unified framework evaluating design tradeoffs partial order planning  artificial
intelligence                    
kumar  v          algorithms constraint satisfaction problems  survey  ai magazine 
              
mcallester  d     rosenblitt  d          systematic nonlinear planning  proceedings
ninth national conference artificial intelligence  pp          anaheim  ca 
pednault  e  p  d          synthesizing plans contain actions context dependent
effects  computational intelligence                 
penberthy  j  s     weld  d          ucpop  sound  complete  partial order planner
adl  proceedings third international conference knowledge representation reasoning  pp          cambridge  ma 
   

fipollack  joslin    paolucci
peot  m     smith  d  e          conditional nonlinear planning  proceedings first
international conference ai planning systems  aips      pp          college
park  md 
peot  m     smith  d  e          threat removal strategies partial order planning 
proceedings eleventh national conference artificial intelligence  pp         
washington  d c 
pollack  m  e     ringuette  m          introducing tileworld  experimentally evaluating agent architectures  proceedings eighth national conference artificial
intelligence  pp          boston  ma 
russell  s     norvig  p          artificial intelligence  modern approach  prentice hall 
englewood cliffs  nj 
russell  s  j          ecient memory bounded search algorithms  proceedings
tenth european conference artificial intelligence  pp      
smith  d  e     peot  m  a          note dmin strategy  unpublished manuscript 
srinivasan  r     howe  a  e          comparison methods improving search eciency
partial order planner  proceedings   th international joint conference
artificial intelligence  pp            
tate  a   drabble  b     dalton  j          reasoning constraints within o plan  
tech  rep  arpa rl o plan  tp   v     aiai  edinburgh 
tsang  e          foundations constraint satisfaction  academic press 
tsuneto  r   erol  k   hendler  j     nau  d          commitment strategies hierarchical task network planning  proceedings thirteenth national conference
artificial intelligence  aaai   pp          portland  or 
weld  d  s          introduction least commitment planning  ai magazine         
      
wilkins  d  e          practical planning  extending classical ai paradigm  morgan
kaufmann  san mateo  ca 
wilkins  d  e     desimone  r  v          applying ai planner military operations
planning  fox  m     zweben  m   eds    intelligent scheduling  pp          
morgan kaufmann publishers  san mateo  ca 
williamson  m     hanks  s          flaw selection strategies value directed planning 
proceedings third international conference artificial intelligence planning
systems  pp          

   


