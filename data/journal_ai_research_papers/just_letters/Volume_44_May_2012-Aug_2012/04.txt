journal of artificial intelligence research                  

submitted        published      

online speedup learning for optimal planning
carmel domshlak
erez karpas

dcarmel   ie   technion   ac   il
karpase   technion   ac   il

faculty of industrial engineering and management
technion   israel institute of technology
haifa         israel

shaul markovitch

shaulm   cs   technion   ac   il

faculty of computer science
technion   israel institute of technology
haifa         israel

abstract
domain independent planning is one of the foundational areas in the field of artificial intelligence  a description of a planning task consists of an initial world state  a goal  and a set of actions
for modifying the world state  the objective is to find a sequence of actions  that is  a plan  that
transforms the initial world state into a goal state  in optimal planning  we are interested in finding not just a plan  but one of the cheapest plans  a prominent approach to optimal planning these
days is heuristic state space search  guided by admissible heuristic functions  numerous admissible
heuristics have been developed  each with its own strengths and weaknesses  and it is well known
that there is no single best heuristic for optimal planning in general  thus  which heuristic to
choose for a given planning task is a difficult question  this difficulty can be avoided by combining
several heuristics  but that requires computing numerous heuristic estimates at each state  and the
tradeoff between the time spent doing so and the time saved by the combined advantages of the
different heuristics might be high  we present a novel method that reduces the cost of combining admissible heuristics for optimal planning  while maintaining its benefits  using an idealized
search space model  we formulate a decision rule for choosing the best heuristic to compute at each
state  we then present an active online learning approach for learning a classifier with that decision
rule as the target concept  and employ the learned classifier to decide which heuristic to compute at
each state  we evaluate this technique empirically  and show that it substantially outperforms the
standard method for combining several heuristics via their pointwise maximum 

   introduction
at the center of the problem of intelligent autonomous behavior is the task of selecting the actions
to take next  planning in ai is best conceived as the model based approach to automated action
selection  geffner         the models represent the current situation  goals  and possible actions 
planning specific languages are used to describe such models concisely  the main challenge in
planning is computational  as most planning languages lead to intractable problems in the worst
case  however  using rigorous search guidance tools often allows for efficient solving of interesting
problem instances 
in classical planning  which is concerned with the synthesis of plans constituting goal achieving
sequences of deterministic actions  significant algorithmic progress has been achieved in the last
two decades  in turn  this progress in classical planning is translated to advances in more involved
planning languages  allowing for uncertainty and feedback  yoon  fern    givan        palacios
c
    
ai access foundation  all rights reserved 

fid omshlak   k arpas     m arkovitch

  geffner        keyder   geffner        brafman   shani         in optimal planning  the
objective is not just to find any plan  but to find one of the cheapest plans 
a prominent approach to domain independent planning  and to optimal planning in particular 
is state space heuristic search  it is very natural to view a planning task as a search problem  and
use a heuristic search algorithm to solve it  recent advances in automatic construction of heuristics
for domain independent planning established many heuristics to choose from  each with its own
strengths and weaknesses  however  this wealth of heuristics leads to a new question  given a
specific planning task  which heuristic to choose 
in this paper  we propose selective max  an online learning approach that combines the
strengths of several heuristic functions  leading to a speedup in optimal heuristic search planning 
at a high level  selective max can be seen as a hyper heuristic  burke  kendall  newall  hart  ross 
  schulenburg         a heuristic for choosing among other heuristics  it is based on the seemingly trivial observation that  for each state  there is one heuristic which is the best for that state 
in principle  it is possible to compute several heuristics for each state  and then choose one according to the values they provide  however  heuristic computation in domain independent planning is
typically expensive  and thus computing several heuristic estimates for each state takes a long time 
selective max works by predicting for each state which heuristic will yield the best heuristic
estimate  and computes only that heuristic 
as it is not always clear how to decide what the best heuristic for each state is  we first
analyze an idealized model of a search space and describe how to choose there the best heuristic for
each state in order to minimize the overall search time  we then describe an online active learning
procedure that uses a decision rule formulated for the idealized model  this procedure constitutes
the essence of selective max 
our experimental evaluation  which we conducted using three state of the art heuristics for
domain independent planning  shows that selective max is very effective in combining several
heuristics in optimal search  furthermore  the results show that using selective max results in a
speedup over the baseline heuristic combination method  and that selective max is robust to different parameter settings  these claims are further supported by selective max having been a runnerup ex aequo in the last international planning competition  ipc       garca olaya  jimenez   
linares lopez        
this paper expands on the conference version  domshlak  karpas    markovitch        in
several ways  first  we improve and expand the presentation of the selective max decision rule 
second  we explain how to handle non uniform action costs in a principled way  third  the empirical
evaluation is greatly extended  and now includes the results from ipc       as well as controlled
experiments with three different heuristics  and an exploration of how the parameters of selective
max affect its performance 

   previous work
selective max is a speedup learning system  in general  speedup learning is concerned with improving the performance of a problem solving system with experience  the computational difficulty of
domain independent planning has led many researchers to use speedup learning techniques in order
to improve the performance of planning systems  for a survey of many of these  see the work of
minton         zimmerman and kambhampati         and fern  khardon  and tadepalli        
   

fio nline s peedup l earning for o ptimal p lanning

speedup learning systems can be divided along several dimensions  zimmerman   kambhampati        fern         arguably the most important dimension is the phase in which learning takes
place  an offline  or inter problem  speedup learner analyzes the problem solvers performance on
different problem instances in an attempt to formulate some rule which would not only improve this
performance but would also generalize well to future problem instances  offline learning has been
applied extensively to domain independent planning  with varying degrees of success  fern et al  
       however  one major drawback of offline learning is the need for training examples  in our
case  planning tasks from the domains of interest 
learning can also take place online  during problem solving  an online  or intra problem 
speedup learner is invoked by the problem solver on a concrete problem instance the solver is
working on  and it attempts to learn online  with the objective of improving the solvers performance
on that specific problem instance being solved  in general  online learners are not assumed to be pretrained on some other  previously seen problem instances  all the information they can rely on has to
be collected during the process of solving the concrete problem instance they were called for  online
learning has been shown to be extremely helpful in propositional satisfiability  sat  and general
constraint satisfaction  csp  solving  where nogood learning and clause learning are now among
the essential components of any state of the art solver  schiex   verfaillie        marques silva
  sakallah        bayardo jr    schrag         thus  indirectly  sat  and csp based domainindependent planners already benefit from these online learning techniques  kautz   selman       
rintanen  heljanko    niemela         however  to the best of our knowledge  our work is the first
application of online learning to optimal heuristic search planning 

   background
a domain independent planning task  or planning task  for short  consists of a description of an
initial state  a goal  and a set of available operators  several formalisms for describing planning tasks
are in use  including strips  fikes   nilsson         adl  pednault         and sas   backstrom
  klein        backstrom   nebel         we describe the sas  formalism  the one used by
the fast downward planner  helmert         on top of which we have implemented and evaluated
selective max  nothing  however  precludes using selective max in the context of other formalisms 
a sas  planning task is given by a   tuple    hv  a  s    gi  v    v            vn   is a set of state
variables  each associated with a finite domain dom vi    a complete assignment s to v is called a
state  s  is a specified state called the initial state  and the goal g is a partial assignment to v   a is
a finite set of actions  each action a is given by a pair hpre a   eff a i of partial assignments to v
called preconditions and effects  respectively  each action a also has an associated cost c a   r    
an action a is applicable in a state s iff s    pre a   applying a changes the value of each state
variable v to eff a  v  if eff a  v  is specified  the resulting state is denoted by sjak  we denote
the state obtained from sequential application of the  respectively applicable  actions a            ak
starting at state s by sjha            ak ik  such an action sequence is a plan if s  jha            ak ik    g 
in optimal planning  we are interested in finding one of
pthe cheapest plans  where the cost of a plan
ha            ak i is the sum of its constituent action costs ki   c ai   
a sas  planning task    hv  a  s    gi can be easily seen as a state space search problem
whose states are simply complete assignments to the variables v   with transitions uniquely determined by the actions a  the initial and goal states are also defined by the initial state and goal of  
an optimal solution for a state space search problem can be found by using the a search algorithm
   

fid omshlak   k arpas     m arkovitch

with an admissible heuristic h  a heuristic evaluation function h assigns an estimate of the distance
to the closest goal state from each state it evaluates  the length of a cheapest path from state s to the
goal is denoted by h  s   and h is called admissible if it never overestimates the true goal distance
 that is  if h s   h  s  for any state s  a works by expanding states in the order of increasing
f  s     g s    h s   where g s  is the cost of the cheapest path from the initial state to s known so
far 

   selective max as a decision rule
many admissible heuristics have been proposed for domain independent planning  these vary from
cheap to compute yet not very accurate  to more accurate yet expensive to compute  in general 
the more accurate a heuristic is  the fewer states would be expanded by a when using it  as the
accuracy of heuristic functions varies for different planning tasks  and even for different states of
the same task  we may be able to produce a more robust optimal planner by combining several admissible heuristics  presumably  each heuristic is more accurate  that is  provides higher estimates 
in different regions of the search space  the simplest and best known way for doing that is using the point wise maximum of the heuristics in use at each state  given n admissible heuristics 
h            hn   a new heuristic  maxh   is defined by maxh  s     max in hi  s   it is easy to see that
maxh  s   hi  s  for any state s and for any heuristic hi   thus a search using maxh is expected to
expand fewer states than a using any individual heuristic phowever  if we denote the time needed
to compute hi by ti   the time needed to compute maxh is ni   ti  
as mentioned previously  selective max is a form of hyper heuristic  burke et al         that
chooses which heuristic to compute at each state  we can view selective max as a decision rule dr 
which is given a set of heuristics h            hn and a state s  and chooses which heuristic to compute
for that state  one natural candidate for such a decision rule is the heuristic which yields the highest 
that is  most accurate  estimate 
drmax   h            hn    s     hargmax in hi  s   
using this decision rule yields a heuristic which is as accurate as maxh   while still computing only
one heuristic per state  in time targmax in hi  s   
this analysis  however  does not take into account the different computation times of the different heuristics  for instance  let h  and h  be a pair of admissible heuristics such that h   h   
a priori  it seems that using h  should always be preferred to using h  because the former should
cause a to expand fewer states  however  suppose that on a given planning task  a expands     
states when guided by h  and only     states when guided by h    if computing h  for each state
takes    ms  and computing h  for each state takes      ms  then switching from h  to h  increases
the overall search time  using maxh over h  and h  only makes things worse  because h   h   
and thus computing the maximum simply wastes the time spent on computing h    it is possible 
however  that computing h  for a few carefully chosen states  and computing h  for all other states 
would result in expanding     states  while reducing the overall search time when compared to
running a with only h   
as this example shows  even given knowledge of the heuristics estimates in advance  it is not
clear what heuristic should be computed at each state when our objective is to minimize the overall
search time  therefore  we begin by formulating a decision rule for choosing between one of two
heuristics  with respect to an idealized state space model  selective max then operates as an online
   

fio nline s peedup l earning for o ptimal p lanning

s 

s
f    c

f    c
sg

figure    an illustration of the idealized search space model and the f  contours of two admissible
heuristics

active learning procedure  attempting to predict the outcome of that decision rule and choose which
heuristic to compute at each state 
    decision rule with perfect knowledge
we now formulate a decision rule for choosing which of two given admissible heuristics  h  and h   
to compute for each state in an idealized search space model  in order to formulate such a decision
rule  we make the following assumptions 
 the search space is a tree with a single goal  constant branching factor b  and uniform cost
actions  such an idealized search space model was used in the past to analyze the behavior of
a  pearl        
 the time ti required for computing heuristic hi is independent of the state being evaluated 
w l o g  we assume t   t   
 the heuristics are consistent  a heuristic h is said to be consistent if it obeys the triangle
inequality  for any two states s  s    h s   h s      k s  s     where k s  s    is the optimal cost
of reaching s  from s 
 we have   i  perfect knowledge about the structure of the search tree  and in particular the
cost of the optimal solution c    ii  perfect knowledge about the heuristic estimates for each
state  and  iii  a perfect tie breaking mechanism 
obviously  none of the above assumptions holds in typical search problems  and later we examine
their individual influence on our framework 
adopting the standard notation  let g s  be the cost of the cheapest path from s  to s  defining
maxh  s    max h   s   h   s    we then use the notation f   s    g s    h   s   f   s    g s   
h   s   and maxf  s    g s    maxh  s   the a algorithm with a consistent heuristic h expands
states in increasing order of f   g   h  pearl         in particular  every state s with f  s   
h  i    c will surely be expanded by a   and every state with f  s    c will surely not be
   

fid omshlak   k arpas     m arkovitch

expanded by a   the states with f  s    c might or might not be expanded by a   depending on
the tie breaking rule being used  under our perfect tie breaking assumption  the only states with
f  s    c that will be expanded are those that lie along some optimal plan 
let us consider the states satisfying f   s    c  the dotted line in fig     and those satisfying
f   s    c  the solid line in fig      the states above the f    c and f    c contours are those
that are surely expanded by a with h  and h    respectively  the states above both these contours
 the grid marked region in fig      that is  the states se    s   maxf  s    c    are those that are
surely expanded by a using maxh  pearl        thm     p      
under the objective of minimizing the search time  note that the optimal decision for any state
s  se is not to compute any heuristic at all  since all these states are surely expanded anyway 
assuming that we still must choose one of the heuristics  we would choose to compute the cheaper
heuristic h    another easy case is when f   s   c   in these states  computing h   s  suffices to
ensure that s is not surely expanded  and using a perfect tie breaking rule  s will not be expanded
unless it must be  because h  is also cheaper to compute than h    h  should be preferred  regardless
of the heuristic estimate of h  for state s 
let us now consider the optimal decision for all other states  that is  those with f   s    c and
f   s   c   in fact  it is enough to consider only the shallowest such states  in figure    these are the
states on the part of the f    c contour that separates between the grid marked and line marked
areas  since f   s  and f   s  are based on the same g s   we have h   s    h   s   that is  h  is
more accurate in state s than h    if we were interested solely in reducing state expansions  then h 
would obviously be the right heuristic to compute at s  however  for our objective of reducing the
actual search time  h  may actually be the wrong choice because it might be much more expensive
to compute than h   
let us consider the effects of each of our two alternatives  if we compute h   s   then s is
not surely expanded  because f   s    c   and thus whether or not a expands s depends on tiebreaking  as before  we are assuming perfect tie breaking  and thus s will not be expanded unless
it must be  computing h  would cost us t  time 
in contrast  if we compute h   s   then s is surely expanded because f   s    c   note that not
computing h  for s and then computing h  for one of the descendants s  of s is clearly a sub optimal
strategy as we do pay the cost of computing h    yet the pruning of a is limited only to the search
sub tree rooted in s    therefore  our choices are really either computing h  for s  or computing h 
for all the states in the sub tree rooted in s that lie on the f    c contour  suppose we need to
expand l complete levels of the state space from s to reach the f    c contour  thus  we need to
generate an order of bl states  and then invest bl t  time in calculating h  for all these states that lie
on the f    c contour 
considering these two options  the optimal decision in state s is thus to compute h  iff t    bl t   
or to express it differently  if l   logb   tt      as a special case  if both heuristics take the same time to
compute  this decision rule reduces to l      that is  the optimal choice is simply the more accurate
heuristic for state s 
putting all of the above cases together yields the decision rule dropt   as below  with ls being the
depth to go from s until f   s    c  
   

fio nline s peedup l earning for o ptimal p lanning



h    f   s    c   f   s    c



h   f  s   c
 
 
 
dropt   h    h     s    

h    f   s    c   f   s   c   ls  logb   tt    



h   f  s    c   f  s   c   l   log   t   
 
 
 
s
b t 
    decision rule without perfect knowledge
the idealized model above makes several assumptions  some of which appear to be very problematic
to meet in practice  here we examine these assumptions more closely  and when needed  suggest
pragmatic compromises 
first  the model assumes that the search space forms a tree with a single goal state  that the
heuristics in question are consistent  and that we have a perfect tie breaking rule  although the
first assumption does not hold in most planning tasks  the second assumption is not satisfied by
many state of the art heuristics  karpas   domshlak        helmert   domshlak        bonet
  helmert         and the third assumption is not realistic  they do not prevent us from using the
decision rule suggested by the model 
the idealized model also assumes that both the branching factor and the heuristic computation
times are constant across the search states  in our application of the decision rule to planning
in practice  we deal with this assumption by adopting the average branching factor and heuristic
computation times  estimated from a random sample of search states 
finally  the decision rule dropt above requires unrealistic knowledge of both heuristic estimates 
as well as of the optimal plan cost c and the depth ls to go from state until f   s    c   as we
obviously do not have this knowledge in practice  we must use some approximation of the decision
rule 
the first approximation we make is to ignore the trivial cases that require knowledge of c  
these are the cases where either s is surely expanded  or h  is enough to prune s  instead  we apply
the reasoning for the complicated case for all states  resulting in the following decision rule 
 
h    ls  logb   tt    
drapp    h    h     s    
 
h    ls   logb   tt    
the next step is to somehow estimate the depth to go ls  the number of layers we need to
expand in the tree until f  reaches c   in order to derive a useful decision rule  we assume that ls
has a positive correlation with h  s    h   s   h   s   that is  if h  and h  are close  then ls is low 
and if h  yields a much lower estimate than h    implying that h  is not very accurate for s  then the
depth to go until f   s    c is large  our approximation uses the simplest such correlation  a
linear one  between h  s  and ls   with a hyper parameter  for controlling the slope 
recall that in our idealized model  all actions were unit cost  and thus cost to go and depthto go are the same  however  some planning tasks  and notably  all planning tasks from the     
international planning competition  feature non uniform action costs  therefore  our decision rule
converts heuristic estimates of cost to go into heuristic estimates of depth to go by dividing the
cost to go estimate by the average action cost  we do this by modifying our estimate of the depthto go  ls   with the average action cost  which we denote by c  plugging all of the above into our
   

fid omshlak   k arpas     m arkovitch

decision rule yields 
 
h   
drapp    h    h     s    
h   

h  s     c  logb   tt    
 
h  s      c  logb   tt    

given b  t    t    and c  the quantity   c  logb  t   t    becomes fixed  and in what follows we denote
it simply by threshold   
note that linear correlation between h  s  and ls occurs in some simple cases  the first such
case is when the h  value remains constant in the subtree rooted at s  that is  the additive error of
h  increases by   for each level below s  in this case  f  increases by   for each expanded level of
the sub tree  because h  remains the same  and g increases by     and it will take expanding exactly
h  s    h   s   h   s  levels to reach the f    c contour  the second such case is when the
absolute error of h  remains constant  that is  h  increases by   for each level expanded  and so f 
increases by    in this case  we will need to expand h  s    levels  this can be generalized to the
case where the estimate h  increases by any constant additive factor c  which results in h  s   c   
levels being expanded 
furthermore  there is some empirical evidence to support our conclusion about exponential
growth of the search effort as a function of heuristic error  even when the assumptions made by the
model do not hold  in particular  the experiments of helmert and roger        on ipc benchmarks
with heuristics with small constant additive errors show that the number of expanded nodes most
typically grows exponentially as the  still very small and additive  error increases 
finally  we remark that because our decision rule always chooses an admissible heuristic  the
resulting heuristic estimate will always be admissible  thus  even if the chosen heuristic is not the
correct one according to dropt   this will not result in loss of optimality of the solution  but only in
a possible increase in search time 

   online learning of the decision rule
while decision rule drapp  still requires knowledge of h  and h    we can now use it as a binary
label for each state  we can compute the value of the decision rule by paying the computation
time of both heuristics  t    t    and  more importantly  we can use a binary classifier to predict the
value of this decision rule for some unknown state  note that we use the classifier online  during the
problem solving process  and the time spent on learning and classification is counted as time spent
on problem solving  furthermore  as in active learning  we can choose to pay for a label for some
state  where the payment is also in computation time  therefore we refer to our setting as active
online learning 
in what follows  we provide a general overview of the selective max procedure  and describe
several alternatives for each of its components  our decision rule states that the more expensive
heuristic h  should be computed at a search state s when h   s   h   s       this decision rule
serves as a binary target concept  which corresponds to the set of states where the more expensive
heuristic h  is significantly more accurate than the cheaper heuristic h   the states where  according to our model  the reduction in expanded states by computing h  outweighs the extra time
needed to compute it  selective max then uses a binary classifier to predict the value of the decision
rule  there are several steps to building the classifier 
   

fio nline s peedup l earning for o ptimal p lanning

evaluate s 
hh  conf idencei    classify s  model 
if  conf idence     then
return h s 
else
label    h 
if h   s   h   s      c  logb  t   t    then label    h 
update model with hs  labeli
return max h   s   h   s  
figure    the selective max state evaluation procedure
   training example collection  we first need to collect training examples  which should be
representative of the entire search space  several state space sampling methods are discussed
in section     
   labeling training examples  after the training examples are collected  they are first used to
estimate the average branching factor b  average heuristic computation times t  and t    and
the average action cost c  once b  t    t    and c are estimated  we use them to estimate the
threshold      c  logb  t   t    for the decision rule 
we then generate a label for each training example by calculating h  s    h   s   h   s  
and comparing it to the decision threshold  if h  s       we label s with h    otherwise with
h    if t    t  we simply switch between the heuristics  our decision is always whether or
not to compute the more expensive heuristic  the default is to compute the cheaper heuristic 
unless the classifier says otherwise 
   feature extraction  having obtained a set of training examples  we must decide about the
features to characterize each example  since our target concept is based on heuristic values 
the features should represent the information that heuristics are derived from  typically the
problem description and the current state 
while several feature construction techniques for characterizing states of planning tasks have
been proposed in previous literature  yoon  fern    givan        de la rosa  jimenez   
borrajo         they were all designed for inter problem learning  that is  for learning from
different planning tasks which have already been solved offline  however  in our approach 
we are only concerned with one problem  in an online setting  and thus these techniques are
not applicable  in our implementation  we use the simplest features possible  taking each
state variable as a feature  as our empirical evaluation demonstrates  even these elementary
features suffice for selective max to perform well 
   learning  once we have a set of labeled training examples  each represented by a vector of
features  we can train a binary classifier  several different choices of classifier are discussed
in section     
after completing the steps described above  we have a binary classifier that can be used to
predict the value of our decision rule  however  as the classifier is not likely to have perfect accuracy 
   

fid omshlak   k arpas     m arkovitch

we further consult the confidence the classifier associates with its classification  the resulting state
evaluation procedure of selective max is depicted in figure    for every state s evaluated by the
search algorithm  we use our classifier to decide which heuristic to compute  if the classification
confidence exceeds a confidence threshold   a parameter of selective max  then only the indicated
heuristic is computed for s  otherwise  we conclude that there is not enough information to make
a selective decision for s  and compute the regular maximum over h   s  and h   s   however  we
use this opportunity to improve the quality of our prediction for states similar to s  and update our
classifier by generating a label based on h   s h   s  and learning from the newly labeled example 
these decisions to dedicate computation time to obtain a label for a new example constitute the
active part of our learning procedure  it is also possible to update the estimates for b  t    t    and c 
and change the threshold  accordingly  however  this would result in the concept we are trying
to learn constantly changing  a phenomenon known as concept drift  which usually affects
learning adversely  therefore  we do not update the threshold   
    state space sampling
the initial state space sample serves two purposes  first  it is used to estimate the branching factor
b  the heuristic computation times t  and t    the average action cost c  and then to compute the
threshold      c  logb  t   t     which is used to specify our concept  after the concept is specified 
the state space sample also provides us with a set of examples on which the classifier is initially
trained  therefore  it is important to have an initial state space sample that is representative of the
states which will be evaluated during search  the number of states in the initial sample is controlled
by a parameter n  
one option is to use the first n states of the search  however  this method is biased towards
states closer to the initial state  and therefore is not likely to represent the search space well  thus 
we discuss three more sophisticated state space sampling procedures  all of which are based on
performing random walks  or probes  from the initial state  while the details of these sampling
procedures vary  each such probe terminates at some pre set depth limit 
the first sampling procedure  which we refer to as biased probes  uses an inverse heuristic
selection bias for choosing the next state to go to in the probe  specifically  the probability of
choosing state s as the successor from which the random walk will continue is proportional to
   maxh  s   this biases the sample towards states with lower heuristic estimates  which are more
likely to be expanded during the search 
the second sampling procedure is similar to the first one  except that it chooses the successor
uniformly  and thus we refer to it as unbiased probes  both these sampling procedures add all
of the generated states  that is  the states along the probe as well as their siblings  to the statespace sample  and they both terminate after collecting n training examples  the depth limit for all
random walks is the same in both sampling schemes  and is set to some estimate of the goal depth 
we discuss this goal depth estimate later 
the third state space sampling procedure  referred to here as pdb sampling  has been proposed
by haslum  botea  helmert  bonet  and koenig         this procedure also uses unbiased probes 
but only adds the last state reached in each probe to the state space sample  the depth of each
probe is determined individually  by drawing a random depth from a binomial distribution around
the estimated goal depth 
   

fio nline s peedup l earning for o ptimal p lanning

note that all three sampling procedures rely on some estimate of the minimum goal depth 
when all actions are unit cost  the minimum goal depth is the same as h  s     and thus we can use
a heuristic to estimate it  in our evaluation  we used twice the heuristic estimate of the initial state 
   maxh  s     as the goal depth estimate  however  with non uniform action costs  goal depth and
cost are no longer measured in the same units  while it seems we could divide the above heuristicbased estimate by the average action cost c  recall that we use the state space sample in order to
obtain an estimate for estimate c  thus creating a circular dependency  although it is possible to
estimate c by taking the average cost of all actions in the problem description  there is no reason
to assume that all actions are equally likely to be used  another option is to modify the above
state space sampling procedures  and place a cost limit  rather than a depth limit  on each probe 
however  this would pose a problem in the presence of   cost actions  in such a case  when a probe
reaches its cost limit yet has a possible   cost action to apply  it is not clear whether the probe
should terminate  therefore  we keep using depth limited probes and attempt to estimate the depth
of the cheapest goal  we compute a heuristic estimate for the initial state  and then use the number
of actions which the heuristic estimate is based on as our goal depth estimate  while this is not
possible with every heuristic  we use in our empirical evaluation the monotonically relaxed plan
heuristic  this heuristic  also known as the ff heuristic  hoffmann   nebel         does provide
such information  we first use this heuristic to find a relaxed plan from the initial state  and then use
the number of actions in the relaxed plan as our goal depth estimate 
    classifier
the last decision to be made is the choice of classifier  although many classifiers can be used here 
several requirements must be met due to our particular setup  first  both training and classification must be very fast  as both are performed during time constrained problem solving  second 
the classifier must be incremental to support active learning  this is achieved by allowing online
updates of the learned model  finally  the classifier should provide us with a meaningful measure
of confidence for its predictions 
while several classifiers meet these requirements  we found the naive bayes classifier to provide
a good balance between speed and accuracy  one note on the naive bayes classifier is that it
assumes a very strong conditional independence between the features  although this is not a fully
realistic assumption for planning tasks  using a sas  task formulation in contrast to the classical
strips formulations helps a lot  instead of many highly dependent binary variables  we have a
much smaller set of less dependent ones 
although  as the empirical evaluation will demonstrate  naive bayes appears to be the most
suitable classifier to use with selective max  other classifiers can also be used  the most obvious
choice for a replacement classifier would be a different bayesian classifier  one such classifier is
aode  webb  boughton    wang         an extension of naive bayes  which somewhat relaxes
the assumption of independence between the features  and is typically more accurate than naive
bayes  however  this added accuracy comes at the cost of increased training and classification time 
decision trees are another popular type of classifier that allows for even faster classification 
while most decision tree induction algorithms are not incremental  the incremental tree inducer
 iti  algorithm  utgoff  berkman    clouse        supports incremental updating of decision trees
by tree restructuring  and also has a freely available implementation in c  in our evaluation  we used
iti in incremental mode  and incorporated every example into the tree immediately  because the
   

fid omshlak   k arpas     m arkovitch

tree is likely to be used for many classifications between pairs of consecutive updates with training
examples from active learning  the classification confidence with the iti classifier is obtained by
the frequency of examples at the leaf node from which the classification came 
a different family of possible classifiers is k nearest neighbors  knn   cover   hart        
in order to use knn  we need a distance metric between examples  which  with our features  are
simply states  as with our choice of features  we opt for simplicity and use euclidean distance
as our metric  knn enjoys very fast learning time but suffers from slow classification time  the
classification confidence is obtained by a simple  unweighted  vote between the k nearest neighbors 
another question related to the choice of classifier is feature selection  in some planning tasks 
the number of variables  and accordingly  features  can be over       for example  task    of the
airport domain has      variables   while the performance of naive bayes and knn can likely be
improved using feature selection  doing so poses a problem when the initial sample is considered 
since feature selection will have to be done right after the initial sample is obtained  it will have to
be based only on the initial sample  this could cause a problem since some features might appear to
be irrelevant according to the initial sample  yet turn out to be very relevant when active learning is
used after some low confidence states are encountered  therefore  we do not use feature selection
in our empirical evaluation of selective max 
    extension to multiple heuristics
to this point  we have discussed how to choose which heuristic to compute for each state when
there are only two heuristics to choose from  when given more than two heuristics  the decision
rule presented in section   is inapplicable  and extending it to handle more than two heuristics is
not straightforward  however  extending selective max to use more than two heuristics is straightforward  simply compare heuristics in a pair wise manner  and use a voting rule to choose which
heuristic to compute 
while there are many possible such voting rules  we go with the simplest one  which compares
every pair of heuristics  and chooses the winner by a vote  weighted by the confidence for each pairwise decision  the overall winner is simply the heuristic which has the highest total confidence from
all pairwise comparisons  with ties broken in favor of the cheaper to compute heuristic  although
this requires a quadratic number of classifiers  training and classification time  at least with naive
bayes  appear to be much lower than the overall time spent on heuristic computations  and thus
the overhead induced by learning and classification is likely to remain relatively low for reasonable
heuristic ensembles 

   experimental evaluation
to evaluate selective max empirically  we implemented it on top of the open source fast downward
planner  helmert         our empirical evaluation is divided into three parts  first  we examine the performance of selective max using the last international planning competition  ipc      
as our benchmark  selective max was the runner up ex aequo at ipc       tying for  nd place
with a version of fast downward using an abstraction merge and shrink heuristic  nissim  hoffmann    helmert         and losing to a sequential portfolio combining the heuristics used in both
runners up  helmert  roger    karpas         second  we present a series of controlled parametric
experiments  where we examine the behavior of selective max under different settings  finally  we
   

fio nline s peedup l earning for o ptimal p lanning

parameter


n
sampling method
classifier

default value
 
   
    
biased probes
naive bayes

meaning
heuristic difference bias
confidence threshold
initial sample size
state space sampling method
classifier type

table    parameters for the selmax entry in ipc      
compare selective max to a simulated sequential portfolio  using the same heuristics as selective
max 
    performance evaluation  results from ipc     
the ipc      experiments  garca olaya et al         were run by the ipc organizers  on their
own machines  with a time limit of    minutes and a memory limit of   gb per planning task 
the competition included some new domains  which none of the participants had seen before  thus
precluding the participants from using offline learning approaches 
although many planners participated in the sequential optimal track of ipc       we report here
only the results relevant to selective max  the selective max entry in ipc      was called selmax 
and consisted of selective max over the uniform action cost partitioning version of hla  karpas  
domshlak        and hlm cut  helmert   domshlak        heuristics  the parameters used for
selective max in ipc      are reported in table    additionally  each of the heuristics selmax used
was entered individually as bjolp  hla   and lmcut  hlm cut    and we report results for all three
planners  while a comparison of selective max with the regular maximum of hla and hlm cut
would be interesting  there was no such entry at ipc       and thus we can not report on it  in our
controlled experiments  we do compare selective max to the regular maximum  as well as to other
baseline combination methods 
figure   shows the anytime profile of these three planners on ipc      tasks  plotting the number of tasks solved under different timeouts  up to the time limit of    minutes  additionally  table
  shows the number of tasks solved in each domain of ipc       after    minutes  and includes the
number of problems solved by the winner  fast downward stone soup    fdss     for reference 
as these results show  selective max solves more problems than each of the individual heuristics
it uses  furthermore  the anytime profile of selective max dominates each of these heuristics  in the
range between     seconds until the full    minute timeout  the behavior of the anytime plot with
shorter timeouts is due to the overhead of selective max  which consists of obtaining the initial statespace sample  as well as learning and classification  however  it appears that selective max quickly
compensates for its relatively slow start 
    controlled experiments
in our series of controlled experiments  we attempted to evaluate the impact of different parameters
on selective max  we controlled the following independent variables 
 heuristics  we used three state of the art admissible heuristics  hla  karpas   domshlak 
       hlm cut  helmert   domshlak         and hlm cut   bonet   helmert         none
   

fid omshlak   k arpas     m arkovitch

   

solved instances

   

   

   

  

bjolp
lmcut
selmax

  
 

   

   

   

   
    
timeout  seconds 

    

    

    

    

figure    ipc      anytime performance  each line shows the number of problems from ipc     
solved by the bjolp  lmcut  and selmax planners  respectively  under different timeouts 
domain
barman
elevators
floortile
nomystery
openstacks
parcprinter
parking
pegsol
scanalyzer
sokoban
tidybot
transport
visitall
woodworking
total

bjolp
 
  
 
  
  
  
 
  
 
  
  
 
  
 
   

lmcut
 
  
 
  
  
  
 
  
  
  
  
 
  
  
   

selmax
 
  
 
  
  
  
 
  
  
  
  
 
  
  
   

fdss  
 
  
 
  
  
  
 
  
  
  
  
 
  
  
   

table    number of planning tasks solved at ipc      in each domain by the bjolp  lmcut  and
selmax planners  the best result from these   planners is in bold  the number of problems
solved by fast downward stone soup    fdss    in each domain is also included for
reference 

   

fio nline s peedup l earning for o ptimal p lanning

of these base heuristics yields better search performance than the others across all planning
domains  of these heuristics  hla is typically the fastest to compute and the least accurate 
hlm cut is more expensive to compute and more accurate  and hlm cut  is the most expensive to compute and the most accurate   from the data we have gathered in these experiments 
hlm cut takes on average     more time per state than hla   and hlm cut  takes    more time
per state than hla   we evaluate selective max with all possible subsets of two or more of these
three heuristics 
while there are other admissible heuristics for sas  planning that are competitive with the
three above  for example  helmert  haslum    hoffmann        nissim et al         katz  
domshlak         they are based on expensive offline preprocessing  followed by very fast
online per state computation  in contrast  hla   hlm cut and hlm cut  perform most of their
computation online  and thus can be better exploited by selective max 
additionally  we empirically examine the effectiveness of selective max in deciding whether
to compute a heuristic value at all  this is done by combining our most accurate heuristic 
hlm cut    with the blind heuristic 
 heuristic difference bias   the hyper parameter  controls the tradeoff between computation time and heuristic accuracy  setting      sets the threshold  to    forcing the decision
rule to always choose the more accurate heuristic  increasing  increases the threshold  forcing the decision rule to choose the more accurate heuristic h  only if its value is much higher
than that of h    we evaluate selective max with values for  of                            and   
 confidence threshold   the confidence threshold  controls the active learning part of selective max  setting        turns off active learning completely  because the chosen heuristic
always comes with a confidence of at least      setting      would mean using active learning almost always  essentially reducing selective max to regular point wise maximization  we
evaluate selective max with values for  of                           and      
 initial sample size n   the initial sample size n is an important parameter  not just because it
is used to train the initial classifier before any active learning is done  but also because it is the
only source of estimates for branching factor  average action cost  and heuristic computation
times  it thus affects the threshold    increasing n increases the accuracy of the initial
classifier and of the various aforementioned estimates  but also increases the preprocessing
time  we evaluate selective max with values for n of          and      
 sampling method  the sampling method used to obtain the initial state space sample is important in that it affects this initial sample  and thus the accuracy of both the threshold  and
of the initial classifier  we evaluate selective max with three different sampling methods  all
p
described in section      biased probes  selph    unbiased probes  selu
h    and the sampling
method of haslum et al          selpdb
h   
 classifier  the choice of classifier is also very important  the naive bayes classifier comb
bines very fast learning and classification  seln
h    a more sophisticated variant of naive
bayes called aode  webb et al         is also considered here  selaode
   aode is more
h
   of course  all three heuristics are computable in polynomial time from the sas  description of the planning task 

   

fid omshlak   k arpas     m arkovitch

parameter
heuristics


n
sampling method
classifier

default value
hla   hlm cut
 
   
   
pdb  haslum et al        
naive bayes

meaning
heuristics used
heuristic difference bias
confidence threshold
initial sample size
state space sampling method
classifier type

table    default parameters for selh  
accurate than naive bayes  but has higher classification and learning times  as well as increased memory overhead  another possible choice is using incremental decision trees  utgoff et al          which offer even faster classification  but more expensive learning when the
i
tree structure needs to be changed  selit
h    we also consider knn classifiers  cover   hart 
       which offer faster learning than naive bayes  but usually more expensive classifican
tion  especially as k grows larger  selkn
  for k         
h
table   describes our default values for each of these independent variables  in each of the
subsequent experiments  we vary one of these independent variables  keeping the rest at their default
values  in all of these experiments  the search for each planning task instance was limited to   
minutes  and to   gb of memory  the search times do not include the time needed for translating
the planning task from pddl to sas  and building some of the fast downward data structures 
which is common to all planners  and is tangential to the issues considered in our study  the search
times do include learning and classification time for selective max 
 heuristics
we begin by varying the set of heuristics in use  for every possible choice of two or more
heuristics out of the uniform action cost partitioning version of hla  which we simply refer
to as hla    hlm cut and hlm cut    we compare selective max to other methods of heuristic
combination  as well as to the individual heuristics  we compare selective max  selh   to the
regular maximum  maxh    as well as to a planner which chooses which heuristic to compute
at each state randomly  rndh    as it is not clear whether the random choice should favor the
more expensive and accurate heuristic or the cheaper and less accurate one  we simply use a
uniform random choice 
this experiment was conducted on all    domains with no conditional effects and axioms
 which none of the heuristics we used support  from the international planning competitions
          because domains vary in difficulty and in the number of tasks  we normalize
the score for each planner in each domain between   and    normalizing by the number of
problems in the domain is not a good idea  as it is always possible to generate any number
of effectively unsolvable problems in each domain  so that the fraction of solved problems
will approach zero  therefore  we normalize the number of problems solved in each domain
by the number of problems in that domain that were solved by at least one of our planners 
while this measure of normalized coverage has the undesirable property that introducing a
   each search was given a single core of a  ghz intel e     cpu machine 

   

fio nline s peedup l earning for o ptimal p lanning

heuristic

hla

hlm cut

hlm cut 

high variance unit cost
low variance unit cost
non uniform cost

          
          
          

          
          
          

          
          
          

total

          

          

          

 a  individual heuristics
domains
high variance unit cost
low variance unit cost
non uniform cost
total

maxh
          
          
          
          

rndh
          
          
          
          

selh
          
          
          
          

hla   hlm cut 

high variance unit cost
low variance unit cost
non uniform cost
total

          
          
          
          

          
          
          
          

          
          
          
          

hlm cut   hlm cut 

high variance unit cost
low variance unit cost
non uniform cost
total

          
          
          
          

          
          
          
          

          
          
          
          

hla   hlm cut   hlm cut 

high variance unit cost
low variance unit cost
non uniform cost
total

          
          
          
          

          
          
          
          

          
          
          
          

heuristics
hla   hlm cut

 b  combinations of two or more heuristics

table    average normalized coverage  and total coverage in parentheses  broken down by groups
of domains with unit cost actions and high variance in coverage  domains with unit cost
actions and low variance in coverage  and domains with non uniform action costs  table
 a  shows the results for a with individual heuristics  and table  b  shows the results for
the maximum  maxh    random choice  rndh    and selective max  selh   combinations of
the set of heuristics listed in each major row 

new planner could change the normalized coverage of the other planners  we believe that
it best reflects performance nonetheless  as an overall performance measure  we list the
average normalized coverage score across all domains  using normalized coverage means
that domains have equal weight in the aggregate score  additionally  we list for each domain
the number of problems that were solved by any planner  in parentheses next to the domain
name   and for each planner we list the number of problems it solved in parentheses 
tables   and   summarize the results of this experiment  we divided the domains in our
experiment into   sets  domains with non uniform action costs  domains with unit action
costs which exhibited a high variance in the number of problems solved between different
   

fid omshlak   k arpas     m arkovitch

heuristics

domains

hla

hlm cut

hla   hlm cut

high variance unit cost
low variance unit cost
non uniform cost
total

    
    
     
    

   
    
    
   

hla   hlm cut 

high variance unit cost
low variance unit cost
non uniform cost
total

    
    
     
    

hlm cut   hlm cut 

high variance unit cost
low variance unit cost
non uniform cost
total

hla   hlm cut   hlm cut 

hlm cut 

maxh

rndh

selh

   
   
   
   

    
    
    
    

    
   
    
    

    
    
   
    

   
   
   
   

    
    
    
   

    
    
    
    

    
    
    
    

    
    
    
    

   
   
   
   

   
    
    
    

    
    
    
   

high variance unit cost
low variance unit cost
non uniform cost

    
    
    

    
    
    

    
    
    

   
   
   

    
    
    

   
    
    

total

   

    

    

   

    

    

table    geometric mean of ratio of expansions relative to maxh   broken down by groups of domains with unit cost actions and high variance in coverage  domains with unit cost actions
and low variance in coverage  and domains with non uniform action costs 

planners  and domains with unit action costs which exhibited a low variance in the number of
problems solved between different planners  we make this distinction because we conducted
the following experiments  which examine the effects of the other parameters of selective
max  only on the unit cost action domains which exhibited high variance  tables   and  
summarize the results for these three sets of domains  as well as for all domains combined 
detailed  per domain results are relegated to appendix a 
table   lists the normalized coverage score  averaged across all domains  and the total number
of problems solved in parentheses  table  a lists these for each individual heuristic  and
table  b for every combination method of every set of two or more heuristics  table   shows
how accurate each of these heuristic combination methods is  since  for a given set of base
heuristics  maxh is the most accurate heuristic possible  the accuracy is evaluated relative to
maxh   we evaluate each heuristics accuracy on each task as the number of states expanded
by a using that heuristic  divided by the number of states expanded by a using maxh   we
compute the geometric mean for each domain over the tasks solved by all planners of this
accuracy ratio  and list here the geometric mean over these numbers  each row lists the
results for a combination of two or three heuristics  for combinations of two heuristics  we
leave the cell representing the heuristic that is not in the combination empty 
looking at the results of individual heuristics first  we see that the most accurate heuristic
 hlm cut    does not do well overall  while the least accurate heuristic  hla   solved the most
tasks in total  and hlm cut wins in terms of normalized coverage  however  when looking at
the results for individual domains  we see that the best heuristic to use varies  indicating that
combining different heuristics could indeed be of practical value 
we now turn our attention to the empirical results for the combinations of all possible subsets
of two or more heuristics  the results clearly demonstrate that when more than one heuristic
is used  selective max is always better than regular maximum or random choice  both in terms
of normalized coverage and absolute number of problems solved  furthermore  the poor
performance of rndh   in both coverage and accuracy  demonstrates that the decision rule and
   

fio nline s peedup l earning for o ptimal p lanning

   

   

solved instances

   

   

   

   

   
maxh

   

rndh
selh

   
   

   

   

   
    
timeout  seconds 

    

    

    

    

figure    hla   hlm cut   hlm cut  anytime profile  each line shows the number of problems from
ipc            solved by the maximum  maxh    random choice  rndh    and selective
max  selh   combination methods of the hla   hlm cut   and hlm cut  heuristics  under
different timeouts 

the classifier used in selective max are important to its success  and that computing only one
heuristic at each state randomly is insufficient  to say the least 
when compared to individual heuristics  selective max does at least as well as each of the
individual heuristics it uses  for all combinations except that of hlm cut and hlm cut    this
is most likely because hlm cut and hlm cut  are based on a very similar procedure  and
thus their heuristic estimates are highly correlated  to see why this hinders selective max 
consider the extreme case of two heuristics which have a correlation of      that is  yield the
same heuristic values   where selective max can offer no benefit  finally  we remark that the
best planner in this experiment was the selective max combination of hla and hlm cut  
the above results are all based on a    minute time limit  which  while commonly used in the
ipc  is arbitrary  and the number of tasks solved after    minutes does not tell the complete
tale  here  we examine the anytime profile of the different heuristic combination methods  by
plotting the number of tasks solved under different timeouts  up to a timeout of    minutes 
figure   shows this plot for the three combination methods when all three heuristics are used 
as the figure shows  the advantage of selh over the baseline combination methods is even
greater under shorter timeouts  this indicates that the advantage of selh over maxh is even
   

fid omshlak   k arpas     m arkovitch

heuristics
hla   hlm cut

overhead
   

hla   hlm cut 

   

hlm cut   hlm cut 

  

hla   hlm cut   hlm cut 

   

table    selective max overhead  each row lists the average percentage of time spent on learning
and classification  out of the total time taken by selective max  for each set of heuristics 

greater than is evident from the results after    minutes  and that selh is indeed effective for
minimizing search time  since the anytime plots for the combinations of pairs of heuristics
are very similar  we omit them here for the sake of brevity 
finally  we present overhead statistics for using selective max  the proportion of time spent
on learning and classification  including the time spent obtaining the initial state space sample  out of the total solution time  table   presents the average overhead on selective max
for each of the combinations of two or more heuristics  detailed  per domain results are
presented in table    in appendix a  as these results show  selective max does incur a noticeable overhead  but it is still relatively low  it is also worth mentioning that the overhead
varies significantly between different domains 
we also performed an empirical evaluation of using selective max with an accurate heuristic
alongside the blind heuristic  the blind heuristic returns   for goal states  and the cost of
the cheapest action for non goal states  for this experiment  we chose our most accurate
heuristic  hlm cut    we compare the performance of a using hlm cut  alone  to that of a
using selective max of hlm cut  and the blind heuristic  because the blind heuristic returns
a constant value for all non goal states  the decision rule that selective max uses to combine
some heuristic h with the blind heuristic hb is simply h s      hb   that is  compute h
when the predicted value of h is greater than some constant threshold  recall that  when
h s    g s    c   computing h is simply a waste of time  because s will not be pruned 
therefore  it only makes sense to compute h s  when h s   c  g s   note that this
threshold for computing h depends on g s   and thus is not constant  this shows that a
constant threshold for computing h s  is not the best possible decision rule  unfortunately 
the selective max decision rule is based on an approximation that fails to capture the subtleties
of this case 
table   shows the normalized coverage of a using hlm cut    and a using selective max of
hlm cut  and the blind heuristic  as the results show  selective max has little effect in most
domains  though it does harm performance in some  and in one domain  openstacks  it
actually performs better than the single heuristic  table   shows the average expansions ratio 
using the number of states expanded by hlm cut  as the baseline  note that using the blind
heuristic never increases heuristic accuracy  as these results show  selective max chooses to
use the blind heuristic quite often  expanding on average more than twice as many states than
a with hlm cut  alone 
   

fio nline s peedup l earning for o ptimal p lanning

coverage

hlm cut 

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage    
satellite    
zenotravel     

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips    

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

total

          

          

table    normalized coverage of hlm cut  and selective max combining hlm cut  with the blind
heuristic  domains are grouped into domains with unit cost actions and high variance in
coverage  domains with unit cost actions and low variance in coverage  and domains with
non uniform action costs  respectively 

   

fid omshlak   k arpas     m arkovitch

expansions

hlm cut 

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage    
satellite    
zenotravel     

   
   
   
   
   
   
   
   

   
    
    
    
   
    
    
    

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips    

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

    
    
    
    
   
    
     
   
    
    
    
    
    
   
    

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

   
   
   
   
   
   
   
   

     
    
    
    
    
   
    
     

geometric mean

   

   

table    average ratio of expanded states between the baseline of hlm cut  and selective max
combining hlm cut  with the blind heuristic  domains are grouped into domains with
unit cost actions and high variance in coverage  domains with unit cost actions and low
variance in coverage  and domains with non uniform action costs  respectively 

   

fio nline s peedup l earning for o ptimal p lanning

the above experiments have varied the heuristics which selective max uses  in the following
experiments  we fix the set of heuristics  and examine the impact of the other parameters of selective max on performance  as we still need to evaluate over    different configurations of selective
max  we will focus on eight selected domains  airport  freecell  logistics     mprime  mys tery   pipesworld   tankage  satellite   and zenotravel  these are the eight domains with the
highest observed variance in the number of tasks solved across different planners  out of the unit
action cost domains we used  these domains were chosen in order to reduce the computation time
required for these experiments to a manageable quantity  we excluded domains with non uniform
action costs  because they use a different method of estimating the goal depth for the state space
sampling method  which is one of the parameters we examine  below  we focus on one parameter
of selective max at a time  and present the total number of tasks solved in our eight chosen domains 
under different values of that parameter  detailed  per domain results for each parameter appear in
appendix a 
 hyper parameter 
figure  a plots the total number of problems solved  under different values of   as these
results show  selective max is fairly robust with respect to the value of   unless a very large
value for  is chosen  making it more difficult for selective max to choose the more accurate
heuristic 
detailed  per domain results appear in table    in appendix a  as well as in figure    these
results show a more complex picture  where there seems to be some cutoff value for each
domain  such that increasing  past that value impairs performance  the one exception to
this is the pipesworld   tankage domain  where setting      helps 
 confidence threshold 
figure  b plots the total number of problems solved  under different values of   detailed 
per domain results appear in table    in appendix a  these results indicate that selective
max is also robust to values of   unless it is set to a very low value  causing selective max to
behave like the regular point wise maximum 
 initial sample size n
figure  c plots the total number of problems solved under different values of n   with the
x axis in logscale  detailed  per domain results appear in table    in appendix a  as the
results show  our default value of n       is the best  of the three values we tried   although
selective max is still fairly robust with respect to the choice of parameter 
 sampling method
figure   shows the total number of problems solved using different methods for the initial
state space sampling  detailed  per domain results appear in table    in appendix a  as
the results demonstrate  the choice of sampling method can notably affect the performance of
selective max  however  as the detailed results show  this effect is only evident in the free cell domain  we also remark that our default sampling method  pdb  performs worse than
the others  indeed by using the probe based sampling methods  selective max outperforms a
using hla alone  however  as this difference is only due to the freecell domain  we can not
state with certainty that this would generalize across all domains 
   

fisolved instances

d omshlak   k arpas     m arkovitch

   
   
   
   
   
 

   

 

   

 

   


 

   

 

   

 

   

    

   

    

 

solved instances

 a  hyper parameter 

   
   
   
   
   
   

    

   

    

   

    


solved instances

 b  confidence threshold 

   
   
   
   
   
  

   


    

 c  initial sample size n
figure    number of problems solved by selective max under different values for  a  hyperparameter   b  confidence threshold   and  c  initial sample size n  

   

fisolved instances

o nline s peedup l earning for o ptimal p lanning

  
  
  
  
  
  
  
  
  
 

airport
freecell
logistics  
mprime
mystery
pw tankage
satellite
zenotravel
 

 

 

 

 

 



figure    number of problems solved by selective in each domain under different values for  

   
   

solved instances

   
   
   
  
  
  
  
 

pdb
   

probe
   
sampling method

unbiasedprobe
   

figure    number of problems solved by selective max with different sampling methods 

   

fid omshlak   k arpas     m arkovitch

   
   

solved instances

   
   
   
  
  
  
  
 
nb
   

aode
   

iti
   
classifier

 nn
   

 nn
   

figure    number of problems solved by selective max with different classifiers 
 classifier
figure   shows the total number of problems solved using different classifiers  detailed 
per domain results appear in table    in appendix a  naive bayes appears to be the best
classifier to use with selective max  although aode also performs quite well  even though
knn enjoys very fast learning  the classifier is used mostly for classification  and as expected 
knn does not do well  however  the increased accuracy of k     seems to pay off against
the faster classification when k     
    comparison with sequential portfolios
sequential portfolio solvers for optimal planning are another approach for exploiting the merits of
different heuristic functions  and they have been very successful in practice  with the fast downward
stone soup sequential portfolio  helmert et al         winning the sequential optimal track at ipc      a sequential portfolio utilizes different solvers by running them sequentially  each with a prespecified time limit  if one solver fails to find a solution under its allotted time limit  the sequential
portfolio terminates it  and moves on to the next solver  however  a sequential portfolio solver
needs to know the time allowance for the problem it is trying to solve beforehand  a setting known
as contract anytime  russell   zilberstein         in contrast  selective max can be used in an
interruptible anytime manner  where the time limit need not be known in advance 
here  we compare selective max to sequential portfolios of a with the same heuristics  as
we have the exact time it took a search using each heuristic alone to solve each problem  we can
determine whether a sequential portfolio which assigns each heuristic some time limit will be able
to solve each problem  using this data  we simulate the results of two types of sequential portfolio
planners  in the first setting  we assume that the time limit is known in advance  and simulate the
results of a contract portfolio giving an equal share of time to all heuristics  in the second setting  we
simulate an interruptible anytime portfolio by using binary exponential backoff time limits  starting
   

fi   

   

   

   
solved instances

solved instances

o nline s peedup l earning for o ptimal p lanning

   
   
   

selh
portctr

   

   
   
   

selh
portctr

   

portint

portint

   

   
   

   

                                
timeout  seconds 

   

   

   

   

   

   
   
   

selh
portctr

   

                                
timeout  seconds 

hla   hlm cut 
 b 

solved instances

solved instances

hla   hlm cut
 a 

   

   
   
   

selh
portctr

   

portint

portint

   

   
   

   

                                
timeout  seconds 

   

hlm cut   hlm cut 
 c 

   

                                
timeout  seconds 

hla   hlm cut   hlm cut 
 d 

figure    anytime profiles of sequential portfolios and selective max  each plot shows the number of problems solved by selective max  selh    a simulated contract anytime portfolio
 portctr    and a simulated interruptible portfolio  portint   using  a  hla and hlm cut  b 
hla and hlm cut   c  hlm cut and hlm cut    and  d  hla   hlm cut   and hlm cut   

with a time limit of   second for each heuristic  we increase the time limit by a factor of   if none
of the heuristics were able to guide a to solve the planning problem  there are several possible
orderings for the heuristics here  and we use the de facto best ordering for each problem  we denote
the contract anytime portfolio by portctr   and the interruptible anytime portfolio by portint  
figure   shows the number of problems solved under different time limits for selective max 
the contract anytime sequential portfolio  and the interruptible anytime sequential portfolio  as
these results show  the contract anytime sequential portfolio almost always outperforms selective
max  on the other hand  when the sequential portfolio does not know the time limit in advance  its
performance deteriorates significantly  the best heuristic combination for selective max  hla and
hlm cut   outperforms the interruptible anytime portfolio using the same heuristics  and so does the
   

fid omshlak   k arpas     m arkovitch

selective max combination of hlm cut and hlm cut    with the other combinations of heuristics 
the interruptible anytime portfolio performs better than selective max 

   discussion
learning for planning has been a very active field since the early days of planning  fikes  hart 
  nilsson         and is recently receiving growing attention in the community  however  despite
some early work  rendell         relatively little work has dealt with learning for state space search
guided by distance estimating heuristics  one of the most prominent approaches to planning these
days  most works in this direction have been devoted to learning macro actions  see  for example 
finkelstein   markovitch        botea  enzenberger  muller    schaeffer        coles   smith 
       recently  learning for heuristic search planning has received more attention  yoon et al 
       suggested learning  inadmissible  heuristic functions based upon features extracted from
relaxed plans  arfaee  zilles  and holte        attempted to learn an almost admissible heuristic
estimate using a neural network  perhaps the most closely related work to ours is that of thayer 
dionne  and ruml         who learn to correct errors in heuristic estimates online  thayer et al  attempt to improve the accuracy of a single given heuristic  while selective max attempts to choose one
of several given heuristics for each state  the two works differ technically on this point  more importantly  however  none of the aforementioned approaches can guarantee that the resulting heuristic
will be admissible  and thus that an optimal solution will be found  in contrast  our focus is on optimal planning  and we are not aware of any previous work that deals with learning for optimal
heuristic search 
our experimental evaluation demonstrates that selective max is a more effective method for
combining arbitrary admissible heuristics than the baseline point wise maximization  also advantageous is selective maxs ability to exploit pairs of heuristics  where one is guaranteed to always
be at least as accurate as the other  for example  the hla heuristic can be used with two action
cost partitioning schemes  uniform and optimal  karpas   domshlak         the heuristic induced
by the optimal action cost partitioning is at least as accurate the one induced by the uniform action
cost partitioning  but takes much longer to compute  selective max might be used to learn when
it is worth spending the extra time to compute the optimal cost partitioning  and when it is not  in
contrast  the max based combination of these two heuristics would simply waste the time spent on
computing the uniform action cost partitioning 
the controlled parametric experiments demonstrate that the right choice of classifier and of
the sampling method for the initial state space sample is very important  the other parameters of
selective max do not appear to affect performance too much  as long as they are set to reasonable
values  this implies that selective max could be improved by using faster  more accurate  classifiers 
and by developing sampling methods that can represent the state space well 
finally  we remark that the fast downward autotune entry in the sequential optimal track of
the      edition of the international planning competition  which used paramils  hutter  hoos 
leyton brown    stutzle        to choose the best configuration for the fast downward planner 
chose to use selective max to combine hlm cut and hmax  bonet  loerincs    geffner        
this provides further evidence that selective max is a practically valuable method for combining
heuristics in optimal planning 
   

fio nline s peedup l earning for o ptimal p lanning

coverage

hla

hlm cut

hlm cut 

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

         
         
         
         
         
        
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
        
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

table    detailed per domain results of a with each individual heuristic  normalized coverage is
shown  with the number of problems solved shown in parentheses  domains are grouped
into domains with unit cost actions and high variance in coverage  domains with unit
cost actions and low variance in coverage  and domains with non uniform action costs 
respectively 

acknowledgments
the work was partly supported by the israel science foundation  isf  grant         

appendix a  detailed results of empirical evaluation
in this appendix  we present detailed per domain  results of the experiments described in section   
table   shows the normalized coverage and number of problems solved in each domain  for
individual heuristics  the normalized coverage score of planner x on domain d is the number of
problems from domain d solved by planner x  divided by the number of problems from domain
d solved by at least one planner  tables        give the results for combinations of two or more
heuristics  tables             and    list the normalized coverage of the individual heuristics used 
and of their combination using selective max  selh    regular maximum  maxh    and random choice
of heuristic at each state  rndh   after    minutes  tables             and    give the geometric
mean of the ratio of expanded states relative to maxh in each domain  over problems solved by
all configurations  the number of tasks solved by all planners is listed in parentheses next to each
domain  the final row gives the geometric mean over the geometric means of each domain 
   

fid omshlak   k arpas     m arkovitch

coverage

hla

hlm cut

maxh

rndh

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
        
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
        
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

          

          

table     detailed per domain normalized coverage using hla and hlm cut   each line shows the
normalized coverage in each domain  with the number of problems solved is shown in
parentheses  domains are grouped into domains with unit cost actions and high variance
in coverage  domains with unit cost actions and low variance in coverage  and domains
with non uniform action costs  respectively 

   

fio nline s peedup l earning for o ptimal p lanning

expansions

hla

hlm cut

maxh

rndh

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite    
zenotravel     

    
    
   
    
   
    
    
    

    
      
   
    
    
    
    
   

   
   
   
   
   
   
   
   

    
      
   
   
    
    
    
   

   
    
   
    
    
    
    
    

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips    

   
    
   
    
   
    
   
     
    
    
    
    
    
    
     

   
    
    
    
    
   
   
   
    
   
    
   
   
   
    

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
    
    
    
    
    
   
     
    
    
    
    
    
    
     

    
   
    
    
   
    
   
   
    
    
    
    
    
   
    

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips    
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

     
    
     
    
    
     
     
    

    
   
   
    
   
    
    
   

   
   
   
   
   
   
   
   

    
    
    
   
     
    
    
    

    
    
   
    
    
    
    
    

geometric mean

    

   

   

    

    

table     detailed per domain expansions relative to maxh using hla and hlm cut   each row
shows the geometric mean of the ratio of expanded nodes relative to maxh   domains are
grouped into domains with unit cost actions and high variance in coverage  domains with
unit cost actions and low variance in coverage  and domains with non uniform action
costs  respectively 

   

fid omshlak   k arpas     m arkovitch

coverage

hla

hlm cut 

maxh

rndh

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
         
        
         

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
        

         
         
         
         
         
        
         
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
        
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
        
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

          

          

table     detailed per domain normalized coverage using hla and hlm cut    each line shows the
normalized coverage in each domain  with the number of problems solved is shown in
parentheses  domains are grouped into domains with unit cost actions and high variance
in coverage  domains with unit cost actions and low variance in coverage  and domains
with non uniform action costs  respectively 

   

fio nline s peedup l earning for o ptimal p lanning

expansions

hla

hlm cut 

maxh

rndh

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage    
satellite    
zenotravel    

    
    
   
    
    
    
     
    

   
     
   
    
    
    
    
   

   
   
   
   
   
   
   
   

    
     
   
   
    
    
    
    

    
    
   
    
   
    
    
    

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips    

    
    
     
    
   
   
   
     
    
    
    
    
    
    
     

   
   
    
    
   
   
   
   
    
   
    
   
   
   
    

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

    
    
    
    
   
    
   
     
    
    
    
   
    
    
     

    
    
    
    
   
    
   
   
    
    
    
    
    
    
    

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips    
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

    
    
     
    
     
     
     
     

    
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   

   
    
    
    
    
    
    
    

    
    
    
   
    
    
    
    

geometric mean

    

    

   

   

    

table     detailed per domain expansions relative to maxh using hla and hlm cut    each row
shows the geometric mean of the ratio of expanded nodes relative to maxh   domains are
grouped into domains with unit cost actions and high variance in coverage  domains with
unit cost actions and low variance in coverage  and domains with non uniform action
costs  respectively 

   

fid omshlak   k arpas     m arkovitch

coverage

hlm cut

hlm cut 

maxh

rndh

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
         
        
         

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

          

          

table     detailed per domain normalized coverage using hlm cut and hlm cut    each line shows
the normalized coverage in each domain  with the number of problems solved is shown in
parentheses  domains are grouped into domains with unit cost actions and high variance
in coverage  domains with unit cost actions and low variance in coverage  and domains
with non uniform action costs  respectively 

   

fio nline s peedup l earning for o ptimal p lanning

expansions

hlm cut

hlm cut 

maxh

rndh

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage    
satellite    
zenotravel     

    
    
   
   
    
    
    
    

   
   
   
    
    
    
    
    

   
   
   
   
   
   
   
   

    
    
   
    
    
    
    
   

    
    
   
   
    
    
    
    

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips    

    
    
    
    
    
    
   
    
    
    
    
   
    
    
    

   
   
    
   
   
    
   
    
    
   
    
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

    
    
    
   
    
    
   
    
   
    
    
   
    
    
    

    
    
    
    
    
    
   
    
   
    
   
   
    
    
    

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

    
   
    
    
    
    
    
    

    
   
   
    
    
    
    
    

   
   
   
   
   
   
   
   

   
   
    
    
    
    
    
    

    
   
   
   
    
    
    
    

geometric mean

    

    

   

    

   

table     detailed per domain expansions relative to maxh using hlm cut and hlm cut    each
row shows the geometric mean of the ratio of expanded nodes relative to maxh   domains
are grouped into domains with unit cost actions and high variance in coverage  domains
with unit cost actions and low variance in coverage  and domains with non uniform action
costs  respectively 

   

fid omshlak   k arpas     m arkovitch

coverage

hla

hlm cut

hlm cut 

maxh

rndh

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
        

         
         
         
         
         
         
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
        
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
        
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

          

          

          

table     detailed per domain normalized coverage using hla   hlm cut and hlm cut    each line
shows the normalized coverage in each domain  with the number of problems solved is
shown in parentheses  domains are grouped into domains with unit cost actions and high
variance in coverage  domains with unit cost actions and low variance in coverage  and
domains with non uniform action costs  respectively 

   

fio nline s peedup l earning for o ptimal p lanning

expansions

hla

hlm cut

hlm cut 

maxh

rndh

selh

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage    
satellite    
zenotravel    

    
    
   
    
    
    
     
    

    
     
   
    
    
    
    
    

   
     
   
    
    
    
    
   

   
   
   
   
   
   
   
   

    
     
   
    
    
    
    
    

    
    
   
    
    
    
    
    

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips    

    
     
     
    
   
    
   
     
    
    
    
    
   
    
     

    
    
    
    
    
    
   
    
    
    
    
   
    
    
    

   
    
    
    
   
    
   
   
    
   
    
   
    
   
    

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

    
    
    
    
    
    
   
    
    
   
    
    
    
    
    

    
    
    
    
   
    
   
   
    
    
    
    
    
    
    

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips    
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

     
    
     
    
     
     
    
     

    
   
    
    
   
    
    
    

   
   
   
    
    
    
    
   

   
   
   
   
   
   
   
   

    
    
    
    
   
    
    
    

   
    
   
    
    
    
    
    

geometric mean

   

    

    

   

    

    

table     detailed per domain expansions relative to maxh using hla   hlm cut and hlm cut   
each row shows the geometric mean of the ratio of expanded nodes relative to maxh  
domains are grouped into domains with unit cost actions and high variance in coverage 
domains with unit cost actions and low variance in coverage  and domains with nonuniform action costs  respectively 

   

fid omshlak   k arpas     m arkovitch

overhead

hla  hlm cut

hla  hlm cut 

hlm cut  hlm cut 

all three

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage    
satellite    
zenotravel     
blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips    
elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

  
  
  
  
  
   
   
   
   
   
   
   
   
   
  
  
   
  
   
   
   
  
  
   
   
  
  
  
  
   
  

  
  
  
  
  
   
   
   
   
   
   
   
   
   
  
  
   
   
   
   
   
  
  
   
  
  
  
  
  
   
  

  
   
  
  
  
   
   
   
  
   
   
  
  
  
  
  
   
  
   
  
  
  
   
  
   
  
   
   
   
  
  

  
  
  
  
  
  
  
   
  
   
   
  
   
  
  
  
   
   
   
   
   
  
  
  
   
  
   
  
  
  
  

average

   

   

  

   

table     selective max overhead  each row lists the average percentage of time spent on learning
and classification  out of the total time taken by selective max  in each domain  for each
set of heuristics  domains are grouped into domains with unit cost actions and high
variance in coverage  domains with unit cost actions and low variance in coverage  and
domains with non uniform action costs  respectively 

   

fio nline s peedup l earning for o ptimal p lanning

coverage
airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     
sum

sel    
h
  
  
  
  
  
  
 
  
   

sel    
h
  
  
  
  
  
  
 
  
   

sel  
h
  
  
  
  
  
  
 
  
   

sel    
h
  
  
  
  
  
  
 
  
   

sel  
h
  
  
  
  
  
  
 
  
   

sel  
h
  
  
  
  
  
  
 
  
   

sel  
h
  
  
  
  
  
  
 
  
   

sel  
h
  
  
  
  
  
  
 
  
   

table     number of problems solved by selective max in each domain with varying values of
hyper parameter 

coverage
airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     
sum

sel     
h
  
  
  
  
  
  
 
  
   

sel    
h
  
  
  
  
  
  
 
  
   

sel    
h
  
  
  
  
  
  
 
  
   

sel    
h
  
  
  
  
  
  
 
  
   

sel    
h
  
  
  
  
  
  
 
  
   

sel     
h
  
  
  
  
  
  
 
  
   

table     number of problems solved by selective max in each domain with varying values of
confidence threshold 

table    lists the average overhead of selective max in each domain  for each combination of
two or more heuristics 
tables                and    list the number of problems solved in each domain  under various
values for     n   sampling method and classifier  respectively 

coverage
airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     
sum

   
seln
h
  
  
  
  
  
  
 
  
   

    
seln
h
  
  
  
  
  
  
 
  
   

     
seln
h
  
  
  
  
  
  
 
  
   

table     number of problems solved by selective max in each domain with varying values of
initial sample size n

   

fid omshlak   k arpas     m arkovitch

coverage
airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     
sum

selpdb
h
  
  
  
  
  
  
 
  
   

selp
h
  
  
  
  
  
  
 
  
   

p
selu
h
  
  
  
  
  
  
 
  
   

table     number of problems solved by selective max in each domain with different sampling
methods  pdb is the sampling method of haslum et al          p is the biased probes
sampling method  and u p is the unbiased probes sampling method 

coverage
airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     
sum

b
seln
h
  
  
  
  
  
  
 
  
   

selaode
h
  
  
  
  
  
  
 
  
   

i
selit
h
  
  
  
  
  
  
 
  
   

n
sel n
h
  
  
  
  
  
  
 
  
   

n
sel n
h
  
  
  
  
  
  
 
  
   

table     number of problems solved by selective max in each domain with different classifiers

   

fio nline s peedup l earning for o ptimal p lanning

coverage

selh

portint

portctr

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

table     detailed coverage of portfolio using hla   hlm cut   number of problems solved by selective max  selh    a simulated interruptible portfolio  portint    and a simulated contract
anytime portfolio  portctr   in each domain using heuristics hla   hlm cut   domains are
grouped into domains with unit cost actions and high variance in coverage  domains with
unit cost actions and low variance in coverage  and domains with non uniform action
costs  respectively 

   

fid omshlak   k arpas     m arkovitch

coverage

selh

portint

portctr

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
        
         
         

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

table     detailed coverage of portfolio using hla   hlm cut    number of problems solved by selective max  selh    a simulated interruptible portfolio  portint    and a simulated contract
anytime portfolio  portctr   in each domain using heuristics hla   hlm cut    domains
are grouped into domains with unit cost actions and high variance in coverage  domains
with unit cost actions and low variance in coverage  and domains with non uniform action
costs  respectively 

   

fio nline s peedup l earning for o ptimal p lanning

coverage

selh

portint

portctr

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
        
        
         

         
         
         
         
         
        
        
         

         
         
         
         
         
         
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

table     detailed coverage of portfolio using hlm cut   hlm cut    number of problems solved
by selective max  selh    a simulated interruptible portfolio  portint    and a simulated
contract anytime portfolio  portctr   in each domain using heuristics hlm cut   hlm cut   
domains are grouped into domains with unit cost actions and high variance in coverage 
domains with unit cost actions and low variance in coverage  and domains with nonuniform action costs  respectively 

   

fid omshlak   k arpas     m arkovitch

coverage

selh

portint

portctr

airport     
freecell     
logistics       
mprime     
mystery     
pipesworld tankage     
satellite     
zenotravel     

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

         
         
         
         
         
         
        
         

blocks     
depot    
driverlog     
grid    
gripper    
logistics      
miconic      
pathways    
pipesworld notankage     
psr small     
rovers    
schedule     
storage     
tpp    
trucks strips     

         
        
         
        
        
        
          
        
         
         
        
         
         
        
         

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

         
        
         
        
        
        
          
        
         
         
        
         
         
        
        

elevators opt   strips     
openstacks opt   strips     
parcprinter    strips     
pegsol    strips     
scanalyzer    strips     
sokoban opt   strips     
transport opt   strips     
woodworking opt   strips     

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

         
         
         
         
         
         
         
         

total

          

          

          

table     detailed coverage of portfolio using hla   hlm cut   hlm cut    number of problems
solved by selective max  selh    a simulated interruptible portfolio  portint    and a simulated contract anytime portfolio  portctr   in each domain using heuristics hla   hlm cut
  hlm cut    domains are grouped into domains with unit cost actions and high variance
in coverage  domains with unit cost actions and low variance in coverage  and domains
with non uniform action costs  respectively 

tables            and    list the normalized coverage in each domain for selective max  and for
the simulated contract and interruptible sequential portfolios 

references
arfaee  s  j   zilles  s     holte  r  c          bootstrap learning of heuristic functions  in felner 
a     sturtevant  n   eds    proceedings of the third annual symposium on combinatorial
search  socs        pp        aaai press 
backstrom  c     klein  i          planning in polynomial time  the sas pubs class  computational intelligence               
backstrom  c     nebel  b          complexity results for sas  planning  computational intelligence                
bayardo jr   r  j     schrag  r          using csp look back techniques to solve real world sat
instances  in kuipers  b     webber  b  l   eds    proceedings of the fourteenth national
conference on artificial intelligence  aaai        pp          aaai press 
   

fio nline s peedup l earning for o ptimal p lanning

bonet  b     helmert  m          strengthening landmark heuristics via hitting sets  in coelho 
h   studer  r     wooldridge  m   eds    proceedings of the   th european conference on
artificial intelligence  ecai        pp          ios press 
bonet  b   loerincs  g     geffner  h          a robust and fast action selection mechanism for
planning  in kuipers  b     webber  b  l   eds    proceedings of the fourteenth national
conference on artificial intelligence  aaai        pp          aaai press 
botea  a   enzenberger  m   muller  m     schaeffer  j          macro ff  improving ai planning
with automatically learned macro operators  journal of artificial intelligence research     
       
brafman  r     shani  g          a multi path compilation approach to contingent planning  in
hoffmann  j     selman  b   eds    proceedings of the twenty sixth aaai conference on
artificial intelligence  aaai        pp       aaai press 
burke  e   kendall  g   newall  j   hart  e   ross  p     schulenburg  s          hyper heuristics 
an emerging direction in modern search technology  in handbook of metaheuristics  international series in operations research   management science  chap      pp         
coles  a     smith  a          marvin  a heuristic search planner with online macro action learning  journal of artificial intelligence research             
cover  t  m     hart  p  e          nearest neighbor pattern classification  ieee transactions on
information theory                
de la rosa  t   jimenez  s     borrajo  d          learning relational decision trees for guiding
heuristic planning  in rintanen  j   nebel  b   beck  j  c     hansen  e   eds    proceedings
of the eighteenth international conference on automated planning and scheduling  icaps
       pp        aaai press 
domshlak  c   karpas  e     markovitch  s          to max or not to max  online learning for
speeding up optimal planning  in fox  m     poole  d   eds    proceedings of the twentyfourth aaai conference on artificial intelligence  aaai        pp            aaai press 
fern  a          speedup learning  in sammut  c     webb  g  i   eds    encyclopedia of machine
learning  pp          springer 
fern  a   khardon  r     tadepalli  p          the first learning track of the international planning
competition  machine learning                 
fikes  r  e   hart  p  e     nilsson  n  j          learning and executing generalized robot plans 
artificial intelligence            
fikes  r  e     nilsson  n  j          strips  a new approach to the application of theorem
proving to problem solving  artificial intelligence            
finkelstein  l     markovitch  s          a selective macro learning algorithm and its application
to the nxn sliding tile puzzle  journal of artificial intelligence research            
garca olaya  a   jimenez  s     linares lopez  c          the      international planning competition  tech  rep   universidad carlos iii de madrid  http   hdl handle net             
geffner  h          the model based approach to autonomous behavior  a personal view  in fox 
m     poole  d   eds    proceedings of the twenty fourth aaai conference on artificial
intelligence  aaai        pp            aaai press 
   

fid omshlak   k arpas     m arkovitch

haslum  p   botea  a   helmert  m   bonet  b     koenig  s          domain independent construction of pattern database heuristics for cost optimal planning  in holte  r  c     howe  a  e 
 eds    proceedings of the twenty second aaai conference on artificial intelligence  aaai
       pp            aaai press 
helmert  m          the fast downward planning system  journal of artificial intelligence research             
helmert  m     domshlak  c          landmarks  critical paths and abstractions  whats the difference anyway   in gerevini  a   howe  a   cesta  a     refanidis  i   eds    proceedings
of the nineteenth international conference on automated planning and scheduling  icaps
       pp          aaai press 
helmert  m   haslum  p     hoffmann  j          flexible abstraction heuristics for optimal sequential planning  in boddy  m   fox  m     thiebaux  s   eds    proceedings of the seventeenth
international conference on automated planning and scheduling  icaps        pp     
     aaai press 
helmert  m     roger  g          how good is almost perfect   in fox  d     gomes  c  p   eds   
proceedings of the twenty third aaai conference on artificial intelligence  aaai        pp 
        aaai press 
helmert  m   roger  g     karpas  e          fast downward stone soup  a baseline for building
planner portfolios  in icaps      workshop on planning and learning  pp       
hoffmann  j     nebel  b          the ff planning system  fast plan generation through heuristic
search  journal of artificial intelligence research             
hutter  f   hoos  h  h   leyton brown  k     stutzle  t          paramils  an automatic algorithm
configuration framework  journal of artificial intelligence research             
karpas  e     domshlak  c          cost optimal planning with landmarks  in boutilier  c 
 ed    proceedings of the   st international joint conference on artificial intelligence  ijcai        pp           
katz  m     domshlak  c          implicit abstraction heuristics  journal of artificial intelligence
research            
kautz  h     selman  b          planning as satisfiability  in neumann  b   ed    proceedings of the
  th european conference on artificial intelligence  ecai        pp          john wiley
and sons 
keyder  e     geffner  h          soft goals can be compiled away  journal of artificial intelligence
research             
marques silva  j  p     sakallah  k  a          grasp   a new search algorithm for satisfiability 
in proceedings of the      ieee acm international conference on computer aided design
 iccad        pp         
minton  s          machine learning methods for planning  morgan kaufmann publishers inc 
nissim  r   hoffmann  j     helmert  m          computing perfect heuristics in polynomial time 
on bisimulation and merge and shrink abstraction in optimal planning  in walsh  t   ed   
proceedings of the   nd international joint conference on artificial intelligence  ijcai    
pp            aaai press ijcai 
   

fio nline s peedup l earning for o ptimal p lanning

palacios  h     geffner  h          compiling uncertainty away in conformant planning problems
with bounded width  journal of artificial intelligence research             
pearl  j          heuristics  intelligent search strategies for computer problem solving  addisonwesley 
pednault  e  p  d          adl  exploring the middle ground between strips and the situation
calculus  in brachman  r  j   levesque  h  j     reiter  r   eds    proceedings of the first
international conference on principles of knowledge representation and reasoning  kr
       pp          morgan kaufmann 
rendell  l  a          a new basis for state space learning systems and a successful implementation  artificial intelligence                
rintanen  j   heljanko  k     niemela  i          planning as satisfiability  parallel plans and algorithms for plan search  artificial intelligence                      
russell  s  j     zilberstein  s          composing real time systems  in mylopoulos  j     reiter 
r   eds    proceedings of the   th international joint conference on artificial intelligence
 ijcai        pp          morgan kaufmann 
schiex  t     verfaillie  g          nogood recording for static and dynamic constraint satisfaction
problems  journal of artificial intelligence research          
thayer  j  t   dionne  a  j     ruml  w          learning inadmissible heuristics during search  in
bacchus  f   domshlak  c   edelkamp  s     helmert  m   eds    proceedings of the twentyfirst international conference on automated planning and scheduling  icaps        pp 
        aaai press 
utgoff  p  e   berkman  n  c     clouse  j  a          decision tree induction based on efficient
tree restructuring  machine learning             
webb  g  i   boughton  j  r     wang  z          not so naive bayes  aggregating one dependence
estimators  machine learning             
yoon  s   fern  a     givan  r          ff replan  a baseline for probabilistic planning  in boddy 
m   fox  m     thiebaux  s   eds    proceedings of the seventeenth international conference
on automated planning and scheduling  icaps        pp          aaai press 
yoon  s   fern  a     givan  r          learning control knowledge for forward search planning 
journal of machine learning research            
zimmerman  t     kambhampati  s          learning assisted automated planning  looking back 
taking stock  going forward  ai magazine           

   

fi