journal artificial intelligence research                 

submitted         published       

solving limited memory influence diagrams
denis deratani maua
cassio polpo de campos
marco zaffalon

denis idsia ch
cassio idsia ch
zaffalon idsia ch

istituto dalle molle di studi sullintelligenza artificiale  idsia 
galleria    manno       switzerland

abstract
present new algorithm exactly solving decision making problems represented
influence diagrams  require usual assumptions forgetting regularity 
allows us solve problems simultaneous decisions limited information 
algorithm empirically shown outperform state of the art algorithm randomly
generated problems     variables      solutions  show problems
np hard even underlying graph structure problem low treewidth
variables take bounded number states  admit provably good
approximation variables take arbitrary number states 

   introduction
influence diagrams  howard   matheson        graphical models aimed representation problems decision making uncertainty  traditionally  designed
handle situations involving single  non forgetful decision maker  limited memory influence diagrams  hereafter limids  generalizations influence diagrams allow
decision making limited information  case simultaneous decisions  bounded
memory controllers non communicating cooperative agents  zhang  qi    poole       
lauritzen   nilsson        poupart   boutilier        detwarasiti   shachter        
precisely  limids relax regularity forgetting assumptions influence diagrams 
namely  complete temporal ordering decision variables 
disclosed information  i e   decisions observations made  remembered considered
future decisions  assumptions might hard meet applications  might lead exponential growth size policies  consequently
intractability 
solving  limited memory  influence diagram refers finding optimal plan action 
is  combination decision rules  policies  associate possible observation
action  optimality understood maximizing expected utility  task
empirically theoretically shown hard  de campos   ji         fact 
show solving limid np hard even admit singly connected diagrams
bounded number states per variable   devising algorithm produces
provably good approximate solutions within fixed factor unlike exist even
diagrams low treewidth 
   diagram singly connected underlying  undirected  graph contains cycles 
     ai access foundation  rights reserved 

fimaua  de campos    zaffalon

lauritzen nilsson        shown limids satisfy certain graphstructural conditions  which forgetting regularity imply  solved exactly
dynamic programming procedure complexity exponential treewidth  hence 
solving limids computationally similar performing probabilistic inference
bayesian networks  koller   friedman         fact  single policy updating  spu 
algorithm lauritzen nilsson        performs local search space policies
step performs probabilistic inference evaluate candidate solution 
however  many problems fail meet conditions necessary spu achieving optimality  cases spu might converge local optimum much inferior
actual  global  optimum  circumvent problem  de campos ji        formulated
credal reformulation  cr  algorithm maps limid mixed integer linear
programming problem  showed cr algorithm able solve small problems exactly obtain good approximations medium sized problems relaxing
integrality constraints 
show paper limids solved exactly variable elimination
scheme simultaneously propagates sets  partial  solutions  although algorithm
runs exponential time worst case  which expected  problem
np hard   show many problem instances possible obtain optimal
solution efficiently pruning solutions pareto dominated others  heart
algorithms efficiency property moment variable elimination
local pareto dominance implies global pareto dominance  is  partial solution
pareto dominated another partial solution cannot part optimal solution 
hence safely discarded  show experimentally pruning paretodominated local solutions enormously save computational resources  enable us
compute exact solutions much bigger problems previous algorithms  fact 
algorithm orders magnitude faster cr algorithm randomly generated
diagrams containing     variables      strategies 
paper organized follows  section   describes limid formalism presents
new results complexity solving limid  variable elimination algorithm
computing exact solutions presented section    evaluated section    last 
sections     contain related work final discussion  improve readability 
proofs supporting results given appendix 

   limited memory influence diagrams
section  describe limid formalism  state complexity solving limid
instance  show limid transformed equivalent  in terms
maximum expected utility  diagram whose utilities nonnegative decision variables
parents  limids input algorithm next section  start
example decision problem limited information  use throughout
rest paper illustrate motivate concepts  although example  which
essentially team coordination problem  rather simple  easily extended
account realistic scenarios 
  

fisolving limids

    fire dispatching problem
particular fire station contains group firefighters divided three units  fire
dispatcher decides units dispatch reported accident  dispatched
unit costs    utile  units dispatched cost utiles  case fire  higher
number dispatched teams higher chances minimum damage  which implies
saving lives preventing third party financial losses   make things simple  consider
accident handled either appropriately  case say success 
inappropriately  case say failure  ideally  dispatcher wants
maximize chance success minimizing number dispatched teams  and
hence cost operation   successful operation rewarded     utiles 
failure gets zero utiles 
    variables domains
formalism  limited memory  influence diagrams  quantities events
interest represented three distinct types variables nodes   chance variables
represent events decision maker control  outcomes tests
consequences actions  decision variables represent options available decision
maker  finally  value variables represent additive parcels utility associated state
world  set variables considered relevant problem denoted u 
variable x u associated domain x   finite non empty set
values x assume  elements x called states  assume existence
empty domain       contains single element
domain  decision chance variables assumed domains different
empty domain  whereas value variables always associated empty domain 
fire dispatching problem  represent act dispatching
unit decision variable ti   hence three decision variables t    t    t 
domains t    t    t     a  w   stands act means unit
dispatched  w stands wait means unit dispatched  outcome
incident assignment units represented binary chance variable
domain    s  f    representing success failure  respectively   evaluated
value variable v  which associated    individual costs per unit
dispatched  modeled three value variables v    v  v    set relevant
variables problem u    t    v    t    v    t    v    o  v   
domain x set variables x    x            xn   u given cartesian
product x  xn variable domains  thus  element u u defines
state world  is  realization actions events interest  x
sets variables x u  x element domain x   write
xy denote projection x onto smaller domain   is  xy contains
components x compatible variables y  convention 
x     cylindrical extension x set x    x x   xy   y  
often  write x  xn denote set  x            xn   and  clear context 
x denote singleton  x   instance  x    t    o     t     x  
   make distinction node graphical representation decision problem
corresponding variable 

  

fimaua  de campos    zaffalon

  a  s    w  s    a  f     w  f     also  x    w  s  x xy   w xo   s 
cylindrical extension x given sx     a  s    w  s   
    operations real valued functions
operations real valued functions need defined  let f g functions
domains x   respectively  product f g defined function
domain xy  f g  w    f  wx  g wy   w domain  sum functions
defined analogously   f   g  w    f  wx     g wy    notice product sum
functions associative commutative  product distributes sum  is 
f g   gf   f   g   gp  f   f  g   h    f g   f h  f function x   u 
sum marginalp f returns
w
p function x y element
p
domain   f   w    xwx f  x   notice x     f   f   also 
sum marginal operation
inherits
commutativity
p
p p
p pand associativity addition real
numbers  hence xy f   x y f   y x x f  
 fxy  yy set containing functions fxy domain x   one element  

write fxy denote function w xy satisfies fxy  w    fxw  wx   
instance  x two binary valued variables domains x    x    x   



   y          fx  fx  two functions x fx   x          
y 
y 
y 

fx  x           fx  x        fx  x         function fx





fx
 x          fx   x           




fx
 x          fx   x         


fx
 x          fx   x           




fx
 x          fx   x         

clear context  write   denote function returns one
values domain   denote function returns always zero  x x  
indicator function ix returns one x   x zero otherwise 
f g functions domain x k real number  expressions f g
f   k denote f  x  g x  f  x    k  respectively  x x  e g  

previous example fx          finally  function domain containing
single element  e g   empty domain  identified real number returns 
    definition
limid l consists direct acyclic graph  dag  set variables u annotated
variable types  decision  chance value   together collection  conditional 
probability mass functions  one per chance variable  utility functions  one per value
variable   value nodes graph assumed children  precise
meaning arcs varies according type node point  arcs entering
chance value nodes denote stochastic functional dependency  respectively  arcs
entering decision nodes describe information awareness time decision made 
variable x u  denote pax set parents x  is  set
nodes arc pointing x  similarly  let chx denote set
children x  i e   nodes arc x   fax   pax  x  denote
family  let c  v partition u sets chance  decision value
variables  respectively  chance variable c c associated set  p
c   pac  
   

fisolving limids

v 

v 

v 

t 

t 

t 

uv   a    uv   a    uv   a     
uv   w    uv   w    uv   w     



pto   t   t   s  t    t    t      i a a a 
uv  s       
uv  f      

v
figure    limid representing fire dispatching problem 
 conditional  probability mass functions p
c quantifying decision makers beliefs
states x c conditional state parents  if c parents  single
probability mass function assigned   using notation introduced previous section 
equivalently represent set probability mass functions associated variable c
pa
function pc c   assume chance variable x c stochastically independent
non descendant non parents given parents  value variable v v associated
real valued utility function uv pav   quantifies  additive  contribution
states parents overall utility  thus  thepoverall utility state x cd
given sum utility functions  is  u x    v v uv  xpav   
    limid fire dispatching problem
figure   depicts limid fire dispatching problem  graph  chance  decision
value variables represented ovals  rectangles diamonds  respectively 
value variables v    v  v  associated utility functions uv    uv  uv    respectively 
representing cost per unit dispatched  utility outcome quantified
function uv associated value variable v   chance variable associated
function pto   t   t  quantifies conditional probabilities p  o   o t    tt    t   
tt    t    tt    success  o   s  failure  o   f   given joint decision t   t   t   
according model figure  dispatching three units results certain success 
whereas dispatching less three units leads failure 
    policies strategies
decision variable least one parent  policy specifies action
possible state configuration parents  is    pad  
parents  state   set policies variable denoted
  instance  policy t  first unit running example state t   
space policies t  given t     a  w  
let   dd denote space possible combination policies  element
   d  dd said strategy l  given policy state pad   let

p
denote probability mass function conditional pad   pd   id     
parents  pd   id unconditional probability mass function  
   

fimaua  de campos    zaffalon

pa

simplify notation  sometimes write pd irrespective whether parent 
pa
one to one correspondence functions pd policies
pad
specifying policy equivalent specifying pd vice versa  denote
pa
set functions pd obtained way pd   so  instance  pt     ia   iw   
strategy induces joint probability mass function variables c
pa pa
ps  
pc c
pd  
   
cc

dd

associated expected utility
es  l   

x

ps

cd

x

uv  

   

v v

notice two sums eq      different semantics  outer  leftmost  sum
denotes sum marginal
set variables c d  whereas inner  rightmost  denotes
overall utility function v v pav results sum functions uv  
fire dispatching problem  eight possible strategies consisting decision
act wait units  example     t    t    t       a  w  a  possible
strategy  policy t    dispatches unit t  induces probability mass function
pt    ia t    likewise  policy t    w induces function pt    iw   policy
t    induces pt    ia   strategy    a  w  a  induces joint probability
mass function x o t   t   t 
t   t   t 
ps  x    po
 x pt   xt   pt   xt   pt   xt     

expected utility
x
es  l   
ps  uv    uv    uv    uv  
o t   t   t 

 

x

h

ps  x  uv   xt      uv   xt      uv   xt      uv  xo        

xo t   t   t 

optimal strategy    a  a  a  dispatches units  hand 
expected utility es  l        
    theoretical complexity
treewidth graph measures resemblance tree given number
vertices largest clique corresponding triangulated moral graph minus one
 bodlaender         bayesian networks  complexity solving limid strongly
affected treewidth  given limid l treewidth   evaluate expected
utility given strategy time space exponential  koller   friedman 
       hence  bounded constant  computing es  l  takes  at most  polynomial
time input size 
primary task limid find strategy maximal expected utility 
is  find
es  l  es  l 
   

s 

   

fisolving limids

value es  l  called maximum expected utility l denoted meu l  
real problems  enumerating strategies prohibitively costly  fact 
computing meu bounded treewidth diagrams np hard  de campos   ji        
and  following result implies  remains np hard even simpler limids 
theorem    given singly connected limid treewidth equal two  variables three states  deciding whether strategy expected utility
greater given k np complete 
proof  based reduction partition problem  garey   johnson        
given appendix 
usual assumptions complexity theory  problem np hard solve
best available options  i  trying devise algorithm runs efficiently
many instances exponential worst case complexity   ii  trying develop
approximation algorithm instances provides polynomial time solution
provably within certain range optimal solution  section    take option  i  
present algorithm efficiently computes optimal solutions many limids 
runs exponential time many others  following state result suggests
alternative  ii  likely unfeasible  even consider diagrams bounded
treewidth 
given       approximation algorithm  for solving limid  obtains strategy

meu l 
es  l   
   

set                     approximation algorithm finds solution
whose induced relative error   is 
meu l  es  l 
 
meu l 

   

following result indicates provably good approximation algorithms exist
unless p np 
theorem    given singly connected limid l bounded treewidth   unless p np 
polynomial time  approximation algorithm           
number numerical parameters  i e   probabilities utilities  required specify l 
defer proof appendix  result asserts algorithm finds
solutions limids polynomial time cannot guarantee relative error smaller
      even set inputs restricted limids bounded treewidth  hence 
polynomial time algorithm limids must eventually produce poor solutions 
relative error close one large models  exception treewidth
number states per variable bounded  cases  shown constructively
early work  maua  de campos    zaffalon         approximation
algorithm runs polynomial time 
   

fimaua  de campos    zaffalon

    constraining limids nonnegative utilities
principle  utilities associated value variables limid take real
value  complicates ordering functions use algorithm
devise here  fortunately  easily efficiently transform limid l
equivalent limid l  utilities nonnegative whose optimal strategies
optimal strategies l  moreover  obtaining es  l  es  l    strategy
straightforward 
let l limid let k denote smallest utility value associated
value variables  is  v v follows k uv   v
uv  x    k x pav   following transformation generates new limid l 
whose value variables associated nonnegative values 
transformation    value variable v v  substitute associated utility function
uv new utility function u v   uv k 
transformation shifts utility functions uv    makes uv  x     
least one v x pav   since affects value variables  strategy l  the
limid transformation  valid strategy l   the transformed limid  
expected utilities strategy l l  related according following
result 
proposition    strategy s  es  l    es  l      k v  
proof  expected utility respect l  given
es  l     

x

 

x
x

v

 

x

x

ps  x 

x

x

u v  xpav  

v

x
ps  x 
 uv  xpav   k 
ps  x 

x

uv  xpav   k v 

x

ps  x 

x

v

  es  l  k v   
last step follows

p

x ps  x 

    

optimal strategy l satisfies es  l  es  l  s  hence proposition  
ensures es  l    es  l    k v  es  l    k v    es  l   implies
optimal strategy l    similarly  optimal strategy l   
proposition es  l      es  l  k v  es  l  k v    es  l    s  therefore
optimal l  following corollary summarizes results 
corollary    strategy l  optimal strategy optimal
strategy l 
   

fisolving limids

consider running example more  smallest utility value k     
utilities associated value variables transformed limid l  given
u v  s       

u v  f      

u v   a     

u v   w     

u v   a     

u v   w     

u v   a     

u v   w       

strategy    a  w  a  expected utility es  l      es  l  k v               
optimal strategy    a  a  a  obtains es  l          
rest paper  consider limids nonnegative utilities  due
proposition   incur loss generality 
    decision nodes many parents versus parentless decision nodes
policy decision variable parents corresponds choice one states 
hence  space policies nodes contains number policies polynomial
input  hand  cardinality space policies decision nodes
many parents exponential number states parents  see this  consider
ten state decision variable d  parents space policies contains   
 
policies  however  four ternary parent nodes  space contains           
policies 
one might wonder whether limids whose decision nodes many parents
difficult solve limids parentless decision nodes  show that 
least theoretical perspective  case  limid
efficiently mapped meu equivalent limid decision nodes parents 
show optimal strategy original diagram produced
optimal strategy transformed diagram  particularly relevant algorithms
search space policies  case algorithm devise here  allow
us  without loss generality  focus limids whose decision nodes parents 
formally describing transformation showing produces diagram
equal meu  let us first give idea works  end  consider
limid l decision node least one parent  e g   diagram figure   a   
let             denote configurations pad   policy maps configuration
pa
decision   function pd associated policy seen

set probability mass functions pt            ptm pti   p
  id       is 
function pti represents choice state fixed configuration parents 
recall policy associated parentless variable simply choice state 
transformation replaces decision variable decision variables t            tm
chance variables x            xm policy ti corresponds decision  i  
original variables policy  see diagram figure   b    chain x  xm chance
variables responsible making policy ti active parents assume
configuration   occurs   either blocking allowing information
flow according value parents d  thus  parents act selector
   

fimaua  de campos    zaffalon

pad

pad


x 

x 

chd

t 

t 



 a 

xm

chd

tm
 b 

figure    piece diagram  a   b  transformation   

decides probability mass functions pti associated decision nodes t            tm
going used  transformed diagram acts original one  probability
x
 ti  pad
mass functions pxi 
set ensure xi   ti pad   xi   xi 

otherwise 
transformation    consider limid l decision node least one parent 
let             denote configurations pad   remove add    pad  
chance nodes x            xm decision nodes t            tm domains xi   ti  
 for              m   add arc every parent x            xm   arc
every xi xi       m  arc every ti xi                m  add arc
xm child d  associate x  function


xpad     xx    xt 
  
 pa
px    x      
xpad     xx     xt 


  m xpad       
node xi                m  associate function


    xpad   



    xpad   
x
 ti  pad

pxi 
 x 
 

pa


    x
 



    xpad  







xxi
xxi
xxi
xxi

  xxi   
   xxi   
  xti  
   xti    

pa

finally  functions px x child x substituted xm domain 
without altering numerical values 
figure   depicts decision node many parents  on left  new sub diagram
generated transformation    on right   difficult see treewidth
transformed diagram increased three  subgraph containing
new nodes  parents children triangulated contains cliques
 pad  xi   xi    di    variables   also  transformation two different
decision variables affect different parts  hence transforming diagram diagram
parentless decisions increase treewidth three  following
result states optimality strategies preserved transformation 
   since treewidth given size largest clique triangulated moral graph minus one   pad  
lower bound treewidth original graph 

   

fisolving limids

proposition    let l  result applying transformation   decision variable
limid l  s  denote strategy l    t            tm denote corresponding
policies t            tm s    let policy       ti
pad   finally  let strategy l obtained substituting t            tm s 
 and keeping remaining policies   optimal strategy l
s  optimal strategy l   
proof appendix  decision variable original limid 
transformed model contains chance variables specifying m d    values  decision
nodes  d   states  treewidth original diagram bounded 
bounded transformation takes polynomial time   example ten state
decision variable four ternary parents  transformation replaces decision variable
        decision variables whose space policies contain    elements each  besides
   chance variables  combined space policies  is  t  t   contains
     elements  total search space still  doubly  exponential input 
however  algorithms take advantage smaller local policy spaces reach better
solutions  particularly true algorithm devise later on 
rest paper assume without loss generality decision nodes
parents utilities nonnegative 

   solving limids
section  describe new algorithm solving limids exactly propagating
multiple non dominated solutions  start defining basic algebraic structure
algorithm  given framework valuation algebra  show
framework alone  similar one used spu  might lead poor accuracy  thus
extend framework sets valuations attempt improve accuracy increasing
complexity  efficiency obtained pruning sets cardinality kept small
possible without affecting accuracy 
    valuation algebra
basic ingredients algorithmic framework representing handling information limids called valuations  encode information  probabilities  utilities
policies  elements domain  valuation associated subset
variables u  called scope  concretely  valuation scope x pair  p  u 
nonnegative real valued functions p u domain x   refer p u
probability utility part  respectively    often  write x make explicit
scope x valuation   x u  denoted set possible
valuations
scope x x   set possible valuations thus given   xu x   set
closed two basic operations combination marginalization  combination
represents aggregation information defined follows 
definition       p  u     q  v  valuations scopes x y  respectively 
combination valuation  pq  pv   qu  scope x y 
   treewidth bounded output algorithm  is  optimal strategy  might
take space exponential input 

   

fimaua  de campos    zaffalon

marginalization  hand  acts coarsening information 
definition       p  u  valuationp
scope
p x  set variables
x  marginal valuation   x y p  x y u  scope y  case  say
z   x   eliminated   denote z  
notice definitions combination marginalization slightly differ previous works influence diagrams  e g   lauritzen   nilsson         usually require
division utility part probability part  removal division operation
turns important feature discuss maximality valuations later on 
otherwise definition equivalent valuations division  sense one
could easily reformulate message passing algorithms spu using definition 
terms computational complexity  combining two valuations scopes
x y  respectively  requires   xy   multiplications  xy   additions numbers 
computing   x  costs  xy   operations addition  words  cost
combining marginalizing valuation exponential cardinality scope  and
linear cardinality domain   hence  wish work valuations whose
scope small possible  following result shows framework respects
necessary conditions computing efficiently valuations  in sense keeping
scope valuations obtained combinations marginalizations valuations
minimal  
proposition     system    u      satisfies following three axioms  weak 
labeled valuation algebra  shenoy   shafer        kohlas        
 a   combination commutative associative  is           

           
                     
 a   marginalization transitive  is  z z x z

 x
 
z  
z  

 a   marginalization distributes combination  is  x x  
x z x
 x  z   x yyz  
proof   a   follows directly commutativity  associativity distributivity product
sum real valued functions   a   follows directly commutativity summarginal operation  show  a    consider two valuations  p  u   q  v  scopes
x y  respectively  set z x z x y  definition  



x
x
  p  u   q  v  z  
pq 
 pv   qu   
xy z

   

xy z

fisolving limids

since x   z     z  p u functions x   follows



x
x
x
x
x

q
v u
q  p
 pv   qu    p
pq 
xy z

y z

xy z

y z

y z



x x
v  
   p  u 
q 
y z

y z

equals  p  y   q  v yz  
following result kohlas        section      direct consequence  a  
shall use prove correctness algorithm 
lemma     x x     z z x      x  z   x z
 
primary goal valuation algebra computation marginal valuations
form          let  x            xn   set variables appearing
scopes               marginal computed efficiently variable elimination
procedure  receives set                  permutation variables
   
 k  
x            xn                n replaces valuations           whose scope contains


   
 k    xi  
variable  xi   marginal  
  algorithm   describes
procedure  algorithm returns valuation j k   j           k n  
equals axioms  a   a    kohlas        section      
algorithm   variableelimination x   
input  permutation variables x    x            xn   set valuations  
               subsets x
output  marginal valuation     
   let  
     n
   
 k 
  
let           denote valuations i  whose scope contains  xi  


   
 k   xi  
  
compute  
   

 k 

let i   i      i            
   end
   return combination valuations n

  

complexity variable elimination procedure given size largest
valuation generated loop  valuation might size exponential
size valuations             given input  but  discuss later on  certain
conditions size bounded procedure takes time polynomial
input 
   variable elimination algorithms known literature fusion algorithms  shenoy   shafer 
      bucket elimination  dechter        

   

fimaua  de campos    zaffalon

    computing expected utilities
use valuation algebra framework introduced compute expected utility
given strategy using variable elimination  let    d  dd strategy limid
l whose expected utility want compute  permutation variables
c d  assume decision nodes l parents  otherwise need first
apply transformation     strategy simply configuration  
procedure algorithm   computes expected utility induced strategy s 
pa
procedure calls variable elimination set contains valuation c    pc c     
chance variable  valuation v       uv   value variable  valuation
   id      decision variable  following result 
algorithm   expectedutility l    s 
input  limid l whose decision nodes parents  permutation variables
c d  strategy    d  dd
output  expected utility
   let
   c c
pa
  
add c    pc c     
   end
   v v
  
add v       uv  
   end
  
  
add    id     
    end
    let variableelimination c d     
    return utility part

proposition     procedure described algorithm     returns expected utility
strategy s 
proof  let output variable elimination algorithm  according axioms
 a   a       
 
   
   
 
pa



 
pc c    
 id     
    uv    
cc

dd

v v

let p u denote probability
  definition
p utility part  respectively 
q
pa
combination     ps   ps v v uv    ps   pxcd px x      since
ps isp
probability
p distribution c d  follows p   xcd ps  x       finally 
u   cd ps v v uv   equals es  l      
consider limid fire dispatching problem  figure    strategy  
 a  w  a  whose expected utility want compute using procedure above  assume
   

fisolving limids

utilities nonnegative  i e   already applied transformation     according procedure algorithm    first generate set    o    pto   t   t        v   
    u v     v        u v     v        u v     v       u v    t     ia       t     iw       t   
 ia        x    o  x    t    x    t    x    t    let permutation variables
 xi     xi                 variable elimination algorithm
input produces valuations
     v  o

     v  t     t 

     v  t     t 

     v  t     t 

loop  outputs valuation               similarly  compute
expected utility optimal strategy    a  a  a  run variable elimination
   o    pto   t   t        v        u v     v        u v     v        u v     v       u v    t   
 ia       t     ia       t     ia        outputs            
general  described procedure take time exponential input  however 
l bounded treewidth shown exists permutation
procedure takes time polynomial input   e g   koller   friedman       
section          hence  space strategies sufficiently small  find optimal
strategy simply ranking strategies according expected utilities  however 
expect feasible realistic diagram space strategies increases
exponentially number decision nodes  assuming parents   even
diagrams bounded treewidth bounded number states per variable 
    local search algorithms
first attempt design fast algorithm solve limids  one might suggest local
search scheme starts random solution repeatedly explores neighborhood
order find solution higher expected utility  treewidth diagram
bounded  expected utility neighbor solution efficiently computed 
complexity algorithm given size neighborhood  possible approach
define neighborhood solution strategies obtained changing
single policy  gives local search space polynomial input  algorithm  
describes greedy procedure step looks new policy improves
current best solution  algorithm guaranteed find strategy locally
optimal neighborhood  is  cannot improved changing one
policies  lauritzen nilsson        stated sufficient conditions diagram
satisfy order guarantee solution produced local search procedure
 globally  optimal  unfortunately  following example shows  conditions
violated even structurally simple chain diagrams  cases local search
procedure might output local optima poor accuracy 
consider limid running example  suppose start strategy s   
 a  w  a   expected utility    first step might try improve policy
t    producing strategy    w  w  a  whose expected utility    since higher
expected utility initial solution  set sbest update highest
expected utility found  next  try search better policy t    generate
strategy    w  a  a   strategy expected utility    less
   

fimaua  de campos    zaffalon

algorithm   greedypolicysearch l    s   
input  limid l  permutation variables c d  initial strategy
s     d  dd
output  locally optimum strategy sbest
   let sbest s  esbest  l  expectedutility l    s   
   repeat
  
generate new candidate strategy replacing single policy sbest
  
compute es  l  expectedutility l    s 
  
es  l    esbest  l 
  
set sbest esbest  l  es  l 
  
end
   current solution cannot improved way
   return sbest

x 

d 

d 

x 

x 

dn



xn

r

figure    chain structure diagram n decision variables 
expected utility best solution found far  finally  look better policy t   
leads us strategy    w  w  w   whose expected utility    since better
current best solution set sbest update associated expected utility 
since change single policy improve strategy  algorithm halts
solution whose expected utility   maximum expected utility     achieved
strategy    a  a  a   more     relative error   or  terms original diagram
 by means proposition     expected utility zero maximum expected utility
    
procedure described similar spu algorithm 
illustrates pitfalls local search  fact  spu output local optimum
 but would start uniform policy every decision variable   note solution
obtained greedy local search example degrades ratio utility
success  achieved strategy  a  a  a   utility failure increases  instance 
utility success increased u v  s       utility failure remained
same  is  u v  f        algorithm would reach solution whose expected utility
   error     relative maximum expected utility     moreover  cases
spu performs poorly rare  instance  plots figure   show spus relative
performance chain diagrams one figure    diagram generated
independently sampling conditional distribution associated chance node
symmetric dirichlet distribution parameter   m  number variable
states  maximum expected utility diagram computed using algorithm
devise here  took less   seconds diagram experiment 
 blue  point plots figure   depict relative error spu given
diagram   red  line indicates third quartile fixed configuration  di   

fisolving limids

   

   
   
   
   
   
   
   
 

relative error

   
   
   
   
   
 
  
  
  
  
  
number decision nodes

  
  
  
  
  
number states per variable

figure    relative performance spu randomly generated chain diagrams   blue 
circle depicts experiment  red  line depicts third quartile 
agrams left hand side plot obtained number states fixed    
diagrams right number decision variables fixed ten 
example  see third quartile line right hand side plot    
chain diagrams    states ten decision variables  spu returned strategy
 meu l  es  l    meu l       also  cases spu obtains    
relative error  hand  see majority cases solution
returned spu achieved relative error less      all  experiments
show local search effective many cases  may produce poor results 
    ordered valuations
exploit redundancy computation expected utility neighboring
strategies decide whether candidate solution improves current solution without
run variable elimination completely  instance  evaluating quality
new candidate strategy differs current best strategy policy
associated t    insight inspecting two valuations   produced
variable elimination example section     using two different strategies  fortunately 
answer yes  show need concept ordered valuations 
let us define partial order  i e   reflexive  antisymmetric transitive relation 
  set possible valuations  follows 
definition     two valuations    p  u     q  v    say
dominates  conversely  say dominated    write  
equal scope  p q  u v 
scope x  deciding whether dominates costs   x   operations
comparison numbers  following result shows algebra valuations
monotonic respect dominance 
proposition     system    u        satisfies following two additional axioms
ordered valuation algebra  haenni        
   

fimaua  de campos    zaffalon

 a   combination monotonic respect dominance  is 
x x  x    x    
 a   marginalization monotonic respect dominance  is 

x x
x x  

proof   a    consider two valuations  px   ux    qx   vx   scope x  px   ux  
 qx   vx    two valuations  py   uy    qy   vy   scope satisfying  py   uy    qy   vy   
definition   px qx   ux vx   py qy uy vy   since
functions nonnegative  follows px py qx qy   px uy qx vy py ux qy vx  
hence   px   ux    py   uy      px py   px uy   py ux    qx qy   qx vy   qy vx      qx   vx    qy   vy   
 a    let subset x  follows monotonicity respect addition
real numbers



x
x
x
x
 px   ux  y  
px  
ux
qx  
vx    qx   vx  y  
x y

x y

x y

x y

hence  result follows 
axioms  a    a   assert combination marginalization preserve partial
ordering valuations  allow us detect suboptimal strategies early
variable elimination procedure  consider comparing strategies    w  w  w  s   
 w  a  w  limid running example  third iteration loop  i e  
      variable elimination procedure produces valuations s     ps    us   
 
 
 
s     ps    us    strategies s    respectively 
ps   a       

ps   w       

us   a       

us   w       

 

ps   w       

 

 

us   w       

ps   a       

 

us   a       
 

 

 

thus  s  s    since s     st  v  s   t  s     st  v  s   t    know
 
axioms  a    a   s  s    hence es   l  es  l   therefore 
need continue execution variable elimination s    expected value cannot
higher s 
unfortunately  suboptimal solutions always produce valuations dominated optimal one variable elimination  example  consider strategies
   a  w  a     a  a  a   third step  variable elimination generates valuations



s     ps    us    s     ps    us   
ps   a       

ps   w       

us   a       

us   w       




ps   w       



us   w       

ps   a       



us   a         
   

fisolving limids



thus  even though optimal strategy  s    s   
algorithm devise later exploits fact suboptimal solutions
early detected eliminated search space  suboptimal solutions
might eliminated variable elimination  algorithm runs exponential time
worst case  expected  problem np hard  fortunately 
experiments random problems suggest situations frequent 
    sets valuations
multiple runs variable elimination different inputs elimination ordering  i e   permutation variables  represented sets framework
algorithm devise later on  instance  might consider set   valuations
  produced variable elimination third iteration loop every possible
strategy  due monotonicity combination marginalization respect  
immediately halt computation valuations   dominated
other  is  remove dominated valuations     formalized
concept maximal valuations operator max 
definition     given finite set valuations   say maximal
holds   operator max returns set max  
maximal valuations  
x set valuations scope x  set maximal valuations max x  
obtained m  comparisons        x x  
valuations set x scope x  say x scope
x  extend combination marginalization sets valuations follows 
definition     x two sets valuations  
x    x   x x    
denotes set obtained combinations valuation x valuation  
definition     x x set valuations scope x x 


x    x   x x  

denote set valuations obtained element wise marginalization valuations y 
checked sets valuations combination marginalization defined
element wise satisfy axioms  a   a    therefore form valuation algebra  hence 
lemma    applies sets valuations marginalization combination defined
above 
lemma     x x two sets valuations scope x y 
respectively  z set variables z z x      x  z  
x yz  
proof  result follows element wise application lemma     x  z
 x  z  
   

fimaua  de campos    zaffalon

    solving limids exactly
ready describe multiplepolicyupdating  mpu  algorithm 
solves arbitrary limids exactly  algorithm assumes decision nodes
variables  utilities nonnegative  hence transformations    
applied running algorithm case assumptions fail 
consider limid l permutation variables c d  let n    c d  
pa
algorithm initialized generating set s  contains singleton   pc c      
chance variable c  singleton      uv    value variable v set
valuations   pd        contains one element  pd      per policy   decision
variable d  set valued variable elimination performed sets valuations
s    dominated valuations discarded set marginalization  finally 
optimal solution obtained utility part single maximal valuation
set combination sets valuations sn obtained variable elimination 
procedure detailed algorithm   
algorithm   multiplepolicyupdating l   
input  limid l permutation variables c
output  maximum expected utility
   let s 
   c c
pa
  
add singleton   pc c       s 
   end
   v v
  
add singleton      uv    s 
   end
  
  
add set   id          s 
    end
      n
   
 k 
   
let           denote
whose
h sets si 
scope contains  xi  

   
 k   xi  
   
compute   max
   

 k 

let si si   i      i            
    end
    let denote set combination sets sn
    return utility part u  p  u  max s 

   

since variables eliminated end loop  valuations sets
empty scope probability utility parts identified
numbers  hence  algorithm outputs expected utility  i e   real number  line    
let us illustrate algorithm example  more  consider limid l
fire dispatching problem applying transformation   assume elimination
ordering variables used example section      start empty set
   

fisolving limids

s    chance variable  add set
    pto   t   t       
s    add sets
v         u v      

v         u v      

v         u v      

v        u v   

s  due value variables v    v    v  v   respectively  decision variable t 
causes set
t      ia        iw      
scope t  included s    similarly  variables t  t    is  add
sets
t      ia        iw        

t      ia        iw        

scopes t  t    respectively  s    obtaining s     o   v    v    v    v   t    t    t    
first iteration  i      variable elimination loop  lines       


    max  v  o     p    u      
p  u  functions t   t   t  p      u   a  a  a        
u   x      x     a  a  a   note   singleton since singletons
involved computation  second iteration


w
    max  v  t     t      pa    ua      pw
    u      
w

w

pa    ua    pw
    u  functions t   t  p    p       u   a  a        

w
u   x      x     a  a   u       note labeled functions
according policies t  generated them  allows us easily extract
optimal strategy end algorithm 
third iteration need compute


    max  v  t     t 
 a a 

  max   p 
 a a 

    p 
 a a 

 a a 

 a w 

 a a 

  u 

 a a 

 a w 

    p 

 w w 

 a w 

  u 

 w w 

  u 

    p 

  u 

 a w 

 w w 

 w w 

 w w 

    p 

 w w 

  u 

   

    
 a a 

p    u    p 
  u 
  p 
  u 
functions t  p 
 
 a w 
 w w 
 a a 
 a a 
 a w 
 w w 
p 
  p 
     u   a         u   w       u 
     u 
     note
valuation associated policies t    w t    appear  
 a w   a w 
generate valuation equal  p 
  u 
   implies strategies  a  w  w 
 w  a  w  expected utility  strategies  a  w  a   w  a  a  
   

fimaua  de campos    zaffalon

last iteration  generate set


    max  v  t     t 
 a a a 

 a a a 

  max   p 

  u 

 a a a 

 a a a 

    p 

  u 

 a a a 

 a a a 

 w w a 

    p 

 w w a 

  u 

 a a w 

    p 

 a a w 

  u 

 w w w 

    p 

 w w w 

  u 

   

    
 w w a 

 w w a 

 a a w 

 a a w 

 w w w 

 w w w 

p 
  u 
  p 
  u 
  p 
  u 
  p 
  u 
functions
 a a a 
 w w a 
 a a w 
 w w w 
 a a a 
empty set p 
  p 
  p 
  p 
     u 
      
 w w a 
 a a w 
 w w w 
u 
     u 
     u 
    
 a a a 
finally  s          algorithm returns u 
      
expected utility optimal strategy  a  a  a   one see  optimal strategy
easily recovered labeling valuations corresponding policies 
differently message passing algorithms obtain approximate solutions
limids  repeatedly  propagating single valuation  e g   spu algorithm  
mpu algorithm computes exact solutions propagating several maximal valuations
correspond partial combinations local decision rules  efficiency algorithm
handling propagation many valuations derives early removal valuations
performed max operation propagation step 
consider set l    s      given
 

 


 

pa

pc c    



 


cc

 


dd

 id     

  

 


    uv  

v v

functions id consistent policies s  difficult see
 

 


l  


pa
pc c    

cc



 


  id         

  

 


     uv   

v v

dd




 

 



x

 

x s 

hence  proposition    l valuation probability part
one utility part equal expected utility strategy   since relation
induces strict  linear  order l   meu diagram equals utility part
 single  valuation max l   
n variable elimination procedure propagation
step responsible
nfor obtaining max  sn     max l   efficiently distributing
max x s  x   allows significant reduction cardinalities
sets scopes valuations produced 
formally prove correctness algorithm  start showing max
distributes marginalization combination 
lemma      distributivity maximality   x x two finite sets
ordered valuations z x  following holds 
   

fisolving limids

 i  max x max y      max x   
 ii  max max x  z     max z
x   
proof  part  i  shown fargier  rollon  wilson        lemma   iv   
use similar proof show part  ii  holds  first  show max z
x  
z
z
max max x      assume  show contradiction  element x max z
x   
x x   element max max x  z    definition max x   
z
z
z
x max x   x x   hence   a   implies z
x x   x x
z
z
z
z
follows z
  max max x  z  
x   x   therefore x max x     since x
z max max x  z   z
x z   contradicts initial assumpz
tion since z x  
let us show max xz   max max x  z    assume contradiction
z
z
z max max x  z     max z
x    since z x   z max x  
z
z z   shown max x   max max x  z    hence z   z
z max z
x    contradiction 
iteration propagation step  combination sets current pool
sets si produces set maximal valuations initial factorization marginalized
xi             xn  
lemma                    n   follows

 x       xi  






max

 
  max
s 

si

i  si collection sets valuations generated i th iteration
propagation step mpu 
proof  induction i  basis  i      follows trivially 
assume result holds i  is 



 x       xi  




max

 
  max
si

s 

eliminating xi   sides applying max operation get

 x       xi   xi  

xi  







max max



  max max
 




s 

si

   

fimaua  de campos    zaffalon

applying lemma    ii  sides  a   left hand side yields


 x       xi    
xi  




max


  max

s 

si



  max

xi  











bi  

si  bi  



  max



xi  


max






bi  

si  bi  


  max








si  bi  


  max




 

si  

passage first second identity follows element wise application
 a   lemma     third follows second lemma    i   last two
follow definitions si     respectively 
able show correctness algorithm solving limids exactly 
theorem     given limid l  mpu outputs meu l  

n
proof  algorithm returns utility part valuation  p  u  max
  which 

n
n

lemma      n  equals max

  definition s    valuation
s 

n

s  satisfies
 
 

 

cc


pa
pc c    

 


 


dd

 id     

 

 


    uv    

v v

combination decisions  d 
n   corresponds strategy  
exactly one valuation
s  strategy   hence  propo
n
sition     set
contains pair     es  l   every strategy inducing
s 
distinct expected utility  moreover  since functions empty scope correspond

n
numbers  relation specifies total ordering valuations
 
s 
strategy associated  p  u   since
implies single maximal
element 
let

n

 p  u  max

  follows maximality es  l  es  l  s 
s 
hence u   meu l  
   

fisolving limids

    complexity analysis
variable elimination  complexity algorithm depends permutation given input  time complexity algorithm given cost creating
sets valuations initialization step plus overall cost combination
marginalization operations performed propagation step  regarding initialization step  loops chance value variables generate singletons  thus take time
linear input  since decision nodes parents  set added due decision variable contains    d   valuations  let   maxdd cardinality
largest domain decision variable  initialization loop decision variables
takes o  d   time  polynomial input  let us analyze propagation
step  running time propagating  sets of  valuations exponential maximum
number variables scope valuations generated loop step 
number depends permutation chosen best case equal treewidth
diagram plus one  although finding optimal permutation  i e   one leads
minimum maximum number variables per scope  np hard task  generate
permutations using standard heuristics variable elimination bayesian networks 
minimizing number fill ins cardinality domain neighbor
set  empirically shown produce good elimination orderings  jensen  
nielsen        koller   friedman        
consider permutation induces maximum number variables per scope
  diagram bounded number states per variable   cost
combination marginalization bounded constant  complexity depends
number operations performed  moreover  case  
let denote cardinality largest set                n  thus  computing
requires  u    operations combination  because
maximum number
n
sets might need combine compute bi propagation step 
operations marginalization  worst case  equal  d  o  d     is 
sets associated decision variables combined without discarding valuation 
hence  worst case complexity propagation step exponential number
decision variables  even width elimination ordering number states per
variable bounded  note however pessimistic scenario and  average 
removal non maximal elements greatly reduces complexity  experiments
section   show 
    reverse topological ordering
valuations used mpu specify twice many numbers cardinality domain
associated scope  possible decrease number numerical parameters per
valuation algorithm needs handle factor two constraining elimination
variables follow reverse topological ordering according diagram  is 
requiring variable processed descendants processed 
following result shows  reverse topological ordering produces valuations whose
probability part equals one coordinates 

   

fimaua  de campos    zaffalon



b

v 



c

e

v 

f

figure    limid reverse topological ordering increases treewidth 

proposition     defines reverse topological ordering variables c d 
             n valuations probability part p        function
always returns unity 
proof  show result induction i  regarding basis  reverse
topological ordering x  variable containing value nodes children  hence 
pax
b     x          uv      v chx     definition x  equals   px         
pax

pax

x  chance node    px           px    px    decision node  follows
p
pax p
pax p
    max    x  px      x  px    v chx uv      since pax   p
x 
 
 
p
pax
 
probability mass function x    p  
     assume
x  px 
n
inductive hypothesis


result
holds

  
 
 
 
 


  

let

 
x
bi  s   
n
  max   bi s    x    inductive hypothesis valuations set bi   s 
probability part p      hence  definition combination  valuations x
contain probability part equal one  reverse topological ordering implies
time variable xi processed propagation step  children
pax
processed  hence  element bi s  set xi   equals   pxi       xi
pax

pax

chance node    pxi        pxi pxi   xi decision node       uxi   
value node  thus    max xi x    case xi value node
immediate  since valuation result combination two valuations
probability part equal one  xi value node


x


pax x pax
pax
  max
pxi  
pxi ux    pxi      faxi       ux   x
xi

xi



x


pax
pax
  max   
pxi ux    pxi      xi       ux   x  
xi

since p
xi probability mass function pax  


result states assume reverse topological elimination ordering  mpu
needs care utility part valuations  unfortunately  constraining
elimination order might increase complexity algorithm  following example
shows 
consider limid figure    variables assumed binary  we omit
specification probabilities utilities relevant matter  
   

fisolving limids

initialization  s     a   b   c     e   f   v    v     using reverse
topological elimination ordering implies first eliminate e  generates
set


    max  e   v  v   e        u      

whose single element     u    scope  a  c  d  f   size          eliminating variables
ordering f  c  b  a  d  e  hand  generates following sets 


    max  f v  c  f     p    u      


    max  c e    c     p    u      

n

 d   d 
    max  b  b    p    u       

n

 d   d 
    max  a v     a    p    u       
n


 d   d 
    max       d    p    u       
n


 d 
 
   
u
 
 



 
    max e

 
 
scopes valuations                     are  respectively   e  c    d  e  
 d  a    e  d    e      one see  largest valuation generated using ordering
f  c  b  a  d  e contains two variables scope therefore size        
four fold decrease size compared size set   generated using reverse
topological ordering 
notice however even though using reverse topological ordering might increase
size valuations generated variable elimination  necessarily results
higher complexity mpu  overall complexity algorithm
depends size largest valuation generated cardinality
generated sets  possible reverse topological ordering induces significantly
smaller sets  produces valuations whose probability parts always equal one 
might increase number dominated elements 

   experiments
evaluate performance algorithm random limids generated following
way  limid parameterized number decision nodes    d   number
chance nodes c    c   maximum cardinality domain family chance
variable c   maxc  fac    maximum cardinality domain family
decision variable   maxd  fad    set number value nodes v     
variable xi                c     v  sample xi contain     states 
repeatedly add arc decision node children value node
parents  so decision node least one value node children  
step guarantees decisions relevant computation meu  finally 
repeatedly add arc neither makes domain variable greater given
bounds makes treewidth     arcs added without exceeding
   

fimaua  de campos    zaffalon

bounds   note generates diagrams decision chance variables
log    log  c   parents  respectively  dag obtained 
randomly sample probability mass functions utility functions associated chance
value variables  respectively 
compare mpu cr algorithm de campos ji             limids
randomly generated described procedure parameters         c    
        c     mpu implemented c   tested
computer cr   table   contrasts running times algorithm  averages
standard deviation  different configurations randomly generated limids  row
contains percentage solved diagrams  scr smpu   time performance  tcr
tmpu   algorithms n diagrams randomly generated using parameters
d  c  v    c   fixed parameter configuration  mpu outperforms cr
orders magnitude  line    contains case average running time
cr lower mpus  note case cr solve one instance  whereas
mpu solved     instances   also  cr unable solve diagrams
   variables  whereas mpu could solve diagrams containing     variables
    algorithms failed solve diagrams       diagram
consider unsolved algorithm algorithm able reach exact solution
within limit    hours  all  mpu appears scale well number nodes
 i e   d  c v  poorly domain cardinality family decision variables
 i e     
good succinct measure hardness solving limid total number
strategies     represents size search space brute force approach    
loosely interpreted total number alternatives  over decision variables 
problem instance  figure   depicts running time number strategies
log log scale two algorithms test set random diagrams 
algorithm  solved instances shown  covers approximately     cases
mpu      cr  note mpu solved cases cr solved  but
opposite   again  see mpu orders magnitude faster cr  within limit
   hours  mpu able compute diagrams containing      strategies  whereas
cr solved diagrams      strategies 
reduction complexity obtained removal non maximal valuations
propagation step checked figure    shows maximum cardinality
set generated propagation step contrast number strategies 
diagram  a point figure  solved mpu  cardinality sets remains bounded
    vary number strategies  which equals largest cardinality
propagated set worst case valuation discarded   shows
worst case analysis section     pessimistic 
   since current algorithms checking whether treewidth graph exceeds fixed k slow
k    bodlaender         resort greedy heuristic resulted diagrams whose actual
treewidth ranged      
   used cr implementation available http   www idsia ch  cassio id mip  cplex
 http   www ilog com  mixed integer programming solver  implementation mpu
downloaded http   www idsia ch  cassio mpu  

   

fisolving limids

n



c

v



c

scr    

tcr  s 

smpu    

tmpu  s 

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 
 
 
 
  
  
  
  
  
  
  
  
 
 
 
 
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  

 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
 
  
  
 
  
  
  
  
  
  
  
 
  
  
  
  
  
  
 
  
  
  
  
 
  
  
 
  
 
  
 

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

   
   
   
  
  
   
  
  
  
  
 
 
 
   
  
  
  
 
 
 
   
  
  
  
  
  
  
 
  
 
  
 
  

    
    
    
     
       
       
         
         
         
         

    

  
         
          
          



    
         
         
         
           
        
         

         

         

         

   
   
   
   
   
   
   
   
  
   
  
  
 
   
   
  
   
  
  
 
   
   
   
   
   
   
  
   
   
   
   
  
   

          
         
          
         
       
          
         
       
      
       
        
         

          
        
        
     
        
         

          
       
     
        
    
         
      
    
        
        
       
         
        

table    performance mpu cr randomly generated limids  numbers
rounded down  

   

fimaua  de campos    zaffalon

   

mpu
cr

running time  s 

   
   
   
   
   
   
   
   

    
    
    
number strategies     

maximum set cardinality  maxi  i   

figure    running time mpu cr randomly generated limids 
   
   
   
   
   
   
   
   

    
    
    
number strategies     

figure    maximum number valuations set propagation step mpu 

   related work
influence diagrams introduced howard matheson        concise language
specification utility based decision problems  substantial literature
formalizes influence diagrams develop algorithms premises forgetting
regularity  cooper        qi   poole        shachter   peot         point
interested reader works jensen nielsen        koller friedman        
zhang et al         studied families limids could solved dynamic programming  limids respecting forgetting regularity  spu algorithm
lauritzen nilsson        solves cases polynomial time diagram
   

fisolving limids

bounded treewidth  best knowledge  attempt  globally  solve arbitrary limids exactly without recurring exhaustive search space strategies
cr algorithm de campos ji        compare algorithm 
shenoy shafer        introduced framework valuation algebras  states
basic algebraic requirements efficient computation valuations  recently 
haenni        incorporated partially ordered preferences algebra enable approximate computation  fargier et al         extended framework preference
degree structure order capture common algebraic structure optimization problems based partial order  algebra develop section   partly casted
framework 
pfu framework pralet  verfaillie  schiex        subsumes many formalisms
probabilistic reasoning  constraint satisfaction decision making  comes
decision problems framework geared towards sequential decision making
equivalent assumptions non forgetting  although authors mention possibility
extending limited information decision scenarios 
variable elimination algorithm develop conceptually close message
passing algorithm dubus  gonzales  perny         algorithm  however 
handle uncertainty target primarily obtention pareto efficient solutions
specific class multi objective optimization problems 
close relation maximum posteriori  map  inference bayesian
networks limids whose decision variables parents  sense  algorithm de campos         solves map propagating pareto efficient probability
potentials join tree  relates ours 

   conclusion
solving limited memory influence diagrams hard task  complexity results
presented show problem np hard even diagrams bounded treewidth
number states per variable  obtaining provably good approximations
polynomial time unlikely number states small 
despite theoretical hardness problem  developed algorithm
spite exponential worst case complexity performed empirically well large set
randomly generated problems  algorithms efficiency based early removal
suboptimal solutions  helps algorithm drastically reduce search space 
designing good heuristics elimination orderings algorithm seems
complex task standard variable elimination algorithms  e g   belief
updating bayesian networks   second component  cardinality
set  together domain cardinalities wish minimize  fact  preliminary
experimentation shown favoring set cardinality expense domain cardinality
might good approach  unlike standard variable elimination  given elimination
ordering limid  seem possible determine true complexity
mpu advance  i e   prior running algorithm   open question whether
mpus complexity estimated beforehand  heuristics finding elimination
orderings perform better 
   

fimaua  de campos    zaffalon

acknowledgments
work partially supported swiss national science foundation  snsf 
grants no                                                  hasler foundation grant
no         canton ticino computational life sciences project  thank
reviewers pointing us related work making number comments helped
us improve readability paper  short version paper appeared nips
    maua   de campos        

appendix a  missing proofs
section contains long proofs supporting results left main part
text improve readability 
following two lemmas used proof theorem   later on 
lemma       real number nonnegative integer       i     

     
proof  since              i              i          i    

sufficient show      i         binomial theorem


      

i   i

 

 

 
x
 
k  

k

  i   k  

k               i  

 
 i   i      i k     
 
  i  k  
k
k 
hence 


      

i   i

 



 
 

x
x
x
k i  k
k

       
   
 
 k      
k  

 i

therefore      i     

k  

k  

 
 

lemma       x      x     x   x  
proof  obtain result approximating functions left  right hand side
inequalities truncated taylor expansions f  x  g x   respectively 
 
showing  x     x  f  x  g x   x   n th order taylor expansion
left hand side around zero given
tn  x       

n  
x
 ln     k
k  

  k  

x k  

clearly  series converges hence  x     x    limn tn  x   moreover 
n  residual rn  x     x     x  tn  x  positive terms sum
   

fisolving limids

non negative  thus 
f  x    t   x       

 ln       
x  x     x   
 

similar fashion  apply variable change   x  right hand side
obtain taylor expansion around zero  given
tn   y       
   

n
x
 ln    k
k  
n
x
k  

k 

yk

 ln    k  k
x  
k 

converges positive residual  hence 
 

 x   lim tn   x 
n

      x  ln      x  ln   


x
 ln    k 
k  

    x  ln      x  ln   


x
k  

      x  ln     

 ln     
  

 

k 
 

 
x k 

  k 

x    g x   

inequality obtained noticing  ln    k   k         x     ln   
geometric series

x
k  

 
  k 




  x   k
 
ln   
  x   k
   
     
 
   
 
 
 
 
 
 
  
k  

k  

finally  since x           ln      


ln   
 
g x        x ln    x  
  


  
ln   
 
      x ln   
ln     
  
  
 
 ln      
   
x   f  x   
 
 

 

hence   x g x  f  x   x     x  result holds 
following result shows solving limids np hard even assume bounded
treewidth number states per variable 
   

fimaua  de campos    zaffalon

x 

d 

d 

x 

x 

dn



xn

r

figure    limid used solve partition problem proof theorem   

proof theorem    given strategy s  deciding whether es  l    k done polynomial time  koller   friedman         problem np  hardness shown using
reduction partition problem  np complete  garey   johnson       
stated follows  pgiven set
p n positive integers a              set
              n  ii ai   ia i ai   assume n     
p
p
let      ia ai   even partition subset achieves ii ai   a 
solve partition  consider rescaled problem  dividing every element
a  
p
vp
  ai  a   elements look partition
ii vi      because
v
 
   
ia
consider following limid topology figure    n binary decision
nodes labeled d            dn   decision di take states d  d    chain
chance nodes n     ternary variables x    x            xn states x  y  z 
arc xn single value node r  notational purposes  specify function
f domain  x  y  z  triple  f  x   f  y   f  z    value node associated
utility function ur                           n  chance node xi associated set
conditional probability mass functions given
d   x
   ti        ti   
px


d   x
            
px


pdx i y             

pdx i y       ti     ti   

pdx i z             

pdx i z             
dx

ti         we specify variables later on   note pxii i   w      every
w faxi wxi    wxi  wxi    z  finally  define px                    
given strategy    d            dn    let    i   di   d    index set policies
di      d   
es  l   

x

px 

cd

n


 
dx
pxii i  pdi

i  


 

x

x

px 


xn

ur

n



xi 

pxii

i  

cd  xn  

let
ps   px 

n


xi 

pxii

i  

   

pdi

pdi ur  

fisolving limids


x

pxn  

n


px 

xi 

pxii

i  

cd  xn  

x

pdi  

ps  

cd  xn  
xn 

w cd wxn   x  i e   w xcd   follows pxnn
  wxn    x  wxn 

 wfaxn     


xn 
  x pxn 
 wfaxn        
n 
dx
also              n   pxii i   wfaxi  

wxn    x recursively 
equals ti   otherwise  hence 
  q
 
ti   wxi   x              n  
ps  w      ii
  
otherwise 


n

 y
ti  
ps  w   
 
cd

x

pxn  x   

ii

wx

likewise  holds w cd
  q
ps  w   

 
 

ia i ti  

  

wxi                n  
otherwise 

therefore
pxn  x   

n
 
ti  
 
ia i

since pxn probability mass function xn   pxn  z      pxn  x  pxn  y  
x
pxn ur
es  l   
xn

    pxn  x  pxn  y 
 y
 
  
ti
ti  
 
 
ii

ia i

let us assume initially ti    vi   reduction original problem
way polynomial  use upper bound outcome
reduction obtain later  difficult
see
p
p es  l  concave function
v            vn achieves maximum ii vi   ia i vi      since strategy
defines partition vice versa  even partition meu l   
                       
show reduction encodes numbers ti time space polynomial
b  number bits used encode original problem  part close analogy
last part proof hardness map bayesian networks de campos
       theorem     
setting ti represent  vi  b     bits precision  rounding necessary  
is  choosing ti  vi ti    vi            b     
   

fimaua  de campos    zaffalon

 vi ti    vi      b      implies  by using lemma      vi  
 b
   b   vi ti    vi     
assume even partition exists  then 
p

 b
 b
 b
ti      n ii vi        n       
ii



 b n

    

p

ia i

vi

 b n

      

 b

    

 

ia i



 b


  
      b
 b
 
      
  
 
meu l     
 
 

   

 b

let r equal   
encoded  b     bits precision  and rounded up   is 
 b
 b
 
 
  b   
 
r  
  
  implies  by lemma        b      b 

 b
 b
 b
  b
 b
  
r        
    
      
   
reduction done verifying whether meu l      r    already know
even partition associated strategy obtains expected utility greater
  r    equality     fact r rounded up  let us consider
case even partition exist  want show case meu l 
 b
         inequality     implies meu l      r    since even
partition  strategy induces
partition
p
p that  integer c different
zero  ii ai   ac ia i ai   a c  original numbers
ai positive integers add  a  follows


ti  
ti    c a     c a   
ii

ia i

right hand side equality function c  a          a       symmetric
respect y axis  i e   f  c    f  c   monotonically increasing c     
therefore  obtains minimum c      hence 


ti  
ti    a       a   
ii

ia i

since n     implies    because numbers ai positive integers  
lemma   
 
   a       a     a  
number ai encoded least log  ai bits  therefore b log   a       
log   an     log   a     latter greater equal log   a        
hence greater log  a  thus   b   implies a    b
 
 b
therefore   a    b    a      hence 
 b

   a       a    

 

   since number bits used encode partition problem must greater equal n 
n  b n b    hence   j   b n    jb   j     

   

fisolving limids

thus  even partition exist


 b

  
 
ti  
meu l     
ti  
    r    
 
 
ii

ia i

summarize  built limid l polynomial time since ti specified
dx
using o b  bits n functions pxii i    encoding    numbers  which
either      ti     n     variables bounded number states  shown
one to one correspondence partitions original problem
strategies l  given rational r   f  b  encoded o b  bits existence
even partition equivalent meu l      r   
following lemma used proof theorem    similar result shown
park darwiche        lemma    
lemma     x   follows x            ln       x  
proof  let f  x    ln       x     x        
f    x   

x 

 
 
   
 
  x x   x      

strictly negative x   since x   x   x   x      hence  f  x  monotonically
decreasing function x    limx f  x       f  x  strictly positive       
thus  result follows ln       x       x         since x   
show approximately solving limids bounded treewidth given
minimum performance np hard 
proof theorem    show fixed         existence polynomial

time    approximation algorithm solving limid would imply existence
polynomial time algorithm cnf sat problem  known impossible
unless p np  garey   johnson         similar reduction used park
darwiche        theorem    show analogous inapproximability result maximum
posteriori inference bayesian networks  notice                

      hence existence  approximation algorithm implies existence

   approximation  suffices desired result show latter cannot
true  unless p np  
clause disjunction literals  literal either boolean variable
negation  say clause satisfied if  given assignment truth values
variables  least one literals evaluates    thus  decide truth value
assignment satisfies clause time linear number variables  cnf sat
problem defined follows  given set clauses c            cm  subsets   boolean
variables x            xn   assignment truth values variables satisfies
clauses 
positive integer q specify later on  consider limid obtained follows
 the topology depicted figure     boolean variable xi add q binary
   

fimaua  de campos    zaffalon

b 
dn 

sn 

dn 

bq
dnq

sn 

 
 
 
d  



b 

 
 
 

s  

d  

snq

 
 
 
d q

s  

s  

u

s q
s q

s  

figure    graph structure limid used proof theorem   

decision variables di            diq q chance variables si            siq domain                m  
additionally  q clause selector variables s             s q taking values                m  
q binary variables b             b q   value node u b q parent  illustrated
figure    limid consists q replicas polytree shaped diagram variables
d j           dnj   s j           snj   b j   probability mass functions variables b             b q
chosen make expected utility equal product expected utilities
replica  replicas  i e   j             q    variable dij  i              n 
represents assignment truth value xi parents  selector variables
s j represent choice clause process  is  s j   k denotes clause ck
processed  summing s j process clauses  variable sij    
j
           n j              q  dij si 
parents  variables b j snj and 
j      b j  parents  j  assign uniform probabilities s j   is  ps j     m 
 

j              q  set probabilities associated variables s j           snj ck
clause selected s j sij set zero ck satisfied di
j
d            di    sij   si 
otherwise  formally  x  s j  dj  s j  




  




j j

  
p ji i   x   
si
  




  



i 

j

j

xsi   xsi       
j

j

xsi     xsi    k   xi   xdi satisfies ck  
j

j

xsi   xsi    k   xi   xdi satisfy ck  
otherwise 

notice s j first case never occurs since s j takes values             m  
j
joint state configuration x s j           snj   d j           dnj xs    k             m   i e  
j
clause ck processed  xsn      follows
 
n
j

dij si 
ps j
p j
pdj  x 
 

i  

si



equals   m     n clause ck satisfied xi   xdi
j
x    xd            xi    xdi    variables s j           si 
assume value k  i e  
   

fisolving limids

j

j

j

j

xs      xsi    k   xsi     xsn      otherwise  equals    hence 
 partial  strategy sj    dj           dnj   x    
 




j
pss j  x 
n

x

 

j      s j

ps j

 

n 

 

n

i  

j
dij si 

p

sij



sat  sj  
pd j
 x 
 
 




j
d j      dn

sat  sj   denotes number clauses satisfied truth value assignment
j

sn b
x            xn according sj   variable b j associated function pb
j
x fabj  

j
b j   xb j  xsn

    
   x
j j 
j
j
psbnj b  x       xb     xsn       


   otherwise 

j 



 

b   assume xb      hence  joint state configuration x
b             b q   sn            snq

q
 
b       xb q     xsn

    xsn     
   x
j j 
 
q
 

psbnj b  x       xb     xb     xsn      


j  
   otherwise 




q


finally  set utility functionu associated u return   b q      
j j 
q
 
q
 
otherwise  way  u qj   psbnj b
 x  equals   xb     xb     xsn  
q

  xsn     zero otherwise  thus  strategy    s            sq    sj  
dj           dnj   follows
 

es  l   

x

u

cd

 

q


u

b        b q
       s q
sn
n

 

 

j 

ps j

 

j  

x

x

j

psbnj b
q


j

psbnj b

u

b        b q j  
       s q
sn
n
q

j
pss j      
n
j  

i  

j 

j  

q


n


p

j
dij si 

sij

x



ps j

j
s j      sn 
j
j
d       dn
j

sn b
pb
j

j 

pd j

 

n

i  

p

j
dij si 

sij

pd j


j

pss j

n

q
 
sat  sj    
mq
j  

instance cnf sat problem satisfiable optimum strategy
sat  sj     j  meu l       hand  instance
   

fimaua  de campos    zaffalon

satisfiable  j strategy sat  sj      hence
meu l   m   q  mq   given          let q positive integer chosen

      mq   m     q   show later q obtained polynomial

input  cnf sat instance satisfiable     approximation algorithm
meu l  returns value es  l 
q


m  q
meu l 

 
 
es  l 
 
m  

 
rightmost strict inequality follows m  m         m    m 
hand  cnf sat instance satisfiable  approximation returns


m  q
es  l  meu l 
 



hence  use    approximation algorithm solve cnf sat checking whether
output e l     m  q  mq   since q positive integers  test bound  m  q  mq
obtained polynomnial time 
remains show reduction polynomial input  limid contains
q  n          variables  requiring specification   m       numbers
      m        number numerical parameters l  polynomially bounded
q m         n           therefore  suffices show q polynomial n 
definition  q obeys


  q
 

  
    q m      n        

equivalent


 
q ln    




  q   m         n           ln  

  m         n          

ln  
 
ln    
   
 
  m         n          

ln  
 
ln    

q    

q 

since  by lemma                ln       m      ln     suffices choose q

 
q     m       m         n              
   



words  q polynomially bounded    n     therefore  meu l 

approximated polynomial time ratio greater   solve
cnf sat polynomial time 
next result show transformation   preserves expected utility strategies 
strategies easily mapped back forward original transformed
diagrams 
   

fisolving limids

pad   j

x 

x 

t 

t 



xj 

xj

xj  

tj 

tj

tj  



xm

chd

tm

figure     reasoning proof transformation   

 pa

x

 t  pa

proof proposition    looking definition functions px   pxii   
             m  see pad selects j   is  conditional pad   j  
variable xj independent xj               m     j  variable xi
independent ti   words 


pr xj  xj    tj   pad   j     pr xj  tj   pad   j     pxjj  
and     j 
x

pr xi  xi    ti   pad   j     pr xi  xi    pad   j     pxii   
visualize situation removing arc xj  xj arcs
ti xi    j diagram figure   b   the arcs leaving pad removed
conditioning value pad    results diagram figure     note
principle case j     deserves special attention  x  depend
xi variable  function associated x  slightly differ others 
nevertheless  similar reasoning applied  omit case j    
sake simplicity 
follows previous reasoning


pxjm   pr xm  pad   j  

x
x


x
 
 px  pt    pxjj ptj  
pxii  pti
t       tm x       xm 

 

x

ptj

tj

x

i   i  j


pxjj




x

i j  

xj      xm 

x

pxi 


x       xj 

 
 

x
tj

ptj

x
xj      xm 



pxjj




x

pxii   

i j  

   

px 

j 


x

pxi 


i  

x




pti

t       tm  tj i   i  j

 z

  

 

fimaua  de campos    zaffalon

x

pad   j   function pxi 
   j equals indicator function ixi  xi   



design  pxjj   ixj  tj   thus

pxjm

 

x

x

ptj

tj




ixj  tj

ixi  xi   

i j  

xj      xm 

term outer sum tj   inner sum xj           xm  differs zero
tj   xj   xj       xm   case equals one  hence 
x

pxjm  
ptj ixm  tj
tj

  ptj  
pa

consider strategy s     t            tm           l    let pxmd function

equals pxjm every value j pad   let policy original decision
variable l   j     tj j  strategy l obtained
substituting policies t            tm s    finally  let pt            ptm distributions
pa
induced policies t            tm s    pd distribution induced  
pad
since value j pad pxm   j     ptj   since design xm    
pa
pa
follows pxmd   pd   hence  combination policies t            tm l 
derive corresponding policy l  converse true  policy
pa
pa
generate t            tm pxmd   pd  simply choose ti     j   i   thus 
one to one correspondence policies t            tm policies  
pa
pa
one to one correspondence induced functions pxmd pd  
remains show combination policies t            tm corresponding policy
induce expected utility  let c   d  denote  respectively  set chance
decision variables l    c set chance decision variables l 
also  given strategy l  let

pa
p s  
px x  
cd  d 
pa

note function independent choice policy   ps   p s pd  
given strategy s  l 
x
x
es   l     
ps 
uv
c   d 

 

x

v v

p s

 pa
px  

c   d 




x
 t  pa
pxii 

i  




 
pti

 

p s

x

uv

v v

cd  d 

x x
c    c d   d

x

x

cd  d  xm

pa

pxmd p s

x




x

pxii 

i  

 z

 
 

 pad

px  

uv

v v

i  

 
x

x

p
pad
  xm pxm

uv

v v

   

 ti  pad




pti

i  

 

fisolving limids

 

x

x

pa

pd p s

x

ps

cd

x

uv

v v

cd  d 

 

x

uv

v v

  es  l   
strategy l obtained s  substituting t            tm corresponding policy  

references
bodlaender  h  l          linear time algorithm finding tree decompositions small
treewidth  siam journal computing                   
cooper  g  f          method using belief networks influence diagrams  fourth
workshop uncertainty artificial intelligence 
de campos  c  p          new results map problem bayesian networks 
proceedings   nd international joint conference artificial intelligence  pp 
         
de campos  c  p     ji  q          strategy selection influence diagrams using imprecise probabilities  proceedings   th conference uncertainty artificial
intelligence  pp         
dechter  r          bucket elimination  unifying framework reasoning  artificial
intelligence                  
detwarasiti  a     shachter  r  d          influence diagrams team decision analysis 
decision analysis            
dubus  j  p   gonzales  c     perny  p          multiobjective optimization using gai
models  proceedings   st international joint conference artificial intelligence  pp           
fargier  h   rollon  e     wilson  n          enabling local computation partially
ordered preferences  constraints             
garey  m  r     johnson  d  s          computers intractability  guide theory
np completeness  w  h  freeman 
haenni  r          ordered valuation algebras  generic framework approximating
inference  international journal approximate reasoning              
howard  r  a     matheson  j  e          influence diagrams  readings principles
applications decision analysis  pp          strategic decisions group 
jensen  f  v     nielsen  t  d          bayesian networks decision graphs   nd
edition   information science statistics  springer 
kohlas  j          information algebras  generic structures inference  springer verlag 
new york  usa 
   

fimaua  de campos    zaffalon

koller  d     friedman  n          probabilistic graphical models  principles techniques  mit press 
lauritzen  s  l     nilsson  d          representing solving decision problems
limited information  management science               
maua  d  d     de campos  c  p          solving decision problems limited information  advances neural information processing systems     pp         
maua  d  d   de campos  c  p     zaffalon  m          solving limited memory influence
diagrams  arxiv          v   cs ai  
park  j  d     darwiche  a          complexity results approximation strategies
map explanations  journal artificial intelligence research             
poupart  p     boutilier  c          bounded finite state controllers  advances neural
information processing systems     nips  
pralet  c   verfaillie  g     schiex  t          algebraic graphical model decision
uncertainties  feasibilities  utilities  journal artificial intelligence research     
       
qi  r     poole  d          new method influence diagram evaluation  computational
intelligence             
shachter  r  d     peot  m  a          decision making using probabilistic inference methods  proceedings  th conference uncertainty artificial intelligence 
pp         
shenoy  p     shafer  g          axioms probability belief function propagation 
proceedings  th conference uncertainty artificial intelligence  pp 
       
zhang  n  l   qi  r     poole  d          computational theory decision networks 
international journal approximate reasoning                

   


