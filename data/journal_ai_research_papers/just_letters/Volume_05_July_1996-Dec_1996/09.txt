journal of artificial intelligence research                

submitted       published      

quantitative results comparing three intelligent interfaces for
information capture  a case study adding name information into an
electronic personal organizer
jeffrey c  schlimmer
school of electrical engineering   computer science
washington state university  pullman  wa             u s a 
patricia crane wells
allpen software  inc 
      lark avenue  suite      los gatos  ca        u s a 

schlimme eecs wsu edu

patricia allpen com

abstract
efficiently entering information into a computer is key to enjoying the benefits of
computing  this paper describes three intelligent user interfaces  handwriting recognition 
adaptive menus  and predictive fillin  in the context of adding a persons name and address
to an electronic organizer  tests show handwriting recognition is slower than typing on an
on screen  soft keyboard  while adaptive menus and predictive fillin can be twice as fast 
this paper also presents strategies for applying these three interfaces to other information
collection domains 

   introduction
when you meet someone new  you often wish to get their name and phone number  you may
write this in a small notebook or personal organizer  this takes a few minutes to do  so you
put their business card or a small slip of paper in your organizer  promising to copy it over at
a later time   when that later time comes  you face the tedious task of finding where the nowseveral names should go in your organizer and recopying the information  if you are
comfortable with computers  you may use an electronic organizer  a small computer that
includes software for managing names and appointments   looking up someones phone
number is faster with these devices  but adding is more tedious  and owning is more costly 
as a concession to reality  these devices often include pockets for holding queued slips of
paper 
what solutions could we propose to eliminate this procrastination  if adding a persons
name  to your organizer were fun  say with your choice of inspirational message  gratuitous
violence  or a lottery ticket   you might add names more readily  avoiding this whimsy  we
could get the desired effect by just making it faster to add a persons name  for this reason
paper organizers use index tabs  electronic organizers use automatic filing  to be faster still 
an organizer could read a card or handwritten note  via optical character or handwriting

   we have a friend who places a rubber band around his organizer to ensure that these paper slips dont escape
before their time 
   for brevity  well refer to a persons name  address  phone numbers  e mail  etc  as a name  whether the
aggregate information or just a persons first or last name is intended should be clear from context 

      ai access foundation and morgan kaufmann publishers  all rights reserved 

fis chlimmer   w ells

recognition   applying artificial intelligence ideas  we could even imagine an organizer that
predicts what you need to write and does it for you 
this paper describes an electronic organizer that is almost as fast as a slip of paper  and
certainly much faster than previous organizers  it uses commercial hardware  newton 
described in section     its software has three interface components designed to speed
adding a persons name  described in section     handwriting recognition  adaptive menus
with recent values  and predictive fillin  the primary contributions of this paper are detailed
evaluations of the benefits of these three components  described in section    
adding a persons name into an organizer is a special case of capturing and organizing
information  this is a ubiquitous task  big businesses institute careful procedures with
custom forms and databases  but there are billions of smaller  one or two person tasks which
could be done more efficiently and accurately if getting information into a computer were
easier  even small gains would be repeated many times over whenever someone needed to
collect information to make a decision  monitor a process  or investigate something new  the
secondary contributions of this paper are a consideration of how the three components may
be applied more broadly  described in section    
these three interface components are robust if familiar  whether they are intelligent is
arguable  some advocate a behavior based definition which may also apply here  i e   that the
question of whether a device is intelligence or not should be answered by examining its
behavior rather than its internal processes and representations  e g   agre   chapman       
horswill   brooks         even if it does not  our goal is to address the question of how
much intelligence  agency  or support one wants in an interface  lee        rissland        
we assert  as much as will speed the users performance of the task  furthermore  much
research is directed at automatically learning what we will hard code in this study  e g  
dent  boticario  mcdermott  mitchell    zabowski        hermens   schlimmer       
schlimmer   hermens        yoshida         even if learning works perfectly  is the result
worthwhile  we claim the answer can be found in an empirical study of the usefulness of
various user interface components 

   newton
newton is an operating system introduced by apple computer  inc  in       it was designed
for a single user  highly portable computer  frames are the central data structure in newton 
they are stored in persistent object databases maintained in ram  smith        
each newton computer includes a pressure sensitive  bitmapped display on which the
user writes  draws  or taps to enter information  culbert         all are small enough to hold
in one hand and weigh around one us pound  battery life is about one days worth of
continuous use  for a thorough overview of the hardware and software context of current pen
computers  the reader may wish to consult  meyer        
from the very lowest levels  newton supports recognition  its handwriting recognition
was highly publicized when first introduced  the recognizer allows free form input of
printed and cursive writing   it uses on line recognition to convert writing to unicode  text 
the recognizer uses contextual information to limit both types of characters within specific
fields and combinations of characters within words  the latter relies heavily on a
   throughout this paper references to handwriting also refer to handprinting  where a distinction is required  the
latter term will be used explicitly 
   a character encoding similar to ascii but with two bytes per character for languages with larger character
sets 

   

fit hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

dictionaryonly words appearing in the dictionary can be recognized  if the user types a
new word using an on screen soft keyboard   newton volunteers to add it to the dictionary
for future recognition  optionally  the user can invoke a secondary recognizer that does not
use a dictionary and attempts to recognize what is written letter by letter  section  
describes the accuracy of this option  application developers can customize handwriting
recognition by providing special purpose dictionaries or a regular expression describing the
syntax of words to be recognized 
most newton computers include several applications in rom so they can serve as an
electronic organizer  relevant to the point of this paper  all newton computers to date
include an application called names for storing and retrieving peoples names  addresses 
etc   figure   depicts this application  section   describes experiments using a standard and
enhanced version of the names application to add peoples names 

figure    names application included with all newton computers depicted at one
quarter life size of the apple newton messagepad     used in the experiments  as
the user taps on a field  it expands to ease writing  in this picture  the first name field
is expanded  the folder tab button at the top of the screen is for displaying names from
one of eleven user defined folders  from left to right  buttons at the bottom of the
application screen are for showing the time and battery state  labeled with a clock
face   changing the display of this name  labeled show   adding a new name
 labeled new   refiling this name  labeled with the file folder picture   printing 
faxing infrared beaming mailing duplicating deleting this name  labeled with the
envelope picture   and closing the application  labeled with a large x   below these
are universal buttons visible in all applications  from left to right  they provide access
to the names application  a calendar application  a storage place for all other
applications  scrolling buttons  undo  find  and natural language recognition 

   names  
a newton computers built in names application includes one of the three components
suggested by section   to speed adding a new persons name  it recognizes handwriting  and
   throughout this paper references to typing refer to tapping on an on screen soft keyboard 

   

fis chlimmer   w ells

the recognition dictionary can be expanded as needed  names   is an extended version of
names which we wrote to include the other two components 
   

adaptive menus

names   extends names by adding an adaptive menu to   of names    fields    menus
consisting of   recently entered values and   menus with   recently entered values prepended
to fixed choices  if the word the user needs is in a menu  they can choose it rather than write
it out  figure   depicts names   with a menu open for the city field  the choices in the

figure    names   application  in this picture  the user has tapped on the word
city and opened a menu of recently used city names  if the user chooses one of
these cities  it will be copied into the city field for this name  compare this to
figure    note that names   includes all features of names relevant to adding a new
name 
menu are the four most recently entered values for this specific field   each field has a
separate menu   this may be the most convenient when the user has a series of related names
to add  perhaps for people from the same company or city  of course  when the user adds
four unusual values in a row  common choices are inadvertently dropped from the menu  a
more sophisticated approach would list some number of the most recent values and some
number of the most common  names   doesnt explore this for the sake of simplicity and
speed  because these menus are adaptive  users will have to use linear search to examine
choices and cannot rely on muscle level memory of choice locations  if the menus include
more than a few choices  the cost of this search will likely dominate any fitts law effect  
two of names fields already had a menu  the honorific field offered the user ms  
mrs   mr   and dr   the country field offered a menu of thirteen countries  for
completeness  names   prepends the four most recent values to these fields menus 
technically these are split menus   mitchell and shneiderman        compared large
statically ordered menus  unsplit  to those that also prepended most recently used choices
   fitts law states that the time to move a given distance d to a target of width w is proportional to the log of d 
w 
   not to be confused with splitting menu choices across multiple menus in  witten  cleary    greenberg        

   

fit hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

 split  exactly our condition   static were faster than split menus on one task  there was no
difference on another  sears and shneiderman        later found evidence in favor of split
menus including a       improvement in selection time compared to unsplit menus  they
also compared alternative organizations for the split part and recommend limiting the
number of split choices to four or less  which names   does  and sorting split choices by
frequency  which names   approximates by most recently used   in the context of menu
hierarchies  snowberry  parkinson  and sisson        found that adding items containing
upcoming selections resulted in greater accuracy and faster search times  this result has not
been confirmed  kreigh  pesot  and halcomb        and may be as much an effect of
preventing users from getting lost in menu hierarchies as of assisting them in making
selections per se  we test adaptive  split  menus in names   to understand the relative
contribution of such compared to other interfaces in a data entry task 
the four phone number fields have menus  but these give the user a way to categorize
the phone number rather than enter the number itself  they are category menus  norman 
       the phone menus include choices for phone  home  work  fax  car 
beeper  mobile  and other  all phone fields have identical menus  names   does not
modify them  no menus were provided for the first name  last name  and birthday fields 
section   describes which input fields should have menus 
to understand the computational space and time demands of adaptive menus  note that
names   stores all menus in a single object in its own object database  the size of the object
is linear in the number of fields with menus  f  and in the number of choices in each menu
 c   or fc  if each menu were implemented as a circular queue  the time to update the object
would be constant for each menu  or just f  names   uses a slightly slower array
implementation for menus and takes fc time  in practice this works out to slightly more than
one half second for nine fields and four choices 
   

predictive fillin

names   also extends names by automatically filling up to    empty fields in a new name
with predicted values  it treats previous names as a case base  kolodner        and copies
information from a relevant case  specifically  when the user adds a company to a new name
that matches a previous names company  names   copies most of the address from the
previous name into the new one  values are copied verbatim from the two address lines and
the city  state  zip code  and country fields  the user id from the electronic mail address is
dropped before the e mail address is copied into the new name   the remaining components
of the e mail address are likely to be the same for people from the same company   the last
word of phone number values is dropped  only the area code and prefix are copied into the
new name for a typical area code prefix extension phone number  if the user writes or
chooses another value for company  replacing the the value of that field  predictive fillin
recopies dependent values from a previous name  figure   illustrates the sequence of events
from the users perspective 
names   behaves similarly when the user adds a city or state that matches a previous
name  but it copies over less information than when a matching company is found  if a value
copied by predictive fillin is incorrect  the user can write or choose the correct value
manually  table   summarizes which fields have menus and predictive fillin  the structure of
predictive fillin is fixed in the design of names    other work attempts to learn comparable
structure from examples  e g   dent et al         hermens   schlimmer        schlimmer  

   

fis chlimmer   w ells

figure    names   application after the user adds a company for a new name  in the
left panel  the application finds a previous name with a matching company  displays
a dialog  and fills remaining fields with predicted information copied from the
previous name  the center panel shows how much information was filled  the right
panel shows the completed name  in this example the user has written only four
additional words to complete the name 
hermens        yoshida         our goal is to determine whether the end result of such
learning is worthwhile 
if more than one previous name matches the company  city  or state of the new name 
names   fills fields with values from the most recent name  values from the second most
recent occurrence of that name are added to menus  this gives the user a chance to select
between alternate addresses for the same company or alternate zip codes for the same city 
in terms of computational requirements  names   needs no additional storage for
predictive fillin  the object database of previously added names is reused as a case base 
matching a new names company  city  or state to a previous name is implemented with a
newton primitive  an informal study depicted in figure   indicates that newtons proprietary
algorithm appears to run in time linear in the number of names if no match is found and
logarithmic if matches are found 
names   and its source code is in on line appendix a 

   experiments
we hypothesize that recognition  adaptive menus  and predictive fillin speed adding a new
name  to find out if this is so and to what extent  we conducted an experiment in which
subjects added names using different combinations of the three interface components 
   

method

five computer science students between the ages of    and    years of age participated as
subjects in the experiments  prior to the experiments they had used a newton computer for at
least six months and were familiar with newtons handwriting recognition and qwerty
layout of newtons on screen keyboard 
the experiment used a within subject design where each subject participated in each of
six conditions summarized in table    conditions were designed to assess the contribution of
   

fitime in seconds

t hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

j

   

j
   

bj
bj
    b
jbj
   

  

e

j
bg

b

b
   
number of names

   

figure    time to find a matching name using newton as a function of the number of
names in the database if no match exists  circles and upper line  and if several matches
exist  squares and lower line   both axes are linear scale  the upper line is a linear fit 
the lower line is logarithmic  for comparison to the experiment  interpolated values
for     names are shown with open symbols 
each interface component separately and collectively  in the control  typed condition  the
subject types all values without using any of the components  in the null condition  the
subject writes all words using remedial recognition steps  to be described  and types words
only if they are not recognizable  the subject does not add words to newtons dictionary
when asked and does not have the assistance of either adaptive menus or predictive fillin  the
d condition extends null by requiring the subject to add words to newtons dictionary when
asked  the am condition extends null by adding adaptive menus  the pf condition extends
null by adding predictive fillin  the all condition combines the extensions of d  am  and
pf 
we used a pair of apple newton messagepad     computers  running newton os
version      for the experiment and three versions of the names   application  one version
has all interface components disabled and was used for the typed  null  and d conditions  a
second version has adaptive menus and was used for am  a third version has adaptive menus
and predictive fillin and was used for pf and all 
a set of     name records for the experiments was donated by a development officer
from washington state university  her job involves contacting alumni and others to solicit
support for university programs  almost all of the records include a first and last name  a full
mailing address  and one to three phone numbers  few include an honorific  country  or email address  informal tests indicated that the messagepads could hold about     names
after names   was installed  so we selected a random set of     of these records 

   

fis chlimmer   w ells

menu choices
field
honorific

predictive fillin by

built in adaptive
 

company

city

state

notes
ms   mrs   mr   dr 

 

first name
last name
title

 

company

 

address    

 

address    

yes
no label to tap for menu 

yes

city

 

yes

state

 

yes

yes

zip code

 

yes

yes

 

yes

yes

 

yes

country

  

e mail
phone  

 

phone  

 

phone  

 

phone  

 

area code
and prefix

yes
user id is removed 
category menu is used to select
type of phone number rather than
the phone number itself  choices
include phone  home 
work  fax  car  beeper 
mobile  and other 

area code

birthdate

table    name   fields with adaptive menus and predictive fillin 
condition

writing

add to dictionary

adaptive menus

predictive fillin

typed
null

yes

d

yes

am

yes

pf

yes

all

yes

yes
yes
yes
yes

yes

yes

table    experimental conditions  one row per condition  columns indicate which
user interface components were used  blank cells represent no 
to simulate a worst case for recognition  adaptive menus  and predictive fillin  we chose
  names  listed below  from the residual     such that each names company was not in the
preload set of     names   to preserve anonymity here  first and last names are swapped and
phone numbers replaced with artificial values  actual first and last name pairs and phone
numbers were used in the experiment  
   

fit hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

robert anderson
account marketing rep
ibm
w     n river drive
spokane  wa      
            
            

eric brice
director of engineering
raima corp
        th place se
bellevue  wa      
            
            
            

peter friedman
president
nova information systems
         th court ne
suite    
redmond  wa      
            

thomas leland
staffing manager
aldus corporation
    first ave south
seattle wa           
            
            

mike carlson
vp engineering   estimating
general construction
     n northgate way
suite    
seattle  wa      
            
            

to score how words in names were entered and the total time  we used the sheet in
figure    fictitious data corresponding to a subjects entering of the second name in the all
condition is also depicted 

figure    scoring sheet used each time a name was added  a   in the center to right
columns indicates how the first word of a field value was entered using recognition
 cf  figure     an adaptive menu  cf  figure     or predictive fillin  cf  figure     a  
indicates the second word  and so on  the highest digit in a row corresponds to the
number of words in that fields value 
to facilitate setting up each condition  we constructed backup images of messagepads
correctly configured for each of the six conditions  for all images  the     names and the
appropriate version of names   was installed  to the images for d and all  we added all
first  last  and company names to its dictionary using a built in feature of newton  to
initialize the adaptive menus in the images for am and all  we used a special purpose
application  prior to each use the messagepads were completely erased and then restored
from the backup image appropriate to the condition to be tested 

   

fis chlimmer   w ells

the task of the subject was to enter each of the five names twice in each of the six
conditions  the first time a name is entered in a condition simulates a worst case scenario 
the second time  a best 
   

procedure

subjects were given a listing of one of the five names and a messagepad initialized for one of
the six experimental conditions  each subject entered each name in each condition  name 
condition pairs were randomly ordered for each subject to counteract subject learning
effects  they were instructed to enter names quickly  subjects made few mistakes  they were
instructed to correct these before finishing  times reported below include time to correct
mistakes 
subjects were given a precise script to follow when entering a name  this was done
partially to bias results against the hypotheses and partially to minimize individual variation 
specifically  the subject was instructed to enter values for each field in order  from top to
bottom  completing one before going to the next  cf  figure     in conditions involving
handwriting  if a word was not correctly recognized  the subject was to check the menu of
alternate recognitions  depicted in the left panel of figure     if the intended word was not in

figure    remedial steps when a handwritten word is not correctly recognized  in this
example  the subject wrote brice which was misrecognized as brian  when the
subject double taps on the word  a menu of alternative recognitions appears  left
panel   if none of these are correct  the subject requests recognition without the
dictionary  or letter by letter   another double tap on the word generates a second
menu of alternatives  middle panel   if none of these are correct  the subject entered
the word by tapping on the buttons of an on screen keyboard  right panel  
this list  they were to select try letters which attempts recognition without the dictionary 
if the result of this was not correct  they were to check a second menu of alternative
recognitions  depicted in the center panel of figure     if the intended word was not in this
second menu  they were to tap the button with the keyboard picture  type in the word using
the on screen keyboard  and close the keyboard  if this word was not already part of the
dictionary  newton asked if they would like to add it  depicted in the right panel of figure    
note that for each of the recognition menus  the original handwriting is shown near the
   

fit hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

bottom  the first choice is newtons best guess  and the second choice is its best guess with
different capitalization  the subject was instructed to ensure that words were correctly
capitalized 
for typed  the subject was instructed to enter all data using newtons on screen soft
keyboard  for null  the subject was to enter all data by handwriting  for d and all  the
subject was instructed to add any words to newtons dictionary if asked  for am and all  the
subject was instructed to check a fields menu  if there was one  before writing any data  no
special instructions were required for pf beyond the default of not adding words to the
dictionary 
a stopwatch was started when a subject tapped the new button and stopped when the
last field value had been correctly entered  choosing a manual timing method simplified
development of the experimental software  the method by which each word of each field was
entered was recorded on a scoring sheet as indicated in figure   
the experiment took between three and five hours for each subject and was spread over
two or more sessions of approximately two hours within the same week  subjects took short
breaks after adding each name to minimize fatigue 
after each subject completed the experiment  they were asked to rank their favorite
methods for entering names from most to least 
   

results

table   summarizes the median and standard deviation of the subjects time to enter a name
in the six conditions  times include all user input  predictive fillin computation  and time to
correct errors  if any   the first row reports time to add a novel name  our simulation of a
worst case  the second row reports time to repeat the name  our simulation of a best case  an
anova reveals a significant main effect for condition f                    the interaction
of number of times a name is entered and condition is also significant f                   
comparing worst cases across conditions  a post hoc multiple comparisons test using
tukeys hsd indicates that only typed is significantly different  faster  than other
conditions   all p          comparing worst to best cases within the same condition  d  am 
pf  and all are significantly faster  comparing best cases across conditions  typed  am  and
pf are significantly faster than d and null  all is significantly faster than typed  pf  d  and
null  no other pairwise comparisons are significant 
typed

null

d

am

pf

all

worst

           

           

           

           

           

           

best

           

           

           

           

           

           

table    median time in minutes to add a new name over five names and five subjects
    samples per cell  standard deviation in parentheses   columns list six
experimental conditions 
the difference within d  am  and pf across worst and best cases confirms our
hypothesis that these interfaces can speed entering names  by                 compared
to null  respectively  we were surprised to find that predictive fillin was not as fast as
adaptive menus  though the difference is not statistically significant   when designing a data
entry system one might be tempted to implement just adaptive menus given their algorithmic
simplicity  especially compared to sophisticated methods in machine learning that have been
proposed for predictive fillin  however  the latter do not suffer from recency effects imposed
   

fis chlimmer   w ells

by the limited size of adaptive menus  when entering new data related to some in the distant
past  predictive fillin would have little difficulty providing assistance where adaptive menus
could not  adaptive menus could be further refined to use a frequency or frequency recency
combination  but the performance of all suggests implementing both adaptive menus and
predictive fillin  combined with adding words to a dictionary  they can speed entering names
by       in practical terms  these interfaces could make entering a name into an electronic
organizer faster than writing it down on paper and certainly fast enough to capture the
information during a phone conversation 
prior work confirms the difference between the typed and d conditions  ward and
blesser        state that normal writing speed is rarely greater than    characters per minute
 cpm  for a single line of text  using the fact that the mean number of characters per name in
our experiment is       our subjects achieved    cpm  mackenzie  nonnecke  riddersma 
mcqueen  and meltz        compare four interfaces for entering numeric and text data on
pen based computers  including hand printing and using an on screen keyboard   the other
two interfaces were experimental gesture based techniques for entering single characters  
for numeric entry conditions  they found that the on screen keyboard was    words per
minute  wpm  with      error whereas hand printing was      wpm with       error  for
text entry conditions  the keyboard was    wpm with      error whereas hand printing was
   wpm with      error  using the fact that the mean number of words per name in our
experiment is       our subjects achieved     wpm typing and     wpm handwriting for
mixed numeric text input  the key point of comparison is that both their and our studies
found that using a stylus to tap an on screen keyboard is faster than handwriting or printing 
differences in speed between these studies and ours is likely a result of differences between
experimental procedures  theirs versus ours   single versus multiple field fillin  copying
information from memory or screen versus paper  and block or comb type  letter  versus
open  word  interface 
figure   presents box plot summaries of the time data  of interest is reduction in
variance of time by adaptive menus and predictive fillin in the best case  right plot  
differences between individual performance is reduced by these interface components 
the left half of table   lists the recognition accuracy for each field over all conditions 
subjects  and names  the first row indicates that     of the first names written were
correctly recognized immediately  by checking the first menu of alternate recognitions  that
accuracy rises to      similarly  the second row indicates that     of all second names
written were correctly recognized immediately  this rate rose to     when letter by letter
recognition was invoked and again to     by checking the second menu of alternate
recognitions  phone numbers enjoyed the second highest recognition rate below first names 
for reference  cesar and shinghal        report over     recognition rate on hand
printed  canadian postal codes which are  letter  digit  letter  space  digit  letter  digit   this
is comparable to our observed rates for first names  second address lines  and phone
numbers 
the right half of table   lists the percentage of words entered using typing  adaptive
menus  or predictive fillin by field over all conditions  subjects  and names  the first row
indicates that    of first names were typed  the row for state indicates that     of state
names were typed      were chosen from an adaptive menu  and     were predictively
filled in   note that the numbers in each row do not total to      because the left half of the
table lists percentages for words that were written while the right half lists percentages of all
words  
   

fitime in minutes

t hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

 
  

  
 
 
 
 
 

 

 

 

 

 
 

worst case

all

fillin

menu

dictionary

null

 

typed

 

all

fillin

menu

dictionary

typed

 

null

 

best case
experimental condition

figure    box plots of time to enter a name by condition in the worst and best cases 
each box summarizes    values  values outside the inner fences are plotted with
asterisks  values outside the outer fences are plotted with circles  wilkinson  hill 
vang        
combining the left and right halves of table   reveal that many of the difficult torecognize fields have considerable assistance from adaptive menus and predictive fillin  this
accentuates the speed improvements by providing help where it is most needed  figure  
depicts the relationship between the fields  their recognition accuracy  and which have
adaptive menus or predictive fillin  several fields have near perfect recognition accuracy 
they can be recognized without resorting to typing  for instance  numeric fields are easier to
recognize  the phone number fields were recognized at nearly     even though the area
code  prefix  and suffix varied from name to name  the first and last name fields also had
high recognition accuracy  all of the first names were in the built in dictionary  all but two
of the last names were  and the others were often recognized letter by letter  recognition was
poorer in the company and address fields  words in full capitals  e g   raima  and words
with a combination of numbers and letters  e g      th  were difficult to recognize  the
low recognition accuracy of the state field is apparently due to an oversight in newtons
dictionary  wa is not included but many other two letter abbreviations for us states are 
to compensate for low accuracy  names   includes an adaptive menu and or predictive fillin
for each of the difficult to recognize fields 
table   summarizes subjects preference for condition to enter a name  it lists frequency
of ranking over the five subjects  subjects partitioned conditions into non overlapping
groups of  typed  null    d  am  pf   and  all    the authors know of no suitable statistic
for asserting these differences   these results contradict those of mackenzie et al        
who found that subjects preferred typing to handwriting  mildly for text entry and more
   

fis chlimmer   w ells

   

xfirst name

gphone

gaddress    
xlast name
  

i title

recognition    

city

i company

address    

zip code
  

x
i
g

  
state

recognition
adaptive menus
predictive fillin
both

 
 

   

   

   
   
number of words

    

    

figure    recognition rate as a function of the number of total words entered in all
conditions by all subjects for all names  fields with adaptive menus or predictive fillin
 or both  are marked  note that every field with less than     accuracy has either an
adaptive menu or predictive fillin  or both  
strongly for numeric entry  they restricted hand printing input to block or comb type
interface  this unnaturalness may account for some of the dispreference toward handwriting 
writing with a stylus does have its advantages  as meyer        points out  keyboards are
faster for linear text entry  but a pen input device can be more natural  can handle text and
graphic input  and can jump quickly from point to point  writing with a pen also supports
heads up writing  allowing the user to visually attend to other aspects of the task at hand 
typing with an on screen keyboard requires heads down entry 
one subject experimented with names   outside the experimental setting and offered a
number of observations  first  the adaptive menus were too short  and sometimes menus
would be useless no matter how long they were  she wished that the city and company
fields menus were longer  especially city   it was frustrating to have one of the common
city names for a large metropolitan region bumped from the short list  in contrast  the title
fields menu was rarely useful  and she did not see the point of maintaining it  the principles
to be outlined in section   suggest similar revisions 
   

fit hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

field

cumulative recognition accuracy
letter by
correct
 st menu
 nd menu
letter

percent words entered
adaptive predictive
typed
menu
fillin

first name

  

  

  

  

 

second
name

  

  

  

  

  

title

  

  

  

  

  

  

company

  

  

  

  

  

  

address

  

  

  

  

  

  

address  

  

  

  

  

  

city

  

  

  

  

  

  

  

state

  

  

  

  

  

  

  

zip

  

  

  

  

  

  

  

phone

  

  

  

  

  

  
  

  

table    the left columns list cumulative recognition accuracy by field over all words
that were written in all conditions  names and subjects  the right columns list
percentage of all words by field entered by typing  adaptive menus  and predictive
fillin       values total  blank cells represent   
 th

 th

typed

 

 

null

 

 

condition

 st

 nd

d

 rd

 

 
 

am

 

 

pf

 

 

all

 th

 

table    subjects frequency of ranking of preference for different conditions as a
means to enter a name     values total  blanks cells represent   
second  she found the predictive fillin helpful  sometimes it filled when she didnt
expect it to  she also noted that because predictive fillin copies over many fields  it
encourages the user to add a more complete name  this may be an advantage in a harried
setting 

   design recommendations
given these experimental results  how should we configure handwriting recognition 
adaptive menus  and predictive fillin in another application  or a redesigned names     for
handwritten input  recognition should use dictionaries specific to each type of field  numbers
only for numeric fields  and lists of domain terms for text fields 
   

adaptive menus

for adaptive menus  add a menu to any field that might have repeated values  if we
accidentally added an adaptive menu to a field that never had the same value twice  our
   

fis chlimmer   w ells

last name

john
jim
bob
jerry
paul
david
steve
ron
bill
tom
robert
jack
dennis
robin
rich
julie
james
edmund
don
dave

title

president
executive director
vice president   human resources
vice president
travel consultant
staffing specialist
sales representative
program officer
principal
manager
industrial research marketing manager
human resources manager
human resources
general manager
chair
account manager
consultant to seattle govt  relations
western regional sales manager
vice president managing principal
vice president  finance   administra
  
   
   
   
    
percent of values

brown
wood
smith
lee
baker
thomas
schroeder
ray
nelson
jones
johnson
hoffman
hand
frost
evans
erickson
dalpiaz
anderson
adams
zipp

boeing
hewlett packard company
tektronix  inc 
battelle
fluke corporation
microsoft corporation
mentor graphics corporation
eldec corporation
puget sound power   light
motorola inc 
arco products company
university of washington
sundstrand
sandia national laboratories
honeywell
washington technology center
intel corporation
asymetrix corporation
oregon state university
digital equipment corporation
  
   
   
   

company

first name

mistake would be harmless  the user would surely notice that the choices were useless and
avoid checking the menu  when the menu was appropriate  the user would save time by
choosing common values from it 
how long should each menu be  long enough to include the most common values but
short enough to be checked quickly  to make sure the menu is long enough  study how often
a fields values repeat  for names    figures  a and  b depict a frequency histogram for the

    

figure  a  frequency of values in the first name  last name  title  and company
fields for the     names used in section    each plot is a histogram of the    most
common values  dark lines indicate what percent of values could be chosen by
different sized menus  if the menu includes choices from the top down to its vertical
position  it would allow the user to choose the percentage of field values indicated by
its horizontal position 

   

fip o  box     
p o  box     
pacific northwest laboratories
p o  box    
p o  box    
one microsoft way
p o  box c    
p o  box    
     s w  boeckman road
       microsoft bvue
p o  box      
cherry point refinery
boeing commercial airplane company
post office box     
p o  box      
battelle boulevard
taf c   
p o  box     
p o  box     
fj   

city

address

t hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

wa

state

id
tx
il
ny
ma
az
ut
oh
nm
mn
mi
ks
fl
british columbia
virginia
va
texas
  
   
   
   
percent of values

     
          
          
     
     
     
     
          
     
          
     
     
          
          
     
     
          
     
     
     
  
   

zip code

or
ca

seattle
bellevue
richland
redmond
spokane
everett
beaverton
hillsboro
wilsonville
lynnwood
vancouver
pullman
kennewick
tacoma
san francisco
portland
blaine
san ramon
kirkland
corvallis

    

   

   

    

figure  b  frequency of values in address  city  state  and zip code fields for the
    names used in section   
   most common values for   fields drawn from the     name records used in the
experiments  overlaid on each plot is a line indicating what percent of field values could be
chosen from a particular size menu  for instance  for the first name field in figure  a  the
histogram is almost flat  a menu including only john would allow the user to choose a
value for that field less than    of the time  if a menu included all    of the first names
shown  the user could choose a value     of the time  this field should not have a menu
because if it were long enough to include the most common values it would take too long to
check   also  the newton computer we used in section   limits menus to    choices because
of its screen size   in contrast  for the company field in figure  a  a menu including only

   

fis chlimmer   w ells

boeing would allow the user to choose a value more than     of the time  if it included
the    values shown  the user could choose a value     of the time 
studying the histograms and aiming for menus that include     of the fields values  we
might re engineer names   to have a menus of size    for the company field  size    for
the city field  and size   for the state field  other fields have very flat histograms and would
need large menus to include a high percentage of field values  recall that section   reports
one subjects frustration with the title field  only president seems to be repeated for this
field in the     names we used 
   

predictive fillin

set up predictive fillin for any field that is functionally dependent  ullman        on another 
a functional dependency is related to the artificial intelligence idea of a determination
 russell         intuitively  one field r  for range  functionally depends on another field d 
for domain  if  given a value for d  we can compute a unique value for r  if predictive fillin
can find a previous entry with the same value for d as the new entry  it copies over the
previous entrys value for r into the new entry  in names    the company field is the
domain and the address field is the range of a functional dependency 
predictive fillin for all and only functionally dependent fields is probably too strict a
strategy  some functional dependencies are not useful for predictive fillin because their
domain values are unique in the database  when this is so  predictive fillin cannot find a
previously matching entry and cannot copy over relevant information  for instance  a us
citizens address is functionally dependent on their social security number  in an application
like names   we dont expect to see the same social security number twice  so predictive
fillin would never have the opportunity to help the user by filling the address  functional
dependencies with repeated domain values in the database  or dense functional
dependencies  should be used to set up predictive fillin 
conversely  some non functional dependencies may be close enough to functional to be
useful for predictive fillin  technically  a dependency is not functional unless only one value
in the range can be computed for every value in the domain  if only a few values in the range
were computed for most values in the domain  the dependency might still be useful  raju  
majumdar        russell        ziarko         for instance  most companies have a single
office and address  but some may have more than one  it is still quite useful to fill address
fields when names   finds a previous name with a matching company field  other user
interface strategies can compensate for the other possible range values when they arise  for
instance  names   puts alternate addresses into the address fields adaptive menu 
therefore  dense dependencies that are functional or nearly so  or dense approximatelyfunctional dependencies  should be used to set up predictive fillin 
to determine which dense approximately functional dependencies hold for a new
application area  it may be necessary to repeat the type of empirical domain analysis
described above for adaptive menus  for names    we used common sense knowledge about
people  companies  and addresses to set up predictive fillin  recall that our goal is to
discover if the end result of automatic learning is worthwhile  e g   dent et al        
hermens   schlimmer        schlimmer   hermens        yoshida         we recommend
considering each field as a number of logical components because dependencies may exist
between parts rather than whole fields  for instance  each person in a company may share a
common telephone number area code and prefix  but they are likely to have different

   

fit hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

extensions  by predictively filling in all but the last component of a phone number  names  
fills as much as it can without adding poor quality information 

   related work
though interested in different tasks  other researchers have studied using intelligent user
interfaces to speed information capture  for instance  hermens and schlimmer        built
an electronic form filler that tried to provide default values for every field on the form  each
field of the form had a decision tree to calculate a default value  like names    the
calculations used previously entered information to generate defaults and predictively fill in
fields  unlike names    the calculations themselves were constructed at run time using a
machine learning method   names   does not alter predictive fillin at run time  cf  table    
they field tested their system with a single electronic form filled out several hundred times
over an eight month period  they report an     reduction in keystrokes  loosely translating
this into a speedup yields      speedup or approximately   times the      speedup we
observed for entering a name 
studying text prediction without field boundaries  pomerleau        built a typing
completion aid  without relying on note taking properties  his system predicts a completion
for the current word being typed  presumably in an editor   a connectionist network
estimates the probability of a number of possible completions for the current word  the most
likely  over some threshold  is offered to the user  pomerleau tested his system with a pair of
subjects over a two week period and reports an increase in typing speed of    for english
text and       for computer program code  this modest gain may be due to inefficiencies
in the learning method  to lack of redundancy in the task  or to limitations in the user
interface itself 
as a complement to earlier research  this paper reports the individual and collective
accuracy of three user interface components  it reports user task time showing that the
components significantly improve efficiency  this paper also clarifies an issue confounded in
earlier work  if a learning interface is less effective than expected  is this due to an inherent
limitation in the interface itself  or does its learning method perform inadequately  to
answer the second question  other work compares two or more learning methods  in this
paper  we hand built the predictive fillin structures  cf  table    and were able to assess the
quality of the predictive fillin interface directly 

   conclusion
this paper makes two main contributions  first  it presents a study of the impact of three
user interface components on the time to enter information into a computer  handwriting
recognition  adaptive menus  and predictive fillin  handwriting recognition is slower than
typing but is preferred by users  advances in handwriting recognition may make it faster  but
recognition would still be much slower than choosing a value from a menu or predictive
fillin  all three components work well together and are preferred by users 
second  this paper discusses principles for applying adaptive menus and predictive fillin
to new application areas  fields with a few  frequently repeated values are candidates for
adaptive menus  functional dependencies indicate candidates for predictive fillin  whether
these characteristics can be learned at run time is a topic for future research 

   

fis chlimmer   w ells

acknowledgments
kerry hersh raghavendra provided the names used in section    apple computer developed
and supports newton and the newton toolkit programming environment  the newton ai
group at wsu provided many useful comments on an earlier draft of this paper  geoff allen 
karl hakimian  mike kibler  and the eecs staff provided a consistent and reliable
computing environment  anonymous reviewers of an earlier draft of this paper provided
many  many  valuable suggestions  this work was supported in part by nasa under grant
number ncc       

references
agre  p  e     chapman  d          pengi  an implementation of a theory of activity 
proceedings of the sixth national conference on artificial intelligence  pp          
seattle  wa  aaai press 
cesar  m     shinghal  r          an algorithm for segmenting handwriting postal codes 
int  j  man machine studies           
culbert  m          low power hardware for a high performance pda  proceedings of the
     ieee computer conference  san francisco  ca  ieee 
dent  l   boticario  j   mcdermott  j   mitchell  t     zabowski  d          a personal
learning apprentice  proceedings of the tenth national conference on artificial
intelligence  pp          san jose  ca  aaai press 
hermens  l  a     schlimmer  j  c          a machine learning apprentice for the
completion of repetitive forms  ieee expert             
horswill  i  d     brooks  r  a          situated vision in a dynamic world  chasing objects 
proceedings of the seventh national conference on artificial intelligence  pp          
st  paul  mn  aaai press 
kolodner  j          case based reasoning  san francisco  ca  morgan kaufmann 
kreigh  r  j   pesot  j  f     halcomb  c  g          an evaluation of look ahead help fields
on various types of menu hierarchies  int  j  man machine studies             
lee  j          intelligent interfaces and uims  in d  a  duce  m  r  gomes  f  r  a 
hopgood    j  r  lee  eds    user interface management and design  ny  springerverlag 
mackenzie  s  i   nonnecke  b   riddersma  s   mcqueen  c     meltz  m         
alphanumeric entry on pen based computers  int  j  of human computer studies     
       
meyer  a          pen computing  a technology overview and a vision  sigchi bulletin     
        
mitchell  j     shneiderman  b          dynamic versus static menus  an exploratory
comparison  sigchi bulletin               
   

fit hree i nterfaces for i normation c apture  a c ase s tudy a dding n ame i nformation

norman  k  l          the psychology of menu selection  designing cognitive control of the
human computer interface  norwood  nj  ablex 
pomerleau  d  a          a connectionist technique for accelerated textual input  letting a
network do the typing  in advances in neural information processing systems   
cambridge  ma  mit press 
rissland  e  l          ingredients of intelligent user interfaces  int  j  man machine
studies             
raju  k  v  s  v  n     majumdar  a  k          fuzzy functional dependencies and lossless
join decomposition of fuzzy relational database systems  acm trans  database syst     
          
russell  s  j          the use of knowledge in analogy and induction  san francisco  ca 
morgan kaufmann 
schlimmer  j  c     hermens  l  a          software agents  completing patterns and
constructing interfaces  journal of artificial intelligence research          
sears  a    shneiderman  b          split menus  effectively using selection frequency to
organize menus  acm trans  on computer human interaction             
smith  w  r          the newton application architecture  proceedings of the      ieee
computer conference  san francisco  ca  ieee 
snowberry  k   parkinson  s     sisson  n          effects of help fields on navigating
through hierarchical menu structures  int  j  man machine studies             
ullman  j  d          principles of database and knowledge base systems  volume   
rockville  md  computer science press 
ward  j  r     blesser  b          interactive recognition of handprinted characters for
computer input  sigchi bulletin              
wilkinson  l   hill  m     vang  e          systat  graphics  version     edition 
evanston  il  systat  inc 
witten  i  h   cleary  j  g     greenberg  s          on frequency based menu splitting
algorithms  int  j  man machine studies              
yoshida  k          user command prediction by graph based induction  sixth ieee
international conference on tools with artificial intelligence  pp           new
orleans  la  ieee 
ziarko  w          the discovery  analysis  and representation of data dependencies  in
piatetsky shapiro  g     frawley  w   eds    knowledge discovery in databases  palo
alto  ca  aaai press 

   

fi