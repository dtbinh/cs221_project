journal of artificial intelligence research                  

submitted        published      

optimal partial order plan relaxation via maxsat
christian muise

cjmuise cs toronto edu

department of computer science 
toronto  ontario  canada  m s  g 

j  christopher beck

jcb mie utoronto ca

department of mechanical   industrial engineering
toronto  ontario  canada  m s  g 

sheila a  mcilraith

sheila cs toronto edu

department of computer science 
toronto  ontario  canada  m s  g 

abstract
partial order plans  pops  are attractive because of their least commitment nature 
which provides enhanced plan flexibility at execution time relative to sequential plans  current research on automated plan generation focuses on producing sequential plans  despite
the appeal of pops  in this paper we examine pop generation by relaxing or modifying
the action orderings of a sequential plan to optimize for plan criteria that promote flexibility  our approach relies on a novel partial weighted maxsat encoding of a sequential
plan that supports the minimization of deordering or reordering of actions  using a similar
technique  we further demonstrate how to remove redundant actions from the plan  and
how to combine this criterion with the objective of maximizing a pops flexibility  our
partial weighted maxsat encoding allows us to compute a pop from a sequential plan
effectively  we compare the efficiency of our approach to previous methods for pop generation via sequential plan relaxation  our results show that while an existing heuristic
approach consistently produces the optimal deordering of a sequential plan  our approach
has greater flexibility when we consider reordering the actions in the plan while also providing a guarantee of optimality  we also investigate and confirm the accuracy of the
standard flex metric typically used to predict the true flexibility of a pop as measured by
the number of linearizations it represents 

   introduction
for an agent to operate effectively in a dynamic world  its behaviour must be flexible in
the face of unexpected changes  in the context of ai planning  there are several approaches
to increase the flexibility of an agent  including giving it the option to select from different
plans  graham  decker    mersic        or expanding the applicability of existing plans
through plan generalization  anderson   farley         one example of the former is to
delay committing to the ordering of certain actions in a plan until absolutely necessary 
allowing the agent to dynamically choose how the plan proceeds at execution time  veloso 
pollack    cox         this flexibility is precisely what partial order plans provide 
partial order planning reflects a least commitment strategy  weld         unlike a
sequential plan  which specifies a set of actions and a total order over those actions  an
ideal partial order plan  pop  only specifies those action orderings necessary to achieve the
goal  in doing so  a pop embodies a family of sequential plans  a set of linearizations
c
    
ai access foundation  all rights reserved 

fimuise  beck    mcilraith

all sharing the same actions  but differing with respect to the order of the actions  during
execution  the agent is free to choose the next action to execute from the plan as long
as the chosen action has no preceding actions left to execute  increasing the number of
linearizations in a plan translates directly to giving the agent more freedom at execution
time  thus  we typically use the number of linearizations a pop has as a measure of its
flexibility  while the measure of a pops linearizations is not perfect  it is quite useful as
a proxy for the plans flexibility 
the flexibility afforded by pops makes them attractive for real time execution  multiagent task assignment  and a range of other applications  veloso et al         weld        
nevertheless  in recent years research on plan generation has shifted away from partial order
planning towards sequential planning  primarily due to the effectiveness of heuristic based
forward search planners  to regain the least commitment nature of pops  while leveraging
fast sequential plan generation  it is compelling to examine the computation of pops via
sequential planning technology as is done  for example  in the forward chaining partial order
planner popf  coles  coles  fox    long        
in this paper  we present an alternative approach that first generates a sequential plan
with a state of the art planner  and subsequently relaxes the plan to a minimally constrained pop  deordering is the process of removing ordering constraints from a plan and
reordering is the process of allowing any arbitrary change to the ordering constraints  both
requiring that the pop remains valid  pop deordering and reordering have been theoretically investigated  backstrom         and unfortunately optimal deordering and reordering are np hard to compute and difficult to approximate within a constant factor  unless
n p  dt im e npoly log n    backstrom         despite this theoretical impediment  we
find that in practice we can often compute an optimal solution 
the minimum deordering and minimum reordering of a sequential plan cover a natural
aspect of least commitment planning  minimizing the ordering constraints placed on a plan 
intuitively  a deordering involves removing existing ordering constraints while a reordering
allows both for ordering constraints to be removed as well as new ordering constraints to
be included  both techniques naturally provide greater flexibility at execution time  as
there is an inverse correlation between the number of ordering constraints and the number
of linearizations in a pop  reordering may achieve greater flexibility than deordering as
the addition of a new constraint may allow a number of existing ordering constraints to be
removed while still guaranteeing pop validity 
our approach for computing an optimally relaxed pop is to use a family of novel encodings for partial weighted maxsat  an optimal solution to the maxsat problem corresponds
to an optimally relaxed pop  unlike typical sat based planning techniques  we represent
an action instance only once  giving us a succinct representation  we empirically compare
our approach to an existing polynomial time heuristic for relaxing a sequential plan due to
kambhampati and kedar        and find that the latter is extremely proficient at computing a minimum deordering  matching the optimal solution in every problem tested  we find 
however  that a minimum reordering can be substantially more flexible than a minimum
deordering  having fewer ordering constraints and far more linearizations 
we also compare the efficiency of our technique with a related approach that uses a
mixed integer linear programming encoding to compute the minimum reordering  do  
kambhampati        and find that our approach consistently performs better on problems of
   

fioptimal partial order plan relaxation via maxsat

non trivial size  our approach represents a practical technique for computing a guaranteed
optimal deordering and reordering of a pop 
using a modern maxsat solver to compute maximally flexible solutions provides two
key benefits      the solver can be used as an any time procedure that computes the optimally flexible reordering of a pop given enough time  where no such technique previously
existed   and     computing the optimal deordering of a pop allows us to evaluate the
efficiency of the existing heuristic algorithm 
    removing redundant actions
the generality of encoding allows us to easily define alternative objectives and optimization
criteria  to demonstrate a key aspect of this generality  we extend the characterization
to an orthogonal metric  minimizing the total cost of actions in a plan via the removal of
unnecessary actions  this is a metric commonly used as a measure of plan quality  and
interestingly can be directly at odds with the task of improving a plans flexibility  here 
we consider one option for combining the two metrics that puts a higher priority on action
cost than the subsequent plan flexibility 
the majority of the encodings  theoretical foundations  and theorems presented in this
paper apply to the more general class of problems that incorporates both metrics  we refer
to a pop that has a minimum action cost  over the actions in the pop   and subsequently
a minimum number of ordering constraints  as a minimum cost least commitment pop
 mclcp    an mclcp is compelling because it is free of any redundant actions as well as
any redundant ordering constraints  an mclcp contains only what is relevant to achieve
the goal 
we present the theoretical aspects of the more general mclcp criterion  but as our
main focus is on maximizing the flexibility of pops  we focus our experimental evaluation
on deorderings and reorderings exclusively  we leave the further evaluation of our method
for solving mclcp as compared to plan repair techniques  e g   nebel   koehler       
gerevini   serina        as a matter for future work 
    contributions
the following are the main contributions of this paper 
 we introduce a practical method for computing the optimal deordering and reordering of a plan  we accomplish this through a set of novel partial weighted maxsat
encodings  differing by a set of clause schema to define the type of relaxation we desire  we model the encodings after standard partial order planning concepts  causal
support and threat resolution  which we then draw upon to prove the correctness of
our encodings 
 we propose an extension to least commitment planning  mclcp  that includes the
total cost of a solution  the optimization focuses first on minimizing the total action
cost before minimizing the number of ordering constraints included in the plan  we
   note that minimizing the total action cost in a uniform cost domain is equivalent to minimizing the
number of actions 

   

fimuise  beck    mcilraith

further prove the correctness of our approach that uses a partial weighted maxsat
encoding for computing an mclcp 
 we demonstrate  somewhat surprisingly  that an existing heuristic is extremely proficient at computing optimal deorderings  the existing algorithm produces only deorderings  and it is not theoretically guaranteed to find a minimal  let alone an optimal 
deordering  nonetheless  we find empirically that the heuristic computes the optimal
deordering in every instance in our suite of benchmarks 
 we demonstrate the efficiency of our approach compared to a previous method that
uses a similar encoding for a different optimization framework  for problems that are
relatively difficult to relax  i e   take more than a second to compute   our approach
improves on the previous work by solving     more of the problems within the given
time bound 
 we establish the empirical connection between the number of linearizations of a pop
and the standard flex measure  which captures a normalized measure of the number
of ordering constraints 
 we demonstrate the impact that the starting solution form will have on the final
relaxed plan  in particular  we consider using two types of layered plans that are
produced by the mp and popf planners  rintanen        coles et al         
 we show that we can achieve greater flexibility  compared to the optimal deordering 
when using the optimal reordering  this result justifies the need for an approach such
as ours to compute a more flexible plan 
the work in this paper extends the conference publications by muise  mcilraith  and
beck               while we provide the full generality of using mclcp as our base
encoding  in this paper we focus our evaluation on the minimum deordering and reordering
aspects  we have expanded on the theoretical framework of our approach  including proofs
of correctness  and significantly expanded the empirical evaluation 
    organization
we start by providing  in section    the necessary background and notation for automated
planning and partial weighted maxsat  next  we detail our approach in section    including
both our new mclcp criterion in section     and the family of encodings for the various
optimization criteria in section      finally  we present our evaluation in section   and
conclude with a discussion of related work and summary in section   

   preliminaries
in this section  we present the necessary background notation and concepts for our work 
    classical planning
planning is the task of synthesizing a solution that dictates what actions an agent must
take in order to achieve some prescribed goal  in classical planning  we assume the world
   

fioptimal partial order plan relaxation via maxsat

is fully known and deterministic  russell   norvig         classical planning has many
applications that range from robotics to modelling biological processes  ghallab  nau   
traverso         the standard approach for synthesizing a classical plan is to perform
search through the state space of a problem  using heuristics to guide the planner towards
a high quality solution  here  we describe the most common formalism used for specifying
a planning problem  strips  fikes  hart    nilsson        
in strips  a planning problem is a tuple    hf  i  g  ai where f is a finite set of
fluents  i  f is the initial state  and g  f is the goal state  and a is the finite set of
actions  we characterize an action a  a by the following three sets 
 p re a   the fluents that must be true in order for a to be executable 
 add a   the fluents that action a adds to the state 
 del a   the fluents that action a deletes from the state 
for our work  the actions are instantaneous and we adopt the standard model of interleaved concurrency  no two actions can occur simultaneously  as such  we make the
simplifying assumption that for every action a  add a   del a      this can be done
without loss of generality  and simplifies the theoretical results below 
we say that an action a is executable in state s iff p re a   s  the resulting state
after executing action a in state s is defined as 
 
 s   del a    add a 
if a is executable in s
def
p s  a   
undefined
otherwise
for a planning problem    hf  i  g  ai  we associate a cost function c that maps
every action a  a to a non negative real number  c   a  r 
  
we will make use of two further items of notation with respect to a set of actions a 
 adders f    the set of actions in a that add the fluent f  
 a   a  a and f  add a  
 deleters f    the set of actions in a that delete the fluent f  
 a   a  a and f  del a  
the most common representation of a solution to a planning problem is a sequential
plan  a sequence of actions  a    a         an   is executable if the preconditions of each action
in the sequence are true in the corresponding state  and an executable sequence of actions is
a sequential plan for the problem    hf  i  g  ai if executing the actions in  a in sequence 
when starting in state i  causes the goal to hold in the final state 
g  p p    p i  a         an     an  
   

fimuise  beck    mcilraith

for readability  we abbreviate the progression of a sequential plan  a from state s as
p   s   a    the cost of an action sequence  a    a            an   is the sum of the individual
actions costs 
n
x
c   a    
c  ai  
i  

rather than impose a total order on the actions in a plan  a partial order plan  pop 
specifies a set of ordering constraints over the actions  we define a pop with respect to
a planning problem  as a tuple ha  oi where a is the set of actions in the plan and o
is a set of ordering constraints between the actions in a  russell   norvig         while
the same action may appear more than once in a  we assume that every element of a is
uniquely identifiable  for the actions a    a   a  we denote the ordering constraint between
a  and a  as  a   a     o and interpret the constraint as action a  appears before action
a  in the plan  a total ordering of the actions in a that respects o is a linearization  a
pop provides a compact representation for multiple linearizations  we assume the ordering
constraints o are transitively closed 
a    a    a   a   a   a      a   a      a   a   
assuming that o is transitively closed does not change the fundamental structure of the
pop  the set of linearizations remains the same  but it allows us to effectively compare
the flexibility of two pops that share the same action set 
similar to the cost of an action sequence  the cost of a pop p   ha  oi is the sum of
the action costs for the actions in p  
x
c  p    
c  a 
aa

to simplify the exposition that follows  we designate two actions in the pop that
represent the initial state and goal state  ai and ag respectively  ai is ordered before
every other action  and ag is analogously ordered after every other action  for a planning
problem    hf  i  g  ai  the actions have the following definition 
p re ai     

p re ag     g

add ai     i

add ag     

del ai     

del ag     

the inclusion of ai and ag actions allow us to simplify the presentation of many algorithms 
avoiding special checks in the procedure  e g   we can assume that there will always be a
first and last action in the pop  
depending on how the pop was constructed  it may include a set of causal links  c 
each causal link contains a pair of ordered actions  a    a   a  may be ai and a  may be ag   
p
and a fluent  p  such that a  achieves p for a    denoted as  a   a     causal links often
serve as justifications for the ordering constraints in a pop 
definition    pop validity  notion     a pop p is valid for a planning problem  if
and only if every linearization of p is a sequential plan for   
   note that notion   does not rely on the set of causal links c 

   

fioptimal partial order plan relaxation via maxsat

while simple and intuitive  notion   is rarely used to verify the validity of a pop because
there may be a prohibitively large number of linearizations represented by the pop  there
is  however  a tractable equivalent notion of pop validity that uses the concepts of causal
links  open preconditions and threats 
for a pop ha  oi and a set of causal links c  an open precondition is a precondition p
of an action a  a that does not have an associated causal link 
p

 a   a s t   a   a   c
if a precondition is not open  we say that it is supported  and we refer to the associated
action in the causal link as the achiever for the precondition  in a typical valid pop there
will only be one supporter for every precondition of an action included in the pop  but we
do not make that restriction in our work to keep the encoding general 
a threat in a pop refers to an action that can invalidate a causal link between two
p
other actions due to ordering constraints  or lack thereof   formally  if  a   a     c  we
p
say that the action a   distinct from a  and a    threatens the causal link  a   a    if the
following two conditions hold 
 we can order a  between a  and a   
  a   a      a   a      o   
 the action a  deletes p 
p  del a   
the existence of a threat means that a linearization exists that violates some causal
link  and thus may not be executable  with the actions ai and ag included  we have the
following definition that characterizes the second notion of pop validity 
definition    pop validity  notion     given a planning problem   pop p   ha  oi
and set of causal links c  p is a valid pop for the planning problem  if no action in a
has an open precondition and no causal link in the set c has a threatening action in a 
a causal link structure can be implicitly assessed to verify pop validity in polynomial
time  nebel   backstrom         so the set c is not strictly necessary  however  implicitly
or explicitly  notion   requires all actions to be causally supported in a threat free manner 
we subsequently have the following connection between the two notions of pop validity 
theorem    pop validity  due to mcallester   rosenblitt         if notion   of pop
validity holds  then notion   also holds  additionally  if notion   holds for a and o  then
a set of causal links c must exist such that notion   holds for ha  oi and c 
the final concept we use for a pop is based on the well established metric for measuring
how constrained a pop is  nguyen   kambhampati        siddiqui   haslum         flex
is a measure of how many ordering constraints there are in the pop  normalized by the total
number of potential ordering constraints  the flex tends to   as the number of ordering
constraints tends to    and vice versa  as per usual  we assume that the set of ordering
constraints is transitively closed 
   

fimuise  beck    mcilraith

definition    flex    given a pop ha  oi  we define flex as 
 o 
flex  ha  oi       p a  
i  

i

p a  
we use i   i as the denominator instead of the traditional  a   as the latter over
counts the number of possible ordering constraints  with our definition of flex   a fully
unordered pop will have a flex value of   while a sequential plan will have a flex   
we strive to minimize the number of ordering constraints in the transitive closure 
omitting the transitive closure would amount to optimizing over the transitive reduction
which  as noted by backstrom         has less appeal because it leads to more long chains
in the plan 
    deorderings and reorderings
the aim of least commitment planning is to find flexible plans that allow us to defer decisions
regarding the execution of the plan  considering only the ordering constraints of a pop 
two important notions for least commitment planning are the deordering and reordering of
a pop  following backstrom         we define these formally as follows 
 

 

definition    deordering and reordering   let p   ha  oi and q   ha   o i be two
pops  and  a strips planning problem 
   q is a deordering of p wrt   iff p and q are valid pops for   a   a    and o   o 
   q is a reordering of p wrt   iff p and q are valid pops for   and a   a   
recall that we assume the ordering constraints of a pop to be transitively closed  and
every action in a pop is uniquely named  i e   every repetition of the same action is given
a unique name   a proper deordering is one where the ordering constraints form a proper
subset  i e   o    o   we define the minimum deordering   reordering as follows 
 

 

definition    minimum deorderings and reorderings   let p   ha  oi and q   ha   o i
be two pops  and  a strips planning problem 
   q is a minimum deordering of p wrt   iff
 a  q is a deordering of p wrt    and
  

  

 b  there is no deordering ha   o i of p wrt   s t   o        o    
   q is a minimum reordering of p wrt   iff
 a  q is a reordering of p wrt    and
  

  

 b  there is no reordering ha   o i of p wrt   s t   o        o    
   q is a minimal deordering of p wrt   iff
 a  q is a deordering of p wrt    and
 b  there is no proper deordering of q 
   

fioptimal partial order plan relaxation via maxsat

note that we use cardinality rather than set containment for   b  and   b  because the
orderings in o  and o   need not overlap  we will equivalently refer to a minimum deordering
 resp  reordering  as an optimal deordering  resp  reordering   in both cases  we prefer
a pop that has the smallest set of ordering constraints  in other words  no pop exists
with the same actions and fewer ordering constraints while remaining valid with respect
to   the problem of finding a minimum deordering or reordering of a pop is np hard 
and cannot be approximated within a constant factor unless n p  dtime npoly log n  
 backstrom         there may be many such optimal deorderings or reorderings  but in
our work we do not distinguish them further  we can compute a minimal deordering in
polynomial time by iteratively removing unnecessary ordering constraints  i e   those that
do not cause the plan to become invalid  
    previous approaches
there are many approaches to computing a partial order plan  and we cover some of the
representative examples here 
      partial order causal link algorithms
traditional methods for producing a partial order plan follow an approach called partialorder causal link  pocl  planning  weld         in pocl planning  modifications are
iteratively made to an incomplete partial order plan that consists of a set of actions  causal
links  and ordering constraints  a partial order plan is considered complete if and only if
the conditions for definition   are met 
the key difference between pocl planning and the standard state based search is that
pocl planning is a search through plan space  in pocl planning search  every node in the
search space constitutes a partial plan  whereas in state based search every node is a state
of the world  successor nodes are generated by applying actions to the state represented
by the current search node  in contrast  possible modifications to a partial plan represent
the choices available in the pocl planning search procedure  the typical partial plan
modifications include 
   add a new action to the partial plan 
   order two actions in the partial plan 
   create a causal link between two actions in the plan 
pocl planners were popular in the late     s      s  and     s  starting with tates
nonlin planner  tate         until forward search techniques such as the one employed
by the ff planner  hoffmann   nebel        led planning research in a new direction  the
most recent pocl planner is vhpop  younes   simmons         but unfortunately it is
not competitive with the state of the art forward search planners 
      popf
to take advantage of the flexibility afforded by a pop and the search efficiency of forward
state based planners  coles et al  introduced the forward chaining partial order planner
   

fimuise  beck    mcilraith

popf  coles et al          the idea behind popf is to restrict the modifications permitted
to the partially completed plan so that a complete state can be easily computed that
represents the truth of fluents after the partial plan is executed  unlike pocl approaches
that add actions to achieve open preconditions  the actions in popf are chosen so that
their preconditions are satisfied and heuristically lead to the goal  i e   in a forward search
manner   when a new action is added to the plan  it is placed at the end of the plan 
no action already in the incumbent plan can be ordered after the newly added action at
the time of its insertion  but the new action may be left unordered with respect to actions
already in the plan  further  adding a new action requires that all of its preconditions have
causal links created immediately 
the approach used in popf leverages the partial order nature of planning domains
by avoiding some of the unnecessary reasoning about the permutations of unordered actions  ordering constraints are included only as required  sequential planners may try to
complete the same partial order plan multiple times with the only change being a different
permutation of unordered actions  and popf can avoid this situation some of the time by
maintaining the partial order structure  further  using recently introduced techniques to
detect repeated states  coles   coles         the planner avoids even more unnecessary
permutations of the action sequences 
finally  popf leverages the powerful techniques of forward search planners by maintaining the complete state of the world that will be reached by the plan  having this state
information allows for powerful heuristics to be computed efficiently 
      petri net unfolding
predating the work of coles et al          an alternative approach to generating partially
ordered plans is via petri net unfolding  hickmott         the general idea is to encode
the evolution of a forward planning system through the repeated unfolding of a carefully
crafted petri net  a mathematical structure used to model and analyze the dynamics of
discrete distributed systems  murata         the unfolding process naturally represents a
parallel or partially ordered plan  hickmott  rintanen  thiebaux    white        
in       hickmott and sardina detailed a theoretical property of petri net unfolding for
partial order plans  noting that the plan resulting from petri net unfolding is a minimal
deordering or reordering that respects strong independence  hickmott   sardina        
strong independence is a restriction on the unordered actions in the partial order plan 
there can be no ambiguity with respect to which action produces a particular fluent  as a
result  if two different actions each produce the same fluent f   they can only be unordered if
neither is required to produce f  either in service of achieving the goal or in service of the
successful execution of some other action in the plan  this restriction makes the deorderings
and reorderings produced by the unfolding more restrictive than the optimal deorderings
or reorderings produced by our approach  as we do not require strong independence 
similar to the pocl and popf approaches  petri net unfolding is exploited to produce
a partial order plan directly  rather than finding a deordering or reordering of an existing
plan  as we do in this paper 
   

fioptimal partial order plan relaxation via maxsat

      relaxer algorithm
due to kambhampati and kedar         the relaxer algorithm  operates by removing
ordering constraints from a sequential plan in a systematic manner  a heuristic guides the
procedure and  as detailed by backstrom         the process does not provide any guarantee
that the resulting pop is minimally deordered  there is an error in the counterexample
used by backstrom to demonstrate that kambhampati and kedars algorithm does not
necessarily produce a minimally deordered pop  however  the conclusion is correct and we
provide a new counterexample in appendix a 
the intuition behind the algorithm is to remove any ordering  ai  ak   from the sequential plan where ai is not the achiever of some precondition of ak and removing the ordering
does not lead to a threat  the algorithm heuristically attempts to choose the earliest possible action in the sequential plan as the achiever of a precondition  for example  consider
the case where our sequential plan is  a       ai        ak        an   and p  p re ak    the
algorithm will keep the ordering  ai  ak   only if leaving it out would create a threat for a
precondition of one of the actions  or if ai is the earliest action in the sequence where the
following holds 
   p  add ai    ai is an achiever for p
   aj   i   j   k  p 
  del aj    p is not threatened 
algorithm   presents this approach formally  we use index a  a  to refer to the index
of action a in the sequence  a  and assume every action in the plan is uniquely named 
if  a is a valid plan  line   will evaluate to true before either line    evaluates to true or
the for loop at line   runs out of actions  that is  we know an unthreatened achiever exists
and the earliest such one is found  the achiever is then ordered before the action requiring
the fluent as a precondition  line      and the for loop at line    adds all of the necessary
ordering constraints so the achiever remains unthreatened  note that for any deleter found
in this for loop  either line    or    must evaluate to true  after going through the outer
loop at line    every action in the newly formed pop has an unthreatened supporting action
for each of its preconditions  the resulting pop will therefore be valid  cf   kambhampati
  kedar        section      
      sapa post processing
as part of a post processing phase for the sapa planner  do and kambhampati       
introduce an approach similar to ours for relaxing the ordering of a plan  in their setting 
they begin with a temporal plan with the actions assigned to specific time points  and the
objective is to optimize either the number of ordering constraints or some temporal aspect
of the resulting plan 
the strategy do and kambhampati take  abbreviated as dk here   is to model the task
of computing a partial order relaxation in terms of a constraint satisfaction optimization
problem  csop   variables are introduced to represent the ordering of actions  the timing
and duration of actions  the resource usage  etc  from the abstract csop formalism  a
concrete mixed integer linear program  milp  is proposed to realize the set of constraints
   referred to as order generalization originally 

   

fimuise  beck    mcilraith

algorithm    relaxer algorithm

 
 
 
 
 
 
 
 
 
  
  
  

  
  
  
  
  
  
  
  

  

input  sequential plan   a  including ai and ag
output  relaxed partial order plan  ha  oi
a   set  a  
o    
foreach a  a do
foreach f  p re a  do
ach   null 
for i    index a   a           do
   see if we have an earlier achiever
if f  add  a i   then
ach    a i  
   stop if we find a deleter of f
if f  del  a i   then
break 
   add the appropriate supporting link
o   o    ach  a   
   add orderings to avoid threats
foreach a   deleters f      a  do
if index a     a    index ach   a  then
o   o    a   ach   
if index a     a    index a   a  then
o   o    a  a     
return ha  oi 

that model a valid temporal plan  similar to our work  dk contains the option for enforcing adherence to the original ordering constraints which allows either a deordering or a
reordering to be produced 
dk considers a number of optimization criteria including minimizing the makespan 
maximizing the sum of slack in the temporal variables  maximizing the flexibility in the
temporal variables  and minimizing the number of ordering constraints  while the first three
are related to temporal planning domains  the final one coincides with the optimization
criteria of our work  experimental evaluation is provided for the temporal optimization
criterion  but do and kambhampati do not empirically investigate the minimization of
ordering constraints 
differences between dk and our approach include the formalism  we do not focus on
temporal aspects   the model used  unique to our encoding are variables that represent
an action appearing in the plan and unique to their encoding are variables representing
time points and resources   the underlying solving technology  we rely on partial weighted
maxsat instead of milp   and finally the mclcp criterion  in section     we compare
the efficiency of our approach for computing a minimum reordering with an implementation
of the dk approach that uses only the variables and constraints relevant to computing a
minimum reordering 
   

fioptimal partial order plan relaxation via maxsat

    partial weighted maxsat
to compute a relaxed plan  we encode the task as a partial weighted maxsat problem
where a solution to the encoding corresponds to a minimally relaxed plan that optimizes
our desired criteria  here  we review the notation for partial weighted maxsat that we use
throughout the paper 
in boolean logic  the problem of satisfiability  sat  is to find a true false setting of
boolean variables such that a logical formula referring to those variables evaluates to true
 biere  heule  van maaren    walsh         typically  we write problems in conjunctive
normal form  cnf   which is made up of a conjunction of clauses  where each clause is a
disjunction of literals  a literal is either a boolean variable or its negation  a setting of the
variables satisfies a cnf formula iff every clause has at least one literal that evaluates to
true  for example  setting variables x and z to be true will satisfy the following theory 
 x  y    x  z 

   

the maxsat problem is the optimization variant of the sat problem in which the
goal is to maximize the number of satisfied clauses  biere et al         ch       although
we cannot satisfy every clause in the following theory  setting x  y to true and z to false
satisfies five clauses 
 x  y  z    x  z    y  z    x  y    z  x    z  y 

   

adding non uniform weights to each clause allows for a richer version of the optimization
problem  and we refer to maximizing the weight of satisfied clauses as the weighted maxsat
k

problem  we use the syntax       to indicate the clause has a weight of k  generally  the
weight must be a positive real number  consider setting x to false and y  z to true in the
following theory 
 

 

 

 

 

 x    x  y    x  z    y    z 

   

while the setting satisfies four clauses  it only has a total weight of    with the aim of
maximizing the total weight of satisfied clauses  we can achieve a sum of   by assigning all
variables to true 
 

 

 

 

 

 x    x  y    x  z    y    z 

   

if we wish to force the solver to find a solution that satisfies a particular subset of the
clauses  we refer to clauses in this subset as hard  while all other clauses in the problem are


soft  the syntax we use to indicate a hard clause is        when we have a mix of hard and
soft clauses  we have a partial weighted maxsat problem  biere et al         ch        
in a partial weighted maxsat problem  only the soft clauses are given a weight  and a
feasible solution corresponds to any setting of the variables that satisfies the hard clauses
   

fimuise  beck    mcilraith

in the cnf  an optimal solution to a partial weighted maxsat problem is any feasible
solution that maximizes the sum of the weights on the satisfied soft clauses  in the following
example  setting variables x  y to false and z to true satisfies every hard clause and one of
the soft clauses 
 

 

 







 x    y    z    x  z    y  z    x  y 

   

although not required for partial weighted maxsat in general  the encodings we create
will never contain a soft clause that has more than one literal  this special form of partial
weighted maxsat problem  referred to as a binate covering problem  coudert         allows
us to flip the optimization criterion  minimizing the sum of the satisfied soft  unit  clauses
is equivalent to maximizing the sum of unit clauses that have the literal flipped  e g   x
goes to x and vice versa   using this technique to solve the minimization problem with a
partial weighted maxsat solver only works if the soft clauses contain a single literal  this
property is key to our encoding  as our objective is always to minimize 

   approach
we can view a sequential plan  also referred to as a total order plan  as a special case of a
partial order plan where there exists an ordering constraint between every pair of actions 
quite often  many of these ordering constraints are not required  the ordering of certain
actions may be switched and the goal still achieved with the new sequence of actions  with
the aim of maximizing the flexibility of a pop  we strive to minimize the number of ordering
constraints included in the solution  this objective motivates the need to identify precisely
which ordering constraints in a pop are relevant to the pops validity 
definition    ordering relevance   given a planning problem    hf  i  g  ai and valid
pop p   ha  oi for   the ordering constraint o  o is relevant with respect to  and p
iff ha  o   o i is not a valid pop for   
ordering relevance plays a central role in the definitions of minimal and minimum pop
deorderings  the relevant ordering constraints are precisely those that cannot be removed
without invalidating the pop  backstrom         additionally  the relaxer algorithm
of kambhampati and kedar        operates by identifying a set of ordering constraints
suspected of being relevant  i e   those selected as achievers for action preconditions  
to maximize the flexibility of a pop  we focus our encoding on retaining only the relevant
orderings  while difficult to measure efficiently  we strive to maximize the flexibility inherent
in a pop  loosely defined as the number of linearizations a pop represents  the number
of unordered pairs of actions in a pop  typically referred to as flex  siddiqui   haslum 
       provides an approximation for the pops flexibility  in our evaluation  we quantify
the accuracy of flex as an approximation for a pops flexibility 
as we have discussed earlier  verifying a pops validity by way of the linearizations
is not always practical  similarly  we will not attempt to compute pops that maximize
   note that the transitive closure of p is necessarily different from the transitive closure of ha  o   o i
when o is relevant with respect to  and p  

   

fioptimal partial order plan relaxation via maxsat

the number of linearizations  but rather we will compute pops that adhere to one of the
previously mentioned criteria for removing redundant orderings  minimum deordering or
minimum reordering 
    minimum cost least commitment criterion
while the notion of a minimum deordering or reordering of a pop addresses the commitment of ordering constraints  an orthogonal objective is to commit as few resources as
possible  typically measured as either the time for a plan to be executed in parallel or the
sum of action costs for the actions in a plan  historically  the latter objective takes precedence over all other metrics  to this end  we provide the extended criterion of computing
a minimum cost least commitment pop  mclcp  
 

 

definition    minimum cost least commitment pop   let p   ha  oi and q   ha   o i
be two pops valid for   q is a minimum cost least commitment pop  mclcp  of p iff
  
  
q is a minimum reordering  a   a  and there does not exist a valid pop r   ha   o i
for  such that a    a and the following condition holds 
c  r    c  q    c  r    c  q    o        o    
for this work  we assume that every action in  has positive cost  it may turn out that
preferring fewer actions causes us to commit to more ordering constraints  simply due to the
interaction between the actions we choose  in practice  however  we usually place a much
greater emphasis on minimizing the total cost of a plan  it is also worth noting that if no
plan exists with a proper subset of the actions in the input plan  computing the mclcp is
equivalent to computing a minimum reordering 
following the mclcp criterion  we can evaluate the quality of a pop by the total
action cost and number of ordering constraints it contains  these metrics give us a direct
measure of the least commitment nature of a pop with the primary emphasis placed on
removing the unnecessary commitments to actions 
    encoding
we encode the task of finding a minimum deordering  reordering  or mclcp as a partial
weighted maxsat problem given an input planning problem and corresponding initial plan 
an optimal solution to the default encoding will correspond to an mclcp  that is  no
pop exists with a cheaper overall cost or with the same cost and fewer ordering constraints
in the transitive closure  we present this core encoding in section       and prove the
soundness and completeness of the encoding in section        we add further clauses to
produce encodings that correspond to optimal deorderings or reorderings  and present these
modifications in section       
      basic encoding
in contrast to the typical sat encoding for a planning problem  e g   kautz   selman 
       we do not require that the actions be replicated for successive plan steps  instead 
we represent each action occurrence only once and reason about the ordering between
actions  the actions in the encoding come from a provided sequential or partial order plan 
   

fimuise  beck    mcilraith

p   ha  oi  we use  p   to denote the partial weighted maxsat encoding corresponding
to the pop p   ha  oi  and refer to the pop corresponding to an encodings solution as
the target pop  a target pop can be reconstructed from an encodings solution by looking
at only the variables set to true  we use three types of propositional variables 
 xa   for every action a in a  xa indicates that action a appears in the target pop 
  a    a     for every pair of actions a    a  in a   a    a    indicates that the ordering
constraint  a   a    appears in the target pop 
  ai   p  aj    for every action aj in a  p in pre aj    and ai in adders p    ai   p  aj  
indicates ai supports aj with the fluent p in the target pop 
in a partial weighted maxsat encoding there is a distinction between hard and soft
clauses  we first present the hard clauses of the encoding as boolean formulae which
we subsequently convert to cnf  and later describe the soft clauses with their associated
weights   we define the formulae that ensure that the target pop is acyclic  and the
ordering constraints include the transitive closure  here  actions are universally quantified 
and for formula     we assume ai    ai    ag   we must ensure that 
 there are no self loops 
  a  a  

   

 we include the initial and goal actions 
 xai     xag  

   

 if we use an ordering variable  then we include both actions 
 ai   aj    xai  xaj

   

 an action cannot appear before the initial action  or after the goal  
xai   ai   ai     ai   ag  

   

 a solution satisfies the transitive closure of ordering constraints 
 ai   aj     aj   ak     ai   ak  

    

together      and      ensure that the target pop will be acyclic  note that this implies
antisymmetry as well   while the remaining formulae tie the two types of variables together
and deal with the initial and goal actions  finally  we include the formulae needed to ensure
that every action has its preconditions met  and there are no threats in the solution 


   for readability  we omit the hard clause symbol         for constraints          

   

fioptimal partial order plan relaxation via maxsat

 ai   p  aj   

 

xak   ak   ai     aj   ak  

    

ak deleters p 

 

xaj 

 

 ai   aj     ai   p  aj  

    

pp re aj   ai adders p 

intuitively   ai   p  aj   holds if ai is the achiever of precondition p for action aj and
no deleter of p will be allowed to occur between the actions ai and aj   i e   it corresponds
directly to an unthreatened causal link  formula      ensures that every causal link remains
unthreatened in a satisfying variable setting  and we can view the two ordering variables
in the formula as a form of the common partial order planning concepts of promotion and
demotion  weld         formula      ensures that if we include action aj in the target pop 
then every precondition p of aj must be satisfied by at least one achiever ai    ai   aj   orders
the achiever correctly  while  ai   p  aj   removes the possibility of a threatening action 
so far  the constraints we have described capture what is required for a pop to be valid 
to go further and address the notion of ordering relevance presented in definition    as well
as the metric of minimizing total action cost with mclcp  we make use of soft clauses 
to generate an mclcp  we prefer solutions that first minimize the total action cost  and
then minimize the number of ordering constraints  we add a soft unit clause  containing
the negation of the variable  for every action and ordering variable in our encoding  a
violation of any one of the unit clauses means that the solution includes the action or
ordering constraint corresponding to the violated clauses variable  the weight assigned is
as follows 
 

   ai   aj     ai   aj  a
c  a   a     



 xa  

  a  a    ai   ag  

note that the weight of any single action clause is greater than the weight of all ordering constraint clauses combined  because there can be no more than  a   total ordering
constraints  the increased weight guarantees that we generate solutions with a minimum
action cost   because we enforce the transitive closure of the ordering constraints  the second type of soft clause will lead the solver to find a pop  among those with the cheapest
total action cost  that minimizes the size of the transitive closure 
richer notions  such as a weighted trade off between the ordering constraints and action
costs  are also easily modelled using an appropriate assignment of weights to the soft clauses
in the encoding  as we focus primarily on the deordering and reordering aspects in this
work  we leave alternative encodings as future work 
      theoretical results
in this section we present theoretical properties of our core encoding 
   if we wish to minimize the number of actions in the solution  we need only to replace c  a  with   

   

fimuise  beck    mcilraith

lemma    variable setting implies pop   given a planning problem  and a valid pop
p   ha  oi  any variable setting that satisfies the formulae          for  p   will correspond to a valid pop for  where the ordering constraints are transitively closed 
proof  we have already seen that the pop induced by a solution to the hard clauses will
be acyclic and transitively closed  due to formulae            we can further see that there
will be no open preconditions because we include ag   and the conjunction of      ensures
that every precondition will be satisfied when the pop includes an action  additionally 
there are no threats in the final solution because of formula       which will be enforced
every time a precondition is met by formula       because the pop corresponding to any
solution to the hard clauses will have no open preconditions and no threats  theorem  
allows us to conclude that the target pop will be valid for  
lemma    pop implies variable setting   given a planning problem  and a valid pop
 
 
p   ha  oi  any valid pop q   ha   o i  where a   a and o  is transitively closed  has
a corresponding feasible variable assignment that satisfies  p   
proof  the lemma follows from the direct encoding of the pop q where xa   true iff
a  a  and  ai   aj     true iff  ai  aj    o    if q is a valid pop  then it will be acyclic 
include ai and ag   have all actions ordered after ai and before ag   and be transitively
closed  satisfying            we further can see that      and      must be satisfied  if     
did not hold  then there would be an action a in the pop with a precondition p such that
every potential achiever of p has a threat that could be ordered between the achiever and
a  such a situation is only possible when the pop is invalid  which is a contradiction 
theorem    completeness   given a planning problem  and a valid pop p   ha  oi  a
complete partial weighted maxsat solver will find a solution to the soft clauses and formulae
         for  p   that minimizes the total cost of actions in the corresponding pop  and
subsequently minimizes the number of ordering constraints 
proof  given  a  actions  there can only be  a   ordering constraints  because every soft
clause corresponding to an ordering constraint has a weight of    the total sum of satisfying every ordering constraint clause will be  a     because the weight of satisfying any
action clause is greater than  a     the soft clauses corresponding to actions dominate the
optimization criteria  as such  there will be no valid pop for  which has a subset of the
actions in p with a lower total action cost than a solution that satisfies formulae         
while maximizing the weight of the satisfied soft clauses 
theorem    encoding correctness   given a planning problem   and a valid pop p for
  a solution to our partial weighted maxsat encoding  p   is an mclcp for p  
proof  this theorem follows directly from lemmas       and theorem   
      variations
observe that  p   does not make use of the set of ordering constraints in p   an optimal
solution to the encoding will correspond to an mclcp  but to enforce solutions that are
minimum deorderings or reorderings  we introduce two additional sets of hard clauses 
   

fioptimal partial order plan relaxation via maxsat

all actions  for optimal deorderings and reorderings  we require every action to be a part
of the target pop  we consider a formula that ensures that we use every action  and so the
optimization works only on the ordering constraints   to achieve this  we simply need to
add each action as a hard clause 


 xa    a  a

    

the soft unit clauses will all be trivially unsatisfiable  and are removed in the preprocessing phase of the maxsat solving process  an optimal solution to the soft constraints
and formulae           referred to as m r  p    corresponds to a minimum reordering of p  
deordering  for a deordering we must forbid any explicit ordering that contradicts the
input plan  assuming our input plan is p   ha  oi  we ensure that the computed solution
is a deordering by adding the following family of hard unit clauses 


  ai   aj      ai  aj   
 o

    

similar to the introduction of hard unit clauses for action inclusion  using the clauses
from      will eliminate a number of ordering constraint soft clauses from the encoding
during the preprocessing phase of the maxsat solver  an optimal solution to the soft constraints and formulae           referred to as m d  p    corresponds to a minimal deordering
of p   we additionally could use      and forgo the use of       but this variation is not one
typically studied  nor does it provide a benefit over computing an mclcp 

   evaluation
we evaluate the ability and effectiveness of the state of the art partial weighted maxsat
solver  sat j  le berre   parrain         to optimally relax a plan using our proposed
encodings   we use the md and mr encodings  which ensure that all actions are always
included in the solution  i e   using the all actions constraint        we also investigate
the effectiveness of the relaxer algorithm  rx  to produce a minimally constrained deordering  to measure the quality of a pop  we use either its flex value  cf  section     or
the number of linearizations  whenever feasible to compute  
for our analysis  we considered every strips domain from the previous international
planning competitions  ipc  hoffmann         we discarded two domains  childsnack
and tidybot  due to the difficulty that planners had in generating an initial solution  a
further    were discarded due to their constrained nature  the form of which offers little
or no flexibility  any domain with an average flex value of less than     was removed   
using them in the evaluation would be uninformative since they are already as relaxed as
   additionally  we evaluated the      winner of the partial weighted maxsat contest for crafted instances 
maxhs  davies   bacchus         however  we found that sat j outperformed maxhs slightly in both
coverage and time 
   the    overly constrained domains are visitall  blocksworld  sokoban  pegsol  ged  parking  barman  gripper  cybersec  psr small  storage  nomystery  mystery  mprime  freecell  hiking  floortile  and thoughtful 

   

fimuise  beck    mcilraith

possible  and the solver determined this trivially  we evaluate using only the most recent
version of a domain where multiple problem sets exist  and table   shows the set of   
domains that we considered throughout our evaluation 
we conducted all experiments on a linux desktop with a    ghz processor  and each
run of sat j was limited to    minutes and  gb of memory  to generate an initial sequential
plan  we used the mercury planner  domshlak  hoffmann    katz         the best performing non portfolio planner from the most recent satisficing ipc competition  additionally 
for some of the evaluation  we computed initial solutions using a state of the art sat based
planner  mp  rintanen         and a state of the art partial order planner  popf  coles
et al          both offer alternative methods that generate an initial partially ordered plan 
and we investigate the impact that the plans structure has on the relaxation process 
we assess various aspects of our approach through four separate experiments  first  we
evaluate the difficulty of computing a feasible solution in addition to the optimal one  we
obtain solutions of increasing quality by using sat j in an any time fashion   next  we look
at the quality of the pop produced by our encodings as well as the pop produced by the
relaxer algorithm  here  we measure quality both as the flex of the plan in the transitive
closure  and as the number of linearizations in the plan wherever feasible to compute 
we also demonstrate empirically the accuracy of the flex measure as an indicator of the
number of linearizations  next  we consider the impact that the initial plan form has on
the relaxation  taking into account the starting solution of the three planners  finally  we
compare our approach for computing a minimum reordering with that of a similar approach
by do and kambhampati        
    solving to completion
we begin with a brief discussion of the various configurations of our approach and their
coverage  as well as the weaknesses of some of the methods  we report on only the problems
where the planner was able to find a plan within the resource limits   table   shows the
following information for every domain 
 the number of problems in the domain is shown in brackets next to the domain name 
 the number of problems solved by each planner is under the plans column 
 the solved column indicates the number of plans successfully encoded and solved 
every problem that could be encoded for mr also could be encoded for md  and the
maxsat solver produced at least one solution for every encoded problem  further 
every encoded md problem was solved to completion within the resource limits 
 the mr column indicates the number of encoded mr problems solved to completion 
we must emphasize that it is not the purpose of this evaluation to compare the efficiency
of the three planners  as each have their own strengths and weaknesses   rather  we consider
the type of plan that each produces as related to relaxing the ordering constraints on the
plan  consequently  the purpose of table   is to provide insight into which problems are
included in our further analysis  and to bring to light some of the challenges of encoding
and solving the problems to completion 
   providing twice the amount of time and memory to the planners did not lead to more problems solved 

   

fioptimal partial order plan relaxation via maxsat

domain

mercury
plans solved

mr

popf
plans solved

mr

plans

mp
solved

mr

airport     

  

  

  

  

  

  

  

  

  

depot     

  

  

  

  

  

  

  

  

  

driverlog     

  

  

  

  

  

  

  

  

  

elevators     

  

  

 

 

 

 

 

 

 

logistics     

  

 

 

 

 

 

  

 

 

parcprinter     

  

  

  

  

  

  

  

  

  

pipesworld     

  

  

  

  

  

  

  

  

  

rovers     

  

  

  

  

  

  

  

  

  

satellite     

  

  

  

  

  

  

  

  

  

scanalyzer     

  

  

  

  

 

 

  

  

  

tetris     

  

  

  

 

 

 

 

 

 

tpp     

  

  

  

  

  

 

  

  

  

transport     

  

 

 

 

 

 

 

 

 

woodwork     

  

  

  

 

 

 

  

  

  

zenotravel     

  

  

  

  

  

  

  

  

  

all      

   

   

   

   

   

   

   

   

   

table    per domain solver and relaxation coverage  values in brackets indicate the benchmark size  the plans column indicates how many problems the respective planner solved 
the solved column indicates how many of the solved problems were successfully encoded
and solved  every encoded problem was solvable by both md and mr  and every md encoding was solvable to completion  the mr column indicates the number of problems that
were successfully encoded  and mr solved to completion 

when a problem could not be encoded  this was due to the large number of actions in
the plan  typically plans with more than     actions caused an issue  in domains where
this is problematic  e g   elevators  logistics  and transport   we can see that the initial
coverage for the non sequential planners suffers as well  the problem with encoding plans
that contain many actions is due to the number of transitivity clauses included for formula
      which are cubic in the number of actions 
the tetris domain proved extremely difficult for popf and mp to solve  although the
number of actions in the plans for mercury were small enough to encode  finally  we found
that proving the optimality of the mr encoding for tpp and rovers was the most difficult 
but there is no clear indication as to why  rovers has high flex   but not as high as other
domains  and the opposite is true for tpp  in both domains  however  good initial plans
were produced quickly by sat j  and the solver devoted the remaining time to making small
improvements and proving optimality 
   

fimuise  beck    mcilraith

figure    the number of problems solved to completion by sat j if given a limited amount
of time per problem  as well as the number of problems solved by the rx algorithm  every
md encoding was solved completely by sat j  and rx is a polynomial sub optimal technique
shown only for comparison of solve time 

mercury solved a strict superset of the problems solved by popf and mp  as such  we
use the sequential plans produced by mercury as input for the majority of our evaluation
 section     is the one exception   figure   provides a view on how long it took for sat j
to optimally solve the md and mr encodings from the initial plans mercury produced  we
show the number of problems solved optimally as a function of time  including the encoding
phase   for comparison  we include the aggregate time for rx as well  the strong run time
performance of rx is to be expected given that it is a polynomial time algorithm without
optimality guarantees 
    plan quality
to begin  we discuss a surprising result for the relaxer algorithm on the planning benchmarks  in every one of the     problems where sat j solved the md encoding optimally  the
pop that was produced with the relaxer algorithm contained the same number of ordering
constraints  even though theoretically the relaxer algorithm is not guaranteed to find a
minimal pop  it nonetheless computes a minimum deordering in every tested problem  rx
can produce only deorderings  and so this is the best rx could hope to achieve  note that
there may be many candidates for a minimum deordering  and rx does not necessarily find
the same one that the md encoding finds 
next  we consider the difference in quality between the minimum deordering and minimum reordering  quality is measured by the flex of the transitive closure of the generated
pop  and we include only those problems where both the md and mr encodings can be
   

fioptimal partial order plan relaxation via maxsat

solved to completion by sat j      in total from the plans generated by mercury   table
  shows the average flex for md and mr in all domains  and figure   shows the flex
comparison on a per problem basis over all domains 
domain

md

mr

airport
depot
driverlog
elevators
logistics
parcprinter
pipesworld
rovers
satellite
scanalyzer
tetris
tpp
transport
woodwork
zenotravel

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

table    average flex

figure    md versus mr flex comparison
   

fimuise  beck    mcilraith

domains where we see substantial improvement include airport and depot  domains
that saw zero gain in terms of flexibility include parcprinter  transport  and woodwork  in
total  almost one third          of the problems showed an improvement in flex for the mr
over the md by varying degrees   
the flex value fails to convey the extreme amount of execution flexibility introduced by
the relaxations  to investigate this further  we computed the number of linearizations for
the plans wherever feasible  determining the number of total orders for a partially ordered
graph is  p complete  brightwell   winkler         and in practice it is difficult to compute
precisely for many graphs  we were able to compute the number of linearizations for both
the md and mr solutions in a total of     problems where a solution to both encodings was
computed  we found that approximately one quarter          showed a difference in the
number of linearizations  and we plot the ratio  linears mr     linears md  for these
   problems in figure   

figure    ratio of linearizations  the y axis represents the number of linearizations induced
by the pop for the optimal reordering divided by the number of linearizations induced by
the pop for the optimal deordering  the x axis ranges over all problems where the number
of linearizations differed        and is sorted based on the y axis 
at its most extreme  the improvement in the number of linearizations can be massive 
over    orders of magnitude in one airport problem  conversely  we see an interesting
artefact resulting from optimizing a metric which acts as a proxy for the number of linearizations  while the flex value of mr will never be lower than that of md  the pops
produced by each approach using flex as an optimization criterion can have the opposite
effect in the number of linearizations 
    many of the smaller improvements do not show up in the scatter plot 

   

fioptimal partial order plan relaxation via maxsat

in three problems  one from tetris and two from depot   we found that the number of
linearizations in the pop produced from the mr encoding was fewer than the number of
linearizations in the pop produced from the md encoding  while the number of ordering
constraints in a pop for a given number of actions is usually indicative of the number of
linearizations for that pop  these three problems indicate that this is not a universal rule 
for a concrete example  consider two pops on four actions a    a    a    a    a     ignoring
causal links  figure   shows the structure of the pops p  and p    both pops have the
same number of actions and ordering constraints  but the number of linearizations differ 
p  has   linearizations while p  only has    these pops serve as a basic example of how
the flex criterion does not capture fully the notion of pop flexibility that we use in our
work  there may be similar notions that do take such differences into account  and they
are left for future investigation  see say  cire  and beck        for some recent work in this
direction  

a 
a 

a 

a 

a 

a 

 a  p 

a 

a 
 b  p 

figure    two pops with the same number of actions and ordering constraints  but a
different number of linearizations 

to demonstrate the correlation between a pops flex and the number of linearizations 
we focused on random partial orders for a pop with    actions  not including the special
actionis ai and ag      we constructed        random partial orders        of them unique 
with a spread of flex value from     to      and subsequently we computed the corresponding
number of linearizations in every pop      pops were constructed for each target flex value
 taken in      increments   and the method of construction was to iteratively add new edges
not present in the transitive closure until the pop reached the target flex value 
qualitatively  the pops resembled those found using planning techniques  the reason
we use randomly generated plans is due to the number of examples required for the trend to
present itself  comparing plans with a varying number of actions was uninformative   figure
  shows the flex as a function of the number of linearizations normalized by the total number
of linearizations possible  in all pops  this equals     which is roughly             
the pearson correlation coefficient between the log of the normalized linearization count
and the flex value is        and this clear trend ties together the flex of a pop and the
number of linearizations  the red line in figure   is the line of best fit when using a log scole
for the linf lex values  as the plot x axis does   interestingly  if we were to use this line as a
    similar results hold for random pops with a different number of actions 

   

fimuise  beck    mcilraith

figure    comparison of the normalized number of linearizations and the flex value of
approximately        random pops with    actions  every point represents a unique
pop with    actions  the linf lex value is computed by normalizing the total number of
linearizations by all those possible        and note that the x axis uses a log scale  the red
line is the line of best fit when using the log of linf lex 
predictor for the number of linearizations  flex overestimates the number of linearizations of
highly constrained plans and underestimates the number of linearizations for unconstrained
plans  though minimizing the number of ordering constraints in the transitive closure of a
pop is not what we want to optimize directly  it does serve as a highly informative proxy
for maximizing the number of linearizations for the pop 
    initial plan impact
different planning techniques generate solutions of varying forms  while sequential planners
are by far the most widely used  there are other planners that create inherently partially
ordered solutions  for example  the popf planner uses a forward chaining approach that
results in a partial order plan that is represented as layered sets of unordered actions 
similarly  sat based planners such as mp produce solutions that contain layers of unordered
actions  the two approaches fundamentally differ in how they search for a solution  and are
again fundamentally different from how a sequential planner searches  one question that
arises from these differences is whether or not they lead to fundamentally different solutions 
amenable to relaxing in different ways  we investigate the impact that the starting solution
will have on the relaxed solution quality and the ability to compute an optimal solution 
the encoding for a minimum reordering does not take into account the original sequence
of actions  therefore  this encoding can be used without modification for the plans produced
   

fioptimal partial order plan relaxation via maxsat

by popf and mp  in a similar sense  the plans produced by popf and mp can be encoded
for a minimum deordering by carefully applying equation     o will include a link between
every pair of actions that do not share the same layer  we obtained the layered plan
representation from popf and mp directly using the appropriate planner settings 
across all domains      problems were mutually solved to completion by sat j using
the solutions produced by all three planners and either the md or mr encoding  only   
of those contained the same number of actions  figure   shows the time that sat j required
to solve the problem to completion for mercurys plans measured against the plans for the
other two planners  the first plot shows all     problems mutually solved  and we see a
performance improvement for solutions coming from the mercury solver    however  when
we limit ourselves to just the    problems that contain the same number of actions in all
solutions  we find that the sat j solve time is much more comparable to that of the other
solvers  thus  there appears to be little effect on the solving efficiency based on the input
solution format  the primary factor in sat j solve time is the number of actions represented
in the encoding 

 a  all problems mutually solved by sat j using a  b  the subset of mutually solved problems that consource plan from each planner 
tain the same number of actions 

figure    comparison of the time to relax a mercury plan versus the time to relax a popf
or mp plan  both md and mr encodings are included in the data 
in addition  we investigated the resulting flex of the produced pops  of the    problems
mutually solved with the same number of actions  only two  from the scanalyzer domain 
contained a different set of actions  these resulted in slightly higher flex values for the
minimum deordering and reordering of mercurys solution compared to the other planners 
on the other hand  six problems from the airport domain had a lower flex value for the
minimum deordering of mp solutions despite having the same number of actions  this
indicates that under some conditions  the initial layered plan produced by mp may not
allow for as much relaxation compared to a forward search planner such as mercury or
popf  we should note  however  that in the vast majority of problems the flex from the
minimum deordering or reordering coincided across all initial plan types 
    note that the time does not include initial planner computation  only the time to encode and solve the
maxsat encoding 

   

fimuise  beck    mcilraith

finally  we investigated the improvement in flex for each planner compared to its initial
solution  for mercury  the initial flex value is always    as it is a sequential planner  because
a reordering is allowed to ignore all of the original ordering constraints  we consider only
the improvement in flex for the minimum deordering of plans coming from popf and mp 
figure   shows the relative flex comparison between the original plan and the minimum
deordering that was computed  in these plots  we include every problem solved successfully
to completion by sat j for plans produced by popf       and mp       

 a  flex improvement for popf

 b  flex improvement for mp

figure    comparison of the original plan flex versus the flex of the minimum deordering 
we found that the majority of initial flex values for both mp and popf solutions fell
within the range of   to      and the difference in flex between the solutions from each solver
was minimal  there was a moderate correlation between the original and final flex value 
mp and popf solutions had a pearson correlation coefficient of      and      respectively 
however  we observed no distinction between relaxing mp solutions versus those of popf
in either the time to compute the relaxation  or the flex of the final pop 
    comparison to milp encoding
the model for relaxing the ordering of a plan that is presented by do and kambhampati
       involves temporal constraints and resources  both are aspects beyond what we
consider here  nevertheless  a fragment of the model is capable of computing either the
minimum deordering or reordering of the plan  and so it is worthwhile to see how effective
it can be in finding an optimal reordering  we forgo testing the previous work for computing
the optimal deordering  as the relaxer algorithm is so effective in doing so  we should note
that do and kambhampati only considered using the model to heuristically guide the solver
to a reasonable solution instead of an optimal one 
the optimization framework do and kambhampati use to model the problem of relaxing
the ordering of a plan is mixed integer linear programming  milp   a milp consists of
a set of linear constraints that are defined over variables that can take on integer or real
values  the optimization criterion is specified as a weighted linear combination over a subset
of the variables in the problem that should either be maximized or minimized  we do not
   

fioptimal partial order plan relaxation via maxsat

need to go into further detail  as the milp model presented in this section is quite basic
and uses only integer variables for the encoding 
here  we present a version of the milp model introduced by do and kambhampati
for comparison to our partial weighted maxsat model  the modifications fall under three
categories      fixes for bugs in the original formulation      removal of variables and constraints not relevant to our setting  i e   the temporal and resource related portions of the
model   and     adding constraints to enforce that a solution is the transitive closure  the
variables we use for the model include the following 

xafj  ai

 
 
 
 

when ai supports aj with fluent f
otherwise

yafi  aj

 
 
 
 

when ai is ordered before aj due to interference on fluent f
otherwise

oai  aj

 
 
 
 

when ai is ordered before aj
otherwise

note that xafj  ai and oai  aj are analogous to  ai   f  aj   and  ai   aj   respectively  the
interference variables yafi  aj are defined only for those cases where aj can conflict with
the execution of ai on fluent f   either f   p re ai    add ai     del aj   or f 
 p re aj    add aj     del ai   holds  the constraints for the milp model are as follows
 unbound variables are assumed to be universally quantified  
 interfering actions must be ordered  defined only for pairs of actions that interfere  
yafi  aj   yafj  ai    
 every precondition is supported exactly one way   
x
f  p re aj   
xafj  ai    
ai adders f  

 every support is threat free 
ad  deleters f        xafj  ai      yafd  ai   yafj  ad     
 support implies ordering 
oai  aj  xafj  ai   
    the original paper had this constraint erroneously listed as

   

p

ai adders f  

xafi  aj     

fimuise  beck    mcilraith

 interference implies ordering 
oai  aj  yafi  aj   
 enforce the transitive closure of ordering constraints 
    oai  aj         oaj  ak     oai  ak   
 forbid self loops in the ordering 
oa a    
 order everything after the initial state action and before the goal action 
oai  a    
oa ag    
the final three constraints do not appear in the original model  the last one replaces
constraints that referenced temporal variables to achieve the same effect  and the first two
ensure that a solution is transitively closed  as mentioned earlier  optimizing the transitive closure is preferred over optimizing the transitive reduction  finally  the optimization
criterion for the milp model is as follows 
m inimize

x

oa   a 

a   a  a

the above model will produce reorderings of the input plan as feasible solutions  and
will find a minimum reordering if solved to completion  we implemented the milp model
using the state of the art milp solver gurobi  version         gurobi optimization  inc  
       and measured the coverage over all domains as a function of time  figure   contains
the results 
we found that using the milp model was effective for the easier problems  those solved
in under   seconds   but for anything more difficult  solving the partial weighted maxsat
encoding with sat j proved more efficient  overall      problems were solved using sat j on
the partial weighted maxsat encoding while only     problems were solved using gurobi
on the milp model 
we additionally tested a milp model that mirrors the partial weighted maxsat encoding presented above  however  the results were very similar to those shown in figure
   with the milp encoding being consistently outperformed for problems that take more
than a second to solve 

   discussion
in this paper  we proposed a practical method for computing the optimal deordering and
reordering of a sequential or partial order plan  despite the theoretical complexity of computing the optimal deordering or reordering being np hard  we are able to compute the
   

fioptimal partial order plan relaxation via maxsat

figure    for a given timeout  x axis   the number of problems solved to completion within
that timeout bound  y axis  by     sat j using the mr encoding and     gurobi using the
milp encoding described in the text 

optimal solution by leveraging the power of modern maxsat solvers  we further proposed
an extension to the classical least commitment criteria of minimal deordering and reordering  a minimum cost least commitment pop  mclcp   an mclcp considers the total
cost of actions in a solution before minimizing the number of ordering constraints  central
to the encodings we propose is a notion of ordering relevance  we designed the optimization
criteria to minimize the ordering constraints in the resulting plan  leaving only those that
are relevant for plan validity 
our approach uses a family of novel encodings for partial weighted maxsat  where a
solution corresponds to an optimal pop satisfying one of the three least commitment criteria
we investigate  minimum deordering  minimum reordering  and our proposed minimum cost
least commitment pop  we solve the former two encodings with a state of the art partial
weighted maxsat solver  sat j  and find that the majority of problems are readily handled
by the maxsat solver in a reasonable amount of time 
we considered various input plan formats  as well as a similar encoding for optimizing
plan flexibility  and found that using a sequential plan as input to our encodings was the
most effective solution for computing a reordering  perhaps surprisingly  there was no benefit
observed when using a planner that naturally generates partial orders  mp  
we also investigated an existing polynomial algorithm for deordering sequential plans
and discovered that it successfully computes the optimal deordering in every problem we
tested  despite its lack of theoretical guarantee  because the algorithm is fast in practice 
it is well suited for relaxing a pop if we require a deordering  finally  we also established
a strong empirical correspondence between the commonly used flex metric and the number
of linearizations represented by a pop 
   

fimuise  beck    mcilraith

here  we discuss related work and conclude with a discussion of potential future work 
    related work
in section      we detailed a variety of approaches that naturally produce partial order
plans  here  we review other work related to aspects of our approach 
the standard sat based planning encodings also produce a pop  kautz  mcallester 
  selman         but a significant difference between the standard encodings and our work
is that we avoid encoding an action in every layer in a planning graph by appealing to the
fact that we already know the  superset of  actions in the solution  intuitively  we can
view the encoding as using maxsat to find the implicit layers for the actions in our plan
by way of computing the relevant ordering constraints  an additional difference is that
choosing a layer for every action unnecessarily restricts the timing of that action when it
can potentially appear in multiple adjacent layers 
the notion of mclcp is related to that of plan repair  nebel   koehler        gerevini
  serina         a key difference  however  is that we do not consider the addition of new
actions  the cost of a plan is only improved by removing actions for mclcp  as the focus
of this paper is on improving the flexibility of pops  we forgo a full theoretical and empirical
comparison of the mclcp criterion and the existing plan repair techniques  preliminary
results on the effect of mclcp as an action removal technique can be found in our previous
work on the subject  muise et al         muise        
our core encoding is similar to the causal encodings of kautz et al         and variant ii
of robinson  gretton  pham  and sattar         we similarly encode the ordering between
any pair of actions as a variable   ai   aj   in our case   but rather than encoding every
potential action occurrence or modelling a relaxed planning graph  we encode the formulae
that must hold for a valid pop on the specific set of actions provided as part of the input 
as mentioned in section      there are also similarities between our work and that of do and
kambhampati         in particular  the optimization criterion of minimizing the number of
ordering constraints coincide  as does the optional use of constraints to force a deordering 
while do and kambhampati focus on temporal relaxation in the context of action ordering 
we take the orthogonal view of minimizing the total action cost 
    conclusion
the use of our method for computing optimally relaxed plans provides two key advantages 
    if maximizing flexibility is paramount  then solving the mr encoding can lead to far
more flexible solutions than the md encoding or relaxer algorithm can achieve  and    
the optimal deordering provides a useful baseline for demonstrating the effectiveness of the
relaxer algorithm  our work leaves open the possibility for a heuristic approach similar to
the relaxer algorithm that is capable of producing reorderings of a partial order plan 
one extension of our work is to consider alternative forms of optimization criteria  for
example  one may change the soft clauses so as to minimize the number of fluents from
the initial state that are required for plan validity  doing so has the potential to improve
planning formalisms that attempt to minimize the reliance on information about the initial
state  such as assumption based planning  davis mendelow  baier    mcilraith        
alternatively  the initial set of actions need not correspond directly to a plan  as long as a
   

fioptimal partial order plan relaxation via maxsat

subset of actions can achieve the goal  then we will compute a plan  this opens the door
to techniques for optimizing plans by adding more actions to select from  using techniques
such as those introduced by davies  pearce  stuckey  and sndergaard        

acknowledgments
the authors gratefully acknowledge funding from the ontario ministry of innovation and
the natural sciences and engineering research council of canada  nserc   thanks also
go to the anonymous reviewers for their thoughtful feedback during the review process 

appendix a  relaxer counterexample
the relaxer algorithm presented in section       deorders an input plan  but as pointed
out by backstrom         the resulting pop may not be a minimal deordering  the counterexample provided by backstrom  however  incorrectly states that the resulting pop is
not minimally deordered  backstrom        figure      when in fact figure    b  is not a
deordering of    a   and thus    a  is a minimal deordering  although not a minimum reordering   here  we present a new counterexample that supports the claim that the relaxer
algorithm may not produce a minimum deordering 
both the domain theory and problem specification are shown in figure    the input plan
is the sequence of actions  a    a    a     because the relaxer algorithm seeks out the earliest
achiever for every precondition  the algorithm results in a deordering of the plan that has
two ordering constraints   a   a    and  a   a     the problem with the deordering is that
a  is chosen as the achiever for the fluent p  when in fact a  can be used as the achiever for
both p and q  note that a  is already required for fluent q  
the weakness of the relaxer algorithm is that it uses the earliest achiever  this weakness surfaces when an action later in the plan can be used as an achiever is already ordered
appropriately  using this insight  there may be a modification of the relaxer algorithm that
finds achievers already ordered appropriately  as opposed to finding the earliest achiever 

   

fimuise  beck    mcilraith

 define  domain counterexample 
  requirements  strips 
  predicates  p   q   g    g    g    
  action a 
 parameters  
 precondition   
 effect  and  g    p   
  action a 
 parameters  
 precondition   
 effect  and  g    p   q   
  action a 
 parameters  
 precondition  and  p   q  
 effect  and  g     
 define  problem counterexample problem 
  domain counterexample 
  init    
  goal  and  g    g    g      
figure    counterexample domain and problem description

references
anderson  j  s     farley  a  m          plan abstraction based on operator generalization 
in  th international conference on artificial intelligence  pp         
backstrom  c          computational aspects of reordering plans  journal of artificial
intelligence research               
biere  a   heule  m   van maaren  h     walsh  t          handbook of satisfiability 
frontiers in artificial intelligence and applications  ios press 
brightwell  g     winkler  p          counting linear extensions is  p complete    rd
annual acm symposium on theory of computing                
coles  a     coles  a          have i been here before  state memoization in temporal
planning  in   th international conference on automated planning and scheduling 
pp        
coles  a   coles  a   fox  m     long  d          forward chaining partial order planning 
in   th international conference on automated planning and scheduling  pp       
coudert  o          on solving covering problems  in   rd annual design automation
conference  pp         
   

fioptimal partial order plan relaxation via maxsat

davies  j     bacchus  f          postponing optimization to speed up maxsat solving  in
  th international conference on principles and practice of constraint programming 
pp         
davies  t  o   pearce  a  r   stuckey  p  j     sndergaard  h          fragment based
planning using column generation  in proceedings of the   th international conference
on automated planning and scheduling  pp       
davis mendelow  s   baier  j  a     mcilraith  s  a          assumption based planning 
generating plans and explanations under incomplete knowledge  in proceedings of the
  th aaai conference on artificial intelligence  pp         
do  m  b     kambhampati  s          improving the temporal flexibility of position
constrained metric temporal plans  in aips workshop on planning in temporal
domains 
domshlak  c   hoffmann  j     katz  m          red black planning  a new systematic
approach to partial delete relaxation  artificial intelligence             
fikes  r  e   hart  p  e     nilsson  n  j          learning and executing generalized robot
plans  artificial intelligence                
gerevini  a     serina  i          fast plan adaptation through planning graphs  local and
systematic search techniques  in proceedings of the  th international conference on
artificial intelligence planning systems  pp         
ghallab  m   nau  d     traverso  p          automated planning  theory   practice 
morgan kaufmann publishers 
graham  j  r   decker  k  s     mersic  m          decaf   a flexible multi agent
system architecture  autonomous agents and multi agent systems             
gurobi optimization  inc          gurobi optimizer reference manual  
hickmott  s   rintanen  j   thiebaux  s     white  l  b          planning via petri net
unfolding  in   th international joint conference on artificial intelligence  pp      
     
hickmott  s     sardina  s          optimality properties of planning via petri net unfolding  a formal analysis  in   th international conference on automated planning and
scheduling  pp         
hickmott  s  l          directed unfolding  reachability analysis of concurrent systems  
applications to automated planning  ph d  thesis  university of adelaide 
hoffmann  j     nebel  b          the ff planning system  fast plan generation through
heuristic search  journal of artificial intelligence research                 
hoffmann  j          icaps competition page  http   ipc icaps conference org  
accessed             
kambhampati  s     kedar  s          a unified framework for explanation based generalization of partially ordered and partially instantiated plans  artificial intelligence 
             
   

fimuise  beck    mcilraith

kautz  h  a   mcallester  d  a     selman  b          encoding plans in propositional
logic  in  th international conference on the principles of knowledge representation
and reasoning  pp         
kautz  h  a     selman  b          unifying sat based and graph based planning  in   th
international joint conference on artificial intelligence  pp         
le berre  d     parrain  a          the sat j library  release     system description  journal
on satisfiability  boolean modeling and computation          
mcallester  d  a     rosenblitt  d          systematic nonlinear planning  in proceedings
of the  th national conference on artificial intelligence  pp         
muise  c          exploiting relevance to improve robustness and flexibility in plan generation and execution  ph d  thesis  university of toronto 
muise  c   mcilraith  s  a     beck  j  c          optimization of partial order plans via
maxsat  in icaps workshop on constraint satisfaction techniques for planning
and scheduling problems  coplas 
muise  c   mcilraith  s  a     beck  j  c          optimally relaxing partial order plans with
maxsat  in   nd international conference on automated planning and scheduling 
pp         
murata  t          petri nets  properties  analysis and applications  proceedings of the
ieee                 
nebel  b     backstrom  c          on the computational complexity of temporal projection  planning  and plan validation  artificial intelligence                 
nebel  b     koehler  j          plan reuse versus plan generation  a theoretical and
empirical analysis  artificial intelligence                   
nguyen  x     kambhampati  s          reviving partial order planning  in proceedings
of the   th international joint conference on artificial intelligence  pp         
rintanen  j          planning as satisfiability  heuristics  artificial intelligence            
robinson  n   gretton  c   pham  d  n     sattar  a          partial weighted maxsat
for optimal planning  in   th pacific rim international conference on artificial
intelligence  pp         
russell  s  j     norvig  p          artificial intelligence  a modern approach  prentice hall 
say  b   cire  a  a     beck  j  c          mathematical programming models for optimizing
partial order plan flexibility  in   nd european conference of artificial intelligence
 in press  
siddiqui  f  h     haslum  p          block structured plan deordering  in australasian
conference on artificial intelligence  pp         
tate  a          project planning using a hierarchic non linear planner  in d a i  research
report no      department of artificial intelligence  university of edinburgh 
veloso  m  m   pollack  m  e     cox  m  t          rationale based monitoring for planning
in dynamic environments  in  th international conference on artificial intelligence
planning systems  pp         
   

fioptimal partial order plan relaxation via maxsat

weld  d  s          an introduction to least commitment planning  ai magazine         
     
younes  h  l  s     simmons  r  g          vhpop  versatile heuristic partial order
planner  journal of artificial intelligence research             

   

fi