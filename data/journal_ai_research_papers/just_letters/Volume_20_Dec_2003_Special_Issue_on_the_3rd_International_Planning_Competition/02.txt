journal of artificial intelligence research                 

submitted        published      

commentary
the power of modelinga response to pddl   
fahiem bacchus

fbacchus cs toronto edu

department  of computer science
  kings college road
university of toronto
toronto  ontario
canada  m s  h  

abstract
in this commentary i argue that although pddl    is a very useful standard for the
planning competition  its design does not properly consider the issue of domain modeling 
hence  i would not advocate its use in specifying planning domains outside of the context
of the planning competition  rather  the field needs to explore different approaches and
grapple more directly with the problem of effectively modeling and utilizing all of the
diverse pieces of knowledge we typically have about planning domains 

   introduction
fox and long did a terrific job of organizing the      planning competition  a non trivial
component of that work was specifying an extension of pddl so that a much more interesting
range of problems could be addressed in the competition  although the extension represents
a very useful standard for the competition  its design ignores both the power and reality of
domain modeling  i will argue that some of the new features of pddl    are unnecessary 
similar effects can just as easily be captured by more robust modeling of the planning
domain 
my own tlplan planning system competed in the      planning competition  despite
the fact that tlplans specification language had no direct support for some features of
pddl     we were still able to encode all of the competition domains  tlplan utilizes
a language that is designed to be suitable for robustly modeling planning domains   we
found that many of the new features of pddl    used in the competition were in fact easy
to capture simply by more robust modeling of the planning domain 
that pddl    takes the approach of adding new features to the language  rather than
requiring that the domain be more robustly modeled  is perhaps not surprising given the
dichotomy that still persists in the ai planning field  that dichotomy is between work on
domain independent planning and control intensive planning  just as work on controlintensive planning tends to ignore the applicability and power of state of the art search
algorithms for planning  work on domain independent planning tends to ignore the power to
be gained  and the requirements imposed  by domain modeling  most planning researchers
freely acknowledge the importance of both components  however  one rarely finds work at
   tlplan also includes constructs for expressing domain specific control information  but i am not referring
here to that component of the language 

c
    
ai access foundation  all rights reserved 

fibacchus

  durative action load truck
 parameters   t   truck 
  l   location 
  o   cargo 
  c   crane 
 duration     duration   
 precondition  and  at  t  l 
 at  o  l 
 empty  c  
 effect
 and  loading  t 
 at end  not loading  t  
   
 
  action move truck
 parameters   t   truck 
   
 precondition  and  not  loading  t  
    
 

figure    converting  over all  conditions
the interface of these two issues  nor are there many researchers who work on both of these
issues  
in the rest of this commentary i will elaborate on my argument by presenting examples of
features and approaches appearing in pddl    that demonstrate its insensitivity to domain
modeling 

   coordinating concurrent actions
in section   of the pddl    document various constructs are presented to support durative
actions  these are actions whose effects can either be immediate  like ordinary non durative
actions  or can occur at the end of some fixed duration  the duration can be either a
constant or specified by some functional term  the obvious extension  used  e g   by bacchus
  ady         where an action could have a range of effects each at a different future
timepoint  was not included in pddl      without this extension the  at start  and  at
end  specifiers are reasonable ways of specifying delayed effects 
with non instantaneous actions concurrency control becomes an issue  to achieve this
kind of control pddl    provides the  condition constructs  at start    at end   and
 over all   tlplan does not provide the  at end  and  over all  constructs   at
start  is simply an ordinary precondition   yet we were still able to model all of the
planning domains without them  i would argue that in general these constructs are not
necessary 
   i am just as guilty of this as most of my colleagues 
   instead one must ascend to the much more complex specification of continuous effects  presented in
section     of the pddl    document  to achieve this degree of flexibility 

   

fia response to pddl   

     over all  
consider the load truck action given in figure   of the pddl    article  it contains the
condition  over all  at  t  l    i e   the truck must stay at the same location through
out the load  why must it not be moved  because we are not allowed to move a vehicle while
it is being loaded  similarly  we should not drive a car while it is being refueled  we should
not turn off the oven while it is being used to bake a cake  we should not attempt to tie our
shoelaces while running  etc  our knowledge abounds with such common sense conditions 
in natural language we use progressive tenses to refer to ongoing activities  similarly  the
most natural way to model an  over all  condition is simply to have the action assert that
an activity is ongoing  and use the negation of that activity as a precondition for actions
that could interfere  the resulting transformation of the load truck action is given in
figure   
in figure   the load truck action advertises that it has initiated an on going loading of
the truck by adding a loading predicate to the state  at the end of the action this predicate
is deleted  actions like move truck that could interfere with loading are blocked by adding
 not loading  to their preconditions  using this technique we were able to replace all
 over all  conditions used in the competition domains  interestingly the replacements
made the domain more sensible and more readable 
consider in brief the advantages of modeling  over all  effects by adding progressive
predicates to the state 
   the method can be realized without extending the standard strip adl semantics 
   an actions preconditions still encapsulates all of its interactions with the other actions  in the presence of  over all  conditions  one would have to examine every
other action to see if any of its  over all  conditions are interfered with by one of
the actions effects  put another way  the actions activation condition continues to
be markovian  i e   dependent only on the current state  the current state continues
to carry all of the information needed to determine if an action can be applied  with
 over all  conditions  one also needs to examine all currently active actionsthe
state no longer encapsulates all of the necessary information 
   finally  it seems to me that the resulting domain models are more natural and easier
to understand 
      modularity
one concern with the above approach to avoiding  over all  conditions  is that it appears
to make adding new actions to the domain non modular   non modularity potentially arises
both from adding new actions that could be interfered with by previous actions  and from
adding new actions that could interfere with previous actions 
the first case arises when we add new actions like refuel  repair  change tire  etc  
all of which can be interfered with by the existing action move truck  our solution of
adding non interference preconditions would seem to require modifying the description of
   thanks to david smith and martha pollock for pointing out that i needed to address the issue of
modularity 

   

fibacchus

move truck to add  not  refueling     not  repairing     not  changing tire   
etc   preconditionsa new precondition for every new action added 
the second case arises when we add a new action like tow truck that also changes
the location of the truck  we would then have to ensure that we add to its preconditions
all progressives required to block it from interfering with previously defined actions  this
second case is perhaps not as problematic  since it does not require modifying any of the
old actions  however  the first case is an issue since one might not want to modify the
definition of previous actions that had already been debugged 
when using  over all  conditions we need not make any changes to old actions nor
worry about the effects of the new actions on the old  however  i would argue that this
modularity exists only at the syntactic levelit is syntactically easy to modify the domain
description to accommodate new actions  there is no corresponding modularity at the
semantic level  the interferences between the new action and the old still exists  in most
cases we cannot simply ignore these interactions  leaving it up to the planner and the  over
all  conditions to resolve  as we have found when developing domains  in many cases
when a new action is added to the domain a bug in the domain specification appears  for
example  plans one would expect to find are no longer found by the planner  often the bug
lies in the new action  but just as often a bug is found in the specification of the old actions 
if the domain no longer operates as expected  one is still left with the task of unraveling the
interactions of the specification  in general  specifying a rich domain requires understanding
the possible interactions in the domain  and in that task the  over all  conditions do not
help 
it could be argued that it is the job of the planner to unravel the interactions in the
domain  but this argument  i believe  trivializes the job of specifying a planning domain 
the planners job is to compute the interactions between actions in a sequence  or more
complex composition  of actions  getting the domain correctly specified is a difficult task 
and requires at least understanding how actions interact statically  even if one can leave the
dynamic interactions up to the planner 
fortunately  in most systems the interactions between actions are relatively local  there
is typically a relatively structured way in which actions can interfere with each other  this
is what makes specifying planning domains feasible 
one can take advantage of this structure to build robust domain models that provide
the advantages of semantic as well as syntactic modularity  a critical component of building
good domain models is the ability to use definitions  axioms   a feature that is not provided
by pddl     in tlplan  e g   one can define a new predicate symbol using a first order
formula over previous defined symbols  by defining the right high level constructs one
can typically provide a more explicit representation of the structure of interactions in the
domain  the advantage of doing this is that one also obtains a declarative representation of
this structure  thus achieving a more natural and easier to understand domain specification 
in the example above  one could define a new predicate  must be stationary  t  to
be the disjunction
 or  loading  t   changing tire  t   repairing  t   refueling  t   
now the  move truck  t  l   l   action need only have a single precondition  not
 must be stationary  t    and any new action that requires that the truck be station   

fia response to pddl   

  durative action load truck
 parameters   t   truck 
  l   location 
  o   cargo 
  c   crane 
 duration     duration   
 precondition  and  at  t  l 
 at  o  l 
 empty  c  
 effect
 and  loading  t 
 at end  not loading  t  
 holding  c  o 
 not  at  o  l  
 at end  when  holding  c  o   in  o  t   
 at end  when  holding  c  o   not  holding  c  o    
 at end  when  not  holding  c  o    load failed    
 

figure    converting  at end  conditions
ary can be accommodated by simply adding a new disjunct to the definition of must bestationary  this approach has the advantage of explicitly introducing a new concept
must be stationary  which helps in understanding and structuring the domain  in contrast  with  over all  conditions one only has the concept of not changing at  in this
simple example the difference appears to be trivial  but the key idea is that once we have
a new concept like must be stationary in the domain  we can use it to build up more
complicated concepts 
using explicit progressive preconditions also allows for the coordination of far more complex shared uses of a resource  for example  we can specify that both refueling and driving
require exclusive use of the truck  and that changing a tire can be done concurrently with
repairing the truck but not concurrently with loading  these conditions can be accommodated by having each action explicitly mention the excluded activities in its precondition 
or through axioms grouping and structuring these activities into more complex conditions
and then using those conditions in the action preconditions  in either case the result is a
more explicit description of the domain that is easier to understand  debug and modify 
     at end  
 at end  is a very strange condition  in fact  it did not appear in any of the competition
domains  i would argue that it also is not needed  not because it is easily captured by
other constructs  but rather because it is unnatural and would never appear in a reasonable
domain model   at end  is intended to support the flexibility whereby an action can
release a condition so that other actions might delete that condition  as long as the
condition is subsequently restored on time  like the  over all  condition it has the effect
of breaking the markovian nature of normal action specifications  a more natural way to
model such a situation  i would claim  is simply to use conditional  at end  effects  if the
required condition holds at the end  the desired effect will be created  otherwise some bad
effect will occur  the so modified load truck action is given in figure   

   

fibacchus

  durative action burnmatch
 parameters   m   match  l   location 
 duration     duration   
 precondition  and  have  m 
 at  l  
 effect
 and  when  no other light source  l 
 and  not  dark  l    light  l   
 not  have  m  
 burning  m 
 at end  when  burning  m   not  burning  m    
 at end  when  and  no other light source  l 
 burning  m  
 and  not  light  l  
 dark  l      
 
  action blowoutmatch
 parameters   m   match  l   location 
 precondition  and  at  l 
 burning  m  
 effect
 and  not  burning  m  
 when  no other light source  l 
 and  not  light  l  
 dark  l     
 

figure    alternate model of burn match
in this modification  instead of a  at end  holding  c  o   condition  we have simply
changed the effects of the action  if  holding  c  o  holds at the end of the action  the
action has its normal effects  otherwise  it adds to the state a marker indicating that a
load has failed  if we add  not  load failed   to the goal  then the planner would search
for ways of falsifying the antecedent of the effect  assuming that  load failed  cannot be
undone   i e   the planner would search for ways of ensuring that  holding  c  o  is true
at the end of the action  note that this is exactly what the planner would do to ensure
that an ordinary precondition holds  that is  again we can reduce the construct down to
standard features 

   unspecified durations
another feature of pddl    is the ability to specify ranges of durations for actions  the
intent here is that the actual duration of the action might be affected by other actions 
the burnmatch and heat water actions  figures    and    of the pddl    document  are
examples where a range is utilized as the duration 
i find flexible durations to be strange  they again make the action dependent on future
actions  furthermore  i am not convinced that they are necessary  rather i think that a
more natural way to model such situations would be to introduce two actions  one to start
the action  light the match  or start heating the liquid   and one to end the action  blow out
the match  or take the liquid off the heat   figures   and   present these alternate models 
the burnmatch starts the match burning  toggling the lighting status of the location
if there was no other light at that location   it also posts a default completion of the

   

fia response to pddl   

  durative action heat water
 parameters   p   pan 
 duration     duration            temperature  p    heat rate   
 precondition  and  full  p 
 onheatsource  p 
 bypan  
 effect  and  heating  p 
 heating start  p  current time  
 at end  when  and  bypan   heating  p    not  heating  p    
 at end  when  heating  p    assign  temperature  p       
 at end  when  and  not  bypan    heating  p    burn pot  p     
  action take off heat
 parameters   p   pan 
  startt   time 
 precondition  and  heating  p 
 heating start  p  startt 
 bypan  
 effect  and  not  heating  p  
 when  not  burn pot  p  
 increase  temperature  p 
       current time   startt   heat rate      

figure    alternate model of heat water
match burning at the maximum duration  if the match is still burning at the end of this
maximum duration it is extinguished and the lighting status is toggled  if the match was
the only source of light   on the other hand  the match can be extinguished earlier by a
blowoutmatch action 
the heat water action starts the water heating  and like burn match has a default
maximum duration  if the pan is still being heated at the end of that time it raises the
temperature of the pan to     degrees  and  if the agent is by the pan  it takes the pan
off the heat  otherwise pan continues to be heated causing it to become burnt  this is in
keeping with our previous discussion about not wanting  at end  preconditions   note the
pans temperature never rises above      we are assuming that the water keeps on boiling  
it also marks the time that heating started   current time  is the time that the action
was executed   take off heat is an action that can take the pan off the heat at any time 
it uses the start time of the heating to calculate the temperature of the water  if the pot is
burnt  its temperature remains at      as set by heat water  
i am not suggesting that these alternate action specifications are the right models
 e g   the heat water cannot account for putting the pot back on the heat after taking it
off   what i am suggesting is that the case for variable durations has not been made  is it
really necessary or even natural for domain modeling 

   conclusions
i could list a few other components of pddl    that seem to me to be unnecessary  but i
believe that the point has been made  pddl    is essential for the planning competition 
and i am certainly a strong supporter of the usefulness of the competition for furthering
planning research  however  i would suggest that outside of the context of the competition 
   

fibacchus

the issue of which features should be included in a planning domain specification language
needs to be more grounded in the application of these languages  planning domains  even
simplified ones designed for research  can be modeled in many different ways  and i believe
that it is better to produce more robust models with simpler languages than to develop
languages with features that are not really needed 
i do think that many of the ideas contained in pddl    are useful  e g   the way in
which continuous change is treated  nevertheless  i would not encourage anyone to try to
construct planning algorithms for dealing with these features  rather i would encourage
the development of planning algorithms inspired by the issues that arise from interesting
domains  that is  i think that the incorporation of new features into planning languages
needs to be motivated by compelling examples 

references
bacchus  f     ady  m          planning with resources and concurrency  a forward chaining
approach  in proceedings of the international joint conference on artificial intelligence  ijcai   pp         

   

fi