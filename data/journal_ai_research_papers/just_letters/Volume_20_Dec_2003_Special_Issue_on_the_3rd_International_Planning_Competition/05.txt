journal of artificial intelligence research                  

submitted       published      

commentary
pddl     the art of the possible 
commentary on fox and long
drew mcdermott

drew mcdermott yale edu

dept of computer science  yale university 
po box         new haven  ct          

abstract
pddl    was designed to push the envelope of what planning algorithms can do  and
it has succeeded  it adds two important features  durative actions  which take time  and
may have continuous effects   and objective functions for measuring the quality of plans 
the concept of durative actions is flawed  and the treatment of their semantics reveals
too strong an attachment to the way many contemporary planners work  future pddl
innovators should focus on producing a clean semantics for additions to the language  and
let planner implementers worry about coupling their algorithms to problems expressed in
the latest version of the language 

all things considered  fox and long have done a terrific job producing pddl     i know
from experience that getting a committee to agree on a language requires a delicate combination of diplomacy and decree  the language extensions that emerged from the     
competition are not exactly what anyone wanted  but apparently everyone can live with
them  pddl    is serving as a sturdy basis for evaluating and comparing planning algorithms  which is the prime purpose of the language in the first place  it appears that for
the next competition only minor extensions  and no revisions  will be necessary 
on top of their work negotiating the syntax of the language  fox and long also produced a semantics  on display in their paper  plus a more elaborate semantics for fully
autonomous processes  which did not make it into pddl     unfortunately   i was on the
     competition committee  and  as i explain below  i am not as enthusiastic as others on
the committee about the concept of durative actions  
probably the most important innovation in pddl    is the introduction of objective
functions for plans  thus making plan quality as important as plan existence  so far few
planners have been able to do much with objective functions  which indicates how thoroughly weve all been conditioned by the classical planning framework  objective functions
should become much more important in the future 
the main defect in pddl    is that its syntax and semantics are tailored too closely
to a currently popular style of planner  for example  functions are allowed  but of exactly
one kind  namely  those that take non numeric arguments and denote time varying numeric
quantities  that is  in  f    args       each arg must be an identifier and the overall value
must be a number that can change from situation to situation  a paradigmatic example
is  amount in tank    which might denote the volume of fuel in tank   a term such as
 object at distance    is not allowed  why these restrictions  because many planners
eliminate all variables at the outset of a solution attempt by instantiating terms with all
c
    
ai access foundation  all rights reserved 

fimcdermott

possible combinations of the objects mentioned in the problem statement  this tactic may
sound unpromising  but for many problems of a reasonable size it works surprisingly well 
however  as soon as the universe of objects becomes infinite the tactic stops working  and
that means numbers cant be treated like ordinary objects  it also means that general
functions cant be part of the language  if we had a function midpoint  location 
location  location  then it would generate an infinite set of terms such as  midpoint
loc a  midpoint loc b loc a   
in pddl      such problems did not arise because there were no functions in the language  the main goal in designing it was to agree on a lowest common denominator notation that many planners could obviously cope with  so that it could become a standard for
problem statement  the language succeeded quite well in that regard   which is why it is
also the standard framework for discussions about where to go next  in those discussions 
there are several relevant considerations 
   what real world problems need to be solved 
   what problems lie just beyond the solvable fringe of the current state of the art 
   what constructs can be given a clean semantics  or any coherent semantics at all 
   what constructs can current planning algorithms cope with 
i have listed these in declining order of importance  although i grant that they are
all important  i believe that pddl    gives too much weight to consideration    and the
example of functions is a good case in point  functions can play several different roles in a
logical theory  which is what pddl domains are  when you get down to it  in an assemblyplanning domain  someone might want a function top such that  top cylinder    denotes
the top of a piece being worked on  how do the considerations above come into play 
   assembly planning is a real world problem 
   it lies well beyond what is currently solvable  probably too far beyond 
   the semantics of functions in mathematical logic are well understood  and we can use
the same solutions here 
   current planning algorithms cant cope with all functions  but they can easily be
extended to handle functions like top  which cant be recursively nested 
given these answers  and considering other examples  it seems clear that adding functions to pddl is a good idea  it would make the language easier to use in realistic problems 
and in many cases would impose a minimal burden on current planners  if the presence
of functions makes some set of problems unsolvable by a planning system  then the system
should detect when such a problem is encountered and go on to the next one  if we wanted
to  we could add a  functions requirements flag to the language  but it hardly seems worth
the trouble  but  as i said above  so much weight was attached to the abilities of current
planners that pddl    ended up with a function declaration whose syntax of functions is
needlessly restricted and whose semantics is needlessly complex 
   to be precise  it succeeded well for action based planners  and went nowhere for hierarchical planners 

   

fipddl     the art of the possible 

we see the same phenomenon again with durative actions  that is  actions that require
a specified amount of time to execute  the committee had to thrash out a compromise about
these things  mainly revolving around how far to go beyond the state of the art  a minority
 including me  as well as fox and long  thought that the obvious next step was to be
able to model autonomous processes  which differ from actions in two respects  they have
continuous effects  and they run whenever their conditions are true  precondition is not
quite the right term   no matter what the target agent  the one executing the plans  does 
an example is boiling water  as long as there is water in a pot  and the water is at    
degrees celsius  the water will boil away  continuously decreasing in volume  the agent can
make use of processes by making their conditions true or false at appropriate times 
unfortunately  a majority of the committee thought putting processes into pddl was
too big a leap  and that we should instead add durative actions  as fox and longs paper
shows  the term durative action really refers to two completely different species  actions
that take a fixed amount of time no matter what  such as traveling from new york to
london   and actions whose duration is partly under the control of the planner  such as
boiling water  the difference is flagged syntactically by whether the  duration field of a
durative action is an equality  species    or an inequality  species     if an agent executes
an action of species    it loses some of its freedom for the duration of the action  if
the agent is sitting in an airplane  its not out taking a hike  that seems unproblematic 
but consider cleaning a warehouse  which might be modeled as taking an amount of time
proportional to the messiness of the warehouse  it is a weird idealization to imagine that
a robot might commit itself to cleaning the warehouse  and then essentially be a prisoner
of this decision until the warehouse is clean 
duratives of species   avoid this problem  by essentially sneaking autonomous processes
into the theory in a strange form  we are allowed to use autonomous processes  just so
long as we pretend the target agent is executing them  rather than connect the process
directly to its condition  we suppose that the agent can decide to stop the process at any
point consistent with the constraints on  d  the duration of the action  so  in figure   
of fox and longs paper  rather than having an autonomous process that is started and
stopped by changing the truth value of  onheatsource pot    we say that  onheatsource
pot   becomes true or false when the agent starts or stops the heat water action  no
turn on or turn off actions are required 
the first remark to make is that the difference between an action the target agent can
stop and one it must just wait to end should not be marked syntactically  suppose it is
possible for the agent to get locked out of the kitchen while it is boiling water  then it
can no longer stop the boiling  in pddl     it is impossible for this sort of thing to be
expressed  the closest we can come is to make  over all  in agent kitchen   be a
condition of the durative action  but then as soon as the agent leaves the kitchen it must
bring the heat water action to a close  or its plan will be invalid 
my impression is that most planners that can handle duratives can handle only species
   which is why the committee decided to include duratives  it seems clear to me that
species   is headed for extinction in favor of straightforward autonomous processes 
   assuming flight time is fixed may seem too extreme an idealization  but allowing the time to vary
 probabilistically   would push pddl far beyond its classical planning roots  none of the controversies
mentioned here ever question the knowability of the future 

   

fimcdermott

fox and long define the semantics of duratives in terms of ordinary actions plus monitoring actions that make sure that conditions remain true over the intervals in which
theyre supposed to be true  it is possible to know exactly where these monitoring actions
are supposed to be inserted because all changes in fluents are linear  this way of specifying semantics  has  unfortunately  just about run its course  as fox and long point out 
future increases in the complexity of temporal constructs will make it harder to express the
semantics of pddl  and harder to verify that a plan is correct 
the details of durative semantics echo the issues that arose in connection with the
semantics of functions  the tricky part about the semantics of actions is incorporating the
strips assumption that actions can be represented in terms of add lists and delete lists 
which in turn requires assuming that situations can be represented as finite lists of atomic
formulas  one might suppose that numbers would complicate this picture because there
are an infinite number of them  but fortunately numbers in themselves dont compromise
the strips world view  if we specify a blocks location in numerical coordinates  it still
has only one location  and moving it involves deleting the assertion stating its old location
and adding a new one 
why  then  do fox and long work so hard to keep numerical assertions strictly separate
from non numeric  why do they flatten action definitions before assigning them a semantics  why are quantifiers handled by substituting all possible terms for the variables 
the answer to all these questions is the same as for the odd restrictions on functions  many
current planners depend on generating all possible instances of an action 
it usually clarifies the semantics of a language greatly if it is defined without any direct
connection to the implementation of a reasoning system for the language  in  mcdermott 
      i sketch a formal semantics for an extension of pddl containing true autonomous
processes  the fulcrum of the framework is a set of truth conditions for process definitions 
there is no obvious link to the requirements of a planning algorithm  and in fact the
semantics allows processes that would be quite difficult to cope with or exploit  however  it
is not hard to find subsets of process definitions  including those corresponding to durative
actions  that current planners  with slight extensions  could handle 
one of the key goals of pddl from the beginning has been to put pressure on the
automated planning community to make planners handle a more realistic class of planning
problems  when new versions of pddl are restricted in ways congenial to existing planners 
it sends a mixed message  urging us into new territory  and at the same time reassuring us
that our algorithms might still be basically correct  the planning community doesnt really
need so much reassurance  we should opt for a domain definition language with clear syntax
and clean semantics and then find algorithms that can solve problems in the domains the
language describes 

references
mcdermott  d          the formal semantics of processes in pddl  in proceedings of the
icaps    workshop on pddl 

   

fi