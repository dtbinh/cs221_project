journal artificial intelligence research                  

submitted       published      

commentary
pddl    art possible 
commentary fox long
drew mcdermott

drew mcdermott yale edu

dept computer science  yale university 
po box         new haven  ct          

abstract
pddl    designed push envelope planning algorithms do 
succeeded  adds two important features  durative actions  take time  and
may continuous effects   objective functions measuring quality plans 
concept durative actions flawed  treatment semantics reveals
strong attachment way many contemporary planners work  future pddl
innovators focus producing clean semantics additions language 
let planner implementers worry coupling algorithms problems expressed
latest version language 

things considered  fox long done terrific job producing pddl     know
experience getting committee agree language requires delicate combination diplomacy decree  language extensions emerged     
competition exactly anyone wanted  apparently everyone live
them  pddl    serving sturdy basis evaluating comparing planning algorithms  prime purpose language first place  appears
next competition minor extensions  revisions  necessary 
top work negotiating syntax language  fox long produced semantics  display paper  plus elaborate semantics fully
autonomous processes  make pddl     unfortunately   i
     competition committee  and  explain below  enthusiastic others
committee concept durative actions  
probably important innovation pddl    introduction objective
functions plans  thus making plan quality important plan existence  far
planners able much objective functions  indicates thoroughly weve conditioned classical planning framework  objective functions
become much important future 
main defect pddl    syntax semantics tailored closely
currently popular style planner  example  functions allowed  exactly
one kind  namely  take non numeric arguments denote time varying numeric
quantities  is   f    args       arg must identifier overall value
must number change situation situation  paradigmatic example
 amount in tank    might denote volume fuel tank   term
 object at distance    allowed  restrictions  many planners
eliminate variables outset solution attempt instantiating terms
c
    
ai access foundation  rights reserved 

fimcdermott

possible combinations objects mentioned problem statement  tactic may
sound unpromising  many problems reasonable size works surprisingly well 
however  soon universe objects becomes infinite tactic stops working 
means numbers cant treated ordinary objects  means general
functions cant part language  function midpoint  location
location location  would generate infinite set terms  midpoint
loc a  midpoint loc b loc a   
pddl      problems arise functions language  main goal designing agree lowest common denominator notation many planners could obviously cope with  could become standard
problem statement  language succeeded quite well regard  
standard framework discussions go next  discussions 
several relevant considerations 
   real world problems need solved 
   problems lie beyond solvable fringe current state art 
   constructs given clean semantics  coherent semantics all 
   constructs current planning algorithms cope with 
listed declining order importance  although grant
important  believe pddl    gives much weight consideration   
example functions good case point  functions play several different roles
logical theory  pddl domains are  get it  assemblyplanning domain  someone might want function top  top cylinder    denotes
top piece worked on  considerations come play 
   assembly planning real world problem 
   lies well beyond currently solvable  probably far beyond 
   semantics functions mathematical logic well understood  use
solutions here 
   current planning algorithms cant cope functions  easily
extended handle functions top  cant recursively nested 
given answers  considering examples  seems clear adding functions pddl good idea  would make language easier use realistic problems 
many cases would impose minimal burden current planners  presence
functions makes set problems unsolvable planning system  system
detect problem encountered go next one  wanted
to  could add  functions requirements flag language  hardly seems worth
trouble  but  said above  much weight attached abilities current
planners pddl    ended function declaration whose syntax functions
needlessly restricted whose semantics needlessly complex 
   precise  succeeded well action based planners  went nowhere hierarchical planners 

   

fipddl    art possible 

see phenomenon durative actions  is  actions require
specified amount time execute  committee thrash compromise
things  mainly revolving around far go beyond state art  minority
 including me  well fox long  thought obvious next step
able model autonomous processes  differ actions two respects 
continuous effects  run whenever conditions true  precondition
quite right term   matter target agent  the one executing plans  does 
example boiling water  long water pot  water    
degrees celsius  water boil away  continuously decreasing volume  agent
make use processes making conditions true false appropriate times 
unfortunately  majority committee thought putting processes pddl
big leap  instead add durative actions  fox longs paper
shows  term durative action really refers two completely different species  actions
take fixed amount time matter what  traveling new york
london   actions whose duration partly control planner 
boiling water  difference flagged syntactically whether  duration field
durative action equality  species    inequality  species     agent executes
action species    loses freedom duration action 
agent sitting airplane  taking hike  seems unproblematic 
consider cleaning warehouse  might modeled taking amount time
proportional messiness warehouse  weird idealization imagine
robot might commit cleaning warehouse  essentially prisoner
decision warehouse clean 
duratives species   avoid problem  essentially sneaking autonomous processes
theory strange form  allowed use autonomous processes 
long pretend target agent executing them  rather connect process
directly condition  suppose agent decide stop process
point consistent constraints  d  duration action  so  figure   
fox longs paper  rather autonomous process started
stopped changing truth value  onheatsource pot    say  onheatsource
pot   becomes true false agent starts stops heat water action 
turn on turn off actions required 
first remark make difference action target agent
stop one must wait end marked syntactically  suppose
possible agent get locked kitchen boiling water 
longer stop boiling  pddl     impossible sort thing
expressed  closest come make  over  in agent kitchen  
condition durative action  soon agent leaves kitchen must
bring heat water action close  plan invalid 
impression planners handle duratives handle species
   committee decided include duratives  seems clear
species   headed extinction favor straightforward autonomous processes 
   assuming flight time fixed may seem extreme idealization  allowing time vary
 probabilistically   would push pddl far beyond classical planning roots  none controversies
mentioned ever question knowability future 

   

fimcdermott

fox long define semantics duratives terms ordinary actions plus monitoring actions make sure conditions remain true intervals
theyre supposed true  possible know exactly monitoring actions
supposed inserted changes fluents linear  way specifying semantics  has  unfortunately  run course  fox long point out 
future increases complexity temporal constructs make harder express
semantics pddl  harder verify plan correct 
details durative semantics echo issues arose connection
semantics functions  tricky part semantics actions incorporating
strips assumption actions represented terms add lists delete lists 
turn requires assuming situations represented finite lists atomic
formulas  one might suppose numbers would complicate picture
infinite number them  fortunately numbers dont compromise
strips world view  specify blocks location numerical coordinates  still
one location  moving involves deleting assertion stating old location
adding new one 
why  then  fox long work hard keep numerical assertions strictly separate
non numeric  flatten action definitions assigning semantics  quantifiers handled substituting possible terms variables 
answer questions odd restrictions functions  many
current planners depend generating possible instances action 
usually clarifies semantics language greatly defined without direct
connection implementation reasoning system language   mcdermott 
      sketch formal semantics extension pddl containing true autonomous
processes  fulcrum framework set truth conditions process definitions 
obvious link requirements planning algorithm  fact
semantics allows processes would quite difficult cope exploit  however 
hard find subsets process definitions  including corresponding durative
actions  current planners  slight extensions  could handle 
one key goals pddl beginning put pressure
automated planning community make planners handle realistic class planning
problems  new versions pddl restricted ways congenial existing planners 
sends mixed message  urging us new territory  time reassuring us
algorithms might still basically correct  planning community doesnt really
need much reassurance  opt domain definition language clear syntax
clean semantics find algorithms solve problems domains
language describes 

references
mcdermott  d          formal semantics processes pddl  proceedings
icaps    workshop pddl 

   


