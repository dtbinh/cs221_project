journal of artificial intelligence research                  

submitted       published      

commentary
the case for durative actions  a commentary on pddl   
david e  smith
nasa ames research center
computational sciences division  mail stop       
moffett field  ca        u s a 

desmith arc nasa gov

abstract
the addition of durative actions to pddl    sparked some controversy  fox and long
argued that actions should be considered as instantaneous  but can start and stop processes 
ultimately  a limited notion of durative actions was incorporated into the language  i argue
that this notion is still impoverished  and that the underlying philosophical position of
regarding durative actions as being a shorthand for a start action  process  and stop action
ignores the realities of modelling and execution for complex systems 

   introduction
pddl    introduces a limited notion of time into the classical strips planning framework 
in particular  it introduces the notion of durative actions  that is  actions that take time  however  the notion of durative action is rather limited  and somewhat begrudging  this reflects
an underlying philosophical position by fox and long that actions are really instantaneous 
but can initiate and terminate continuous processes  according to this view  durative actions
are seen as a shorthand for a start action  process  and stop action  as a result  durative
actions lack some important features  namely the ability to require that  pre conditions hold
over specified intervals  and that effects can take place at arbitrary time points within the
action  fox and long have argued that these features can be captured by breaking up a durative action into a series of smaller actions that only have effects at the beginning and end 
and only have preconditions at the beginning  end  and over the entire action  however  this
representation is exceptionally cumbersome  and ignores the fact that an agent may not have
separate control over these actions  in addition  this representation forces a planner to do
additional work in order to connect the actions 

   an example
to illustrate the problems with the pddl    notion of durative action  consider a simple
example of a spacecraft that must turn in order to point an instrument at a particular target  in
order to turn the spacecraft  thrusters in the reaction control system  rcs  are fired in order
to supply angular velocity  the spacecraft then coasts until it is pointing in the correct direction  or nearly so   when the rcs thrusters again fire in order to stop the rotation  firing the
thrusters consumes propellant  and requires that the controller be dedicated to the task  in
addition  when the thrusters are firing  there is vibration of the spacecraft  so certain other
operations cannot be performed  while the thruster firings are relatively quick  the coasting
phase is not  in general  turning a large spacecraft is a slow process that may take several
minutes  the reason is that speedy turns require greater acceleration and deceleration  and
therefore consume more propellant 

fis mith

the first question we need to answer is  what is the best way to model this complex operation  we could model the turning operation as an initial action to start the spacecraft turning  and another action to stop the turn  interspersed with processes that model what the
craft is doing in between  at some level of detail  this seems to be a reasonable model of the
physics  however  it may very well be that turning and guidance have been built in as primitive operations on the spacecraft  and there is no possibility of starting and stopping turns
independently  we could then model the operation as consisting of an instantaneous action to
start the turn  followed by a finite process that terminates when the turn is complete  but why
bother  the fact is  we are interested in the effects of the process  which can only be initiated
by starting the turn  for these reasons  it seems natural and proper to regard this as a durative action  with effects that take place throughout the action 
now lets suppose that we want to model this operation as a durative action in pddl    
we could say something like 
  durative action turn
 parameters   current target  new target   target 
 duration
    duration     angle  current target  new target  
 turn rate   
 condition
 and  at start  pointing  current target  
 at start      propellant  propellant required  
 at start  not  controller in use    
 effect
 and  at start  not  pointing  current target   
 at start  decrease  propellant  propellant required  
 at start  controller in use  
 at start  vibration  
 at end  not  controller in use   
 at end  not  vibration   
 at end  pointing  new target    

however  this model of the action is quite conservative  it ties up the controller for the entire
turn operation  and specifies that vibration is present for the entire operation  in addition  it
consumes all the required propellant at the beginning of the operation  in reality  the rcs is
only firing at the beginning and end of the turn  as a result  the controller is only needed during those two periods  vibration is only present during those two periods  and the propellant
is consumed during those two periods  this might not matter if the coast phase were relatively quick  however  as we indicated earlier  turning a large spacecraft can take several
minutes  unfortunately  pddl    has a rather limited notion of a durative action  we cannot
specify action conditions or effects at times other than the start or end of the action 

   decomposition into sub actions
fox and long have pointed out  that it is possible to model a durative action with such intermediate conditions and effects by breaking it up into a sequence of sub actions  for the turn
action we would need three sub actions as illustrated below  a start turn action  a coast
action  and a stop turn action  together with a turn action to bind them all together 

   note that this assumes we have precomputed and provided the angles between all possible pairs of targets  if
we do not want to do this  we must provide the  vector  direction for each target and the planner would need the
ability to do vector arithmetic or trigonometry within formulas 
   personal communication 

   

fit he c ase

for

d urative a ctions   a c ommentary on pddl   

  durative action turn
 parameters   current target  new target   target 
 duration
    duration     angle  current target  new target 
 turn rate   
 condition
 and  at start  pointing  current target  
 at start      propellant  propellant required  
 at end  finished   
 effect
 and  at start  not  pointing  current target   
 at start  turning  
 at start  enabled start turn  
 at end  not  turning   
 at end  not  finished turning   
 at end  pointing  new target    
  durative action start turn
 parameters   
 duration
    duration  start turn duration  
 condition
 and  at start  not  controller in use   
 at start      propellant     propellant required     
 over all  turning  
 over all  enabled start turn   
 effect
 and  at start  decrease  propellant     propellant required     
 at start  controller in use  
 at start  vibration  
 at end  not  controller in use   
 at end  not  vibration   
 at end  not  enabled start turn   
 at end  enabled coast    
  durative action coast
 parameters   
 duration
    duration  coast duration  
 condition
 and  over all  turning  
 over all  enabled coast   
 effect
 and  at end  not  enabled coast   
 at end  enabled stop turn    
  durative action stop turn
 parameters   
 duration
    duration  rcs duration  
 condition
 and  at start  not  controller in use   
 at start      propellant     propellant required     
 over all  turning  
 over all  enabled stop turn   
 effect
 and  at start  decrease  propellant     propellant required     
 at start  controller in use  
 at start  vibration  
 at end  not  controller in use   
 at end  not  vibration   
 at end  not  enabled stop turn   
 at start  finished    

figure   shows graphically how these actions are tied together  if the goal is to be pointing at
a particular target  a turn action will be required  the turn action has an end precondition of
 finished   which can only be satisfied by adding a stop turn action   stop turn has an over
   

fis mith

all condition  enabled stop turn  that can only be satisfied by the end effect of a coast action 
likewise  the coast action has an over all condition  enabled coast  that can only be satisfied by an end effect of a start turn action  the start turn action has an over all condition
 enabled start turn  that can only be satisfied by a start effect of the turn action  as a result  the
turn action forces all three sub actions into the plan  and each sub action forces its predecessor sub actions and a turn action into the plan  all three of these sub actions have an over
all condition  turning  that is only satisfied during a turn action  as a result  the only way that
all of this can be consistently achieved is if all three sub actions are packed sequentially into
the turn action 
 pointing  current 
turning
enabled start turn

pointing  target 
 turning
 finished

turn

pointing  current 

finished

 enabled start turn
enabled coast

start turn
turning
enabled start turn

coast
turning
enabled coast

 enabled coast
enabled stop turn

finished

 enabled stop turn

stop turn
turning
enabled stop turn

figure    sub actions for the turn operation  start  end  and over all conditions are
shown below each action  the interconnecting start and end effects are shown above
each action  for simplicity  i have omitted the effects concerning vibration  controller
use  and propellant usage
there are two additional subtleties in this representation  the first is that  although each
of the three sub actions can only occur during a turn action  there is no obvious requirement
that they occur during the same turn action  suppose that we tried to place the start turn
action during a previous turn action  that previous turn action would have its own three subactions  and our wayward start turn action would conflict with those sub actions  thus  in
order to make this work  we would have to push those three sub actions to an earlier turn
action  and so on  realizing that this cannot work requires a difficult induction argument  it
seems unlikely that any existing planner could actually infer this  other than by trial and
error  as a result  the process of generating plans involving such actions would incur a significant computational overhead  and engage in needless search 
a second subtlety that we have overlooked in this decomposition is that computing the
durations of the sub actions is a bit tricky  while it is reasonable to assume that the start and
stop turn actions have fixed duration  the duration of the coast action depends on the current
   it turns out that the  finished  effect of stop turn must be a start effect rather than an end effect  the reason is
that if it were to occur as an end effect  the stop turn action would need to complete prior to the end of the turn
action  since the  finished  effect is mutex with the  not finished  end effect of the turn action  despite this
asymmetry in the representation  stop turn is still forced to occur wholly within the turn action because of the
overall condition  turning  

   

fit he c ase

for

d urative a ctions   a c ommentary on pddl   

and target orientations of the spacecraft  in fact  the duration of the coast action must be the
duration of the turn action minus the durations of the start and stop turn actions  the only
way to do this is to introduce an additional numeric turn duration function that is set by
the turn action  and used to compute the duration of the coast action 
so why is this process of decomposing an action into sub actions so complex and convoluted  after all  in the htn planning paradigm this is done all the time  the reason is that in
generative planning we have adopted the view  for better or worse  that one is not allowed to
directly specify how an action is to be used or how actions are connected with each other  as
a result  in order to force the sub actions to abut and fit within the turn action  we must do
some tricky things  one might argue that we need this htn capability in order to model such
actions  indeed  it would certainly make things easier  however  there is another way 

   richer durative actions
one approach to dealing with the above modelling problem is to admit a richer language for
modelling durative actions  to make it convenient to model actions like the turn action  we
need to be able to specify conditions that must hold at various points and intervals within the
action  and effects that take place at various points and intervals within the action  there are
many possible ways in which one could express such conditions and effects  but here is one
straw man possibility 
  durative action turn
 parameters   current target  new target   target 
 duration
    duration     angle  current target  new target   turn rate   
 condition
 and  at start  pointing  current target  
 at start      propellant  propellant required  
 at start  not  controller in use   
 at    end rcs duration       propellant     propellant required     
 at    end rcs duration   not  controller in use    
 effect
 and  at start  not  pointing  current target   
 at start  decrease  propellant     propellant required     
 over  start    start rcs duration    controller in use  
 over  start    start rcs duration    vibration  
 at    end rcs duration   decrease  propellant     propellant required     
 over     end rcs duration  end   controller in use  
 over     end rcs duration  end   vibration  
 at end  pointing  new target    

here we did not need to explicitly construct actions for starting and stopping the turn  or
coasting  for this reason  we did not need to worry about their durations or about connecting
these sub actions  instead  we simply specified the effects at the appropriate times during the
turn action  note that i specified vibration and controller use as interval effects  this seems
less cumbersome than specifying two separate effects stating that the controller is in use at
the beginning of an interval  and no longer in use at the end  however  there is also a more
fundamental difference between the two encodings  in the encoding above  there is no possibility that another independent action could somehow make the controller available during
the interval in which it is in use  bedrax weiss et  al         have argued for the introduction
of an explicit notion of resource into the pddl language  if we had such a notion we could
simplify the above encoding even further  by specifying that the controller is a reusable
resource that is required by the turn action over the appropriate intervals  vibration  or stability  could also be treated as a resource  although it is somewhat less intuitive to do so 
   

fis mith

one final issue that we have avoided is the notion of continuous change  in our spacecraft
example  there is certainly continuous change going on  propellant is not burned instantaneously  and the orientation of the spacecraft changes continuously  the question is  do we
need to model this  certainly there are domains where it is necessary to reason about continuous change  as fox and long point out  when there are concurrent actions as well as simultaneous consumption and production of resources  it may be necessary to reason about how
these resources change over the course of the actions  for example  a mars rover receives
energy from the solar panels at the same time it is driving from place to place  since the battery has both a minimum and maximum capacity  one cannot model this easily using discrete
consumption and production effects  however  if consumption and production do not happen
simultaneously  one can model continuous change as taking place at the start or end of an
action  this is sufficient for our spacecraft example since there are no actions that increase
propellant  and one cannot perform two simultaneous actions that both affect the spacecrafts
orientation 

   conclusion
durative actions in pddl    are limited  and expressing complex durative actions by
decomposition into sub actions is difficult and clumsy  at the same time  it is not clear that
modelling actions like turning a spacecraft in terms of processes is either necessary or useful  particularly when there is no possibility that the process can be deliberately interrupted 
for domains like this  a richer  more expressive notion of durative action seems like the right
modelling tool  note that i would not argue that the modelling of processes is completely
unnecessary  however  for many practical planning applications it is overkill  it results in a
more complex representation and planning process than is necessary 
is it cheating to model complex processes as durative actions  of course it is  all modelling is cheating  in the real world of physics  nothing is instantaneous or indivisible  so it is
cheating to model anything as an instantaneous action  yet  we are usually content to model
an action like turning on a light switch as instantaneous and indivisible  even though it does
take a small amount of time  and there are complex processes behind it  a durative action is
no different  we are simply choosing not to model the details of the process structure behind
the action  even though it may be necessary to model the fact that the action takes time  and
that the effects take place at different times during the action  for many practical applications  durative actions are an essential modelling tool  and they deserve a richer treatment
than that provided in pddl    

references
bedrax weiss  t   mcgann  c    ramakrishnan  s         formalizing resources for planning  in proceedings of the icaps    workshop on pddl 
fox  m    long  d         pddl   modeling continuous time dependent effects  in proceedings of the  rd international nasa workshop on planning and scheduling for space 
fox  m    long  d         pddl     an extension to pddl for expressing temporal planning domains  journal of artificial intelligence research  this issue 

   

fi