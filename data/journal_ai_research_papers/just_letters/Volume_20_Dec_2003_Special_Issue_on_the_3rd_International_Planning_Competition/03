journal artificial intelligence research                  

submitted        published      

shop   htn planning system
dana nau

nau cs umd edu

dept  computer science  institute systems research
university maryland  college park  md       usa

tsz chiu au

chiu cs umd edu

dept  computer science
university maryland  college park  md       usa

okhtay ilghami

okhtay cs umd edu

dept  computer science
university maryland  college park  md       usa

ugur kuter

ukuter cs umd edu

dept  computer science
university maryland  college park  md       usa

j  william murdock

murdockj us ibm com

ibm watson research center
   skyline dr 
hawthorne  ny       usa

dan wu

dandan cs umd edu

dept  computer science
university maryland  college park  md       usa

fusun yaman

fusun cs umd edu

dept  computer science
university maryland  college park  md       usa

abstract
shop  planning system received one awards distinguished performance
     international planning competition  paper describes features
shop  enabled excel competition  especially aspects shop 
deal temporal metric planning domains 

   introduction
shop   simple hierarchical ordered planner    nau  munoz avila  cao  lotem    mitchell 
       domain independent planning system based hierarchical task network  htn 
planning       international planning competition  shop  received one top
four awards  one two awards distinguished performance  paper describes
characteristics shop  enabled excel competition 
predecessor shop  nau  cao    munoz avila         shop  generates
steps plan order steps later executed  knows
current state step planning process  reduces complexity
reasoning eliminating great deal uncertainty world  thereby making
easy incorporate substantial expressive power planning system  shop 
c
    
ai access foundation  rights reserved 

finau  au  ilghami  kuter  murdock  wu    yaman

shop  axiomatic inference  mixed symbolic numeric computations  calls
external programs 
shop  capabilities go significantly beyond shop 
shop  allows tasks subtasks partially ordered  thus plans may interleave
subtasks different tasks  often makes possible specify domain knowledge intuitive manner possible shop 
shop  incorporates many features pddl  quantifiers conditional
effects 
alternative ways satisfy methods precondition  shop  sort
alternatives according criterion specified definition method 
gives convenient way author planning domain tell shop  parts
search space explore first  principle  technique could used
planner plans forward initial state 
shop  handle temporal planning domains  way translate
temporal pddl operators shop  operators maintain bookkeeping information multiple timelines within current state  principle  technique
could used non temporal planner sufficient expressive power 
rest paper organized follows  section   gives background htn
planning  section   describes shop s features planning algorithm  section  
describes write domain descriptions shop   particular  section     discusses
basic problem solving strategies  sections         describe aspects shop 
specific handling temporal metric domain features  section   discusses shop s
performance competition  section   discusses related work  section   gives
summary conclusion  appendix contains shop  domain description one
problem domains planning competition 

   htn planning
htn planning classical ai planning state world represented
set atoms  action corresponds deterministic state transition  however 
htn planners differ classical ai planners plan for  plan
it 
objective htn planner produce sequence actions perform
activity task  description planning domain includes set operators similar
classical planning  set methods  prescription
decompose task subtasks  smaller tasks   figure   gives simple example 
given planning domain  description planning problem contain initial state
classical planningbut instead goal formula  problem specification
contain partially ordered set tasks accomplish 
planning proceeds using methods decompose tasks recursively smaller
smaller subtasks  planner reaches primitive tasks performed directly using planning operators  nonprimitive task  planner chooses
   

fishop   htn planning system

task 
preconditions 

task 

 transport  p 

 at  p  x 
 destination p  y 
 available truck  t 

 transport two  p  q 

preconditions 

subtasks 

 package  p 
 package  q 

subtasks 

 dispatch  t  x   load  t  p   move  t  x  y   return  t  x 

task 

 transport  p   transport  q 

task 

 dispatch  t  x 

subtasks   reserve  t   move  t home  x 

 return  t  x 

subtasks   move  t  x home 

 free  t 

figure    methods transporting package  p  transporting two packages  p  q 
dispatching truck  t  returning truck  arrows ordering constraints 
shaded subtasks primitive tasks accomplished following
planning operators   load  t  p  loads  p onto  t   move  t  x  y  moves  t
 x  y   reserve  t  deletes  available truck  t  signal truck use 
 free  t  adds  available truck  t  signal truck longer use 

 transport two p  p  
 package p  
 package p  

 transport p  

 transport p  
 at p  l  
 destination p  l  
 available truck t  

 dispatch t  l  

 dispatch t  l  

 load t  p  
 reserve t  

 at p  l  
 destination p  l  
 available truck t  

 return t  l  
 load t  p  

 move t  l  l  

 reserve t  

 move t  home l  

 move t  home l  

 return t  l  

 move t  l  l  
 free t  

 move t  l  home 

 free t  
 move t  l  home 

figure    plan accomplishing  transport two p  p   following initial state 
  package p     at p  l     destination p  l     available truck t     at t  home  
 package p     at p  l     destination p  l     available truck t     at t  home   
   

finau  au  ilghami  kuter  murdock  wu    yaman

applicable method  instantiates decompose task subtasks  chooses
instantiates methods decompose subtasks even further  illustrated figure   
plan later turns infeasible  planning system need backtrack
try methods 
htn methods generally describe standard operating procedures one would
normally use perform tasks domain  e g   see figure    htn practitioners
would argue representations appropriate many real world domains
classical planning operators  better characterize way users think
problems 
htn planners  shop  hand tailorable  planning engine
domain independent  htn methods may domain specific  planner
customized work different problem domains giving different sets htn
methods  ability use domain specific problem solving knowledge dramatically
improve planners performance  sometimes make difference solving
problem exponential time solving polynomial time  e g   gupta   nau       
slaney   thiebaux         experimental studies  e g   nau et al               bacchus
  kabanza         hand tailorable planners quickly solved planning problems orders
magnitude complicated typically solved fully automated planning
systems domain specific knowledge consists planning operators 

   features shop 
section describes shop s planning algorithm shop s distinctive features 
    basic elements domain description
domain description description planning domain  consisting set methods 
operators  axioms  describe briefly  additional details appear
section   
      tasks
task represents activity perform  syntactically  task consists task symbol
followed list arguments  task may either primitive compound  primitive
task one supposed accomplished planning operator  task symbol
name planning operator use  tasks arguments parameters
operator  compound task one needs decomposed smaller tasks
using method  method whose head unifies task symbol arguments
may potentially applicable decomposing task  details discussed
following subsections 
      operators
operator indicates primitive task performed  operators
similar pddl operators  operator head head o  consisting operators
name list parameters  precondition expression pre o  indicating
   

fishop   htn planning system

  method
  head
 transport person  p  c  
  precondition
 and
 at  p  c  
 aircraft  a 
 at  a  c  
 different  c   c   
  subtasks
  ordered
 move aircraft  a  c  
 board  p  a  c  
 move aircraft  a  c  
 debark  p  a  c    
figure    shop  method simplified version zenotravel domain 
true current state order operator applicable  delete list del o 
add list add o  giving operators negative positive effects  pddl 
preconditions effects may include logical connectives quantifiers  operators
numeric computations assignments local variables  an example appears
later figure      pddl  two operators name  thus
primitive task  applicable actions instances operator 
operator optional cost expression  the default value     expression arbitrarily complicated use variables appear
operators head precondition  cost plan sum costs operator
instances 
      methods
method indicates decompose compound task partially ordered set
subtasks  compound primitive  simplest version method
three parts  task method used  precondition
current state must satisfy order method applicable  subtasks
need accomplished order accomplish task 
example  figure   simplified version shop  method one
domains aips      planning competition  zenotravel domain  method
gives way transport person  p aircraft one location  c  another location
 c  aircraft already  c     ordered keyword specifies subtasks
totally ordered  first move aircraft  c   board person  move
aircraft  c   debark person   specify unordered set subtasks  would
   symbol begins question mark variable name 
   method figure would meaning  ordered omitted  list subtasks
begin  ordered  unordered  shop  assumes  ordered 

   

finau  au  ilghami  kuter  murdock  wu    yaman

    head
 enough fuel  plane  current position  destination  speed 
  tail
 and  distance  current position  destination  dist 
 fuel  plane  fuel level 
 fuel burn  speed  rate 
 eval      fuel level     rate  dist     
figure    shop  axiom simplified version zenotravel domain 
use keyword  unordered rather  ordered  complicated partial orderings
specified using nested combinations  ordered  unordered  
generally  method may form
  method head m  p  t  p  t         
head m  task called head m  pi precondition expression
ti partially ordered set subtasks  meaning analogous if then else 
tells shop  p  satisfied t  used  otherwise p  satisfied
t  used  forth  keep descriptions paper simple 
assume without loss generality one precondition expression pre m 
one set subtasks sub m  
general  may several alternative ways accomplishing head m   may
one method whose head head m   one set variable bindings
satisfy pre m   one ordering consistent sub m   one
possible way accomplish subtasks sub m   alternatives produce
branches shop s search space 
      axioms
precondition method operator may include conjunctions  disjunctions  negations  universal existential quantifiers  implications  numerical computations  external function calls  furthermore  axioms used infer preconditions
explicitly asserted current state  axioms generalized versions horn clauses 
written lisp like syntax  example      head tail  says head true tail true 
tail clause may contain anything may appear precondition
operator method 
example  axiom shown figure   says plane enough fuel reach
 destination following conditions satisfied  distance travel  dist  fuel
level  fuel level  burn rate  rate   fuel level less product  rate
 distance  last conditions handled using external function call 
described below 
   notation allow every possible possible partial ordering  problem
practice  notation less clumsy allow every possible partial ordering 

   

fishop   htn planning system

procedure shop  s  t  d 
p   empty plan
t   t   task constrained precede t 
loop
  return p
nondeterministically choose t 
primitive task
  a      ground instance operator d  substitution unifies  head a   t   satisfies preconditions 
  return failure
nondeterministically choose pair  a   
modify deleting del a  adding add a 
append p
modify removing applying
t   t   task constrained precede t 
else
  m      instance method d  unifies  head m   t  
pre m  true s  general possible 
  return failure
nondeterministically choose pair  m   
modify removing t  adding sub m   constraining task
sub m  precede tasks preceded  applying
sub m    
t   t sub m    task constrained precede t 
else t   t   task constrained precede t 
repeat
end shop 
figure    simplified version shop  planning procedure 

tail clause  or precondition operator method  contains negation 
handled way prolog  theorem prover takes  not a  true
cannot prove a 

      external function calls
external function calls useful  example  numeric evaluations  e g  
zenotravel domain  check requirement available fuel must greater
equal product burn rate distance traveled   example 
competition  shop  used graph algorithm library compute shortest paths
graph  principle  would possible implement graph algorithms set
methods  however  writing external functions allows run faster 
makes possible access predefined code libraries 
   

finau  au  ilghami  kuter  murdock  wu    yaman

    shop  algorithm
figure   shows simplified version shop  planning procedure  arguments
include initial state s  partially ordered set tasks   domain description d 
mentioned earlier  shop  plans tasks order
executed  order this  nondeterministically chooses task
predecessors  first task shop  start working on  point 
two cases 
first case primitive  i e   accomplished directly using action
 i e   instance planning operator   case  shop  finds action
matches whose preconditions satisfied s  applies  if action
exists  branch search space fails  
second case compound  i e   method needs applied
decompose subtasks  case  shop  nondeterministically chooses method
instance decompose subtasks  if method instance exists 
branch search space fails  
solution plan involves m  actions p leaf nodes
decomposition tree dp tree shown figure    precondition formula
pre m  must true state immediately precedes first action dp
descendant m  order ensure pre m  true correct state  shop  needs
generate leftmost branch way bottom  evaluate pre m 
state a  last three lines loop ensure happen 
telling shop  current method subtasks  shop  generate one
subtasks generating subtasks task network 
example  shop  could begin generating plan figure   first decomposing
 transport two p  p    transport p    transport p    nondeterministically
choosing decompose  transport p     dispatch t  l     pickup t  p     move t  l 
l     done that  shop  would required decompose  dispatch t  l   
decomposing  transport p    order guarantee  dispatch t  l    reserve t  
occur state world  available t   evaluated  operator
 reserve t   makes t  unavailable  thus ensuring  transport p   decomposed
later  decomposition use truck t  rather t  
    additional features
shop  several additional features addition basic ones described earlier 
section describes significant ones 
      sorting variable bindings
shop  evaluates methods precondition  gets list possible sets
variable bindings satisfy expression current state  set variable
bindings lead different branch shop s search tree  nondeterministic choice
implemented shop  via depth first backtracking  shop  find good solution
find quickly  important decide set variable bindings try first 
purpose  shop  sort by construct sorts list variable bindings specified criterion  especially useful planning problem
   

fishop   htn planning system

  method
  head
 transport person  p  c  
  precondition
  sort by  cost   
 and  at  p  c  
 aircraft  a 
 at  a  c  
 different  c   c  
 cost of  a  c   c   cost   
  subtasks
  move aircraft  a  c  
 board  p  a  c  
 move aircraft  a  c  
 debark  p  a  c    
figure    using sort by shop  method simplified zenotravel domain 
optimization problem  e g   problem objective find plan
least possible cost  sort by construct  write heuristic function estimate
anticipated cost set variable bindings  sort sets variable bindings
according heuristic function values shop  try promising one first 
example  precondition
 and  at  here   distance  here  there  d  
may several different combinations  here   there   d satisfy
precondition  expression
  sort by  d     and  at  here   distance  here  there  d   
cause shop  consider variable bindings decreasing order value  d 
complicated example  recall precondition method figure   
may several sets variable bindings satisfy precondition current
state  reformulation precondition figure   tells shop  sort sets
variable bindings increasing order  cost variable  way  shop  look first
alternative lowest  cost value 
      branch and bound optimization
shop  allows option using branch and bound optimization search leastcost plan  option generally results spending additional planning time order
search plans superior quality  using branch and bound option  one
specify time limit search  search takes longer time limit  shop 
terminates search returns best plan found far  functionality
partly inspired anytime algorithms  boddy   dean        
   

finau  au  ilghami  kuter  murdock  wu    yaman

      pddl operator translation
shop s planning procedure proved sound complete across large set
planning problems  sense set methods operators capable generating solution problem  planning procedure guaranteed generate
correct plan  nau et al          however  proof tells us planning
algorithm work correctly domain description correct  tell us
whether domain description represents planning domain given set
pddl planning operators 
aips      planning competition  problem caused difficulty shop s
predecessor shop  shop team developing domain descriptions shop purely
hand  made mistakes writing two domains  thus shop found
incorrect solutions problems domains  judges disqualified
shop domains 
developing shop   wrote translator program translate pddl operators
shop  domain descriptions  domain descriptions produced translator
program sufficient efficient planning shop   need modified
hand order put domain knowledge  described section    however 
translator program least provide correct starting point 

      debugging facilities
shop  includes several debugging facilities  important tracing
mechanism  one tell shop  trace set operators  methods  axioms 
example  figure    given names  namely case  case   two different
clauses method  tell shop  trace either clauses them 
shop  print messages time enters exits clause traced 
depending particular tracing options one selects  messages may include
things argument list  current state world  information
whether operator  method axiom succeeds fails 

      protected conditions anti interleaving
shop s planning operators include way specify protected conditions  feature
described briefly nau et al          bother describe
use planning competition  cases wanted protect
conditions possible threats  found convenient either make use flags
similar available truck flag figure    use following anti interleaving
feature shop  
method subtasks t            tk   ti begins keyword  immediate 
tells shop  plan ti immediately ti  finishes  without trying
interleave tasks ti  ti   several examples appear appendix 
   

fishop   htn planning system

task person  transport person his her destination
 these tasks unordered  thus subtasks may interleaved 
task plane  transport plane destination
 these tasks unordered  thus subtasks may interleaved 
method transporting person 
person already desired destination nothing
else
select plane
plane persons current position move
hold plane current position
board person onto plane
move plane destination
debark person destination
method transporting plane 
plane already desired destination nothing
else move plane destination
figure    abstract tasks methods simplified version zenotravel domain 

   developing domain descriptions shop 
    basics
first step developing domain description shop  formulate abstract
tasks methods constitute reasonable problem solving strategy  example 
use simplified version zenotravel  one domains planning competition  
problem transport people current locations destination 
use available airplanes  figure   shows set abstract tasks methods
transporting people moving airplanes 
abstract strategy one figure    implement
shop  domain description consisting methods  operators axioms  example 
method transporting person shown figure    may one
value  p satisfies precondition  plane  p   so  plane use
nondeterministic branching point shop   nondeterministic branching points 
domain description may include heuristics guide shop s search  section    
discusses ways write heuristics 
method transport with plane task  one preconditions whether
planes fuel level enough get plane current position destination 
figure   shows axiom precondition 
actions  boarding people onto planes  debarking planes  refueling
planes  modeled operators shop   example  shop  operator
boarding given figure   
   

finau  au  ilghami  kuter  murdock  wu    yaman

  method
  head
 transport person  person  destination 
case    label use debugging
  preconditions
 and  at  person  current position 
 same  current position  destination  
  subtasks
  
case    label use debugging
  preconditions
 and  at  person  current position 
 plane  p  
  subtasks
  transport with plane  person  p  destination   
figure    shop  implementation one methods figure   
  operator
  head
 board  person  plane 
  preconditions
 and  at  person  place   at  plane  place  
  delete list
  at  person  place  
  add list
  in  person  plane   
figure    shop  operator simplified zenotravel domain 

    writing temporal domains
shop s operators least expressive level   actions pddl  shop 
explicitly support durative actions level   pddl  shop 
explicit mechanism reasoning durative concurrent actions 
however  shop  still enough expressive power represent durative concurrent
actions  knows current state step planning process since
operators assign values variables numeric calculations  allowed
us develop preprocessing technique call multi timeline preprocessing  mtp  
mtp technique translating pddl operators shop  operators keep track
temporal information current state 
pseudocode figure    algorithmic description mtp does 
principle  mtp could automatedbut practice  always done hand 
needs done planning domain 
   

fishop   htn planning system

every operator planning domain
add two parameters  start  duration
os precondition
add assignment  duration
formula calculating os duration
add assignment  start
formula takes maximum write times
dynamic properties os precondition read times
dynamic properties os effects
dynamic property p os effects
add effects change value write time p   start   duration
dynamic property appears
add effects change read time p  maximum
read time p   start   duration
figure     multi timeline preprocessing  mtp  
keep description mtp simple  let us suppose state s  every atom
 p c        cn   represents single valued property  i e   one cn  p c 
      cn  cn   true s  property dynamic operator may change value cn  
example  initial state contains  at plane  city   operator
moves plane  different location  location plane  dynamic 
property p changes time  mtp modifies operators keep track 
within current state  times property changes times
various preconditions depend property  idea dynamic property
p  current state contain two time stamps  read time p   last time
action read value p  write time p   last time action
modified value p  mtp modifies operators way whenever
operator reads  i e   accesses  dynamic property  operator update propertys
read time  operator writes  i e   modifies  dynamic property  update
propertys write time  thus  instead single global time  current state contain
many local times  namely read time write time dynamic property 
mtp inserts preconditions action ensure action begins
read time property writes write time property
reads  prevents two actions overlapping time one writes
property reads it  example  boarding operator fly operator
plane may overlap  boarding operator requires plane
located particular city fly operator changes location plane 
figure    shows one shop  operators produced mtp zenotravel
domain  operator involves two dynamic properties  vehicles fuel level location 
operator reads properties  may start write times 
however  writes one  the fuel level   may start read time
vehicles location  thus refueling may performed concurrently
actions depend vehicles location  cannot performed concurrently
actions modify fuel level modify vehicles location 
   

finau  au  ilghami  kuter  murdock  wu    yaman

  operator   refuel  plane  city  start  duration 
  preconditions
  aircraft  plane 
 city  city 
 at  plane  city 
 fuel  plane  fuel level 
 capacity  plane  fuel cap 
 refuel rate  plane  rate 
 assign  duration        fuel cap  fuel level   rate  
 write time fuel  plane  t  
 write time  plane  t  
 read time fuel  plane  t  
 assign  start  eval  max  t   t   t    
 assign  end  eval     start  duration   
 read time  plane  t  
 assign  new value  eval  max  t   end    
  delete list
  fuel  plane  fuel level 
 write time fuel  plane  t  
 read time fuel  plane  t  
 read time  plane  t   
  add list
  fuel  plane  fuel cap 
 write time fuel  plane  end 
 read time fuel  plane  end 
 read time  plane  new value   
figure     sample shop  operator produced mtp 
    writing domains include optimization
previous planning competitions  planning benchmarks compared speed
planners length output plans  domain designers concentrated trying
find reasonably short plan quickly possible  contrast  problems
years competition included linear objective function needed optimized 
best plan longer one minimizes number steps  instead
one minimized objective function value  tried three approaches searching
optimal plans 
   structure shop  methods way take shop  more or less directly
toward plan minimizes objective function 
   write methods  operators  axioms generate plans quickly  use sort by
feature tell shop  sort alternatives try promising ones first 
   assign costs operators  use branch and bound search find best
plan within execution time limit 
   

fishop   htn planning system

first approach works well easy tell alternative best
node search space  example  know problem instances
objective minimize total fuel used  perfect heuristic zenotravel
domain always use fly action instead zoom action  however  approach
doesnt work well isnt immediately obvious alternative best  example 
objective minimize total time  naive approach would always use
zoom action rather fly action  since zoom action faster  however 
zoom action always best choice  requires fuel thus cause
delays refueling 
second approach extension first approach  consider example
zenotravel domain objective minimize total fuel used  addition
making planes fly instead zoom  using closer plane transport person
reduces total fuel used  set preference using sort by feature shop  
precondition method transporting person sort available planes
according fuel use order pick person  greedy approach 
decision point sort alternatives cost  go alternative
lowest objective function value  thus  approach guaranteed find
optimal solution  however  combined suitable heuristics  approach results
near optimal plans  competition used technique extensively  produced
satisfactory plans even largest problems 
third approach makes use branch and bound optimization  explained section
       main idea quickly define methods let find plan may
poor quality let shop  perform branch and bound search plan space
find least cost plan best plan find within execution time limit 
third approach  challenge setting cost operator 
example  objective function requires minimizing total time  order take
concurrency account  cost action always equal duration 
example  suppose latest event current partial plan plane arrive
airport time t  two passengers need board plane  need
add two boarding actions plan  recall zenotravel domain  boarding
actions take amount time  tb   performed concurrently  however 
shop  needs add actions plan one time  first boarding action
increase total time tb   cost tb   however  second boarding action
increase total time plan  cost    now  suppose add refuel action
plan  action done concurrently boarding actions  cost
max    tr tb    tr time needed refuel 
possible combine two approaches  however  experience  using optimization  the third approach  provide much benefit domain
descriptions already included two approaches  situations  shop 
would frequently find optimal nearly optimal plan even without optimization 
meant additional amount time needed branch and bound optimization would
produce little benefit  branch and bound optimization would perhaps useful
planning domains cost plan something sum costs
operators  however  domains occur planning competition 
   

finau  au  ilghami  kuter  murdock  wu    yaman

international planning competition  use optimization approach
official competition trial  competition domains  preliminary
testing shop  optimization time limits  shop  unable find solutions
within amount time willing let run  except smallest
problems  one way overcome difficulty would use time limits 
preliminary tests  never provided significant improvements cost across entire
problem set  one reason lack improvement spent great deal
effort crafting methods used competition  think third approach would
useful cases immediately clear implement first two
approaches  one want spend much time devising sophisticated domain
description 

   competition results
fourteen planning systems competed      international planning competition 
shop  received distinguished performance award  one top four awards 
shop   along tlplan talplanner  one three planners solved
problems hand tailored fully automated tracks  shop  able
solve problems strips  numeric  hardnumeric  simpletime  time  complex
domains  shop  solved problems planner competition 
solved         problems      success ratio 
two hand tailorable planners  tlplan solved     problems  nearly many
shop   since talplanner didnt numeric domains  solved     problems 
still several hundred problems fully automated planners solved 
general  shop  tended slower talplanner tlplanner  although
one domain  satellite hardnumeric  shop  consistently fastest 
speeds three hand tailorable planners generally appeared polynomially
related other  probably planners domain knowledge enabled
find solutions without much backtracking  three hand tailorable planners
generally much faster fully automated planners 
none three hand tailorable planners dominated two terms plan
quality  them  situations solutions significantly better
significantly worse two 

   related work
following subsections discuss htn planning  ordered task decomposition 
hand tailorable planners participated competition 
    htn planning
htn planning first developed    years ago  sacerdoti        tate        
historically  htn planning researchers focused practical applications 
examples include production line scheduling  wilkins         crisis management logistics  currie   tate        tate  drabble    kirby        biundo   schattenberg        
planning scheduling spacecraft  aarup  arentoft  parrod  stader    stokes       
   

fishop   htn planning system

estlin  chien    wang         equipment configuration  agosta         manufacturability
analysis  hebbar  smith  minis    nau        smith  hebbar  nau    minis         evacuation planning  munoz avila  aha  nau  weber  breslow    yaman         game
bridge  smith  nau    throop      a      b  
development formal semantics htn planning  erol  nau    hendler       
erol  hendler    nau        shown strictly expressive classical
ai planning  problems expressed htn planning problems
classical planning problems   even one places restrictions htn planning
restrict expressive power classical planning  generally much easier
translate classical planning problems htn planning problems vice versa  lotem 
nau    hendler        
    ordered task decomposition
ordered task decomposition  nau  smith    erol        special case htn planning
planning algorithm always builds plans forward initial state world 
words  ordered task decomposition planner plans tasks order
tasks later performed  first applications ordered task decomposition
tailor made specific application domains  best known example code
declarer play helped bridge baron win      world championship computer
bridge  smith et al       b  
shop  based shop  nau et al          previous domain independent orderedtask decomposition planner requires subtasks method  initial
set tasks planning problem  totally ordered rather partially ordered 
thus shop  subtasks different tasks cannot interleaved  shop  extends shop
allowing subtasks method partially ordered  experiments shown
allow shop  create plans efficiently shop  using domain descriptions
simpler needed shop  nau et al          shop shop 
available open source software hhttp   www cs umd edu projects shopi 
    tlplan talplanner
shop   tlplan  bacchus   kabanza        talplanner  doherty   kvarnstrom        competed hand tailored track aips      planning competition 
tlplan talplanner similar many respects  forward chaining
search apply planning operators current state generate successors  thus  shop   know current state world every step
planning process  control search  planners use control rules written
declaratively temporal logic  rules provide domain specific knowledge tell
planner states bad states  planner backtrack try
   specifically  htn planning turing complete  even undecidable problems expressed
htn planning problems  remains turing complete even restrict tasks logical atoms
purely propositional  i e   arguments all   contrast  classical planning
represents planning problems solutions regular sets  planners tlplan  bacchus
  kabanza        talplanner  doherty   kvarnstrom        overcome limitation classical
planning extending formalism include function symbols 

   

finau  au  ilghami  kuter  murdock  wu    yaman

paths search space  one difference tlplan talplanner tlplan
uses linear modal tense logic  talplanner use tal  narrative based linear temporal logic used reasoning action change incompletely specified dynamic
environments 
main difference planners shop  kind control
knowledge use  tlplan talplanner use temporal formulas tell
part search space avoided  whereas shop  uses htn methods tell
parts search space explored  shop s search space consists
nodes reachable using htn methods  whereas tlplan talplanner
explore part search space avoids bad states successors 
hard say type control knowledge effective  bacchus kabanza
       argue two types useful different situations combining
useful topic future research 

   summary conclusions
primary difference shop  htn planners shop  plans
tasks order executed  thus knows current state
step planning process  reduces complexity reasoning removing
great deal uncertainty world  made easy us incorporate substantial expressive power shop   addition usual htn methods
operators  shop s domain descriptions may include axioms  mixed symbolic numeric
conditions  external function calls  planning procedure turing complete 
sound complete large class planning problems  nau et al         
htn planning systems  shop  plans decomposing tasks subtasks 
key idea using htn planner design set methods encode something
akin standard operating procedures capture multi step techniques refining
task  kinds domain characteristics much natural express htn
formalism action based formalism  see lotem et al         description
issued involved 
example  consider um translog   domain  wrote use problem
domain aips      planning competition  wu   nau         um translog  
straightforward generalization um translog domain  andrews  kettler  erol   
hendler         generalizations include numeric information distances  fuel
usage  forth  relatively straightforward formulate um translog  
htn planning domain  however  much difficult figure formulate
um translog   pddl domain use competitors planning competition 
task took several months accomplish 
htn planning systems  shop s development originally motivated planning competition instead try solve practical planning
problems  example  jshop  a java implementation shop s predecessor shop 
generative planning component hicap system planning evacuation operations  munoz avila et al          currently incorporating shop  hicap
replacement jshop  pleased shop s capabilities gave
ability excel international planning competition 
   

fishop   htn planning system

acknowledgments
work supported part following grants  contracts  awards  air force
research laboratory f                 army research laboratory daal    k      naval
research laboratory n        g     university maryland general research
board  opinions expressed paper authors necessarily
reflect opinions funders 
wish thank anonymous reviewers  whose comments helped us make
significant improvements paper 

appendix a  shop  domain description zenotravel domain
 numeric version 
aips      planning competition  four different versions zenotravel
domain  strips version  numeric version  simple time version  time
version  developed shop  domain descriptions four versions 
follows domain description numeric version zenotravel domain  operators domain description translated original pddl
coding using rough approximation mtp process figure    
 defdomain zenotravel
 
     same  x  x     
     different  x  y    not  same  x  y    
    possible person in  city 
  person  p   at  p  city   goal  p  city  
 different  city   city   
  operator    cost  end 
  maxtime  max 
 assign  newmax  eval  if     max  end   end  max    
  maxtime  max  
  maxtime  newmax  
    newmax  max  
  method  board  p  a  c 
  write time  a  start  
   board  p  a  c  start   
  immediate   cost  call    start      
  operator   board  p  a  c  start  duration 
  person  p   aircraft  a   city  c 
 at  a  c   at  p  c   onboard  a  num 
 read time  a  pmax   assign  new num     num    
 assign  newpmax  max  pmax     start  duration     l     
  onboard  a  num   read time  a  pmax   at  p  c   dest  a  c  
  onboard  a  new num   read time  a  newpmax   in  p  a  
   

finau  au  ilghami  kuter  murdock  wu    yaman

      
  method  debark  p  a  c 
  write time  a  start  
   debark  p  a  c  start   
  immediate   cost  call    start      
  operator   debark  p  a  c  start  duration 
  person  p   aircraft  a   city  c 
 at  a  c   in  p  a   onboard  a  num 
 read time  a  pmax   assign  new num     num    
 assign  newpmax  max  pmax     start  duration     l     
  onboard  a  num   read time  a  pmax   in  p  a   dest  a  c  
  onboard  a  new num   read time  a  newpmax   at  p  c  
      
  method  refuel  a  c 
  write time  a  start   read time  a  pmax 
 capacity  a  cap   fuel  a  fuel 
 eval     cap  fuel  
 assign  duration   
 assign  end     start  duration     l   
 assign  newpmax  max  pmax  end   
    ra   read time  a  pmax  
  read time  a  newpmax   
  immediate  refuel  a  c  start  duration 
  immediate   cost  end   
  operator   refuel  a  c  start  duration 
  aircraft  a   city  c   at  a  c 
 fuel  a  fuel   capacity  a  cap  
  fuel  a  fuel  
  fuel  a  cap  
      
  method  zoom  a  c   c  
  write time  a  astart   read time  a  pmax 
 distance  c   c   dist 
 fuel  a  fuel   fast burn  a  burn 
 eval      fuel     dist  burn   
 assign  duration   
 assign  start  max  pmax  astart  
 assign  end     start  duration     l    
    ra   write time  a  astart   read time  a  pmax  
  read time  a     write time  a  end   
  immediate  zoom  a  c   c   start  duration 
  immediate   cost  end   
  operator   zoom  a  c   c   start  duration 
  aircraft  a   city  c    city  c    onboard  a  num 
 zoom limit  a  limit   eval      num  limit  
   

fishop   htn planning system

 at  a  c    distance  c   c   dist   fast burn  a  burn 
 total fuel used  total fuel 
 assign  new total     total fuel     dist  burn   
 fuel  a  fuel 
 assign  new fuel     fuel     dist  burn    
  at  a  c    total fuel used  total fuel   fuel  a  fuel   
  at  a  c    total fuel used  new total   fuel  a  new fuel  
      
  method  fly  a  c   c  
  write time  a  astart   read time  a  pmax 
 distance  c   c   dist 
 fuel  a  fuel   slow burn  a  burn 
 eval      fuel     dist  burn   
 assign  duration   
 assign  start  max  pmax  astart  
 assign  end     start  duration     l    
    ra   write time  a  astart   read time  a  pmax  
  read time  a     write time  a  end   
  immediate  fly  a  c   c   start  duration 
  immediate   cost  end   
  operator   fly  a  c   c   start  duration 
  aircraft  a   city  c    city  c  
 at  a  c    distance  c   c   dist   slow burn  a  burn 
 total fuel used  total fuel 
 assign  new total     total fuel     dist  burn   
 fuel  a  fuel 
 assign  new fuel     fuel     dist  burn    
  at  a  c   total fuel used  total fuel  fuel  a  fuel  
  at  a  c   total fuel used  new total  fuel  a  new fuel  
      
  operator    preprocessing  problem name 
  totaltime coeff  tc   fuelused coeff  fc 
 eval  setf  tc   tc  
 eval  setf  fc   fc   
  
  
  
  operator    assert  g  
  
  
 g
  
  operator    ra  d  a  
  
 d
 a
  
   

finau  au  ilghami  kuter  murdock  wu    yaman

    
      main methods
     
  method  transport person  p  c 
case    at  p  c  
   
  method  transport person  p  c  
case    sort by  num   
  at  p  c  
 at  a  c  
 aircraft  a 
 onboard  a  num   
    assert   dest  a  c    
  immediate board  p  a  c  
   assert   dest  a  c    
  immediate upper move aircraft no style  a  c  
  immediate debark  p  a  c    
  method  transport person  p  c  
case    sort by  cost   
  at  p  c  
 aircraft  a 
 at  a  c  
 different  c   c  
 forall   c    dest  a  c     same  c  c    
 imply   different  c   c   
 not  possible person in  c    
 travel cost info  a  c   c   cost  style   
    assert   dest  a  c    
  immediate upper move aircraft  a  c   style 
  immediate board  p  a  c  
   assert   dest  a  c    
  immediate upper move aircraft no style  a  c  
  immediate debark  p  a  c    
  method  upper move aircraft  a  c  style 
case    at  a  c  
  
case    at  a  somecity  
  move aircraft  a  somecity  c  style   
  method  upper move aircraft no style  a  c 
case    at  a  c  
  
case    sort by  cost   
  at  a  somecity 
 travel cost info  a  somecity  c  cost  style   
  move aircraft  a  somecity  c  style   
   

fishop   htn planning system

     travel cost info  a  from  to  cost slow 
case 
  capacity  a  cap   distance  from  to  dist 
 slow burn  a  burn   eval     cap     dist  burn   
 assign  cost most positive fixnum  
case 
  distance  from  to  dist   fuel  a  fuel 
 slow burn  a  burn 
 eval      fuel     dist  burn   
 assign  cost  float   
    tc 
    fc 
    dist  burn   
     
case 
  capacity  a  cap  distance  from  to  dist 
 slow burn  a  burn 
 assign  cost  float   
       tc    
    fc 
    dist  burn   
      
     travel cost info  a  from  to  cost fast 
case 
  capacity  a  cap   distance  from  to  dist 
 fast burn  a  burn   eval     cap     dist  burn   
 assign  cost most positive fixnum  
case 
  distance  from  to  dist   fuel  a  fuel 
 zoom limit  a  limit   onboard  a  num   eval     num  limit  
 fast burn  a  burn 
 eval      fuel     dist  burn   
 assign  cost  float   
    tc 
    fc 
    dist  burn   
     
case 
  capacity  a  cap  distance  from  to  dist 
 fast burn  a  burn 
 zoom limit  a  limit   onboard  a  num   eval     num  limit  
 assign  cost  float   
       tc    
    fc 
    dist  burn   
      

   

finau  au  ilghami  kuter  murdock  wu    yaman

  method  move aircraft  a  c   c  slow 
  fuel  a  fuel   distance  c   c   dist 
 slow burn  a  burn 
 eval     fuel     dist  burn    
  fly  a  c   c   
  
  refuel  a  c  
  immediate fly  a  c   c    
  method  move aircraft  a  c   c  fast 
  fuel  a  fuel   distance  c   c   dist 
 fast burn  a  burn 
 eval     fuel     dist  burn    
  zoom  a  c   c   
  
  refuel  a  c  
  immediate zoom  a  c   c    
  method  transport aircraft  a  c 
  not  no use  a   
    assert   no use  a   
  immediate upper move aircraft no style  a  c 
  immediate   ra   no use  a        

references
aarup  m   arentoft  m  m   parrod  y   stader  j     stokes  i          optimum aiv 
knowledge based planning scheduling system spacecraft aiv  intelligent
scheduling  pp          morgan kaufmann 
agosta  j  m          formulation implementation equipment configuration
problem sipe   generative planner  proc  aaai    spring symposium
integrated planning applications  pp      
andrews  s   kettler  b   erol  k     hendler  j          um translog  planning domain
development benchmarking planning systems  tech  rep  cs tr      
dept  computer science  university maryland 
bacchus  f     kabanza  f          using temporal logics express search control knowledge planning  artificial intelligence      
biundo  s     schattenberg  b          abstract crisis concrete relief  preliminary
report flexible integration nonlinear hierarchical planning  proceedings
european conference planning 
boddy  m     dean  t          solving time dependent planning problems  sridharan 
n  s   ed    proceedings eleventh international joint conference artificial
intelligence  pp          detroit  mi  usa  morgan kaufmann 
currie  k     tate  a          o plan  open planning architecture  artificial intelligence               
   

fishop   htn planning system

doherty  p     kvarnstrom  j          talplanner  temporal logic based planner  ai
magazine                
erol  k   hendler  j     nau  d          complexity results hierarchical task network
planning  annals mathematics artificial intelligence           
erol  k   nau  d     hendler  j          htn planning  complexity expressivity 
aaai    
estlin  t  a   chien  s  a     wang  x          argument hybrid htn operatorbased approach planning  proc  fourth european conference planning  ecp     pp         
gupta  n     nau  d  s          complexity blocks world planning  artificial
intelligence                   
hebbar  k   smith  s   minis  i     nau  d          plan based evaluation designs
microwave modules  proc  asme design technical conference 
lotem  a   nau  d     hendler  j          using planning graphs solving htn problems 
aaai     pp         
munoz avila  h   aha  d   nau  d   weber  r   breslow  l     yaman  f          sin 
integrating case based reasoning task decomposition  ijcai      
nau  d   cao  y     munoz avila  h          shop  simple hierarchical ordered planner 
ijcai     pp         
nau  d   munoz avila  h   cao  y   lotem  a     mitchell  s          total order planning
partially ordered subtasks  ijcai       seattle 
nau  d  s   smith  s  j  j     erol  k          control strategies htn planning  theory
versus practice  aaai    iaai    proceedings  pp           
sacerdoti  e  d          nonlinear nature plans  allen  j   hendler  j     tate  a 
 eds    readings planning  pp          morgan kaufmann  originally appeared
proc  ijcai     pp          
slaney  j     thiebaux  s          blocks world revisited  artificial intelligence            
       
smith  s  j   hebbar  k   nau  d     minis  i          integrating electrical mechanical
design process planning  mantyla  m   finger  s     tomiyama  t   eds   
knowledge intensive cad  vol     pp         
smith  s  j   nau  d  s     throop  t       a   success spades  using ai planning
techniques win world championship computer bridge  aaai    iaai    
pp           
smith  s  j  j   nau  d  s     throop  t       b   computer bridge  big win ai
planning  ai magazine                
tate  a          generating project networks  ijcai     pp         
tate  a   drabble  b     kirby  r          o plan   architecture command  planning control  morgan kaufmann 
   

finau  au  ilghami  kuter  murdock  wu    yaman

wilkins  d  e          practical planning  extending classical ai planning paradigm 
morgan kaufmann  san mateo  ca 
wu  d     nau  d          um translog    planning domain designed aips      
tech  rep  cs tr       umiacs tr          university maryland 

   


