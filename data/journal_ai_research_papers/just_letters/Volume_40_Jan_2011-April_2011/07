journal artificial intelligence research                 

submitted       published     

on line planning scheduling 
application controlling modular printers
wheeler ruml

ruml cs unh edu

department computer science
university new hampshire
   academic way
durham  nh       usa

minh binh
rong zhou
markus p  j  fromherz

minhdo parc com
rzhou parc com
fromherz parc com

palo alto research center
     coyote hill road
palo alto  ca       usa

abstract
present case study artificial intelligence techniques applied control
production printing equipment  many real world applications  complex domain requires high speed autonomous decision making robust continual operation 
knowledge  work represents first successful industrial application embedded
domain independent temporal planning  system handles execution failures multiobjective preferences  heart on line algorithm combines techniques
state space planning partial order scheduling  suggest general architecture may prove useful applications intelligent systems operate continual 
on line settings  system used drive several commercial prototypes
enabled new product architecture industrial partner  compared
state of the art off line planners  system hundreds times faster often finds
better plans  experience demonstrates domain independent ai planning based
heuristic search flexibly handle time  resources  replanning  multiple objectives
high speed practical application without requiring hand coded control knowledge 

   introduction
sustaining goal artificial intelligence develop techniques enabling autonomous
agents robustly achieve multiple interacting goals dynamic environment  goal
intellectually attractive  happens align perfectly needs
many commercial manufacturing plants  paper  focus one particular manufacturing setting  high speed digital production printing systems  large machines use
xerography print requested images individual sheets paper  unlike traditional
continuous feed offset presses  digital printers treat sheet differently  feeding different types sizes media  printing different kinds images  performing different
preparatory finishing operations  often  single integrated machine transform
blank sheets complete document  bound book folded bill sealed
envelope  sometimes even possible process different kinds jobs simultaneously
c
    
ai access foundation  rights reserved 

firuml  do  zhou    fromherz

equipment  printer controller must plan quickly reliably  otherwise expensive human intervention required  designing high performance yet cost effective
controller machines made difficult current trend towards increased
modularity  customers system unique includes components
appropriate needs  working closely xerox
corporation explore architectures printing systems composed literally hundreds modules  possibly including multiple specialized printing modules  working
together high speed 
paper  demonstrate techniques artificial intelligence used
control machines  requests print jobs become goals system achieve 
various actuators mechanisms machine become actions resources used
achieving goals  sensors provide feedback action execution state
system  provide high productivity  and thus high return investment
equipment owner   planning control techniques must fast produce optimal
near optimal plans  reduce need operator oversight allow use
complex mechanisms  system must autonomous autonomic possible 
operators make mistakes even highly engineered system modules fail 
system must cope execution failure unexpected events 
system must work legacy modules order commercially viable  architecture
must tolerate components direct control 
meet requirements  present novel architecture on line planning  execution  replanning synthesizes techniques state space planning  ghallab  nau 
  traverso        partial order scheduling  smith   cheng         develop new
heuristic evaluation functions temporal planning incorporate effects
resource constraints  although domain independent ai planning often regarded
expensive use soft real time setting  system achieves good performance without
hand coded control rules  despite additional requirements reasoning temporal actions resources  avoiding domain dependent search control knowledge 
becomes possible use planner run different printing systems full productivity  success system enabled new modular product architecture
span multiple markets  much previous work brought constraint based scheduling
daily use print shops offices world wide  fromherz  saraswat    bobrow       
fromherz  bobrow    de kleer         work bring domain independent temporal
planning continual widespread use everyday people  approach practical
efficient  showcases flexibility inherent viewing planning heuristic search 
discussing application context detail  present overview
system  followed detailed discussion major aspects  nominal planning  exception handling  multiple objectives  go  present empirical measurements
demonstrating large printing systems controlled system meeting
real time requirements  particular  section       describes comparison stateof the art generic off line planners demonstrates planner finds plans hundreds
times faster often higher quality  on line appendix provides videos
planner controlling hardware prototype  integrated approach on line
planning scheduling allows us achieve high throughput even complex systems 
   

fion line planning scheduling modular printers

figure    prototype modular printer built parc  system composed approximately     individually controlled modules  including four print engines 

conclude paper summary general lessons derived building
application 

   application context
analogy parallel systems raid storage  approach modular printing
systems called rack mounted printing  rmp   rmp system seen network
transports linking multiple printing engines  transports known media
path  figure   shows four engine prototype printer built palo alto research center
 parc      independently controlled modules  figure   provides schematic
side view  showing many possible paper paths linking paper feeders possible
output trays   video   on line appendix  nominal simulation  presents animation
figure     multiple feeders allow blank sheets enter printer high rate
multiple finishers allow several print jobs run simultaneously  redundant paths
machine enables graceful degradation performance modules fail 
building system relatively small modules  enable easy reconfiguration
   

firuml  do  zhou    fromherz

figure    schematic side view modular printer indicating feeders  paper path 
output trays 

components add new modules functionality  achieving benefits  however  poses
considerable control challenge 
modular printing domain reminiscent mass customization  massproduced products closely tailored personalized individual customers needs 
similar package routing logistics problems  control perspective 
involves planning scheduling series sheet requests arrive asynchronously
time front end print job submission rendering engine  system runs
high speed  several sheet requests arriving per second  possibly many hours 
sheet request completely describes attributes desired final product  may
several different sequences actions used print given sheet  example 
figure    blank sheet may fed either two feeders  routed
one four print engines  or combination two four engines
case duplex printing  either finisher  unless sheet part on going
print job  
on line planning problem complicated fact many sheets in flight
simultaneously plan new sheet must interfere sheets 
actions require use physical printer components  planning later sheets must take
account resource commitments plans already released production 
modern printers highly configurable  execute large variety jobs potentially
simultaneously  large variety constraints feasible plans  hard coded
locally reactive plans suffice  fromherz et al          fact  printer engineers
xerox delight uncovering situations products competing manufacturers 
use model based planning  attempt execute infeasible plans 
   

fiprinter
model

translator

on line planning scheduling modular printers

domain
description

planner

failures

translator

problem
description
sheet
description

constraints

stn

plans
time info
itineraries

goals

plan manager

rejections 
failures 
updates

machine
controller

figure    system architecture  planning system indicated dashed box 

planning system must decide print requested sheets quickly possible
thus must determine plan schedule sheet end time
plan finishes last minimized  words  planner attempts minimize
makespan combined global plan sheets  essence optimizing systems
overall throughput  typically many feasible plans given sheet request 
problem quickly find one minimizes   optimal plan sheet depends
sheet request  resource commitments present previouslyplanned sheets  legal series actions always easily scheduled pushing
far future  entire printer become completely idle  course
desirable  on line task set sheets grows time passes
plan execution  i e   printing  interleaves plan creation  fact 
real world wall clock end time want minimize production
sheet cannot start planned  speed planner affects value
plan  however  system often runs full capacity  thus planner usually need
plan rate sheets completed  may several per second 
challenging  domain forgiving  feasible schedules found quickly 
sub optimal plans acceptable  plan execution relatively reliable 
printer controller works on line real time continual planning environment
three on going processes     on line arrival new goals     planning known goals 
   execution previously synthesized plans  figure   shows inputs outputs
planning system  domain model sheet requests entering left
communication low level control system right  plan manager
responsible tracking status goal invoking planner necessary 
planning execution occur sequentially given sheet  processes
usually interleaved different sheets  figure   sketches different steps
sheet plan life cycle managed plan manager  specifically  upon receiving  sheets
put unplanned first in first out queue  sheets       sheet planner picks
one sheet time unplanned queue tries find route plan
sheet  sheet     plan found put queue plans havent yet
sent printer controller  sheets       another plan manager process regularly
checks planned queue decide earliest starting time plan queue
   

firuml  do  zhou    fromherz

sheet  
sheet  
sheet  

sheet  

sheet  

start time

sheet  

sheet  

sheet
ddescriptions
ti

yet
planned


planned

planned 
unsent

sent
printer

figure    stages life sheet planning system 
close enough current wall clock time send plans printer controller
execution  sheets       note figure  time advances downward plans
starting earlier higher figure  sheets         finish order  sheets    
belongs different job scheduled run concurrently 
application  additional negotiation step plan issued
planning system plan committed  first  plan step proposed
machine controller modules involved  individual hardware modules
steps accept proposed actions  plan committed  discuss below 
commitment means modules become responsible notifying controller fail
complete action realize able perform planned action
future  plan confirmed  planner cannot modify it  thus
benefit releasing plans machine controller start times approach 
modules confirm  machine controller notifies planning system
proposed plan rejected  system must produce new plan  negotiation
process one reason must find complete plan starting execution 
module limited number discrete actions perform  transforming
sheet known deterministic way  many actions  planner allowed
control duration within range spanning three orders magnitude  milliseconds
seconds   example  planner may choose transport sheet faster slower
module order avoid collisions  actions may split sheet two pieces
join multiple sheets different paths printer together  means single
printed sheet must created single blank sheet size  thereby conflating
sheets material allowing plans linear sequence actions  domain 
adjacent actions must meet time  sheets cannot left lingering inside printer
action completed must immediately begin transported next location 
sheets grouped print jobs  job ordered set sheets  must
eventually arrive destination order submitted 
multiple jobs may production simultaneously  although sheets different
   

fion line planning scheduling modular printers

jobs allowed interleave single destination  number concurrent jobs
limited number destinations  i e   finisher trays  
currently  xerox uses constraint based scheduler control high end midrange printers  fromherz et al          scheduler enumerates possible plans
machine starts stores database  printing requests arrive on line 
scheduler picks first feasible plan database uses temporal constraint
processing schedule actions  decoupling planning scheduling insufficient
complex machines two reasons  first  number possible plans large
generate ahead time  indeed becomes infinite loops present  printer
shown figure    second  precompiled plans poor choices given existing
sheets system  example  sheets fed different feeders depending
previous sheets fed  large are  long dwell
print engines  which function sheet thickness material   high
performance  must integrate planning scheduling on line fashion 
occasionally module break down  failing perform committed action  modules
take off line intentionally  example perform internal re calibration
diagnosis  modules may added subtracted system information
passed machine controller planning system right side figure   
vision rmp system provide highest possible level productivity
safe  including running long periods degraded capabilities   meeting
mandate context highly modular systems means precomputing limited set
canonical plans limiting on line computation scheduling desirable 
large system     modules  infeasibly many possible degraded configurations
consider  depending capabilities machines  number possible sheet
requests may make plan precomputation infeasible  furthermore  even best precomputed plan given sheet may suboptimal given current resource commitments
printing machine 
summarize  domain finite state  fully observable  specifies classical goals
achievement  however  planning on line additional goals arriving asynchronously 
actions real valued durations use resources  plans new goals must respect
resource allocations previous plans  execution failures domain model changes
occur on line  rare 

   system overview
complete printing system encompasses many components  including print job submission 
print job management planning  sheet management planning  image rendering
distribution  low level module control  media handling hardware  exception handling 
paper focuses planning issues sheet level  including exception handling 
discussing one issue great detail  section provides overview
topics involve sheet planning directly  including hardware control exception
handling 
   example  safety operator  system continue use module whose access
cover opened  even hypothetically possible repair one portion module
another use 

   

firuml  do  zhou    fromherz

time step
 

 

 

 

 

 

feed    
print

 

loop
finish

 

 

 

 

 
 

 
 

 

 

 

 

 

 

 
 

 

 

figure    two different schedules printing duplex sheet     simplex sheet     
launching sheets order improves throughput 

figure   shows basic architecture planning system communicates
machine controller  overall objective minimize makespan
combined global plan sheets  essence optimizing systems throughput 
approximate planning one sheet time  objective sheet
finish quickly possible respecting ordering constraints may
sheets  sheets optimally planned individual basis  order arrival  without
reconsidering plans selected previous sheets  figure  plan manager calls
planner sheet records resulting plan  mitigate restrictiveness
greedy scheme  represent action times using temporal constraints instead absolute
times  constraints stored simple temporal network  dechter  meiri    pearl 
       marked stn figure  maintaining temporal flexibility long possible 
shift plans older sheets later time make room starting new sheet earlier
improves overall machine throughput  may sound rare case 
quite common  figure   illustrates how  simplex  single sided  cover sheet followed
duplex  double sided  sheet  faster overall launch second sheet first 
although basic architecture specifically adapted on line setting  planner uses domain dependent search control knowledge  furthermore  mix goaldecomposable planning cross goal resource constraints quite common  believe
framework useful ai system needs interleave real time decision
making  planning  execution  robot operations 
    planning
implemented temporal planner using architecture adapted
on line domain  see below  large number potential plans given
sheet close interaction plans schedules means much
better process scheduling constraints planning process allow focus
planning actions executed soon  planner uses state space regression 
temporal information stored stn  stn records feasible interval
time point plan  time points restricted occur specific single times
posted constraints demand it  planner maintains partial orders
different actions plans different sheets stn conducting
   

fion line planning scheduling modular printers

on lineplanner
   plan next sheet
   unsent plan starts soon 
  
foreach plan  oldest imminent one
  
clamp time points earliest possible times
  
release plan machine controller
plansheet
   search queue  final state 
   loop 
  
dequeue promising node
  
initial state  return
    foreach applicable action
   
apply action
   
add temporal constraints
   
foreach potential resource conflict
   
generate orderings conflicting actions
  
enqueue feasible child nodes
figure    outline hybrid planner
backward state space search  seen hybrid state space search
partial order planning  sketch planner given figure    outer loop
corresponds plan manager figure   
planning new sheet  outer loop checks queue planned sheets see
begin soon  step     imperative recheck queue periodic
basis  soon defined constant amount current time
assume time plan next sheet smaller constant 
value constant depends domain specifics communication delay
module preparation time currently selected manually  assumption violated 
interrupt planning next sheet start later  plans released
executed  resource contention decrease  time plan new sheet
decrease well  important new temporal constraints added outer loop
planning individual sheets  propagation affect feasible sheet end
times thus could invalidate previously computed search node evaluations planning
underway 
maintaining partial orderings actions seems necessary mitigate
one sheet at a time greedy strategy  planning individual sheets need necessarily
take form state space regression  considered forward search strategy 
employed many modern planners  hoffmann   nebel        lama
 richter  helmert    westphal         initial investigation preliminary empirical comparisons showed progression planner easier implement easier extend
handle additional domain complexities  performance regression planner  using
heuristic  significantly better many problems domain  seems
   

firuml  do  zhou    fromherz

due mainly temporal constraint enforcing given sheet end
end time previous sheets batch  constraint interacts well
searching backward goal  immediately constraining end time plan 
together constraint actions must abut time  many possible orderings
resolving resource contention immediately ruled out  example  current sheet
cannot transported destination previous sheet batch 
addition  orderings may immediately push end time plan even later 
informing node evaluation function 
planner searches forward direction benefits slightly avoiding logical
states unreachable initial state  however  without similar temporal
constraint first action plan  resource allocation orderings pruned
branching due resource contention increases direct proportion number
plans previous sheets maintained plan manager  furthermore  end time
plan rarely changes far planning processes  making heuristic less
useful  short  first sheet  performance forward backward planners
similar  number plans managed plan manager increases  backward
planner seems perform better 
due details machine controller software  planner must release plans
machine controller order sheet requests submitted 
means sheets submitted imminent sheet must released along  step
    stage allowable intervals sheets time points forcibly reduced
specific absolute times  step     sensibly enough  ask point occur exactly
earliest possible time  temporal network uses complete algorithm
maintain allowable window time point  a variation cervoni  cesta    oddi 
       guaranteed propagation caused temporal clamping process
introduce inconsistencies  clamping happens plans issued  thus
face on line dispatchability problem muscettola  morris  tsamardinos
       
current on line setting  even though plan multiple sheets belonging
different jobs  build plans single sheet time  even many submitted
sheets waiting planned  strategy reasonable given sheets arrived sequence
and  arrival last sheet  know many sheets job
planner receive individual sheet specifications  waiting sheets
known impractical many production jobs  billing payroll  involve jobs
many thousands sheets run multiple days 
    control
shown figure    system consists two feeders left  two finishing trays
right  four print engines one four quadrants printer 
three high speed sheet highways connect feeders finisher trays 
sheets traveling top bottom highways routed print engines
on ramps off ramps  increased modularity  highways
on  off ramps made two types modules  straight through modules
three way modules  module processor  texas instruments f    
   

fion line planning scheduling modular printers

figure    control system architecture 

dsp  modules run distributed algorithms state estimation control
communicate via five controller area network  can  buses  plus
dedicated data logging bus debugging purposes  modules quadrant
printer reside bus  except four print engines 
separate bus  sheets moved roller actuators  called nips  driven
independently controlled stepper motors  sensory feedback  nip equipped
edge detection sensor sides nip  three way module  three
solenoids drive flipper actuators direct sheet along different paths 
figure   shows control system architecture  implements hierarchical approach distributed plan execution sheet controller manages module
controllers currently  soon be  contact sheet  thus sheet
controller group membership dynamic life cycle sheet  starting
feeder way finisher tray  soon new sheet sent machine controller  corresponding sheet controller created resides centralized processor 
even though module controllers manages reside locally modules themselves 
note module controller may processing commands multiple sheet controllers 
case module controller middle figure    still contact
first sheet  soon contact second sheet 
sheet span multiple modules printer  different nips acting
sheet must tightly synchronized order avoid damaging jamming sheet 
however  achieving exact synchronization network uncertain communication
delays stringent bandwidth challenging  moreover  one must consider limited
computation power module design synchronization scheme  example 
controller sample time set   milliseconds  thus  anything takes longer  
milliseconds compute within sampling period work  eliminate effects
uncertain network delays  control system uses delay equalizer  buffers sensory
feedback messages apply time  make sure sensor information used
time members group module controllers sheet  save
bandwidth needed synchronization  controller uses internal models  or estimators 
keep track states controllers network order limit need
   

firuml  do  zhou    fromherz

communications  crawford  hindi  zhou    larner        hindi  crawford    fromherz 
      
limited network bandwidth fundamental impact choice control algorithm  initially  linear quadratic gaussian  lqg   franklin  powell    workman       
controller used  nice property solution constitutes linear dynamic feedback control law easily computed  however  bandwidth requirements
lqg controller  necessitates dozen way points per sheet
sent network  prompted adoption different kind controller based
proximate time optimal servo  ptos   hindi  crawford  zhou    eldershaw       
franklin et al          consumes much less bandwidth  comparison  ptos
controller reduces number intermediate way points dozen two
per sheet  since ptos based time optimal control uses either maximum acceleration deceleration reach target control state  maximizes temporal
flexibility planning actions planner use  thus improving overall
throughput printer 
    previous work
much interest last    years integration planning scheduling techniques  hsts  muscettola        ixtet  ghallab   laruelle        examples systems select order actions necessary reach goal 
specify precise execution times actions  visopt shopfloor system bartak
       uses constraint logic programming approach incorporate aspects planning
scheduling  europa system frank jonsson        uses novel representation based attributes intervals  system use domain representations
quite different mainstream pddl language  fox   long        used planning
research designed off line use  rather controlling system
continual execution 
currently great interest extending planning scheduling techniques handle complexities found real industrial applications  example  pddl
extended handle continuous quantities durative actions  additional
dimensions planning complexity besides expressivity  however  work complements
trend current planning research extend expressiveness focusing middle ground planning scheduling  domain semantics printing
complex job shop scheduling simpler many ways pddl     choice
actions perform important domain  managing resource conflicts equally
important  classical scheduling  resource constraints essential printer
modules often cannot perform multiple actions once  action selection sequencing required given sheet usually achieved using several different
sequences actions 
domain formalization lies partial order scheduling temporal pddl 
optimal actions needed fulfill given print job request may vary depending sheets machine  sequence actions predetermined
classical scheduling formulations job shop scheduling resource constrained
project scheduling expressive enough  domain clearly subsumes job shop
   

fion line planning scheduling modular printers

flow shop scheduling  precedence constraints encoded unique preconditions
effects  open shop scheduling  one choose order predetermined set
actions job  capture notion alternative sequences actions
thus limited  positive planning theories palacios geffner        allow actions real valued durations allocate resources  cannot delete
atoms  means cannot capture even simple transformations movement
fundamental domain  fact  optimal plans domain may even involve executing action multiple times  something always unnecessary
purely positive domain  however  numeric effects full durative action generality
pddl    necessary 
on line nature task unambiguous objective function 
additional trade off domain planning time execution time
absent much prior work planning scheduling  setting set sheets
revealed incrementally time  unlike classical temporal planning entire
problem instance available once  contrast much work continual planning
 desjardins  durfee  ortiz    wolverton         tight constraints domain require
produce complete plan sheet execution begin  domain
emphasizes on line decision making  received limited attention date 
objective complete known print jobs soon possible  taking long
synthesize slightly shorter plan worse quickly finding near optimal solution 
especially true rerouting in flight sheets exception handling 
although present system temporal planner  fits easily tradition
constraint based scheduling  smith   cheng        policella  cesta  oddi    smith 
       main difference actions time points resource allocations added
incrementally rather present start search process  central
process identifying temporal conflicts  posting constraints resolve them  computing
bounds guide search remains same  approach  attempt maintain
conflict free schedule rather allowing contention accumulate carefully
choosing conflicts resolve first  approach perhaps similar spirit
taken ixtet system  ghallab   laruelle        
basic approach coordinating separate state space searches via temporal constraints may well suitable on line planning domains  planning individual
print jobs managing multiple plans time  strategy similar spirit
planners partition goals subgoals later merge plans individual goals  wah
  chen        koehler   hoffmann         framework  even though print job
planned locally  plan manager along global temporal database ensures
temporal resource inconsistencies step search  would
interesting see strategy could used solve partitionable strips planning
problems effectively 

   nominal sheet planning
sheet planner builds plan sheet job using combination regression
state space planning partial order scheduling  plans adding one module action
time  starting finisher sequence actions reaches feeder  adding
   

firuml  do  zhou    fromherz

action sheets itinerary  i e   plan  causes resource allocations made
resources required execution action  given media path redundancies
rmp  planner usually faces multiple choices action add planning
step  organize search  planner uses best first a  search planning graph
heuristic  adjusted resource conflicts  estimates promising plan suffix
is  unlike traditional regression planners  maintain maximum flexibility  action times
start end action resource allocation represented
flexible time points instead absolute times  temporal constraints used represent
durations actions resolve resource contention imposing orderings among actions 
planner attempts minimize makespan combined global plan sheets 
essence optimizing systems throughput  planner uses domain dependent
search control knowledge  allowing us use planner run different printing
systems full productivity 
    domain language
used two tiered approach represent rmp domain  highest level 
use specialized language makes easier xerox engineers model printers 
language specifies printer configurations components connected
other  basic components different capabilities components grouped
hierarchical structure  model files format automatically translated
variation pddl     fed planner  automatic translation
process instantiates primitive modules converts modules capabilities
durative actions  movement sheet marking actions directly
translated printer model traditional logical preconditions effects test
modify attributes sheet  following spirit compositionality earlier work
 fromherz et al          model system automatically synthesized
models individual components 
pddl  distinguish two types input planner  planning
begins  domain description containing predicate action templates provided 
problem descriptions arrive on line  containing initial goal states  sets
literals describing starting desired configurations  action representation
similar durative actions pddl     notable difference use
explicit representation resources  actions specify exclusive use different types
resources time intervals specified relative actions start end time  executing
one action may involve allocating multiple resources various types as  unit capacity 
multi capacity  cyclic  state resources  actions specify real valued duration
bounds  is  one specify upper lower bounds let planner choose
desired duration action  critical modeling controllable speed paper
paths  useful practice  pddl allows specification duration
ranges  aware ipc benchmark general purpose planner
supports it 
summarize  core part domain file set actions  corresponds
capability component printer   tuple   hpre  eff  dur  alloci 
where 
   

fion line planning scheduling modular printers

printsimplexandinvert  sheet   side   color   image 
preconditions  location  sheet  printer  input 
blank  sheet 
sideup  sheet  side 
opposite  side   other side 
canprint markingengine   color 
effects  location  sheet  printer  output 
location  sheet  printer  input 
hasimage  sheet  side  image 
blank  sheet 
sideup  sheet   side 
sideup  sheet  other side 
duration        seconds       seconds 
set up time      second
allocations  markingengine  start           seconds
figure    simple action specification 
pre eff sets literals representing actions preconditions effects 
dur pair hlower  upperi scalars representing upper lower bounds
action duration 
alloc set triplets hres  offset  duri indicating action starting time sa
uses resource res interval  sa   offset  sa   offset   dur   constraints
different types resources are 
unit capacity  type resource non sharable thus allocations
given resource type overlap  provides good model
physical space common type resource used planner 
cyclic  cyclic resource one special type unit capacity resources
repeated durations resources unavailable
actions selected planner  example  unavailable durations may
represent routine automatic maintenance modules 
multi capacity  upper bound maximum number allocations
given resource type overlap  moreover  allocations follow
first in first out order  thus  two allocations a     sa    ea   
a     sa    ea    sa  sa  implies ea  ea   
state resource  resource labeled using one set states  allocations resource type overlap require
resource state 
simple example given figure    set up time refers required time
action committed execution beginscertain actions require extensive
preparation part module sheet arrives action really
   

firuml  do  zhou    fromherz

background 
initial 

goal 

print job id 

sheet   
location sheet     some feeder 
blank sheet    
sideup sheet    side   
location sheet     upper finisher 
hasimage sheet     side    image   
hasimage sheet     side    image   
color sheet     side    color 
color sheet     side    black   white 
 

figure    sample sheet specification 
performed  resource usage  printsimplexandinvert action figure   specifies
exclusive use markingengine     seconds start action    
seconds later  printer modules multiple independent resources actions
short allocation durations relative overall action duration work multiple
sheets simultaneously  pddl  arbitrary predicates made hold start 
end  duration action  expressivity needed domain
thus assume simple semantics similar using tgp planner smith
weld        which      delete effects happen start      add effects happen
end      preconditions deleted start      preconditions
deleted all  addition sheet dependent literals  sometimes convenient
specify actions using preconditions refer literals independent
particular goals sought  background knowledge domain supplied
separately machine specification  although could compiled action
specifications  example  possible colors engines put sheet paper
 e g   black white  color  custom color  default sides papers  e g   front  back 
specified way  represented similarly constant concept pddl 
addition static domain description  on line sheet requests modeled
initial goal state pairs describing starting desired sheet configurations 
new initial goal pair defines new object  the sheet  associated literals
planner track  specifically  problem description particular sheet   tuple
hjob  initial  goal  backgroundi  job id print job sheet belongs
initial  goal  background sets literals 
simple example sheet specification given figure    example  some feeder
virtual location sheet sources placed upper finisher one particular
finisher sheets belong print job   need routed to  terms figure   
feeder location literal added goal plan manager  maintains
table active jobs finisher assigned each  finisher assignment handled
extracting finisher selected planner plan first sheet job 
finishing requires actions plan actions never reconsidered  only
rescheduled   planner never reconsider jobs finisher assignment  even hasnt
begun production yet 
   

fion line planning scheduling modular printers

given domain description  top left figure    low level delay constant tdelay
capturing latency machine controller software  planner accepts stream
sheets arriving asynchronously time  note sheets may belong different print
jobs printed parallel  within print job  sheets need routed
finisher  among multiple finishers  finish order  stream corresponds
standard notion pddl problem instance  sheet  planner must eventually
return plan  sequence actions labeled start times  in absolute wall clock time 
transform initial state goal state  allocations made
unit capacity resource multiple actions must overlap time  state multi capacity
resources different constraints described earlier   happily  plans individual sheets
independent except interactions resources  additional constraints
planner include 
plans sheets print job id must finish destination 
plans sheets print job id must finish order
jobs submitted 
first action plan must begin sooner tdelay seconds issued
planner  with tdelay represents delays communication negotiation
printer module controller  
subsequent actions must begin times obey duration constraints specified
previous action  thus assumed previous action ends
next action starts  
    temporal reasoning
printer control rich temporal domain real time constraints   i  wall clock
time plans individual sheets      plans different sheets      planner machine controller  thus  fast temporal constraint propagation 
consistency checking  querying extremely important planner  maintain
temporal constraints using simple temporal network  stn   dechter et al         
represented box named stn figure    essentially  network contains set
temporal time points ti constraints form lb ti tj ub  
time points managed stn include action start end times resource allocation
start end times  temporal constraints maintained stn are 
constraints wall clock action start time 
action start end times within action duration range 
constraints action start time resource allocation action 
conflicts various types resources 
use a  search strategy maintains multiple open search nodes 
separate stn node  temporal constraints added appropriate stn
search node expanded  whenever new constraint added  propagation tightens
   

firuml  do  zhou    fromherz

planning time  in seconds 

idpc
ac  

 

 

 
  

  

  

  

   

sheet number

figure     simple arc consistency faster incremental directed path consistency
maintaining stns 

upper lower bounds domain affected time point  lead
memory usage extra overhead  allows us deal temporal
constraint retraction  needed single stn used multiple search nodes 
retracting temporal constraints stn complicated time consuming process 
planner must run indefinitely  perform garbage collection time points
stn sheet planning episodes  harvesting lie past 
time points flexible plans belong sent machine
controller  planning new sheet  plan manager checks queue planned
sheets see could begin soon  are  plans released
machine controller execute  new temporal constraints added freeze
start end times actions belonging plans sent controller  time points
frozen earliest possible wall clock time indicated stn based
constraint set  constraints cause significant propagation turn     freeze
start end times resource allocations related actions frozen plans 
    tighten starting times actions remaining plans 
original representation stn complete matrix time relations updated
all pairs shortest paths  dechter et al         much inefficient purposes 
implemented two versions stn  one uses incremental directed path
consistency  idpc  algorithm  chleq         may change values edges
constraint graph well introduce new edges requires linear time find
minimum maximum interval two time points database 
uses arc consistency  cervoni et al         maintains point minimum
   

fion line planning scheduling modular printers

maximum times t    reference time point  latter method  one cannot
easily obtain exact relations arbitrary time points  relations t   
however  long inconsistency efficiently detected constraints added 
need query relations arbitrary pairs points  efficiency gains
welcome  new arcs never added network propagation existing
ones modified  means copying network new search node
entail copying arcs  figure    attests  results dramatic time
savings technique used current implementation  improved
implementation     using change flags facilitate faster cycle detection temporal
consistency checking     converting times durations integer values  with user
defined precision  eliminate rounding effects increase speed 
    planning sheet
planning individual sheets  regressed state representation contains state
sheet  may partially specified  a  search used find optimal plan
current sheet  context previous sheets  optimal plan
sheet found  resource allocations stn used plan passed back
plan manager become basis planning next sheet 
one unusual feature planning approach seamlessly integrate planning
scheduling  starting times actions fixed merely constrained temporal
ordering constraints stn  insist potential overlaps allocations
resource resolved immediately  resulting potentially multiple children
single action choice  allows temporal propagation update action time bounds
guide plan search  plan single sheet totally ordered sequence
actions  partial orders actions belong plans different sheets
represent resource conflict resolutions 
      state representation
plan must feasible context previous plans  state contains
information current sheet previous plans  specifically  state
  tuple hliterals  tdb  rsrcsi which 
literals describes regressed logical state current sheet  distinguish
literals whose status true  false  unknown  le  baral  zhang    tran        
distinction false unknown literals important domain may fine grained restrictions acceptable values unspecified
attributes sheet  example  sheet first given print job 
finisher representing final location sheet unknown
finisher allocated another print job plan sheet
executed  discuss below  allow regression match unknown literals
true false effects actions  sense unknown function dont
care  implementation  represent explicitly literals currently
true whose value unknown  false literals represented implicitly 
   

firuml  do  zhou    fromherz

tdb temporal database represented simple temporal network  stn  containing
known time points current constraints them  includes constraints different plans  actions plan  well
wall clock time  examples time points include start end times actions
resource allocations  soon plan given sheet sent machine
 sheets     figure     time points associated plan tdb
longer allowed float clamped lower bounds  time points
flexible 
rsrcs set current resource allocations  representing commitments made
plans previous sheets partial plan current sheet  resource
allocation form hres  tp   tp res particular resource tp    tp 
two time points tdb representing duration res allocated action 
note multiple resources domain resource
multiple  overlapping non overlapping depending resource type  resource
allocations  implementation  maintain ordered list allocations
resource  recent oldest 
essence  state contains information reflecting strategy planner  hybrid state space sequential temporal regression search partial order scheduling 
literals action start end time points represent temporal planning regressed
state rsrcs temporal orderings competing resource allocations represent partial order scheduling constraints actions plans different sheets 
      branching applicable actions
regressed logical state planner   tuple l   hlt   lf   lu lt   lf  
lu disjoint sets literals true  false  unknown  respectively  pre   a 
pre  a  sets positive negative preconditions add a  del a 
sets positive negative effects action a  regression rules used
determine action applicability update state literals are 
applicability action applicable literal set l     none effects inconsistent l     preconditions modified effects


consistent l  formally       add a  lf      del a  lt         


 pre   a  lf del a    pre  a  lt add a   

many planning settings  additional criterion applicability added witht
destroying completeness  least one effect must match l   add a  lt   

   del a  lf        necessarily valid setting adding
no op action may give time existing resource allocation run out 
enabling actions used might lead shorter plan 

update regression l   hlt   lf   lu applicable action derived undoing effects unioning result preconditions  given literal
l modified effect a  status unknown regressed state unless
specified corresponding precondition  e g   l precondition a  
   

fion line planning scheduling modular printers

formally      lt    lt   add a   pre   a       lf    lf   del a  



   lu    lu  add a  del a       pre   a  pre  a  




pre  a  

given  lf   usually much larger  lt    lu   domain  explicitly store
lt lu current implementation use closed world assumption imply
literals belong lf   modeling translator provide xerox engineers
modeling printers encourages effects mentioned preconditions  reducing
growth number unknown literals  example  x add a  x p  a  
although usually case domain  note goal
state always fully specified  with unknown literals  every actions effects
corresponding preconditions  regressed states would fully specified  one could
simplify logical state representation l   hlt   lf simplify regression rules
applicability action applicable iff effects match l  add a  lt
del a  lf  
update regressing hlt   lf gives h lt  add a  



del a    lf  del a  



add a i

plan considered complete literals unify desired initial state  step  
figure     optimal plan sheet found  temporal database used
plan passed back outer loop figure   becomes basis planning
next sheet  feasible windows maintained around time points plan
plan released machine controller  subsequent plans allowed make
earlier allocations resources push actions earlier plans later 
ordering leads earlier end time newer goal  selected  provides
way complex job j  submitted simple job j  start execution
printer earlier j    order starts allowed long sheets print
job finish correct order  often provide important productivity gains 
      branching resource allocation orderings
first step creating regressed states branch actions applicable
l  applying candidate action fact result multiple child nodes due
resource contention  scheduling algorithms use complex reasoning disjunctive
constraints avoid premature branching ordering decisions might well resolved
propagation  baptiste   pape         take different approach  insisting
potential overlaps allocations resource resolved immediately  temporal
constraints posted order potentially overlapping allocations changes
propagate action times  many action durations relatively rigid typical
printers  aggressive commitment propagate cause changes potential end
times plan  immediately helping guide search process  multiple orderings
may possible  may many resulting child search nodes 
example  figure    assume current candidate action searching
plan sheet   uses resource r duration  s  e   assume
n actions plans sheets    use r  implying n existing
non overlapping resource allocations  s    e        sn   en   corresponding time points
temporal database  trying allocate r a  one obvious consistent choice
   

firuml  do  zhou    fromherz

end time
new plan

earliest
start time
next actio


planning
start time

estimated length
plan come
 pg   res  conflict 

predicted
planning
time

end time
prev  plan
job

end time
plans

length
plan far

t 

t 

t 

t 

stn  plan starting time constraint

t 

t 

t 

stn  sheet ordering constraint

branching actions  resource conflicts  
stn  resource contention constraints

figure     important time points constructing evaluating plan 
putting previous allocations adding temporal constraint en s 
however  gaps existing allocations  si   ei    allowing us post
constraints ei e si     possible allocation r generates
distinct child node search space  action use several different resources
r  number branches potentially quite large  however  immediately resolving
potential overlaps allocations resource avoids introduction disjunctions
temporal network  maintaining tractability temporal constraint propagation 
summary  every branch planners search space  modify logical state
branching relevant actions potentially introduce different temporal constraints
order resolve resource contention  branch results different irrevocable
choice reflected final plan  state node planners search tree
unique  therefore  need consider problem duplicating search effort
due reaching state two different search paths 
      heuristic estimation
potential plan suffix  lower bound computed remaining makespan 
order guide planners a  search  figure    illustrates heuristic estimate
used  figure  planning start time  t    refers wall clock time
planning process started earliest start time   current wall clock time   predicted planning time  t    estimated time find plan current sheet
thus earliest time action scheduled begin  note practice 
machine controller communication negotiation time added predicted
planning time  hypothetical start time plan found  t    constrained
happen earliest possible wall clock plan execution time  t  t     plan constrained end previous sheets print job  t  t    
necessarily constrained start plans previous sheets  start time
next action added regressed partial plan  t    constrained occur least
   

fion line planning scheduling modular printers

hypothetical plan starting time  t    t    heuristic value
makespan remaining plan complete current regressed partial plan 
overall objective minimize earliest possible end time plans  including
sheet planning for  indicated lower bound floating
time point t  figure     time point constrained end time points
sheets planned one currently planned  current
sheet  represented constraints t  t  shown figure     t 
constrained end completion time planned sheets
print job  constraint essentially pushes t  sheets current print
job end  support objective function  primary criterion evaluating promise
partial plan  step   figure    estimate earliest possible happening time
t    indicated stn embedded search node  constraints shown
figure    added current branch 
key duration affects t  heuristic estimate lower bound
additional makespan required complete current regressed plan  heuristic value
indicated figure    estimated remaining makespan t  t    adding
constraint t  t    insertion may thus change earliest time subsequent time
points t    t    t  t    may introduce inconsistency temporal database 
case safely abandon plan  given current plan end
end time previous sheets print job  t  t     objective function
minimize t  without causing inconsistency temporal database  break ties
favor of 
smaller t   e g   end time current print job 
smaller predicted makespan  t  t   
larger currently realized makespan  t  t     analogous breaking ties
f  n  a  search larger g n   thus encourages extension plans
nearer goal 
performance search based planner heavily depends quality
heuristic estimating makespan to go  estimate building temporal planning
graph adjustment logical mutex resource contentions  rest
section  discuss details computed  overall  want effective
planning heuristic is 
admissible  maintaining high plan quality  high productivity printer 
important criterion customer 
informed easy compute  cases  allowed fraction
second find feasible plan  delay finding plan delay plan start
execution time thus reduce overall productivity 
derive admissible estimate duration required achieve given set goals
g initial state  perform dynamic programming explicit representation
bi level temporal planning graph  described tgp system  smith
  weld         tgp  planning graph represented fact level action
   

firuml  do  zhou    fromherz

level  starting initial state time      graph grown forward time
actions activated preconditions satisfied non mutex 
three types mutual exclusion relations  fact fact  fact action  action action 
propagated graph building process  graph expansion phase alternates
plan extraction phase starting time point goals appear nonmutex graph 
graph expansion algorithm  action fact f   store first times
ta tf optimistically occur f optimistically achieved 
correspond first times f appear temporal planning graph 
mutex propagation  store first time point pair facts hf    f 
achieved together pair actions ha    a  execute together  planning
graph  first time points hf    f  ha    a  become non mutex 
implementation  fact action mutex fact f action converted action
mutex hnoopf   ai  discuss later 
   begin  f  a  f    f    a    a    ta   tf   thf   f    tha   a     
   let initial state  f  f    f    tf      thf   f      
   dynamically update values ta   tf   thf   f    tha   a  starting initial state
time     follows 
ta   max  setup time a  

max

f p rec a 

tf  

max

f   f  p rec a 

thf   f   

tf   min  ta   dur a  

   

f eff a 

thf   f    min  tha   a   

max

 dur a     dur a     

f  eff a    f  eff a   

tha   a    max  ta    ta   

max

f  p rec a    f  p rec a   

   

thf   f   

   

   

updates done increasing order time  usual planning graph
building algorithms 
   stop g g   tg   g    g  g   thg   g i   reach fixed point 
equations         shown above  actions include noop actions
normal planning graph  actions start time point fact first
achieved  mutex relation noop action equivalent fact action
mutex described smith weld         overall plan sheets
highly parallel  plan single sheet sequential  therefore  currently use
serial version temporal planning graph  faster build consumes
less memory  version  two non noop actions always mutex other 
therefore  need store reason action mutexes thus value
tha   a  eq     applicable mutexes noop real action 
   

fion line planning scheduling modular printers

implementation  build graph starting     putting events     activating
action  updating ta        activating fact  updating tf        removing fact mutex
 updating thf   f     ordered time occur  event trigger new events
happen later time  example  adding new fact f removing fact mutex hf    f 
activate actions supported f f  f    activating action add
events activating facts effect a  and or removing fact mutexes effect a 
noop  facts  mutex p recond a   explicitly store factfact mutex timing values thf   f  none action mutexes tha   a    instead reasoning
on the fly 
time goals achieved pair wise non mutex heuristic value
estimating remaining makespan achieve goal state  see figure     
regression planners  haslum   geffner        nguyen  kambhampati    nigenda       
compute heuristic  until fixed point reached  planning process
begins  case  planning graph expansion process may revisited goals representing regressed state appear non mutex graph fixed point
reached previous round expansion  pair wise mutexes taken
account building graph  estimated value underestimate makespan
plan achieve goal  therefore  returned value planning graph
lead underestimate  admissible heuristic  objective function  overall
end time t    tie breakers  current sheet end time t  current estimated makespan
t  t    described above  therefore  using estimate  planner return plan p
optimal end time  minimum t    p minimum makespan among
plans end time 
incorporating resource mutexes planning graph discussed assumes
printer empty  thus  create planning graph similar procedure
used off line planner assume interference relations occur
actions related given sheet planning for  machine empty 
heuristic generally correct simple sheets simplex printing nearly correct
complicated sheets duplex printing 
however  time  printer empty plans sheets
either     executing      found planner havent sent machine
controller yet  plans involve resource allocations  either fixed time points  for     
still flexible ones  for       find effective heuristic scenarios
machine busy  take account resource mutexes  thus incorporating scheduling
resource contention constraints temporal planning graph  figure    shows
pseudo code algorithm  key observation that  find earliest time ta
action possibly execute  necessary condition
preconditions appear non mutex planning graph resource
conflict resource r used current allocations r  given previous
plans external processes  
shown example action description figure    resource allocation
action represented triple hr  o  di  starts sa   means resource
r used sa   duration d  normally different duration
da a  example  lone resource usage action printsimplexandinvert fig   

firuml  do  zhou    fromherz

   resource types  r    r        rn
   resource allocations   r    r        rn  
ri     si    ei      si    ei         sim   eim    ordered list allocations ri
function checkearliest r  t  d 
  
r  resource
  
t  earliest time intend use r
  
d  duration intend use r
  
r     s    e      s    e         sm   em     current allocations r 
  
tmin   earliest time non conflict allocation r  initialize to  tmin
  
allocation l    sk   ek   r check
  
reserve r duration l starts  latest sk     tmin  
   
go line   
   
else move forward next possible opening end allocation
   
tmin earliest ek  
    end for 
    return tmin  
end function 
building temporal planning graph
    consider adding action planning graph
    initialize ta earliest time p rec a  achieved non mutex  eq   
    resource allocations a  ra    hr    o    d  i  hr    o    d  i       hrn     dn i 
    allocation l   hrk   ok   dk check earliest non conflict time l
   
ta checkearliest ri   ta   oi   di   oi
    end for 
    add action temporal planning graph ta
goals appear non pairwise mutex 
figure     building temporal planning graph adjustments resource conflicts 
ure    m arkingengine             lines       figure    show building
graph  action preconditions satisfied ta   algorithm goes
resources used a  resource allocation hr  o  di  calls function
checkearliest r  ta  o  d  update ta   earliest executable time start without
overlapping previous resource allocations r  pseudo code function
checkearliest r  t  d  self explanatory try find earliest time point
slot allocation r duration without overlapping
previous allocations r 
figure    shows one example demonstrate algorithm  example  try
find starting time action a  needs two unit capacity resource allocations
hr    o    d  hr    o    d  shown top left corner  assume building
graph  preconditions first achieved non mutex time t    referring
figure     fixed allocations r  allocations           and    r     
   

fion line planning scheduling modular printers

sa

a 
r 

da

o 

d 

r 

o 
   

r 

ea

d 
   

   

   

r 

t 

d 

o 

o 

t 

   

   

   

d 

t 

   

t 

t 

figure     example action starting time adjustment using resource contentions
     flexible allocations  shown upper lower bound constraints     r 
        r    starting t    first time point allocate r 
duration d  without overlapping previous allocations  fixed flexible  t   
thus  adjust new earliest possible starting time t    t  o  t    given
new earliest possible starting time ta   t    find earliest time point t 
allocate resource r  t    given t    t  o  t    take
t  final earliest starting time activate action t  graph  instead
original value t      
resource mutexes  starting times actions adjusted higher time
points preconditions achieved  thus time point tg
goals appear non mutex graph underestimation makespan
remaining plan  value t  t  figure      thus  tg higher summation
durations actions optimal  serial  plan  however  tg still underestimates
first time achieve goals thus still admissible heuristic
main objective function minimizing end time current printing sheets  minimizing
t  figure      however  use resource mutexes  heuristic
estimate end time  t    tie breaker plan makespan  t  t    admissible
resource mutexes  estimate t  admissible tie breaker t  t 
   note go resource allocations given action one time  lines       figure     
therefore  even action figure    added t    still potential conflict resource
r  consumed  with existing allocation     r     however  repeating procedure
 lines       figure     multiple times fixed point reached  and potentially returning better
heuristic estimate   seek balance heuristic quality heuristic computation time 

   

firuml  do  zhou    fromherz

time  sec 

 
no mutex
logical mutex
log   res mutex
productivity level

   

 

   

 
 

 

                                           

figure     performance prototype built industrial partner 

inadmissible  thus  a  algorithm still guaranteed find optimal solution 
minimizing plan end time  final solution guaranteed shortest
duration among plans finish earliest 
    evaluation nominal planning
collaboration xerox  deployed planner control three physical prototype multi engine printers  deployments successful planner
used simulation control hundreds hypothetical printer configurations 
planner written objective caml  dialect ml  communicates job
submitter machine controller using ascii text sockets  planner
communicate plan visualizer graphically display plans  first two videos
on line appendix show planner controlling prototype depicted figures  
  full productivity  using visualizer  video    nominal simulation 
hardware  video    nominal hardware   full description videos found
textual appendix paper  shortest single plan machine    actions 
given many sheets printer given time planner
plan ahead  plan manager consistently manages dozens plans hundreds actions  planning  planner needs temporal reasoning regarding conflict
actions current plans hundreds actions previous plans  even so 
planner consistently average produces plans within      seconds required keep
printer running full productivity      pages minute   one complex
current xerox commercial products  planner regularly find optimal plan within
     seconds plan ahead hundreds sheets  ability use domain independent
planning techniques allows us use planner different configurations  without needing hand tuned control rules  rest section  elaborate
results 
   

fion line planning scheduling modular printers

time  sec 

  
nomutex
logical mutex
log   res mutex
productivity level

 
 

 

  

  

  

  

  

  

  

  

   

    

jobs
figure     performance current prototype built us shown figure    note
time plotted logarithmically 

figure       show performance planner two complex
parallel printer prototypes built xerox us  productivity levels higher
printer class currently market  figure  show
cpu time consumed per sheet basic test using planner print job
   sheets      without mutexes      serial temporal planning graph mutexes 
    combination logical resource mutexes      baseline requirement
planners performance match printers full productivity  prototypes
investigated using planner either simpler complicated used theoretical investigations only  rest section  refer first printer
 results shown figure     configuration    results shown figure    
configuration   
configuration   printer figure    simpler one     main components
 including four print engines      action schemata  nominal productivity     sheets
per minute  leading timing requirement planner around                sec
planning sheet  shortest possible plan simplest simplex sheet contains  
actions  normally    sheets flight time thus planner
needs handle interaction around     actions  however  planner typically
intended plan many sheets ahead number interactions often much higher 
printer built run industrial partner  figure  show without
mutex  planner starts taking base time       second around sheet   
consistently takes higher limit around sheet     however  logical
resource mutexes  planner consistently returns plans within much shorter time
required  average  planner logical mutex takes average        second
find plan combination logical resource mutex helps reduce average
planning time        second     x improvement   without mutexes  planner takes
average        seconds keep full productivity printer 
   

firuml  do  zhou    fromherz

configuration   printer tested figure    complicated one 
    action schemata shortest possible plan contains    actions  printer
generally handles    sheets time planner needs regularly reason
interactions         actions  productivity level
printer     pages per minute  leads base running time planner
              second planning single sheet  wider gap performance
different versions planners  show timing results printer log scale 
without using mutexes  planner quickly overruns time limit sheets
grows    seconds around sheet     stopped experiment 
mutexes  logical  resource  planner generally takes less     second find plan 
however  occasionally planner takes longer  usually plans ahead around
   sheets releasing plans lower level controller  occasional jumps planning
time dont prevent planner achieving full productivity printer practice 
planner averages        second logical mutexes        second      x
improvement  used conjunction resource mutexes 
results figure       indicate average planning time individual
sheets increases number previous sheets  due fact planner
generally plans faster speed printer print  thus  number
print requests received increases  number plans unsent queue  i e   planned
for  sent machine yet  increases  increases resource contention
branching factor searching new plan  leads increment planning
time  eventually  number lookahead sheets reaches point planning time
equals planners productivity dynamic equilibrium reached  planning time
strictly increase linearly accordance number sheets planned 
rather shows oscillating pattern  due complex interaction
on line processes planning  freezing time points found plan  plan execution 
lead easier planning problems sheets  depending
sheets interact sheet currently planned 
noted smith weld        work based building
planning graph mutex propagation costly  experience  fact 
printer rather empty  total planning time  subsumes graph
mutex building time less      second  believe due simpler mutex
propagation rule planner fact sequential plan sheet makes
actions mutex step  resource mutex reasoning time optimized
logical mutex implementation improved  seem significant
impediment intended application 
results presented indicate optimal per sheet strategy seems
efficient enough  work needed assess drop quality would experienced greedy strategy  always placing current sheets resource
allocations previous sheet  similarly  lull sheet submissions 
might beneficial plan multiple sheets together  backtracking possible
plans first order find overall faster plan pair together  sheets
planned whose plans released printer represent opportunities
reconsideration light newer sheets submitted recently 
   

fion line planning scheduling modular printers

 
 
 
 
 
 
 
 
 
 
  
  
  
  
  
  

lpg
span
time
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
    
     
    
     
    
     
           
    
     
           
    
     

sgplan
span
time
   
    
          
 

hybrid
span
time
           
           
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

table    comparison lpg  sgplan  hybrid planner  showing makespan
plans found  span  planning times  time  seconds problems
various numbers sheets     

      scaling generic planners
although planner certain features  controllable action durations 
beyond capabilities existing planners  still interesting compare offline systems validate new approach  existing generic systems could solve basic
printing control problems well  might possible extend them  rather developing
specialized planner architecture described above  therefore  built tool
automatically convert custom domain language pddl    temporal planning
language  allowing us test current state of the art planners 
domain must simplified fit limitations pddl  observe
even simplified problems easy solve state of the art academic planners
sgplan  chen  hsu    wah        lpg  gerevini  saetti    serina        
winners           international planning competitions  since planners
cannot solve problem configuration   machine figure    tested
much simpler configuration   machine  tested monochrome job
   simplex sheets  already stretched limits lpg sgplan  planner
plan ahead hundreds sheets machine  seen table    sgplan
took   minutes find two sheet plan took planner less
      second find  compared sgplan  lpg much faster  although quality
plan lpg finds much worse  average  lpg returns plans     longer makespan
    times slower planner  objective function minimizing
wall clock finishing time  which combines planning time plan makespan   planner
    x better planners small printer configuration 
   

firuml  do  zhou    fromherz

addition faster  hybrid planner predictable  lpgs planning
time much higher variance sometimes takes longer plan smaller job
bigger one  example  took lpg    times longer plan    sheet job
table      sheet job  makes unsuitable real time on line
planning  depends accurate estimation planning times efficient temporal
event management 
           international planning competition
version printing domain used  th international planning competition
 ipc    held      results presented icaps    conference 
allowed us evaluate planner many state of the art systems  deterministic
part competition three tracks 
   sequential objective function minimizing total cost actions plan
   temporal objective function minimizing plan makespan 
   net benefit objective function minimizing trade off total goal
utility action cost 
three tracks  emphasis finding good solution quality  thus  planner
running time part overall scoring metric  specifically  planner given
   minutes run particular planning instance  cost plan returned within
time limit used calculate score particular planner particular
instance  score given instance cost best known solution   cost generated
plan  cost generating plan infinite  total    instances
domain thus maximum score competitor achieve     if solutions
returned best quality among competitors  equal best known solution
generated specialized solver  
real world planners often demonstrated complex domains spacecraft
mobile robot control difficult simulate thus make awkward benchmarks 
popular temporal planning benchmark domains off line sense
planners speed affect solution quality  remains need simple yet
realistic benchmark domain combines elements planning scheduling  especially
on line setting  step toward bridging gap  organizers ipc  elected
use parc printer domain two tracks  sequential temporal  temporal track
natural fit due default objective function maximizing printers
productivity  equals minimizing makespan plan finishing print job
requests  sequential track  minimizing total printing cost used  action
certain cost value using expensive color print engine print black white
page costs using monochrome print engine  however  cost trade off may
clear cut feeder  blank sheets originally reside  closer color
print engine monochrome engine 
even though internal representation planner  used starting
point competition domain description  far pddl representation 
difficulties creating competition domain file problem set 
   

fion line planning scheduling modular printers

c 
     

dae 
     

dae 
    

dtgplan
     

f fah
     

h
f fsa
     

lama
     

plana
    

sgp  
     

upwards
     

baseline
     

table    scores ipc  sequential satisficing track
on line continual nature domain fact constraints
multiple resource allocations action sequential finishing order sheets
job caused blowup problem size using pure pddl  organizers
to     remove approximate certain constraints original domain     model
less complex machines  overall  three different printers modeled  first one
simpler four engine  two color two mono  configuration   machine described
section      second one stripped version using half  one color
one mono  first printer  third one another variation one mono
one color printer  first two printers rather symmetric design third one
asymmetric  three significantly simpler fixture built parc  helped
ipc organizers model actions accurately possible  thus even though
printer configurations hypothetical  reflect characteristics real hardware 
problem files  reduce complexity  print requests single job
multiple sheets used  sheets randomly set either simplex  one sided print 
duplex  two sided print  image randomly selected either mono
color  number sheets varies       given print job request particular
printer configuration  competing planner needed find plan lowest total printing
cost sequential track  matching effectively image requirement print
engine capabilities  smallest makespan temporal track  synchronizing effectively
different print engines   actual competition  problems ranging
     sheets used three modeled printers simplex sheets
used biggest printer    engine version  make problems difficult
majority participants 
problems used two tracks  more details below   used planner
described paper provide best known solutions score competing planners 
temporal planning track  ran planner default objective function
maximizing machines productivity  sequential track  ran planner
objective function minimizing printing cost  described later section      given
plan representation different planner standard format used
ipc  post processing step needed convert one format another  note
plans returned planner  temporal buffers related time
points  inter sheet gaps  post processing step remove small
temporal buffers  needed pddl plans valid  therefore  competing
temporal planners could theoretically return shorter makespans planner  however 
results described show planner still superior competing
planners terms plan quality  organizers officially reveal plan running
time unofficial results showed planner much faster competing
planners solving problems 
tables         show ipc results three sub tracks parc printer
domain used  sequential satisficing  sequential optimal  temporal satisficing 
   

firuml  do  zhou    fromherz

cfdp
 

co plan
 

cpt 
  

gamer
 

hsp 
  

hspf
  

mips xxl
 

plana
 

upwards
 

baseline
  

table    scores ipc  sequential optimal track
cpt 
     

dae 
     

dae 
    

sgplan  
     

tfd
    

tlp gp
    

baseline
     

table    scores ipc  temporal satisficing track

planners score would    tracks given used provide best known
solutions tracks  baseline planner sequential optimizing track based
blind search optimal cost  sequential satisficing track planner 
temporal satisficing metric ff planner followed greedy scheduler 
sequential satisficing planners performed well  mostly due fact problems
sequential tracks easy solve  competitors perform well
tracks  reason sequential optimal planners perform well could
solve many problems among    selected  temporal satisficing tracks 
planners could solve large number instances  quality plans returned
plans high  thus leading low overall scores  short  results
     international planning competition reinforced early study indicating generic
off line planners competitive on line hybrid system application 
together  provide evidence demands setting warrant specialized
approach 

   exception handling
maintaining high productivity  thus high return investment 
common important objective  means thing equipment owners
care about  reduce need operator oversight expertise allow use
complex mechanisms  system must autonomic possible  operators
make mistakes even highly engineered system modules fail  system must
cope execution failure  crucial part rmp value proposition 
example  imagine printer copier never seems jam  runs little slower
month goes on  month  someone opens covers  removes jammed
sheets  system back full productivity  rmp systems planner
used control designed fulfill vision partial productivity subset
modules down  make transition transparent user  and thus increase
perceived reliability system   concentrating developing exception
handling techniques minimize user interventions without stopping slowing
machine  current products perform exception handling using rules hard coded
machine module  technique works well simple straight line systems  would
limited small predefined subset failures complex topologies  modular
rmp systems  astronomical number different printer configurations
failure possibilities  require general exception handling approach 
   

fion line planning scheduling modular printers

addition  system must work legacy modules order commercially viable  architecture must tolerate components direct control
give rise unexpected events  handle several different exception types
plan rejection  by machine controller   model updates  i e   modules capabilities go
off line   sheet jams 
since plans system tightly interact various scheduling temporal
constraints  whether belong print job  exception affecting
single plan affect executability plans final job integrity  plans
different stages life cycle need analyzed treated differently  see figure     
simple exceptions plan rejection model updates handled discarding
recently made plans rolling back state planner sheets
planned  implementation uses non destructive data structures make efficient 
execution failures sheet jams require elaborate handling  unsent plans
canceled  need new plans sheets already in flight time
exception occurs  replanning reuse much nominal planning system 
requires special modifications discuss detail below  section  first
provide overview various types exceptions handle plan
manager reacts them  concentrate hardest part exception handling
framework  finding new set consistent plans in flight sheets 
    related work
several previously proposed frameworks handling exceptions uncertainty
plan execution  markov decision processes  boutilier  dean    hanks        contingency planning  pryor   collins        build plans policies robust uncertain environment  planners built techniques normally slow  especially real time
dynamic environment complex temporal constraints ours  suitable
domain exceptions happen frequently  need responded
quickly  fox  gerevini  long  serina        discuss trade off replanning
plan repair strategies handling execution failure  algorithms work off line 
instead on line real time environment ours  target different
objective function  in case  plan stability   casper system jpl  chien  knight 
stechert  sherwood    rabideau        uses iterative repairs continuously modify
update plans adjust dynamic environment  unlike system  casper uses
domain control rules thus less flexible replanning decision needed
quickly domain  in case  sub second  
    basic exception handling
planner handle several types exceptions  figure    extends system architecture diagram figure   shows solid lines possible steps replanning
process  general  exception occurs  machine controller sends planner
message real time detailing exception  planner cancels plans
created sent printer controller execute  corresponding
goals rolled back unplanned queue  planner time tries
find new plans sheets moving printer avoid exceptions 
   

firuml  do  zhou    fromherz

printer model  off line
p
 
 

planner
stn
plans
fl ibl
flexible
start time

sheet
descriptions
 on line 

recreate goals

new plans
l
unplanned

planning

planned unsent

plan manager

sent

fixed time plans

exceptions
p

figure     system architecture  showing steps involved nominal planning  dashed
lines  replanning  solid lines  

new plans found sent machine controller replace ones
executing 
next  discuss detail different exception types 
plan rejection  plan sent machine controller execute  controller
may reject plan one relevant modules cannot commit executing requested
action time defined planner  rejections rare  caused
module constraints outside scope planners model  example 
printer engine may need time bring toner proper temperaturea state variable
constraint currently modeled system  plan rejected  planner
cancel plans unsent queue  addition recently sent rejected plan 
goals corresponding plans rolled back unplanned queue  even
plans directly affected error message need canceled rolled
back plans made commitments made rejected
plan 
module update  machine modules go  line due hardware failure 
sheet jam  benign event  running paper feed tray  unmodeled
process  print engine self adjustment  similarly  come on line
repaired  adjusted  otherwise made ready  happens  module controller
send message planner indicating modules capabilities
on off  given capability turned off  planner remove corresponding
action consideration future planning episodes  given capability turned on 
planner add action set future planning episodes 
break in future  module changes status capabilities
off  currently executing unsent plans using module may become invalid 
case  module controller send messages planner indicating plans
   

fion line planning scheduling modular printers

affected  planner cancel affected unsent plans subsequent plans move
goals back unplanned queue  plans executing thus correspond
sheets already fed machine  planner needs find new plans
affected sheets get correct finisher tray without going
affected modules  next section describes detail reroute in flight
sheets 
broken  type exception happens one sheets jammed system 
broken messages sent planner include ids sheets jammed
thus cannot reused rerouted failure  sheets jam 
normally disable modules thus broken message normally accompanied
several module update messages  described above  handling broken
exception similar handling break in future exception many respects 
involves canceling unsent plans finding new plans in flight sheets  however 
main differences are      in flight sheets jammed cannot rerouted     
critically  jammed sheets break print job integrity  discuss detail next 
    in flight sheet replanning
section  discuss problem finding new set plans in flight sheets
sheet jammed module used plans broken  constraints
make replanning challenging nominal planning are 
sheets cannot stop slow planner searches new plans inflight sheets  thus  planner takes much time find new plans  jams
and or module failures cascade 
newly found plans flexible starting times nominal planning
case  start location sheets projected
plans found  new locations depend actual replanning time
planner 
in flight sheets occurring later print job jammed sheet
rerouted purge tray  sheets jobs without jammed sheets still need
finish correct finisher tray order 
replanning involves four main steps      create new goals in flight sheets     
predict  an upper bound on  replanning time      project sheets according
original trajectory predicted planning time find future locations 
form new initial state replanning problem      find plans sheets
salvageable  those possible avoid broken modules jammed sheets
time   satisfying constraints listed above 
      example
provide concrete example illustrating replanning procedure  figures        
show scenario three in flight sheets  s    s    belong
print job planned go finisher    in middle   sheet s    belongs
   

firuml  do  zhou    fromherz

   
   

finisher  
finisher  
p
purge
tray

   

figure     replanning example  before jam   sheet         planned enter finisher
   sheet     finisher   

   
   

finisher  
finisher  
purge tray

   

figure     replanning example  after jam   sheet     jammed  requires planner reroute sheet     purge tray reroute sheet     circumvent
jammed sheet going finisher   

different print job scheduled go finisher    third finisher purge tray 
original routes indicated dashed lines figure     assume s   
jammed  according original routes  have      s    arrive finisher tray
out of order  because s    arrive it       s    crash module
s    jammed  therefore  need find new plans two sheets s   
instead go purge tray s    goes around s      finding plans takes time
given cannot stop slow s    s    finding new plans them 
two sheets continue original trajectories new locations 
   

fion line planning scheduling modular printers

sheet  
plan  
plan  

   
plan  

sheet  

plan  

   
plan  

plan  

plan  

figure     chaining many searches together gives search tree potentially infinite
branching factor 
circled figure     there  machine controller apply new plans  indicated
figure solid lines  order guarantee print job integrity avoiding
cascading failures  replanning done  planner generate fresh plans
re create s    s     
example shows one replanning strategy new goal out of order
sheet s    set go purge tray  default strategy replanner tries
clear machine finish replanning process quickly possible return
normal operation  however  scenarios printing media expensive
content confidential purging sheets desirable  scenarios 
experimented different strategy purge s    keeps
machine  for example  looping holding pattern  waiting s   
reprinted  s    routed original finisher  modification necessary
implement strategy system change way replanning goals end time
constraints generated  tested strategy successfully small number
sheets  although sheets could saved one allowed slow transports 
      chained bfs
normal operation  planner uses a  find plan given sheet end
soonest  given  temporally flexible  plans previous sheets  plan always exists
scheduled sufficiently far future  rerouting  problem different  must
find jointly feasible plans many in flight sheets possible  cannot greedily plan
one sheet time  committing irrevocably plans previous sheets 
plan selected one sheet might render subsequent sheets infeasible  cannot happen
nominal planning  later sheets always feasible scheduled sufficiently far
future  replanning  however  forced confront true multi body
planning problem 
considered two strategies solve problem  first simply plan
joint action space sheets  would result large branching factor
clear us design effective heuristic evaluation function  chose different
approach  retain view planning sheet individually using
heuristic search  however  overlay additional search top this  depicted
figure     high level search  branching node represents situation
selected certain specific plans previous sheets time select plan
   

firuml  do  zhou    fromherz

chainedbfs  problems 
   problems empty  return success
   p remove first problem problems
   initialize openlist p
   repeat openlist empty node limit reached 
  
n best node openlist
  
n goal  call chainedbfs remaining problems
  
expand n  adding children openlist
figure     sketch chained best first search depth first strategy 
additional sheet  children node represent commitments different possible
plans additional sheet  considering different paths high level search
tree  consider different combinations plans different sheets  call
approach chained best first search  current implementation  sheets replanned
original order  approximation increasing distance exit  correlates
increasing flexibility  alternative approach replan order urgency
defined time left reroute sheet becomes unsalvageable 
children node represent possible plans returned best first
search  children available once  instead  individual sheet level planning
search encounter goal nodes one time  cannot terminate search
find first goal node single sheet planning guarantee
sheet plan reaching first goal make subsequent sheets feasible  finding plan
single sheet merely results new branch high level space  retain
completeness must retain ability continue search uncover additional
possible plans  fact  printers contain loops paper path 
may infinite number possible plans given sheet  fundamentally  highlevel search must explore tree nodes expanded incrementally branching
factor potentially infinite 
identified three possible strategies searching tree infinite branching factor 
first best first approach  one formulates traditional heuristic evaluation
function high level nodes  nodes represent commitments complete plans
subset in flight sheets  heuristic function needs estimate probability
plans allow feasible plans remaining sheets found  infinite
branching factor could handled using partial expansion a   yoshizumi  miura    ishida 
       although would require non trivial lower bound heuristic value
plans yet found  clear us might done 
second possible strategy considered limited discrepancy search  korf         unlike
depth first search  limited discrepancy search doesnt necessarily visit children
node  potentially infinite us  disadvantage method that 
revisit node many times different discrepancy bounds  suffer
considerable node regeneration overhead 
third strategy  one used implementation  perhaps simplest 
depth first search  figure    shows pseudo code sketch  fixed number
sheets replan  high level search tree bounded depth  cope potentially
   

fion line planning scheduling modular printers

infinite branching factor  impose limit number nodes low level sheet
planning search may expand  avoids danger searching forever one high level
node without finding another goal  reminiscent iterative broadening  ginsberg
  harvey         guide sheet level planning  use heuristic minimizes
plan duration  attempts minimize resource use machine maximize
probability sheets feasible plans 
    evaluation
now  exception handling strategies current production printers to 
    stop production ask operator remove sheets     use machine specific
customized local rules purge sheets system  work first demonstrate
automatic exception handling rely machine specific control rules 
planner handle two easiest types exception  plan reject module
update without difficulties  break in future broken exceptions 
currently reroute fly five sheets machine shown figure   
number may seem low  recall replanning harder nominal planning
factor exponential number in flight sheets  simpler prototype systems
xerox fewer  but larger  modules  four print engines  aggregate throughput
    pages per minute  planner able successfully reroute reroutable sheets
different jams happen  demonstrated replanning technology real time
allowing people come either turn on off modules  jam sheets intentionally 
sometimes right sheets hit broken module  upon receiving error messages
machine controller  planner fast enough reroute sheets around
failed modules jammed sheets correct locations  addition experimenting
physical hardware built parc xerox  tested replanning
simulation  connecting planner visualizer instead machine controller 
on line appendix contains two videos planner performing in flight rerouting
parc prototype  simulation  video    replanning simulation  hardware
 video    replanning hardware  
addition testing replanning framework different hypothetical printer configurations different fault modes  investigated different exception handling
strategies  example  printing media expensive replanning objective
function switched default objective function finish replanning quickly
possible  which lead many purged sheets  saving many sheets possible  which
lead longer replanning time  planner able successfully route
  out of order sheets long routes  that may contain loops  system waiting
jammed sheet printed routed correct finisher tray 
achievement replanning five sheets large rmp machine may seem
impressive  want point that      planner reroute reroutable sheets
simpler machines  which still much complex biggest multi engine printer
xerox currently market       large machine complex automated
planningthe last two ipc winners sgplan lpg cannot even find plan single
sheet nominal planning using pddl    version printer domain 
   

firuml  do  zhou    fromherz

   handling multiple objectives
second major extension nominal planning aimed better meeting shop owners
needs nominal case  point  planners objective run
multi engine reconfigurable printers full productivity  optimizing machine throughput 
productivity  important  one many optimization criteria
naturally exist real world planning scheduling applications printer control
domain  section  describe several additional objective functions
pointed important industrial partner  discuss extended
planning framework handle them 
modular system multiple print engines  one might want optimize cost
printing choosing print black only pages monochrome engines avoid using
expensive color engines  also  one might want optimize image quality choosing
print pages document print engines whose current marking gamuts
similar  printer controller needs give operators ability trade
conflicting objectives maintaining robust operation  meet challenges using
    optimization objective combines separate estimates productivity printing
cost      multiple heuristic look ups efficiently handle image quality consistency
constraints  contrast explicit multi objective optimization  planner
would return selection non dominated solutions pareto frontier  presumably
human choose from  planner needs select single solution execution 
need combine multiple criteria single objective  planner built
atop generic state space heuristic search  need design new comparison function
order search nodes  addition linear combinations objectives  relatively easy
us handle tiered criteria using tie breaking strategies 
several academic domain independent planners grt  refanidis  
vlahavas        lpg  gerevini  saetti    serina        optimize multiple objectives trade off planning time plan quality  standard planning
languages  especially pddl   gerevini   long         allow specifying complex objective
functions weighted sum format  as framework   planner based
domain independent planning technology uses extension pddl  works
dynamic on line continual environment interacts physical machine 
off line abstracted environment previous planners 
    optimizing printing cost
systems heterogeneous print engines  cost printing given page depends
engines used  example  generally costlier print black and white
page color engine monochrome one  thus  minimize overall printing cost 
one use engines lowest printing cost still satisfy image type
quality requirements given print job  so  subset available
engines used printing job thus overall productivity may reduced 
strike balance machine productivity printing cost  implemented objective trade productivity cost vice versa  show
combining different performance criteria single objective  optimization
framework works well single objective planning efficiently applied
   

fion line planning scheduling modular printers

multi objective case  main steps required extend planner
supporting single objective multiple objectives 
step    extend planners representation machine capabilities model action cost 
specifically  added cost field representing cost executing capability 
addition  overall objective field user supplied weights two
objectives  obj   min w    w  c  end time c accumulated total
cost printing sheets 
step    create one heuristic estimation function objectives  find
best route given sheet  estimate good potential route according
objective functions  finishing time estimated using temporal planning graph
adjusted resource conflicts  described section        estimate total plan
execution cost  use dynamic programming starting initial state  i e   sheet
feeder  compute total cost reach different reachable states  computation similar cost propagation planning graph sapa planner  do  
kambhampati        
step    extend search algorithm considering multiple objectives simultaneously 
estimations total time cost combined using user supplied weights  as
described step    compare nodes best first a  search algorithm  given
heuristics time cost admissible  single objective planner  planner
guaranteed find optimal solution given sheet  weights given 
planner chooses prioritize objectives  example  planner first find plan
lowest cost  break ties favoring plans higher productivity 
favoring one lower wear tear  on  mechanism implemented
fully integrated planner  default option weights specified
optimize productivity break ties total cost 
    planning image quality consistency
maintaining image consistency across set heterogeneous print engines especially
important multi engine printing system  planner achieves enforcing additional image consistency constraints searching optimal plan  color science 
 in consistency two colors measured function  often denoted e  calculates distance two device independent color space 
exist variety functions  the popular called e      see green 
       planning purpose suffices assume given two engines  e
function returns non negative real valued scalar  called e distance  measures
discrepancy perceived color result printing image two engines 
facing pages  i e   pages face bound book magazine 
sensitive image consistency issues  thus consider following constraints
planner 
   facing page constraints require facing pages job printed
print engine
   e constraints allow engines within maximum e distance print
facing pages
   

firuml  do  zhou    fromherz

given reality two engines e distance zero  facing page
constraints viewed special case e constraints maximum e
distance set zero  thus  need focus latter  general 
enforce e constraints  planner keeps track set print capabilities
used print front side sheet  constrained print action
applied back side previous sheet  since first sheet job
previous sheet  set print capabilities eligible printing front side unconstrained
 i e   equal entire set print capabilities   subsequent sheets job 
however  subset print capabilities allowed  subset computed based
e constraints including capabilities engines whose e distance
print engine printed back side previous sheet less equal
maximum distance  cases  determined on line 
e distance pair engines drift time  thus  planner maintains
on line version pairwise e distance matrix engines printer 
adding extra image consistency constraints reduce brute force search
space  if constraints make set reachable states smaller   practice found
often makes search problem harder  heuristic computed unconstrained problem  still admissible  longer informative  improve accuracy
heuristic  planner computes temporal planning graph heuristic legal
combinations print capabilities used print one side sheet 
stores multiple lookup tables  one combination  heuristic estimate
search node needed  planner calculates index lookup table based
state description  e g   sheet location  monochrome color printing   much
way lookups done pattern databases  culberson   schaeffer        
implementation  hash table hash tables used store multiple lookup tables 
given sheet relevant hash table s  loaded sheet planned 
set eligible print actions known fixed time 
since limited number ways printing single face sheet 
approach improving heuristic accuracy little overhead yet significantly reduce
time takes find itinerary  interestingly  approach used
improve accuracy heuristic handling exceptions jammed sheets
block paper paths engines  unblocked engines eligible
printing sheets  creating planning problems similar enforcing e constraints 
example  one set e distance blocked engine infinity  effectively
forces sheets go unblocked engines  computational savings comes
use accurate heuristic built specifically particular set
unblocked engines  instead nominal case heuristic assumes engine blocked 
      planning constrained action set
algorithmic perspective  approach planning image quality consistency
corresponds solving constrained planning problem reduced set actions  compared unconstrained version   given planning problem k actions  one create o  k   different versions constrained problem  thus  pre computing temporal
planning graph heuristic possible subsets actions quickly become infeasible
   

fion line planning scheduling modular printers

k increases  describe general solution strikes balance heuristic
accuracy space overhead storing multiple lookup tables  one subset
actions  idea limit m  maximum number actions removed
unconstrained problem  compute heuristic lookup tables constrained
problems  example  usually feasible enumerate constrained problems
one two actions removed action set  compute heuristic
value state constrained problem included pre computed set 
algorithm consults lookup tables whose removed actions form subset actions removed constrained problem  returns maximum value heuristic
estimate state  since value returned lookup tables admissible 
formally  let h s p   admissible heuristic estimate state constrained problem set actions p removed original action set a 
let maximum number actions removed constrained problems
heuristic pre computed  heuristic estimate h s p   calculated follows 
h s p    

 

h s p  
maxqp

 q  m

 p  
h s q  otherwise

new heuristic resembles hm family admissible heuristics  haslum   geffner 
       limits maximum cardinality set atoms considered
construction heuristic  difference heuristic considers set removed
actions  whereas hm heuristic considers set satisfied atoms  heuristic
seen kind multiple pattern database  holte  felner  newton  meshulam    furcy 
      one take maximum set heuristic estimates without losing
admissibility  although based action space abstraction  multiple  pattern
databases based state space abstraction 
    evaluation
test ability planner trade machine productivity printing
cost  tested model four engine prototype printer built xerox 
better test bed trade off investigation printer mixed set printer
engines  two color two black and white engines  instead four identical black engines
parc prototype system  moreover  engines aligned asymmetrically
thus paths leading different engines slightly different  modeled
costs different components consultation xerox engineers  especially
interested modeling cost print black pages different engines  printing
expensive color engines costs cheaper monochrome engines 
varying weights two objective functions  able show that 
    increasing weight given productivity results printer utilization four
engines      increasing weight saving printing cost leads reductions number
unnecessary costly printing  thus fewer black sheets printed color engines 
observe trade off modules similar functionality well 
different feeders  finishers  paper paths  example  increasing weight saving
costs lowers number sheets fed expensive faster feeder 
tested search hypothetical printers mixed components similar
   

firuml  do  zhou    fromherz

results observed  observed moving single multiple objectives
slow planner thus affect overall productivity 
tested performance planner image consistency planning 
model printer used four monochrome engines  two faster lowquality engines  remaining two slower high quality engines  four engines
connected asymmetric paper paths  ran simulation    sheet
job requires using two high quality engines double sided printing 
done certain e constraints  prevent planner choosing two
low quality engines  since particularly interested effect heuristic
search performance  tested planner without using multiple lookup tables 
made significant difference number node expansions a  search
planning times  average  multiple lookup table heuristic used  planner
expands      nodes per sheet  whereas using heuristic computed unconstrained problem  grossly underestimates remaining makespan constrained
problems  needs      node expansions find plan  terms running time  one
uses multiple lookup tables     faster using naive heuristic 
one future direction investigate different objective entirely  wear tear 
objective  one would different machines plant used amount
long term  however  machines often cycled idle long
period cycling introduces wear  one would recently used machines
selected soon short term  although implementation currently supports
throughput cost  easily extensible support additional objectives 

   deployment
process building deploying planner  utilized many off the shelf techniques academic research planning  extending  integrating form fast
on line planner scheduler  section  list important lessons learned
describe ancillary tools necessary develop deploy planner 
hope useful application developers academic researchers
planning 
    lessons learned
modeling important  mean two respects  first  important
end users printers modeled specialized representation machine
modules connections main themes language 
discussed section      representation compiled planner input
language  taking capabilities different modules along inter connections
producing action schemata  process  set machine capabilities compiled
higher number action schemata ground parameters 
discussion users industrial partners  feel machine centric language
involving modules  machine instances  inter connections easier understand
accept  compiled down representation makes much easier us adopt
strips planning techniques 
   

fion line planning scheduling modular printers

second  found that  understood search algorithm  regression
three value state representation  heuristics  planning graph mutexes  used
planner  could manipulate modeling actions  goals  initial states
produce quite different computational results  consider simple example action a    
move l    l    moves object location l  l    common form strips
representation action p re a         at l     effect a        at l     at l     
recall use three value representation literal values true 
false  unknown  regressing  partial  state s     at l     using a   get us state
s     at l     u nknown at l     regressable actions move l    l   
move l    l     normal regression rules may consider move l    l   
lead optimal length plan  regressing s  move l    l    cause
inconsistency  fact  domain ours  branch regressable actions
scenarios need buy time free resource allocations 
note example  sophisticated techniques discover invariants tim  fox
  long        discoplan  gerevini   schuert        discover object
single location time thus s  regressable
action move l    l     however  eliminate branch simply adding precondition
at l    action description a   make sure goal state  location
goal false  generating extra child node propagating constraints
domain expensive because  addition logical part  state representation
includes temporal resource databases  cutting number generated
nodes important  partially accomplished careful modeling 
similarly  adding removing predicates domain description great
effects heuristic estimation derived planning graph mutex propagation  experienced scenario adding two extra predicates representing subgoal
completion modeling domain slightly differently achieved speedup nearly   x
printer configurations 
manipulations reminiscent work rintanen         showed
domain advice expressed linear temporal logic  dont move package
destination  could compiled planning operators domain using conditional
effects  leading great gains planning efficiency  however  want emphasize
highly configurable systems ours  dangerous encode explicit action choices
pruning domain  hard guarantee completeness optimality
maintained possible job mixes failure combinations   for example  looping
sheet may free resource allow job complete earlier   approach
encode domain physics  is  things universally true domain
help keep search within reachable states  control rules sense
heuristic action selections  condition  choose action  point
physics represented differently  even limited strips  finding right
match chosen search strategy dramatically affect planners performance 
application developers  work fixed benchmark domain representation
allows us exploit another dimension modeling improve planners performance 
suitable planning algorithm depends application specifications 
even formulating domain using extension strips  went several
   

firuml  do  zhou    fromherz

implementations different planning algorithms settling current one  first
version lifted partial order planner  still think elegant algorithm 
implemented grounded forward state space planner  approach
dominated planning competitions  however  discussed section      realized
combination constraint sheets print job finished
order objective function minimizing finishing time suitable forward
state space search  finally settled backward state space framework  much
faster domain  lesson drew approach works
best wide range benchmark domains competition mean
best choice given application  doesnt work  mean less
popular approaches cannot significantly better  therefore  understanding domain 
important constraints involved  objective function  different planning
algorithms work help selecting suitable strategy  looking competition
results replacement understanding variety applicable planning algorithms 
fast robust temporal reasoner important  planner 
even though source code simple temporal network  stn  totals less    
lines code  critical handling temporal relations actions resource allocations within single plan different plans  real world application
various temporal constraints delays take account  communication  setup time  machine controller coordination  time synchronization delays
planner components overall control architecture  ensuring temporal
consistency one important tasks necessary keeping planner running
without interruption long period time  explicit temporal reasoner
helped us uniformly represent manage start end times actions different
types resource allocations  allowed us smoothly extend handling fixed
duration actions action variable durations  extend regular resource allocations resource allocations caused external events cyclic resources allocation
uncontrollable processes  domain  variable action durations context independent
different actions refuel logistics domain used competition 
havent noticed many planners competition explicit general purpose
temporal reasoner  except ixtet ghallab   laruelle         however  would
emphasize real world setting planner needs coordinate
software expects face various time constraints delays  critical 
many uses planner  besides main job controlling different
printers  planner used extensively system analysis purposes  thus 
planner tested     different printer designs help decide better ones 
    printers various broken modules test reliability printer 
analyses help product group decide printer built given purpose 
example  customer ran extensive test consisting        different planner runs
variations single printer configuration  among runs  used planner
test different combinations possible broken points  different print job mixes  changed
speeds different modules  another use test performance upstream
job submission sequencing methods  direct accurate way evaluate job
sequencer run long print job mix  thousands sheets more  planner
   

fion line planning scheduling modular printers

measure total makespan  recently  completed print job mix        sheets
without break  intensive regular real life printer operation 
experiences  learned many potential applications
planner beyond direct machine control 
exception handling  given planner interacts parts either
higher lower control hierarchy  exceptions come many forms  believe
similar exceptions would occur applications planner interacts
physical world  robust exception handling  such replanning  important 
found much less research topic compared branches domainindependent planning 
hope observations help researchers develop planning techniques
closer needed real world applications useful
considering deploying ai planning applications 
    ancillary tools
course building system  developed number ancillary tools around
core planning scheduling software  among tools  notable piece
visualizer  simulates movement sheet inside printer real time 
planner  visualizer adopts model based principle make machineindependent possible  itinerary given discrete sequence actions 
single time stamp prescribes start time action  linear interpolation
used compute position sheet current simulation time somewhere
start times two consecutive actions  visualizer works one
following two modes  on line mode accepts live itineraries sent planner
sockets  off line mode reads previously recorded itineraries file stored
disk 
separate visualization engine specific designs printer  developed
simple module definition language describing dimensions module type 
locations input output ports within modules local coordinate system 
travel distance pair input output ports  optionally customized
drawing function used render type modules screen  besides
definition module types  visualizer needs know location well orientation
module machine wide coordinate system  possible specify
information manually  developed another ancillary tool called visualizer preprocessor used automate laborious yet error prone task  tool 
user needs specify location orientation one module  called seed
module  locations orientations  directly indirectly
connected  modules deduced based connectivity graph modules 
machines one feasible configuration  tool find possible solutions
store multiple files used later visualizer  besides nominal
case  visualizer simulate various exceptions paper jams break infuture scenarios  long term vision visualizer become design  debug 
verification tool manufacturer  well gui console end user operates
printer 
   

firuml  do  zhou    fromherz

make easier run tests modular printers  developed wrapper
program glues together planner controller  or visualizer   takes
input set pre defined test scenarios specified succinct syntax  e g     sc means
print    single sided color sheets   support simulation pre fabricated exceptions 
sends special messages visualizer contains information
sheet jam occur  supports simultaneous printing jobs printers
multiple finishers  uses round robin algorithm draw sheets jobs
rate maintain fairness  facilitate remote testing debugging  wrapper program
uses sockets communicate machine controller  or visualizer  

   conclusion
described real world domain requires novel on line integration planning
scheduling formalized using temporal extension strips falls
partial order scheduling temporal pddl  presented hybrid planner uses
state space regression per sheet basis  using temporal constraint network
maintain flexibility partial orderings representing resource conflicts plans
different sheets  system successfully controlled three hardware prototypes
outperforms state of the art planners domain  domain dependent search control
heuristics necessary control printer composed     modules real time 
described extensions handle two critical issues      real time execution failures 
    objective functions beyond productivity  successfully demonstrated fast
replanning multiple objective handling three physical prototype printers many
potential printer configurations simulation 
work provides example ai planning scheduling find real world
application exotic domains spacecraft mobile robot control 
common down to earth problems manufacturing process control  modular
printer domain representative wider class ai applications require continual
on line decision making  novel combination fast continual temporal planning
techniques  shown artificial intelligence successfully enable robust  highperformance  autonomous operation without hand coded control knowledge 

acknowledgments
much work done first author palo alto research center 
preliminary results project published ruml  do  fromherz        
ruml         do  ruml  zhou        summarized do  ruml 
zhou         authors would thank members embedded reasoning
area parc  especially lara crawford  haitham hindi  johan de kleer  lukas kuhn 
well danny bobrow  david biegelsen  craig eldershaw  dave duff help
contributions project  industrial collaborators provided domain
expertise invaluable helping us simplify frame application useful
way  wed especially thank bob lofthus ron root enthusiasm
perseverance steve hoover supporting project 
   

fion line planning scheduling modular printers

appendix a  video
on line appendix jair website contains four movies system action 
   nominal simulation mp   shows one simplex job     sheets run simulation parc prototype printer shown figure    planner keeps four
print engines busy  achieving full productivity system 
   nominal hardware wmv  shows two simplex jobs run simultaneously using
four engines parc hardware prototype  two feeders left
two simple finishing trays right  red lights machine modules show
position sheets   background time synchronization indicated periodic
blinking   lower left corner  schematic visualization shows sheets
moving machine  one job colored blue red 
   replanning simulation mp   show simple exceptions handling scenario simulation  blue sheets red sheets belong different jobs  second sheet blue
job jams  third sheet  already in flight  rerouted middle purge tray
fresh plans initiated recreate sheets  red job continues uninterrupted 
   replanning hardware wmv  demonstrates two exception handling scenarios 
first shows simple on line replanning  sheet launched  button pushed
module sheet headed toward  mark module broken 
initiates replanning  sheet routed around failed module  second
modules button pushed  marking failed thereby blocking finishing tray
sheet headed toward  sheet rerouting emerges
remaining finishing tray 
second scenario  module broken already contains first sheet
two sheet job  replanner fast enough reroute second sheet around
jammed first sheet purge tray  original two sheets planned
scratch arrive lower finishing tray 

references
baptiste  p     pape  c  l          theoretical experimental comparison constraint
propagation techniques disjunctive scheduling  proceedings ijcai     pp 
       
bartak  r          visopt shopfloor  edge planning scheduling  proceedings
conference principles practice constraint programming  cp      pp 
       
boutilier  c   dean  t     hanks  s          decision theoretic planning  structural assumptions computational leverage  journal artificial intelligence research 
        
cervoni  r   cesta  a     oddi  a          managing dynamic temporal constraint networks 
proceedings aips     pp       
   

firuml  do  zhou    fromherz

chen  y   hsu  c  w     wah  b          temporal planning using subgoal partitioning
resolution sgplan  journal artificial intelligence research             
chien  s  a   knight  r   stechert  a   sherwood  r     rabideau  g          using iterative repair improve responsiveness planning scheduling autonomous
spacecraft  proc  ijcai 
chleq  n          efficient algorithms networks quantitative temporal constraints 
proceedings constraints     pp       
crawford  l   hindi  h   zhou  r     larner  d          synchronized control large scale
networked distributed printing system  proceedings      ieee international
conference robotics automation  icra     
culberson  j     schaeffer  j          pattern databases  computational intelligence         
       
dechter  r   meiri  i     pearl  j          temporal constraint networks  artificial intelligence           
desjardins  m  e   durfee  e  h   ortiz  jr   c  l     wolverton  m  j          survey
research distributed  continual planning  ai magazine               
do  m   ruml  w     zhou  r          on line planning scheduling  application
controlling modular printers  proceedings aaai    
do  m  b     kambhampati  s          sapa  multi objective metric temporal planer 
journal artificial intelligence research             
do  m  b     ruml  w          lessons learned applying domain independent planning
high speed manufacturing  proceedings icaps     pp         
do  m  b   ruml  w     zhou  r          planning modular printers  beyond productivity  proceedings eighteenth international conference automated
planning scheduling  icaps  
fox  m   gerevini  a   long  d     serina  i          plan stability  replanning versus plan
repair  proc  icaps     pp         
fox  m     long  d          automatic inference state invariants tim  journal
artificial intelligence research            
fox  m     long  d          pddl     extension pddl expressing temporal
planning domains  journal artificial intelligence research            
frank  j     jonsson  a          constraint based attribute interval planning  constraints            
franklin  g   powell  j     workman  m          digital control dynamic systems 
prentice hall 
fromherz  m  p  j   bobrow  d  g     de kleer  j          model based computing
design control reconfigurable systems  ai magazine                 
fromherz  m  p  j   saraswat  v  a     bobrow  d  g          model based computing 
developing flexible machine control software  artificial intelligence               
    
   

fion line planning scheduling modular printers

gerevini  a     long  d          preferences soft constraints pddl   workshop
preferences soft constraints planning  icaps   
gerevini  a   saetti  a     serina  i          planning stochastic local search
temporal action graphs lpg  journal artificial intelligence research             
gerevini  a   saetti  a     serina  i          approach efficient planning numerical
fluents multi criteria plan quality  artificial intelligence              
gerevini  a     schuert  l          inferring state constraints domain independent
planning  proceedings fifteenth national conference artificial intelligence
 aaai  
ghallab  m     laruelle  h          representation control ixtet  temporal
planner  proceedings aips     pp       
ghallab  m   nau  d     traverso  p          automated planning theory practice 
morgan kaufmann  san francisco 
ginsberg  m  l     harvey  w  d          iterative broadening  artificial intelligence     
       
green  p          colorimetry colour difference  green  p     macdonald  l   eds   
color engineering  pp        wiley 
haslum  p     geffner  h          admissible heuristics optimal planning  proceedings
aips  pp         
haslum  p     geffner  h          heuristic planning time resources  proceedings
ecp    
hindi  h   crawford  l     fromherz  m          synchronization state based control
processes delayed asynchronous measurements  proc  decision
control            european control conference  cdc ecc     pp           
hindi  h   crawford  l   zhou  r     eldershaw  c          efficient waypoint tracking
hybrid controllers double integrators using classical time optimal control  proc 
  th ieee conference decision control        cdc       
hoffmann  j     nebel  b          planning system  fast plan generation
heuristic search  journal artificial intelligence research             
holte  r   felner  a   newton  j   meshulam  r     furcy  d          maximizing
multiple pattern databases speeds heuristic search  artificial intelligence         
                
koehler  j     hoffmann  j          reasonable forced goal orderings use
agenda driven planning algorithm  journal artificial intelligence research 
           
korf  r  e          improved limited discrepancy search  proceedings aaai     pp 
        mit press 
le  t  c   baral  c   zhang  x     tran  s          regression respect sensing
actions partial states  proceedings aaai    
   

firuml  do  zhou    fromherz

muscettola  n          hsts  integrating planning scheduling  zweben  m     fox 
m  s   eds    intelligent scheduling  chap     pp          morgan kaufmann 
muscettola  n   morris  p     tsamardinos  i          reformulating temporal plans
efficient execution  proceedings conference principles knowledge representation reasoning  kr     
nguyen  x   kambhampati  s     nigenda  r  s          planning graph basis
derive heuristics plan synthesis state space csp search  artificial intelligence 
                 
palacios  h     geffner  h          planning branch bound  constraint programming implementation  proceedings clei    
policella  n   cesta  a   oddi  a     smith  s  f          precedence constraint posting
partial order schedules  ai communications                 
pryor  l     collins  g          planning contingencies  decision based approach 
journal artificial intelligence research            
refanidis  i     vlahavas  i          multiobjective heuristic state space planning  artificial
intelligence           
richter  s   helmert  m     westphal  m          landmarks revisited  proceedings
aaai     pp         
rintanen  j          incorporation temporal logic control plan operators  proceedings fourteenth european conference artificial intelligence  ecai       
pp         
ruml  w   do  m  b     fromherz  m  p  j          on line planning scheduling
high speed manufacturing  proceedings icaps     pp       
smith  d  e     weld  d  s          temporal planning mutual exclusion reasoning 
proceedings ijcai     pp         
smith  s  f     cheng  c  c          slack based heuristics constraint satisfaction
scheduling  proceedings aaai     pp         
wah  b  w     chen  y          partitioning temporal planning problems mixed
space using theory extended saddle points  ieee international conference
tools artificial intelligence 
yoshizumi  t   miura  t     ishida  t          a  partial expansion large branching
factor problems  proceedings aaai       pp         

   


