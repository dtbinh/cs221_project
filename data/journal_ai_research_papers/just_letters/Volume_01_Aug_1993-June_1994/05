journal artificial intelligence research                 

submitted       published      

decidable reasoning terminological knowledge
representation systems
martin buchheit

german research center artificial intelligence  dfki 
stuhlsatzenhausweg    d       saarbrucken  germany

francesco m  donini
andrea schaerf

buchheit dfki uni sb de
donini assi dis uniroma  it
aschaerf assi dis uniroma  it

dipartimento di informatica e sistemistica
universita di roma  la sapienza   via salaria      i       roma  italy

abstract

terminological knowledge representation systems  tkrss  tools designing
using knowledge bases make use terminological languages  or concept languages  
analyze theoretical point view tkrs whose capabilities go beyond
ones presently available tkrss  new features studied  often required practical
applications  summarized three main points  first  consider highly expressive terminological language  called alcnr  including general complements concepts 
number restrictions role conjunction  second  allow express inclusion statements general concepts  terminological cycles particular case  third 
prove decidability number desirable tkrs deduction services  like satisfiability 
subsumption instance checking  sound  complete terminating calculus
reasoning alcnr knowledge bases  calculus extends general technique
constraint systems  byproduct proof  get result inclusion
statements alcnr simulated terminological cycles  descriptive semantics
adopted 

   introduction
general characteristic many proposed terminological knowledge representation systems
 tkrss  krypton  brachman  pigman gilbert    levesque         nikl  kaczmarek  bates    robins         back  quantz   kindermann         loom  macgregor  
bates         classic  borgida  brachman  mcguinness    alperin resnick         kris
 baader   hollunder         k rep  mays  dionne    weida         others  see rich 
editor        woods   schmolze         made two different components  informally speaking  first general schema concerning classes individuals
represented  general properties mutual relationships  second
 partial  instantiation schema  containing assertions relating either individuals
classes  individuals other  characteristic  mentioned proposals
inherit seminal tkrs kl one  brachman   schmolze         shared
several proposals database models abrial s         candide  beck  gala   
navathe         taxis  mylopoulos  bernstein    wong        
retrieving information actual knowledge bases  kbs  built using one systems deductive process involving schema  tbox  instantiation  abox  
c      ai access foundation morgan kaufmann publishers  rights reserved 

fibuchheit  donini    schaerf

fact  tbox set constraints possible aboxes  contains intensional
information classes  information taken account answering queries
kb 
realization use kb  tkrs provide mechanical solution
least following problems  from point on  use word concept refer
class  
   kb satisfiability   abox tbox consistent other  is 
kb admit model  positive answer useful validation phase 
negative answer used make inferences refutation style  latter
precisely approach taken paper 
   concept satisfiability   given kb concept c   exist least one
model kb assigning non empty extension c   important
rule meaningless concepts kb design phase  processing
user s queries  eliminate parts query cannot contribute answer 
   subsumption   given kb two concepts c d  c general
model kb  subsumption detects implicit dependencies among concepts
kb 
   instance checking   given kb  individual concept c   instance
c model kb  note retrieving individuals described
given concept  a query database lexicon  formulated set parallel
instance checkings 
questions precisely characterized tkrs given semantics
 see next section   defines models kb gives meaning expressions
kb  problems formalized  one start theoretical analysis
them  and maybe independently a search reasoning procedures accomplishing
tasks  completeness correctness procedures judged respect formal
statements problems 
now  proposed systems give incomplete procedures solving
problems      except kris   is  inferences missed  cases without
precise semantical characterization ones are  designer user needs
 more  complete reasoning  she he must either write programs suitable programming
language  as database proposal abrial  taxis   define appropriate inference rules completing inference capabilities system  as back  loom 
classic   theoretical point view  several systems  e g   loom  even
known complete procedures ever exist i e   decidability corresponding
problems known 
recent research computational complexity subsumption uence
many tkrss choice incomplete procedures  brachman levesque       
   system classic complete  w r t  non standard semantics treatment
individuals  complete reasoning w r t  standard semantics individuals provided  conphard  lenzerini   schaerf        

   

fidecidable reasoning terminological kr systems

started research analyzing complexity subsumption pure concept expressions  abstracting kbs  we call problem later paper pure subsumption   motivation focusing small problem pure subsumption
fundamental inference tkrs  turned pure subsumption tractable
 i e   worst case polynomial time solvable  simple languages  intractable slight
extensions languages  subsequent research definitely confirmed  nebel       
donini  lenzerini  nardi    nutt      a      b  schmidt schau   smolka        donini 
hollunder  lenzerini  marchetti spaccamela  nardi    nutt         also  beyond computational complexity  pure subsumption proved undecidable tkrss u  schild 
       kl one  schmidt schau        nikl  patel schneider        
note extending language results enhancing expressiveness  therefore
result research could summarized as  tkrs language expressive 
higher computational complexity reasoning language as levesque
       first noted  result interpreted two different ways  leading two
different tkrss design philosophies 
    general purpose languages tkrss intractable  even undecidable 
tractable languages expressive enough practical interest   following interpretation  several tkrss  such nikl  loom back  incomplete
procedures pure subsumption considered satisfactory  e g   see  macgregor  
brill        loom   completeness abandoned basic subproblem 
completeness overall reasoning procedures issue anymore  issues
arise  compare incomplete procedures  heinsohn  kudenko  nebel 
  profitlich         judge procedure  complete enough   macgregor 
       practical tool  inference rules used systems achieve
expected behavior kb w r t  information contained it 
    a tkrs  by definition  general purpose  hence must provide tractable
complete reasoning user   following line  tkrss  such krypton
classic  provide limited tractable languages expressing concepts  following
 small can be beautiful  approach  see patel schneider         gap
expressible tkrs language needed expressed
application filled user   sort of  programming inference rules 
course  usual problems present program development debugging arise
 mcguinness        
common approaches user must cope incomplete reasoning 
difference former approach  burden regaining useful yet missed
inferences mostly left developers tkrs  and user supposed specify
 complete enough    latter mainly left user 
perfectly reasonable approaches practical context  incomplete procedures
specialized programs often used deal intractable problems  opinion
incomplete procedures provisional answer problem the best possible
now  order improve answer  theoretical analysis general problems
    done 
previous theoretical results deal problems     full generality 
example  problems studied  nebel        chapter     incomplete
   

fibuchheit  donini    schaerf

procedures given  cycles considered   donini  lenzerini  nardi    schaerf 
      schaerf      a  complexity instance checking analyzed  kbs
without tbox treated  instance checking analyzed  vilain        
addressing part problem performed parsing 
addition  think expressiveness actual systems enhanced
making terminological cycles  see nebel        chapter    available tkrss 
feature undoubtable practical interest  macgregor         yet present tkrss
approximate cycles  using forward inference rules  as back  classic  loom  
opinion  order make terminological cycles fully available complete tkrss 
theoretical investigation still needed 
previous theoretical work cycles done  baader      a      b  baader  burkert 
hollunder  nutt    siekmann        dionne  mays    oles              nebel             
schild         considering kbs formed tbox alone  moreover  approaches
deal number restrictions  except nebel        section         a basic feature
already provided tkrss  techniques used seem easily extensible
reasoning aboxes  compare detail several works section   
paper  propose tkrs equipped highly expressive language  including constructors often required practical applications  prove decidability problems
     particular  system uses language alcnr  supports general complements concepts  number restrictions role conjunction  moreover  system allows
one express inclusion statements general concepts and  particular case 
terminological cycles  prove decidability means suitable calculus  developed extending well established framework constraint systems  see donini et al  
    a  schmidt schau   smolka         thus exploiting uniform approach reasoning
tkrss  moreover  calculus easily turned decision procedure 
paper organized follows  section   introduce language 
give tarski style extensional semantics  commonly used  using
semantics  establish relationships problems     allow us concentrate
kb satisfiability only  section   provide calculus kb satisfiability  show
correctness termination calculus  hence  conclude kb satisfiability
decidable alcnr  main result paper  section   compare
approach previous results decidable tkrss  establish equivalence
general  cyclic  inclusion statements general concept definitions using descriptive
semantics  finally  discuss detail several practical issues related results
section   

   preliminaries

section first present basic notions regarding concept languages 
describe knowledge bases built using concept languages  reasoning services
must provided extracting information knowledge bases 

    concept languages

concept languages  concepts represent classes objects domain interest 
roles represent binary relations objects  complex concepts roles
   

fidecidable reasoning terminological kr systems

defined means suitable constructors applied concept names role names 
particular  concepts roles alcnr formed means following syntax
 where pi  for             k  denotes role name  c denote arbitrary concepts 
r arbitrary role  

c     j

 j
 j

 c u d  j
 c d  j

 c j
 r c j
 r c j
  n r  j   n r 
r    p  u u pk

 concept name 
 top concept 
 bottom concept 
 conjunction 
 disjunction 
 complement 
 universal quantification 
 existential quantification 
 number restrictions 
 role conjunction 

confusion arises drop brackets around conjunctions disjunctions 
interpret concepts subsets domain roles binary relations domain 
precisely  interpretation    i     consists nonempty set  the domain
  function  the extension function    maps every concept subset
every role subset   interpretation concept names
role names thus restricted ai   p   respectively  moreover 
interpretation complex concepts roles must satisfy following equations   fg
denotes cardinality set  

 i  
 i    

 c u d i
 c d i
  c  i
  r c  i
  r c  i
  n r i
  n r i
 p  u u pk  i

 
 
 
 
 
 
 
 

c   di
c   di
n c
fd    j  d     d   d     ri   d    c g
fd    j  d     d   d     ri   d    c g
fd    j  fd  j  d   d     ri g ng
fd    j  fd  j  d   d     ri g ng
p i     pki

    knowledge bases

   

knowledge base built means concept languages generally formed two components  intensional one  called tbox  extensional one  called abox 
first turn attention tbox  said before  intensional level specifies properties concepts interest particular application  syntactically 
properties expressed terms call inclusion statements  inclusion
   

fibuchheit  donini    schaerf

statement  or simply inclusion  form

cvd
c two arbitrary alcnr concepts  intuitively  statement specifies
every instance c instance d  precisely  interpretation satisfies
inclusion c v c di  
tbox finite set inclusions  interpretation model tbox
satisfies inclusions  
general  tkrss provide user mechanisms stating concept introductions
 e g   nebel        section      form     concept definition  interpreted set
equality      concept specification  interpreted set inclusion   restrictions
left hand side concept must concept name  concept name
one introduction allowed  terminological cycles allowed  i e  
concept name may occur neither directly indirectly within introduction 
restrictions make possible substitute occurrence defined concept
definition 
impose restrictions form inclusions  obtaining statements
syntactically expressive concept introductions  particular  definition
form    expressed system using pair inclusions v
v specification form   simply expressed v d 
conversely  inclusion form c v d  c arbitrary concepts  cannot
expressed concept introductions  moreover  cyclic inclusions allowed
statements  realizing terminological cycles 
shown  nebel         least three types semantics terminological cycles  namely least fixpoint  greatest fixpoint  descriptive semantics 
fixpoint semantics choose particular models among set interpretations satisfy
statement form    d  models chosen least greatest fixpoint
equation  descriptive semantics instead considers interpretations
satisfy statement  i e   fixpoints  models 
however  fixpoint semantics naturally apply fixpoint statements    d 
 function  a  i e   may appear d  obvious way
extend general inclusions  addition  since language includes constructor
complement general concepts   function  may monotone  therefore
least greatest fixpoints may unique  whether exists
definitional semantics suitable cyclic definitions expressive languages still
unclear 
conversely  descriptive semantics interprets statements restricting set
possible models  definitional import  although completely satisfactory
practical cases  baader      b  nebel         descriptive semantics considered
appropriate one general cyclic statements powerful concept languages 
hence  seems suitable extended case exactly one
adopted above 
observe decision put general inclusions tbox standard one 
fact  tkrs krypton statements put abox  however  conceive
   

fidecidable reasoning terminological kr systems

inclusions generalization traditional tbox statements  acyclic concept introductions 
definitional import  perfectly expressed inclusions  cyclic concept
introductions expressed well  descriptive semantics adopted  therefore 
believe inclusions part tbox 
notice role conjunction allows one express practical feature subroles 
example  role adoptedchild written child u adoptedchild   adoptedchild  role name  making subrole child  following idea  every hierarchy
role names rephrased set role conjunctions  vice versa 
actual systems usually provide construction hierarchies roles means
role introductions  i e   statements form p    r p   r  tbox  however 
simple language roles  cyclic definitions roles always reduced acyclic
definitions  explained  nebel        sec         role definitions acyclic  one
always substitute every concept role name definition  obtaining
equivalent concept  therefore  consider role definitions paper 
conceive tbox set concept inclusions 
even so  worth notice concept inclusions express knowledge roles 
particular  domain range restrictions roles expressed  way similar
one  catarci   lenzerini         restricting domain role r concept c
range concept done two inclusions

 r   v c    v  r d
straightforward show interpretation satisfies two inclusions 
ri c  

combining subroles domain range restrictions possible partially
express constructor role restriction  present various proposals  e g  
language fl brachman   levesque         role restriction  written r   c  
defined  r   c  i   f d   d     j  d   d     ri   d    c g  example
role daughter  formulated child female  partially simulated
child u daughter   inclusion   v  daughter  female  however  simulation
would complete number restrictions  e g   mother least three daughters 
know least three female children  instead know three
female children cannot infer three daughters 
turn attention extensional level  i e   abox  abox
essentially allows one specify instance of relations individuals concepts 
pairs individuals roles 
let alphabet symbols  called individuals  instance of relationships expressed terms membership assertions form 

c  a  

r a  b  

b individuals  c alcnr concept  r alcnr role  intuitively  first form states instance c   whereas second form states
related b means role r 
   

fibuchheit  donini    schaerf

order assign meaning membership assertions  extension function
interpretation extended individuals mapping elements
way ai    bi    b  property called unique name assumption  ensures
different individuals interpreted different objects 
interpretation satisfies assertion c  a  ai   c   satisfies r a  b 

 a   bi     ri   abox finite set membership assertions  model abox
satisfies assertions a 
alcnr knowledge base pair   ht   ai tbox
abox  interpretation model model model a 
formally define problems     mentioned introduction  let
alcnr knowledge base 
   kb satisfiability   satisfiable  model 
   concept satisfiability   c satisfiable w r t   exists model
c      
   subsumption   c subsumed w r t    c di every model  
   instance checking   instance c   written j  c  a   assertion c  a 
satisfied every model  
 nebel        sec        shown abox plays active role checking
concept satisfiability subsumption  particular  nebel shows abox  subject
satisfiability  replaced empty one without affecting result
services  actually   nebel         property stated language less expressive alcnr  however  easy show extends alcnr  important
remark property valid concept languages  fact 
languages include constructors refer individuals concept language  e g   constructor one of  borgida et al         forms concept set
enumerated individuals  concept language includes constructor individuals
tbox interact individuals abox  shown  schaerf      b  
consequence  concept satisfiability subsumption depend abox 

example     consider following knowledge base   ht   ai 
  f teaches course v  student u  degree bs  prof 
prof v  degree ms 
 degree ms v  degree bs 
ms u bs v  g
  fteaches john  cs          degree  john   course cs    g
fragment hypothetical knowledge base describing organization university 
first inclusion  instance  states persons teaching course either graduate
students  students bs degree  professors  easy see satisfiable 
example  following interpretation satisfies inclusions assertions
   

fidecidable reasoning terminological kr systems

a  therefore model  
  fjohn  cs     csbg  johni   john  cs   i   cs   
studenti   fjohng  profi      coursei   fcs   g  bsi   fcsbg
msi      teachesi   f john  cs    g  degreei   f john  csb g
described interpretation giving   values
concept names role names  straightforward see values complex
concepts roles uniquely determined imposing must satisfy equations  
page     
notice possible draw several non trivial conclusions   example 
infer j  student john   intuitively shown follows  john teaches
course  thus either student bs professor  can t professor
since professors least two degrees  bs ms  one  therefore
student 
given previous semantics  problems     reduced kb satisfiability
 or complement  linear time  fact  given knowledge base   ht   ai  two
concepts c d  individual a  individual b appearing   following
equivalences hold 

c satisfiable w r t iff ht     fc  b gi satisfiable 
c subsumed w r t  iff ht     f c u  d  b gi satisfiable 
j  c  a  iff ht     f  c   a gi satisfiable 
slightly different form equivalences given  hollunder        
equivalences given straightforward consequence ones given hollunder 
however  equivalences valid languages including constructors refer
individuals concept language  equivalences reasoning services
languages studied  schaerf      b  
based equivalences  next section concentrate kbsatisfiability 

   decidability result

section provide calculus deciding kb satisfiability  particular  subsection     present calculus state correctness  then  subsection     
prove termination calculus  sucient assess decidability
problems      thanks relationships four problems 

    calculus correctness

method makes use notion constraint system  donini et al       a  schmidtschau   smolka        donini  lenzerini  nardi    schaerf      c   based
tableaux like calculus  fitting        tries build model logical formula
corresponding kb 
   

fibuchheit  donini    schaerf

introduce alphabet variable symbols v together well founded total
ordering    v   alphabet v disjoint ones defined far 
purpose ordering become clear later  elements v denoted
letters x  y  z  w  point on  use term object abstraction individual
variable  i e   object element   v    objects denoted symbols
s  and  section    individuals denoted a  b 
constraint syntactic entity one forms 

s  c  spt 

 x x  c       t 

c concept p role name  concepts assumed simple  i e  
complements contain form  a  concept name  arbitrary
alcnr concepts rewritten equivalent simple concepts linear time  donini
et al       a   constraint system finite nonempty set constraints 
given interpretation   define  assignment function maps every
variable v element   every individual ai  i e   ff a    ai
  o  
pair  i   ff  satisfies  constraint s  c ff s    c   constraint spt  ff s   ff t  
  p   constraint    ff s     ff t   finally  constraint  x x  c c  
 notice play role case   constraint system satisfiable
pair  i   ff  satisfies every constraint  
alcnr knowledge base   ht   ai translated constraint system
replacing every inclusion c v   constraint  x x   c d  every
membership assertion c  a  constraint a  c   every r a  b  constraints
ap  b         apk b r   p  u       u pk   including constraint  
    b every pair  a  b 
individuals appearing a  easy see satisfiable
satisfiable 
order check constraint system satisfiability  technique adds constraints
either evident contradiction generated interpretation satisfying
obtained resulting system  constraints added basis suitable set
so called propagation rules 
providing rules  need additional definitions  let constraint
system r   p  u       u pk  k    role  say r successor
sp  t         spk   say direct successor role r 
r successor s  call direct predecessor inverse relation direct successor 
clear context omit it  moreover  denote successor transitive
closure relation direct successor  denote predecessor inverse 
assume variables introduced constraint system according ordering
    means  introduced constraint system x variables x
already  
denote  x s  constraint system obtained replacing occurrence
variable x object s 
say separated constraint  
     
given constraint system object s  define function      follows 
 s  s     fc j s  c   g  moreover  say two variables x  equivalent 
   

fidecidable reasoning terminological kr systems

written x    s  x     s     intuitively  two s equivalent variables represent
element potential interpretation built rules  unless separated 
propagation rules are 
    u fs  c   s  c g  
   s  c  u c   
   s  c  s  c 
    t fs  dg  
   s  c  c   
   neither s  c  s  c   
     c    c 
      ft  c g  
   s   r c  
   r successor s 
   t  c
      fsp  y         spk y    c g  
   s   r c  
   r   p  u       u pk  
   new variable 
   r successor t  c  
   variable variable w w w
     fsp  yi          spk yi j      ng   fyi     yj j i  j      n     j g  
   s    n r   
   r   p  u       u pk  
   y           yn new variables 
   exist n pairwise separated r successors  
   variable variable w w w
      y t 
   s    n r   
   n r successors  
   y  two r successors separated
     x fs  c g  
    x x  c  
   appears  
   s  c  
call rules  t   nondeterministic rules  since applied
different ways constraint system  intuitively  correspond branching
rules tableaux   rules called deterministic rules  moreover  call
rules      generating rules  since introduce new variables constraint
system  rules called nongenerating ones 
   

fibuchheit  donini    schaerf

use condition based  equivalence relation generating rules
 condition    related goal keeping constraint system finite even presence
potentially infinite chains applications generating rules  role become clearer
later paper 
one verify rules always applied system either presence
given constraint s  c  condition     or  case   x rule 
presence object   confusion arises  say rule applied
constraint s  c object  instead saying applied constraint
system   
proposition      invariance  let   constraint systems  then 
     obtained application deterministic rule  satisfiable
  satisfiable 
     obtained application nondeterministic rule  satisfiable   satisfiable  conversely  satisfiable nondeterministic rule
applicable object   applied way yields
satisfiable constraint system 
proof  proof mainly rephrasing typical soundness proofs tableaux methods  e g   fitting        lemma         non standard constructors number
restrictions 
       considering deterministic rules one directly check subset   
obvious satisfiable   satisfiable 
    order show   satisfiable case consider turn
possible deterministic rule application leading    assume  i   ff 
satisfies  
 u  rule applied s  c  u c          fs  c   s  c g  since  i   ff 
satisfies s  c  u c    i   ff  satisfies s  c  s  c  therefore   
   rule applied s   r c   must r successor
     ft  c g  since  i   ff  satisfies   holds  ff s   ff t     ri   since  i   ff  satisfies
s   r c   holds ff t    c    i   ff  satisfies t  c therefore   
  x rule applied presence  x x  c      
  fs  c g  since  i   ff  satisfies holds c     therefore ff s    c
 i   ff  satisfies    
    rule applied s   r c         fsp  y         spk y    c g  since  i   ff 
satisfies   exists  ff s   d    ri   c   define  assignment
ff  ff   y     ff  t     ff t       easy show  i   ff   satisfies   
   rule applied s    n r         fsp  yi          spk yi j      ng  
fyi     yj j i  j      n     j g  since  i   ff  satisfies   exist n distinct elements
d          dn    ff s   di    ri   define  assignment ff  ff   yi     di
     n ff   t     ff t     fy           yn g  easy show  i   ff   satisfies   
       assume   satisfied  i   ff    show satisfiable   
obtained application  t  rule  subset   therefore
satisfied  i   ff   
   

fidecidable reasoning terminological kr systems

  obtained application    rule s    n r   
y       y t   define  assignment ff y      ff   t 
ff v      ff  v   every object v v    y  obviously  i   ff  satisfies  
    suppose satisfied  i   ff  nondeterministic rule applicable
object s 
 t  rule applicable s  c  c  then  since satisfiable  ff s     c  c  i  
follows either ff s    c i ff s    c i  or both   hence   t  rule obviously
applied way  i   ff  satisfies resulting constraint system   
   rule applicable s    n r   then since  i   ff  satisfies  it holds
ff s      n r i therefore set fd   j  ff s   d    ri g n elements 
hand  n r successors r successor
 ff s   ff t     ri   thus  conclude pigeonhole principle  see e g  
lewis   papadimitriou        page     exist least  two r successors t  t 
ff t    ff t     since  i   ff  satisfies   constraint    t    therefore
one two must variable  let s say t      obviously  i   ff  satisfies  y t  
given constraint system   one rule might applicable it  define
following strategy application rules 
   apply rule variable rule applicable individuals 
   apply rule variable x rule applicable variable x 
   apply generating rules nongenerating rule applicable 
strategy ensures variables processed one time according
ordering    
point on  assume rules always applied according strategy
always start constraint system coming alcnr knowledge
base   following lemma direct consequence assumptions 

lemma      stability  let constraint system x variable   let

generating rule applicable x according strategy  let   constraint system
derivable sequence  possibly empty  applications rules 
   rule applicable   variable x
    s  x     s    x 
   variable x variable    i e   variable
substituted another variable constant 
   contradiction  suppose s    s      sn     
ft  u             xg rule applicable variable x   
exists minimal i  n  case si   note      
fact  strategy  rule applicable x rule applicable  
rule applicable variable z z x s          si    follows
si   si rule applied x variable w x w  exhaustive
proof 

   

fibuchheit  donini    schaerf

analysis rules see that whichever rule applied si   si  no new
constraint form   c yrz added si     therefore rule applicable
si   contradicting assumption 
   contradiction  suppose  s  x      s    x   call direct predecessor x 
rule must applied either x itself  obviously x  therefore
former case cannot point    case analysis shows rules
applied x generating ones      rules 
rules add new constraints direct successors x x
therefore change    x  
   follows point    strategy 
lemma     proves variable x direct successor     x  stable 
i e   change subsequent applications rules  fact  variable
direct successor means generating rule applied it  therefore
 lemma        point    x  change 
constraint system complete propagation rule applies it  complete system
derived system called completion   clash constraint system
one following forms 

fs   g
fs  a  s   ag  concept name 
fs    n r g   fsp   ti          spk ti j      n    g
  fti    tj j i  j      n         j g 
r   p  u       u pk  
clash evidently unsatisfiable constraint system  example  last case
represents situation object at most restriction set rsuccessors cannot identified  either individuals
created at least restrictions  
constraint system containing clash obviously unsatisfiable  purpose
calculus generate completions  look presence clashes inside 
completion contains clash  prove always possible construct
model basis   looking technical details proof  let us
consider example application calculus checking satisfiability 

example     consider following knowledge base   ht   ai 
  fitalian v  friend italiang
  ffriend peter  susan  
 friend  italian peter  
 friend italian susan g
corresponding constraint system is 
  f x x   italian  friend italian 
peterfriendsusan

 

   

fidecidable reasoning terminological kr systems

 
  

  
 
g

 

peter  friend italian
susan  friend italian
peter   susan

 

sequence applications propagation rules follows 
s      fsusan   italiang     rule 
s    s    fpeter   italian  friend italiang    x rule 
s    s    fsusan   italian  friend italiang    x rule 
s    s    fpeter   italiang   t  rule 
s    s    fsusanfriendx  x  italiang      rule 
s    s    fx   italian  friend italiang    x rule 
s    s    fx   friend italiang   t rule 
s    s    fxfriendy  y  italiang     rule 
s    s    fy   italian  friend italiang    x rule 
s     s    fy   friend italiang   t  rule 
one verify s   complete clash free constraint system  particular     rule applicable   fact  since x s   condition   satisfied  s   one
build interpretation   follows  again  give interpretation concept
role names  
  fpeter  susan  x  yg
peteri   peter  susani   susan  ff x    x  ff y    y 
italiani   fx  yg
friendi   f peter  susan    susan  x    x  y    y  y g
easy see indeed model  
order prove always possible obtain interpretation complete
clash free constraint system need additional notions  let constraint system
x  w variables   call w witness x three following conditions hold 
   x w
   w x
   variable z z w z satisfies conditions        i e   w
least variable w r t  satisfying conditions      
say x blocked  by w  x witness  w    following lemma states
property witnesses 

lemma     let constraint system  x variable   x blocked
   x direct successor
   x exactly one witness 
   

fibuchheit  donini    schaerf

   contradiction  suppose x blocked xpy  
completion process leading generating rule must applied x system
   follows definition rules   every variable w x
x s w  lemma     know  constraint system derivable
  every w x x s w  hence witness x  
contradicting hypothesis x blocked 
   follows directly condition    witness 
consequence lemma      constraint system   w  witness x w 
cannot witness itself  since relations     equivalence transitive 
uniqueness witness blocked variable important defining following
particular interpretation  
let constraint system  define canonical interpretation canonical  assignment ffs follows 
proof 

 

  
  
  
  

   fs j object g
ffs  s    
  ais s 
 s  t    p
 a  spt
 b  blocked variable  w witness wpt  

call  s  t  p role pair  s  t    p   call  s  t  role pair
 s  t  p role pair role p   call role pair explicit comes case
   a  definition canonical interpretation call implicit comes
case    b  
lemma     obvious role pair cannot explicit implicit 
moreover  variable implicit role pair role pairs implicit
come exactly one witness  stated following lemma 

lemma     let completion x variable   let canonical interpretation   x implicit role pair  x    
   role pairs x implicit
   exactly one witness w x roles p p  rolepairs  x y  x  constraint wpy  

first statement follows lemma      point      second statement follows
lemma      point     together definition  
machinery needed prove main theorem subsection 
proof 

theorem     let complete constraint system  contains clash

satisfiable 

   

fidecidable reasoning terminological kr systems

proof  let ffs canonical interpretation canonical  assignment  
we  prove pair  is   ffs   satisfies every constraint c   c form spt
   t   is   ffs   satisfies definition  and ffs   considering    rule
   rule see constraint form  
    c form
s  c   show induction structure c   c  
first consider base cases  c concept name    c definition
  c      obviously    is   case c     cannot occur since
clash free 
next analyze turn possible complex concept c   c form  c 
c  concept name since concepts simple  constraint s  c 
since clash free     c is   is    n c is   hence     c  is  
c form c  u c   since complete  s  c  s  c   
induction hypothesis    c is   c is   hence    c  u c  is  
c form c  c   since complete  either s  c  s  c 
  induction hypothesis  either   c is   c is   hence    c  c  is  
c form  r d  show  s  t    ris holds
  dis    s  t    ris   according lemma     two cases occur  either
r successor blocked witness w r successor w  
first case t  must since complete  induction hypothesis
  dis   second case definition witness  w   r d
completeness   t  must   induction hypothesis
  dis  
c form  r d show exists    s  t    ris
  dis   since complete  either r successor
t    variable blocked witness w   first case  induction
hypothesis definition     dis  s  t    ris   second case
w   r d   since w cannot blocked complete 
r successor w t    induction hypothesis
  dis definition  s  t    ris  
c form   n r  show goal contradiction  assume     
n r is   exist atleast n     distinct objects t           tn    s  ti     ris    
   n      means that  since r   p  u       u pk   pairs  s  ti    pjis  
     n     j      k  according lemma     one two following cases must
occur  either spj ti j      k       n     exists witness w
wpiti j      k      n       first case    rule
applicable completeness   this means ti  s pairwise separated 
i e   contains constraints ti    tj   i  j      n         j   contradicts fact
clash free  second case leads analogous contradiction 
c form   n r  show goal contradiction  assume     
n r is   exist atmost   n  m possibly    distinct objects t          tm
 s  ti     ris        m  consider two cases  first case  blocked
  since r successors      rule applicable s 
contradicts fact complete  second case  blocked witness w  
since r successors w      rule applicable w  leads
contradiction 

   

fibuchheit  donini    schaerf

c form  x x  then  since complete  object   t 
 and  previous cases    dis   therefore  pair  is   ffs   satisfies  x x  d 
finally  since  is   ffs   satisfies constraints    is   ffs   satisfies  

theorem      correctness  constraint system satisfiable exists
least one clash free completion  

    follows immediately theorem          clearly  system containing
clash unsatisfiable  every completion unsatisfiable  proposition    
  unsatisfiable 
proof 

    termination complexity calculus

given constraint system   call ns number concepts appearing   including
concepts appearing substring another concept  notice ns bounded
length string expressing  

lemma     let constraint system let   derived means

propagation rules  set variables   including  ns variables
least two variables x y x  
 

constraint x  c     may contain concepts constraint system  
since ns concepts  given variable x cannot  ns different
sets constraints x  c    
proof 

lemma     let constraint system let   constraint system derived

applying propagation rules given strategy  then   
 ns non blocked variables 

suppose  ns     non blocked variables  lemma      know
  least two variables y    y  y  y    obviously either y  y 
y  y  holds  suppose y  y    definitions witness blocked either y 
witness y  exists variable y  y  y  y  witness y   
cases y  blocked  contradicting hypothesis 
proof 

theorem       termination space complexity  let alcnr knowledge
base let n size  every completion finite size o   n   

let completion   lemma     follows  n
non blocked variables   therefore  n total variables  
maximum number direct successors variable  
observe bounded number  r c concepts  at n  plus sum
numbers appearing number restrictions  since numbers expressed binary 
sum bounded  n   hence   n   n  since number individuals
bounded n  total number objects   n   n    n   n    n   n  
is  o   n  
proof 

   

fidecidable reasoning terminological kr systems

number different constraints form s  c    x x  c object
involved bounded n  constraint size linear n  hence  total size
constraints bounded n n   n   o   n  
number constraints form spt   
    bounded    n       n 
constraint constant size 
conclusion  size o   n  
notice one coarse upper bound  obtained theoretical purposes 
practical cases expect actual size much smaller that  example 
numbers involved number restrictions either expressed unary notation 
limited constant  the latter reasonable restriction practical systems 
argumentation analogous one would lead bound   n  

theorem       decidability  given alcnr knowledge base   checking whether
satisfiable decidable problem 

follows theorems          fact satisfiable
satisfiable 
refine theorem  giving tighter bounds time required
decide satisfiability 
proof 

theorem       time complexity  given alcnr knowledge base   checking
whether satisfiable done nondeterministic exponential time 

order prove claim sucient show completion obtained
exponential number applications rules  since number constraints
completion exponential  theorem       rule     rule  adds new
constraints constraint system  follows rules applied
exponential number times  regarding    rule  applied object
many times number direct successors  since number exponential
 if numbers coded binary  w r t  size knowledge base  claim follows 
lower bound complexity kb satisfiability obtained exploiting previous
results language alc   sublanguage alcnr include
number restrictions role conjunction  know mcallester          independently  observation nutt        kb satisfiability alc  knowledge bases
exptime hard  see  garey   johnson        page      definition  hence
hard alcnr knowledge bases  too  hence  expect find algorithm
solving problem polynomial space  unless pspace exptime  therefore 
expect substantially improve space complexity calculus  already works
exponential space  discuss possible improvements time complexity 
proposed calculus works nondeterministic exponential time  hence improves
one proposed  buchheit  donini    schaerf        sec     works deterministic double exponential time  key improvement showed kb
model model exponential size  however  may argued
is  calculus cannot yet turned practical procedure  since procedure would simply simulate nondeterminism second level exponentiality  resulting
proof 

   

fibuchheit  donini    schaerf

double exponential time procedure  however  different combinations concepts
exponentially many  this cardinality powerset set concepts   hence  double exponential time procedure wastes time re analyzing
objects different names yet       different constraint
systems  could avoided allow variable blocked witness
previously analyzed constraint system  technique would similar one
used  pratt         tree automata technique used  vardi   wolper        
improving simple tableaux methods variants propositional dynamic logics  since
calculus considers one constraint system time  modification calculus
would necessary accomplish task formal way  outside scope
paper  formal development deterministic exponential time procedure
subject future research 
notice that  since domain canonical interpretation always finite 
implicitly proved alcnr knowledge bases finite model property 
i e   satisfiable knowledge base finite model  property extensively
studied modal logics  hughes   cresswell        dynamic logics  harel        
particular  technique  called filtration  developed prove finite model
property build finite model satisfiable formula  technique allows one
build finite model infinite one grouping worlds structure equivalence
classes  based set formulae satisfied world  interesting
observe calculus  based witnesses  considered variant filtration
technique equivalence classes determined basis  equivalence
relation  however  number restrictions  variables  equivalent cannot
grouped  since might separated  e g   might introduced
application    rule   nevertheless  direct successors 
stated point    b  definition canonical interpretation page      would
correspond grouping variables infinite model way separations
preserved 

   relation previous work
section discuss relation paper previous work reasoning inclusions  particular  first consider previously proposed reasoning techniques deal
inclusions terminological cycles  discuss relation inclusions
terminological cycles 

    reasoning techniques
mentioned introduction  previous results obtained baader et al         
baader      a      b   nebel               schild        dionne et al               
nebel        chapter    considers language f   containing concept conjunction 
universal quantification number restrictions  tboxes containing  possibly cyclic 
concept definitions  role definitions disjointness axioms  stating two concept names
disjoint   nebel shows subsumption f  concepts w r t  tbox decidable 
however  argument uses non constructive  shows sucient con   

fidecidable reasoning terminological kr systems

sider finite interpretations size bounded size tbox order decide
subsumption 
 baader      b  effect three types semantics descriptive  greatest fixpoint least fixpoint semantics for language fl   containing concept conjunction
universal quantification  described help finite automata  baader reduces
subsumption fl   concepts w r t  tbox containing  possibly cyclic  definitions
form    c  which calls terminological axioms  decision problems finite automata 
particular  shows subsumption w r t  descriptive semantics decided polynomial space using buchi automata  using results  baader      b    nebel       
characterization subsumption problem w r t  descriptive semantics given
help deterministic automata  whereas buchi automata nondeterministic  
yields pspace algorithm deciding subsumption 
 baader et al         attention restricted language alc   particular 
paper considers problem checking satisfiability single equation
form c      c alc  concept  problem  called universal satisfiability problem  shown equivalent checking satisfiability alc  tbox  see
proposition      
 baader      a   extension alc   called alc reg   introduced  supports
constructor express transitive closure roles  means transitive closure
roles possible replace cyclic inclusions form v equivalent acyclic
ones  problem checking satisfiability alc reg  concept solved
paper  shown using transitive closure possible reduce satisfiability
alc  concept w r t  alc  tbox   fc  v d          cn v dn g concept
satisfiability problem alc reg  w r t  empty tbox   since problem concept
satisfiability w r t  tbox trivially harder checking satisfiability tbox 
paper extends result given  baader et al         
technique exploited  baader et al          baader      a  based
notion concept tree  concept tree generated starting concept c order
check satisfiability  or universal satisfiability   way concept tree generated
concept c similar avor way complete constraint system generated
constraint system fx  c g  however  extension concept tree method
deal number restrictions individuals knowledge base neither obvious 
suggested cited papers  hand  extension calculus based
constraint systems immediate  provided additional features counterpart
first order logic 
 schild        results general  baader      a  obtained
considering languages expressive alc reg dealing concept satisfiability problem languages  results obtained establishing correspondence
concept languages propositional dynamic logics  pdl   reducing
given problem satisfiability problem pdl  approach allows schild find
several new results exploiting known results pdl framework  however  cannot
used deal every concept language  fact  correspondence cannot established
language includes concept constructors counterpart pdl  e g  
number restrictions  individuals abox  
   

fibuchheit  donini    schaerf

recently  algebraic approach cycles proposed  dionne et al         
 possibly cyclic  definitions interpreted determining equivalence relation
terms describing concepts  existence uniqueness equivalence relation
derives aczel s results non well founded sets   dionne et al        
researchers prove subsumption based approach equivalent subsumption
greatest fixpoint semantics  language analyzed small fragment one used
tkrs k rep  contains conjunction existential universal quantifications combined
one construct  hence similar fl     diculty extending results
lies fact clear individuals interpreted algebraic
setting  moreover  believe constructive approaches algebraic one  give
counterintuitive results applied non constructive features concept languages as
negation number restrictions 
conclusion  approaches  i e   reduction automata problems  concept trees 
reduction pdl algebraic semantics  deal tboxes don t seem
suitable deal aboxes  hand  constraint system technique  even
though conceived tbox reasoning  easily extended abox reasoning 
shown  hollunder        baader   hollunder        donini et al         

    inclusions versus concept definitions
compare expressive power tboxes defined set inclusions  as done
paper  tboxes defined set  possibly cyclic  concept introductions
form      d 
unlike  baader      a   schild         consider reasoning problems dealing
tbox abox together  moreover  use descriptive semantics concept introductions  inclusions  result obtained inclusion statements
concept introductions actually expressive power  detail  show
satisfiability knowledge base   ha  i  set inclusion statements 
reduced satisfiability knowledge base     ha    i   set
concept introductions  direction  concept introductions inclusions 
trivial since introductions form    expressed pair inclusions
v v a  concept name specification   rewritten
inclusion v  as already mentioned section    
notation  given tbox   fc  v d           cn v dn g  define concept ct
ct     c  d   u u   cn dn    pointed  baader      a  alc  
interpretation satisfies tbox satisfies equation ct      result
easily extends alcnr  stated following proposition 

proposition     given alcnr tbox   fc  v d          cn v dng  interpretation satisfies satisfies equation ct     
interpretation satisfies inclusion c v satisfies equation
 c      satisfies set equations  c  d               cn dn    
satisfies   c  d   u u   cn dn        claim follows 
proof 

   

fidecidable reasoning terminological kr systems

given knowledge base   ha  concept appearing   define
knowledge base     ha      follows 
a      fa b  j b individual g
    fa   ct u  p  a u u  pn  ag
p    p          pn role names appearing   note   single
inclusion  could thought one primitive concept specification 
theorem       ha  satisfiable     ha    i satisfiable 
  following
proof  order simplify machinery proof  use
 logically equivalent  form 
    fa v ct   v  p  a         v  pn  ag
 note use symbol  v  instead      concept name appears
left hand side many statements  must consider statements inclusions  
    suppose   ha  satisfiable  theorem      exists complete
constraint system without clash  defines canonical interpretation
model   define constraint system   follows 
      fw  j w object g
call canonical interpretation associated    prove model
   
first observe every assertion satisfied since equal except
interpretation a  appear a  therefore  every assertion a 
satisfied   either assertion a   if assertion
form a b   definition   
regarding     note definition    ais       therefore
sides inclusions form v  pi  a  i             n  interpreted   hence
satisfied   since appear ct    ct  is    ct  is  
moreover  since satisfies   have  proposition       ct  is    
therefore  ct  is    ct  is       follows sides inclusion
v ct interpreted   conclusion  satisfies    
    suppose     ha      satisfiable  again  theorem      exists
complete constraint system   without clash  defines canonical interpretation
model    show model  
first all  assertions satisfied a    satisfies every
assertion a    prove satisfies   first prove following equation 
ais  
   
equation   proved showing that  every object     ais   order
that  observe general property constraint systems  every variable   successor
individual  comes definition generating rules  add variables
constraint system direct successors existing objects  beginning
contains individuals 
then  equation   proved observing following three facts 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

   

 

fibuchheit  donini    schaerf

   every individual b   b   ais  
 

 

   object ais   satisfies inclusions ais   p  a is         
ais   pn  a is   every direct successor ais  
   successor relation closed direct successor relation
 

 

 

 

 

 

 

fundamental theorem induction  see e g   wand        page     conclude every object ais   proves equation   holds 
equation    fact satisfies inclusion ais  ct  is   derive
 ct  is     satisfies equation ct      hence  proposition
     satisfies   completes proof theorem 
machinery present proof new  fact  realizing inclusions
v  p   a         v  pn  a simulate transitive closure roles p           pn   one
recognize similarities proofs given schild        baader      a   difference proofs rely notion connected model  baader uses equivalent
notion rooted model   contrast  models obtain connected 
individuals knowledge base not  exploit weaker property
every variable model successor individual 
note reduction strongly relies fact disjunction  t  complement     within language  fact  disjunction complement necessary
order express inclusions tbox inside concept ct   therefore 
proof holds alc  knowledge bases  hold tkrss allowing
constructors concepts  e g   back  
furthermore  language fl  introduced section      opposite result holds 
fact  mcallester        proves computing subsumption w r t  set inclusions
exptime hard  even small language fl    conversely  nebel        proves
subsumption w r t  set cyclic definitions fl  done pspace  combining
two results  conclude fl  subsumption w r t  set inclusions
subsumption w r t  set definitions different complexity classes  hence  assuming
exptime    pspace  inclusion statements strictly expressive concept
definitions fl  
still open whether inclusions definitions equivalent languages whose
expressivity fl  alc  
 

 

 

 

 

 

 

 

 

   discussion

paper proved decidability main inference services tkrs based
concept language alcnr  believe result theoretical
importance  bears impact existing tkrss  complete procedure
easily devised calculus provided section    procedure  one build
ecient  but still complete  ones  described end section     
applying standard optimization techniques described  baader  hollunder 
nebel  profitlich    franconi         optimized procedure perform well small
sublanguages reasoning tractable  still complete solving
complex tasks  however  complete procedure still take exponential time
   

fidecidable reasoning terminological kr systems

space worst case  may argued could practical applicability 
comment following point 
firstly  complete procedure  possibly optimized  offers benchmark comparing
incomplete procedures  terms performance  terms missed inferences  let us illustrate point detail  providing blatant paradox  consider
mostly incomplete constant time procedure  answering always  no  check  obviously useless procedure outperforms one  missed inferences taken
account  paradox shows incomplete procedures meaningfully compared missed inferences considered  recognize missed inferences large
examples  one needs exactly complete procedure even ecient one like ours 
believe fair detection missed inferences would great help even
satisfaction end users primary criterion judging incomplete procedures 
secondly  complete procedure used  anytime classification   proposed
 macgregor         idea use fast  incomplete algorithm first step
analyzing input knowledge  reasoning background 
cited paper  resolution based theorem provers proposed performing background
reasoning  argue specialized complete procedure perform better
general theorem prover  instance  theorem provers usually specifically designed
deal filtration techniques 
moreover  calculus easily adapted deal rules  outlined
introduction  rules often used practical tkrss  rules behave one way concept
inclusions no contrapositive allowed and applied known individuals 
result shows rules alcnr applied unknown individuals  our
variables constraint system  without endangering decidability  result
compared negative result  baader   hollunder         shown
subsumption becomes undecidable rules applied unknown individuals classic 
finally  calculus provides new way building incomplete procedures  modifying
propagation rules  since rules build model  modifications
semantical counterpart gives precise account incomplete procedures
obtained  example  one could limit size canonical model polynomial
size kb  semantically  would mean consider  small  models 
reasonable intended models kb much bigger size
kb itself  believe way designing incomplete procedures  from above   i e  
starting complete set inferences weakening it  dual way incomplete
procedures realized far  from below   i e   starting already incomplete
inferences adding inference power need 
research still needed address problems issuing practical systems 
example  completely express role restrictions inside number restrictions  qualified number
restrictions  hollunder   baader        taken account  also  language
resulting addition enumerated sets  called one of classic   role fillers
alcnr still studied  although seem endanger filtration
method used  instead  different method might necessary inverse roles added
alcnr  since finite model property lost  as shown schild         finally 
addition concrete domains  baader   hanschke        remains open 
   

fibuchheit  donini    schaerf

acknowledgements
thank maurizio lenzerini inspiration work  well several discussions contributed paper  werner nutt pointed us observation mentioned end section    thank franz baader helpful comments
earlier drafts  thank anonymous reviewers  whose stimulating comments
helped us improving submitted version 
research partly done first author visiting dipartimento di informatica e sistemistica  universita di roma  la sapienza   third author acknowledges yoav shoham hospitality computer science department stanford
university  author developing part research 
work supported esprit basic research action n       compulog    progetto finalizzato sistemi informatici e calcolo parallelo
cnr  italian research council   ldr  ibridi  

references

abrial  j          data semantics  klimbie  j     koffeman  k   eds    data base
management  pp        north holland publ  co   amsterdam 
baader  f       a   augmenting concept languages transitive closure roles  alternative terminological cycles  tech  rep  rr        deutsches forschungszentrum
fur kunstliche intelligenz  dfki   kaiserslautern  germany  abridged version appeared proc    th int  joint conf  artificial intelligence ijcai     pp 
        
baader  f       b   terminological cycles kl one based knowledge representation languages  tech  rep  rr        deutsches forschungszentrum fur kunstliche intelligenz
 dfki   kaiserslautern  germany  abridged version appeared proc   th
nat  conf  artificial intelligence aaai     pp          
baader  f   burkert  h  j   hollunder  b   nutt  w     siekmann  j  h          concept
logics  lloyd  j  w   ed    computational logics  symposium proceedings  pp 
         springer verlag 
baader  f     hanschke  p          schema integrating concrete domains concept
languages  proc    th int  joint conf  artificial intelligence ijcai    
pp          sydney 
baader  f     hollunder  b          terminological knowledge representation system
complete inference algorithm  proc  workshop processing declarative
knowledge  pdk     lecture notes artificial intelligence  pp         springerverlag 
baader  f     hollunder  b          embedding defaults terminological knowledge
representation formalisms  proc   rd int  conf  principles knowledge
representation reasoning kr     pp           morgan kaufmann  los altos 
   

fidecidable reasoning terminological kr systems

baader  f   hollunder  b   nebel  b   profitlich  h  j     franconi  e          empirical
analisys optimization techniques terminological representation systems  proc 
 rd int  conf  principles knowledge representation reasoning kr    pp           morgan kaufmann  los altos 
beck  h  w   gala  s  k     navathe  s  b          classification query processing
technique candide semantic data model  proc   th ieee int  conf 
data engineering 
borgida  a   brachman  r  j   mcguinness  d  l     alperin resnick  l          classic 
structural data model objects  proc  acm sigmod int  conf 
management data  pp        
brachman  r  j     levesque  h  j          tractability subsumption framebased description languages  proc   th nat  conf  artificial intelligence
aaai     pp        
brachman  r  j   pigman gilbert  v     levesque  h  j          essential hybrid
reasoning system  knowledge symbol level accounts krypton  proc 
 th int  joint conf  artificial intelligence ijcai     pp          los angeles 
brachman  r  j     schmolze  j  g          overview kl one knowledge representation system  cognitive science                 
buchheit  m   donini  f  m     schaerf  a          decidable reasoning terminological
knowledge representation systems  tech  rep  rr        deutsches forschungszentrum fur kunstliche intelligenz  dfki   saarbrucken  germany  abridged version
appeared proc    th int  joint conf  artificial intelligence ijcai    pp 
        
catarci  t     lenzerini  m          representing using interschema knowledge
cooperative information systems  journal intelligent cooperative inf  syst 
appear 
dionne  r   mays  e     oles  f  j          non well founded approach terminological
cycles  proc    th nat  conf  artificial intelligence aaai     pp          
aaai press the mit press 
dionne  r   mays  e     oles  f  j          equivalence model theoretic structural
subsumption description logics  proc    th int  joint conf  artificial
intelligence ijcai     pp          chambery  france  morgan kaufmann  los altos 
donini  f  m   hollunder  b   lenzerini  m   marchetti spaccamela  a   nardi  d     nutt 
w          complexity existential quantification concept languages  artificial
intelligence               
donini  f  m   lenzerini  m   nardi  d     nutt  w       a   complexity concept
languages  allen  j   fikes  r     sandewall  e   eds    proc   nd int 
conf  principles knowledge representation reasoning kr     pp          
morgan kaufmann  los altos 
   

fibuchheit  donini    schaerf

donini  f  m   lenzerini  m   nardi  d     nutt  w       b   tractable concept languages 
proc    th int  joint conf  artificial intelligence ijcai     pp         
sydney 
donini  f  m   lenzerini  m   nardi  d     schaerf  a       c   hybrid system integrating
datalog concept languages  proc   nd conf  italian association
artificial intelligence  no      lecture notes artificial intelligence  springerverlag  extended version appeared working notes aaai fall
symposium  principles hybrid reasoning  
donini  f  m   lenzerini  m   nardi  d     schaerf  a          deduction concept languages  subsumption instance checking  journal logic computation 
appear 
fitting  m          first order logic automated theorem proving  springer verlag 
garey  m     johnson  d          computers intractability a guide npcompleteness  w h  freeman company  san francisco 
harel  d          dynamic logic  handbook philosophical logic  vol     pp          
d  reidel  dordrecht  holland 
heinsohn  j   kudenko  d   nebel  b     profitlich  h  j          empirical analysis
terminological representation systems  proc    th nat  conf  artificial
intelligence aaai     pp           aaai press the mit press 
hollunder  b          hybrid inferences kl one based knowledge representation systems  proc  german workshop artificial intelligence  pp         springerverlag 
hollunder  b     baader  f          qualifying number restrictions concept languages 
tech  rep  rr        deutsches forschungszentrum fur kunstliche intelligenz  dfki  
kaiserslautern  germany  abridged version appeared proc   nd int  conf 
principles knowledge representation reasoning kr    
hughes  g  e     cresswell  m  j          companion modal logic  methuen  london 
kaczmarek  t  s   bates  r     robins  g          recent developments nikl  proc 
 th nat  conf  artificial intelligence aaai     pp          
lenzerini  m     schaerf  a          concept languages query languages  proc 
 th nat  conf  artificial intelligence aaai     pp          
levesque  h  j          foundations functional approach knowledge representation 
artificial intelligence              
lewis  h  r     papadimitriou  c  h          elements theory computation 
prentice hall  englewood cliffs  new jersey 
macgregor  r          inside loom description classifier  sigart bulletin        
      
   

fidecidable reasoning terminological kr systems

macgregor  r          what s needed make description logic good kr citizen 
working notes aaai fall symposium issues description logics  users
meet developers  pp        
macgregor  r     bates  r          loom knowledge representation language  tech 
rep  isi rs         university southern california  information science institute 
marina del rey  cal 
macgregor  r     brill  d          recognition algorithms loom classifier 
proc    th nat  conf  artificial intelligence aaai     pp           aaai
press the mit press 
mays  e   dionne  r     weida  r          k rep system overview  sigart bulletin 
      
mcallester  d          unpublished manuscript 
mcguinness  d  l          making description logic based knowledge representation systems
usable  working notes aaai fall sysmposium issues description
logics  users meet developers  pp        
mylopoulos  j   bernstein  p     wong  e          language facility designing databaseintensive applications  acm trans  database syst                  
nebel  b          computational complexity terminological reasoning back  artificial
intelligence                  
nebel  b          reasoning revision hybrid representation systems  lecture notes
artificial intelligence  springer verlag 
nebel  b          terminological cycles  semantics computational properties  sowa 
j  f   ed    principles semantic networks  pp           morgan kaufmann  los
altos 
nutt  w          personal communication 
patel schneider  p  f          small beautiful knowledge representation  proc 
ieee workshop knowledge based systems  extended version appeared
fairchild tech  rep      flair tech  rep      october      
patel schneider  p          undecidability subsumption nikl  artificial intelligence 
            
pratt  v  r          practical decision method propositional dynamic logic  proc 
  th acm sigact symp  theory computing stoc     pp          
quantz  j     kindermann  c          implementation back system version    tech 
rep  kit report     fb informatik  technische universitat berlin  berlin  germany 
rich  editor  c          sigart bulletin  special issue implemented knowledge representation reasoning systems       
   

fibuchheit  donini    schaerf

schaerf  a       a   complexity instance checking problem concept languages existential quantification  journal intelligent information systems    
         abridged version appeared proc   th int  symp  methodologies intelligent systems ismis    
schaerf  a       b   reasoning individuals concept languages  tech  rep        
dipartimento di informatica e sistemistica  universita di roma  la sapienza  
abridged version appeared proc   rd conf  italian association
artificial intelligence ai ia    
schild  k          undecidability subsumption u   tech  rep  kit report     fb
informatik  technische universitat berlin  berlin  germany 
schild  k          correspondence theory terminological logics  preliminary report 
proc    th int  joint conf  artificial intelligence ijcai     pp         
sydney 
schmidt schau  m          subsumption kl one undecidable  brachman  r  j  
levesque  h  j     reiter  r   eds    proc   st int  conf  principles
knowledge representation reasoning kr     pp           morgan kaufmann 
los altos 
schmidt schau  m     smolka  g          attributive concept descriptions complements  artificial intelligence               
vardi  m     wolper  p          automata theoretic techniques modal logics programs  journal computer system science               preliminary version
appeared proc    th acm sigact symp  theory computing stoc   
vilain  m          deduction parsing  tractable classification kl one framework 
proc   th nat  conf  artificial intelligence aaai     pp          
wand  m          induction  recursion  programming  north holland publ  co  
amsterdam 
woods  w  a     schmolze  j  g          kl one family  lehmann  f   ed   
semantic networks artificial intelligence  pp           pergamon press  published
special issue computers   mathematics applications  volume     number
    

   


