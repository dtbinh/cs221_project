journal of artificial intelligence research                 

submitted       published      

decidable reasoning in terminological knowledge
representation systems
martin buchheit

german research center for artificial intelligence  dfki 
stuhlsatzenhausweg    d       saarbrucken  germany

francesco m  donini
andrea schaerf

buchheit dfki uni sb de
donini assi dis uniroma  it
aschaerf assi dis uniroma  it

dipartimento di informatica e sistemistica
universita di roma  la sapienza   via salaria      i       roma  italy

abstract

terminological knowledge representation systems  tkrss  are tools for designing and
using knowledge bases that make use of terminological languages  or concept languages  
we analyze from a theoretical point of view a tkrs whose capabilities go beyond the
ones of presently available tkrss  the new features studied  often required in practical
applications  can be summarized in three main points  first  we consider a highly expressive terminological language  called alcnr  including general complements of concepts 
number restrictions and role conjunction  second  we allow to express inclusion statements between general concepts  and terminological cycles as a particular case  third  we
prove the decidability of a number of desirable tkrs deduction services  like satisfiability 
subsumption and instance checking  through a sound  complete and terminating calculus
for reasoning in alcnr knowledge bases  our calculus extends the general technique
of constraint systems  as a byproduct of the proof  we get also the result that inclusion
statements in alcnr can be simulated by terminological cycles  if descriptive semantics
is adopted 

   introduction
a general characteristic of many proposed terminological knowledge representation systems
 tkrss  such as krypton  brachman  pigman gilbert    levesque         nikl  kaczmarek  bates    robins         back  quantz   kindermann         loom  macgregor  
bates         classic  borgida  brachman  mcguinness    alperin resnick         kris
 baader   hollunder         k rep  mays  dionne    weida         and others  see rich 
editor        woods   schmolze         is that they are made up of two different components  informally speaking  the first is a general schema concerning the classes of individuals
to be represented  their general properties and mutual relationships  while the second is a
 partial  instantiation of this schema  containing assertions relating either individuals to
classes  or individuals to each other  this characteristic  which the mentioned proposals
inherit from the seminal tkrs kl one  brachman   schmolze         is shared also by
several proposals of database models such as abrial s         candide  beck  gala   
navathe         and taxis  mylopoulos  bernstein    wong        
retrieving information in actual knowledge bases  kbs  built up using one of these systems is a deductive process involving both the schema  tbox  and its instantiation  abox  
c      ai access foundation and morgan kaufmann publishers  all rights reserved 

fibuchheit  donini    schaerf

in fact  the tbox is not just a set of constraints on possible aboxes  but contains intensional
information about classes  this information is taken into account when answering queries
to the kb 
during the realization and use of a kb  a tkrs should provide a mechanical solution
for at least the following problems  from this point on  we use the word concept to refer to
a class  
   kb satisfiability   are an abox and a tbox consistent with each other  that is  does
the kb admit a model  a positive answer is useful in the validation phase  while the
negative answer can be used to make inferences in refutation style  the latter will be
precisely the approach taken in this paper 
   concept satisfiability   given a kb and a concept c   does there exist at least one
model of the kb assigning a non empty extension to c   this is important not only
to rule out meaningless concepts in the kb design phase  but also in processing the
user s queries  to eliminate parts of a query which cannot contribute to the answer 
   subsumption   given a kb and two concepts c and d  is c more general than d in
any model of the kb  subsumption detects implicit dependencies among the concepts
in the kb 
   instance checking   given a kb  an individual a and a concept c   is a an instance
of c in any model of the kb  note that retrieving all individuals described by a
given concept  a query in the database lexicon  can be formulated as a set of parallel
instance checkings 
the above questions can be precisely characterized once the tkrs is given a semantics
 see next section   which defines models of the kb and gives a meaning to expressions
in the kb  once the problems are formalized  one can start both a theoretical analysis
of them  and maybe independently a search for reasoning procedures accomplishing the
tasks  completeness and correctness of procedures can be judged with respect to the formal
statements of the problems 
up to now  all the proposed systems give incomplete procedures for solving the above
problems      except for kris   that is  some inferences are missed  in some cases without
a precise semantical characterization of which ones are  if the designer or the user needs
 more  complete reasoning  she he must either write programs in a suitable programming
language  as in the database proposal of abrial  and in taxis   or define appropriate inference rules completing the inference capabilities of the system  as in back  loom  and
classic   from the theoretical point of view  for several systems  e g   loom  it is not even
known if complete procedures can ever exist i e   the decidability of the corresponding
problems is not known 
recent research on the computational complexity of subsumption had an inuence in
many tkrss on the choice for incomplete procedures  brachman and levesque       
   also the system classic is complete  but only w r t  a non standard semantics for the treatment of
individuals  complete reasoning w r t  standard semantics for individuals is not provided  and is conphard  lenzerini   schaerf        

   

fidecidable reasoning in terminological kr systems

started this research analyzing the complexity of subsumption between pure concept expressions  abstracting from kbs  we call this problem later in the paper as pure subsumption   the motivation for focusing on such a small problem was that pure subsumption is
a fundamental inference in any tkrs  it turned out that pure subsumption is tractable
 i e   worst case polynomial time solvable  for simple languages  and intractable for slight
extensions of such languages  as subsequent research definitely confirmed  nebel       
donini  lenzerini  nardi    nutt      a      b  schmidt schau   smolka        donini 
hollunder  lenzerini  marchetti spaccamela  nardi    nutt         also  beyond computational complexity  pure subsumption was proved undecidable in the tkrss u  schild 
       kl one  schmidt schau        and nikl  patel schneider        
note that extending the language results in enhancing its expressiveness  therefore the
result of that research could be summarized as  the more a tkrs language is expressive 
the higher is the computational complexity of reasoning in that language as levesque
       first noted  this result has been interpreted in two different ways  leading to two
different tkrss design philosophies 
    general purpose languages for tkrss are intractable  or even undecidable  and
tractable languages are not expressive enough to be of practical interest   following this interpretation  in several tkrss  such as nikl  loom and back  incomplete
procedures for pure subsumption are considered satisfactory  e g   see  macgregor  
brill        for loom   once completeness is abandoned for this basic subproblem 
completeness of overall reasoning procedures is not an issue anymore  but other issues
arise  such as how to compare incomplete procedures  heinsohn  kudenko  nebel 
  profitlich         and how to judge a procedure  complete enough   macgregor 
       as a practical tool  inference rules can be used in such systems to achieve the
expected behavior of the kb w r t  the information contained in it 
    a tkrs is  by definition  general purpose  hence it must provide tractable and
complete reasoning to a user   following this line  other tkrss  such as krypton
and classic  provide limited tractable languages for expressing concepts  following
the  small can be beautiful  approach  see patel schneider         the gap between
what is expressible in the tkrs language and what is needed to be expressed for the
application is then filled by the user  by a  sort of  programming with inference rules 
of course  the usual problems present in program development and debugging arise
 mcguinness        
what is common to both approaches is that a user must cope with incomplete reasoning 
the difference is that in the former approach  the burden of regaining useful yet missed
inferences is mostly left to the developers of the tkrs  and the user is supposed to specify
what is  complete enough    while in the latter this is mainly left to the user  these
are perfectly reasonable approaches in a practical context  where incomplete procedures
and specialized programs are often used to deal with intractable problems  in our opinion
incomplete procedures are just a provisional answer to the problem the best possible up to
now  in order to improve on such an answer  a theoretical analysis of the general problems
    is to be done 
previous theoretical results do not deal with the problems     in their full generality 
for example  the problems are studied in  nebel        chapter     but only incomplete
   

fibuchheit  donini    schaerf

procedures are given  and cycles are not considered  in  donini  lenzerini  nardi    schaerf 
      schaerf      a  the complexity of instance checking has been analyzed  but only kbs
without a tbox are treated  instance checking has also been analyzed in  vilain        
but addressing only that part of the problem which can be performed as parsing 
in addition  we think that the expressiveness of actual systems should be enhanced
making terminological cycles  see nebel        chapter    available in tkrss  such a
feature is of undoubtable practical interest  macgregor         yet most present tkrss
can only approximate cycles  by using forward inference rules  as in back  classic  loom  
in our opinion  in order to make terminological cycles fully available in complete tkrss  a
theoretical investigation is still needed 
previous theoretical work on cycles was done in  baader      a      b  baader  burkert 
hollunder  nutt    siekmann        dionne  mays    oles              nebel             
schild         but considering kbs formed by the tbox alone  moreover  these approaches
do not deal with number restrictions  except for nebel        section         a basic feature
already provided by tkrss  and the techniques used do not seem easily extensible to
reasoning with aboxes  we compare in detail several of these works with ours in section   
in this paper  we propose a tkrs equipped with a highly expressive language  including constructors often required in practical applications  and prove decidability of problems
     in particular  our system uses the language alcnr  which supports general complements of concepts  number restrictions and role conjunction  moreover  the system allows
one to express inclusion statements between general concepts and  as a particular case 
terminological cycles  we prove decidability by means of a suitable calculus  which is developed extending the well established framework of constraint systems  see donini et al  
    a  schmidt schau   smolka         thus exploiting a uniform approach to reasoning
in tkrss  moreover  our calculus can easily be turned into a decision procedure 
the paper is organized as follows  in section   we introduce the language  and we
give it a tarski style extensional semantics  which is the most commonly used  using this
semantics  we establish relationships between problems     which allow us to concentrate
on kb satisfiability only  in section   we provide a calculus for kb satisfiability  and show
correctness and termination of the calculus  hence  we conclude that kb satisfiability is
decidable in alcnr  which is the main result of this paper  in section   we compare our
approach with previous results on decidable tkrss  and we establish the equivalence of
general  cyclic  inclusion statements and general concept definitions using the descriptive
semantics  finally  we discuss in detail several practical issues related to our results in
section   

   preliminaries

in this section we first present the basic notions regarding concept languages  then we
describe knowledge bases built up using concept languages  and reasoning services that
must be provided for extracting information from such knowledge bases 

    concept languages

in concept languages  concepts represent the classes of objects in the domain of interest 
while roles represent binary relations between objects  complex concepts and roles can be
   

fidecidable reasoning in terminological kr systems

defined by means of suitable constructors applied to concept names and role names  in
particular  concepts and roles in alcnr can be formed by means of the following syntax
 where pi  for i             k  denotes a role name  c and d denote arbitrary concepts  and
r an arbitrary role  

c  d    a j

 j
 j

 c u d  j
 c t d  j

 c j
 r c j
 r c j
  n r  j   n r 
r    p  u    u pk

 concept name 
 top concept 
 bottom concept 
 conjunction 
 disjunction 
 complement 
 universal quantification 
 existential quantification 
 number restrictions 
 role conjunction 

when no confusion arises we drop the brackets around conjunctions and disjunctions 
we interpret concepts as subsets of a domain and roles as binary relations over a domain 
more precisely  an interpretation i    i   i   consists of a nonempty set i  the domain
of i   and a function i  the extension function of i    which maps every concept to a subset
of i and every role to a subset of i  i   the interpretation of concept names and
role names is thus restricted by ai  i   and p i  i  i   respectively  moreover 
the interpretation of complex concepts and roles must satisfy the following equations   fg
denotes the cardinality of a set  

 i   i
 i    

 c u d i
 c t d i
  c  i
  r c  i
  r c  i
  n r i
  n r i
 p  u    u pk  i

 
 
 
 
 
 
 
 

c i   di
c i   di
i n c i
fd    i j  d     d   d     ri   d    c i g
fd    i j  d     d   d     ri   d    c i g
fd    i j  fd  j  d   d     ri g  ng
fd    i j  fd  j  d   d     ri g  ng
p i        pki

    knowledge bases

   

a knowledge base built by means of concept languages is generally formed by two components  the intensional one  called tbox  and the extensional one  called abox 
we first turn our attention to the tbox  as we said before  the intensional level specifies the properties of the concepts of interest in a particular application  syntactically 
such properties are expressed in terms of what we call inclusion statements  an inclusion
   

fibuchheit  donini    schaerf

statement  or simply inclusion  has the form

cvd
where c and d are two arbitrary alcnr concepts  intuitively  the statement specifies
that every instance of c is also an instance of d  more precisely  an interpretation i satisfies
the inclusion c v d if c i  di  
a tbox is a finite set of inclusions  an interpretation i is a model for a tbox t if i
satisfies all inclusions in t  
in general  tkrss provide the user with mechanisms for stating concept introductions
 e g   nebel        section      of the form a    d  concept definition  interpreted as set
equality   or a   d  concept specification  interpreted as set inclusion   with the restrictions
that the left hand side concept a must be a concept name  that for each concept name
at most one introduction is allowed  and that no terminological cycles are allowed  i e  
no concept name may occur neither directly nor indirectly within its own introduction 
these restrictions make it possible to substitute an occurrence of a defined concept by its
definition 
we do not impose any of these restrictions to the form of inclusions  obtaining statements
that are syntactically more expressive than concept introductions  in particular  a definition
of the form a    d can be expressed in our system using the pair of inclusions a v d
and d v a and a specification of the form a   d can be simply expressed by a v d 
conversely  an inclusion of the form c v d  where c and d are arbitrary concepts  cannot
be expressed with concept introductions  moreover  cyclic inclusions are allowed in our
statements  realizing terminological cycles 
as shown in  nebel         there are at least three types of semantics for terminological cycles  namely the least fixpoint  the greatest fixpoint  and the descriptive semantics 
fixpoint semantics choose particular models among the set of interpretations that satisfy a
statement of the form a    d  such models are chosen as the least and the greatest fixpoint
of the above equation  the descriptive semantics instead considers all interpretations that
satisfy the statement  i e   all fixpoints  as its models 
however  fixpoint semantics naturally apply only to fixpoint statements like a    d 
where d is a  function  of a  i e   a may appear in d  and there is no obvious way to
extend them to general inclusions  in addition  since our language includes the constructor
for complement of general concepts  the  function  d may be not monotone  and therefore
the least and the greatest fixpoints may be not unique  whether there exists or not a
definitional semantics that is suitable for cyclic definitions in expressive languages is still
unclear 
conversely  the descriptive semantics interprets statements as just restricting the set of
possible models  with no definitional import  although it is not completely satisfactory in all
practical cases  baader      b  nebel         the descriptive semantics has been considered
to be the most appropriate one for general cyclic statements in powerful concept languages 
hence  it seems to be the most suitable to be extended to our case and it is exactly the one
we have adopted above 
observe that our decision to put general inclusions in the tbox is not a standard one  in
fact  in tkrs like krypton such statements were put in the abox  however  we conceive
   

fidecidable reasoning in terminological kr systems

inclusions as a generalization of traditional tbox statements  acyclic concept introductions 
with their definitional import  can be perfectly expressed with inclusions  and cyclic concept
introductions can be expressed as well  if descriptive semantics is adopted  therefore  we
believe that inclusions should be part of the tbox 
notice that role conjunction allows one to express the practical feature of subroles  for
example  the role adoptedchild can be written as child u adoptedchild   where adoptedchild  is a role name  making it a subrole of child  following such idea  every hierarchy
of role names can be rephrased with a set of role conjunctions  and vice versa 
actual systems usually provide for the construction of hierarchies of roles by means of
role introductions  i e   statements of the form p    r and p   r  in the tbox  however 
in our simple language for roles  cyclic definitions of roles can be always reduced to acyclic
definitions  as explained in  nebel        sec         when role definitions are acyclic  one
can always substitute in every concept each role name with its definition  obtaining an
equivalent concept  therefore  we do not consider role definitions in this paper  and we
conceive the tbox just as a set of concept inclusions 
even so  it is worth to notice that concept inclusions can express knowledge about roles 
in particular  domain and range restrictions of roles can be expressed  in a way similar to
the one in  catarci   lenzerini         restricting the domain of a role r to a concept c
and its range to a concept d can be done by the two inclusions

 r   v c    v  r d
it is straightforward to show that if an interpretation i satisfies the two inclusions  then
ri  c i  d i  

combining subroles with domain and range restrictions it is also possible to partially
express the constructor for role restriction  which is present in various proposals  e g  
the language fl in brachman   levesque         role restriction  written as r   c   is
defined by  r   c  i   f d   d     i  i j  d   d     ri   d    c i g  for example the
role daughter  which can be formulated as child female  can be partially simulated by
child u daughter   with the inclusion   v  daughter  female  however  this simulation
would not be complete in number restrictions  e g   if a mother has at least three daughters 
then we know she has at least three female children  if instead we know that she has three
female children we cannot infer that she has three daughters 
we can now turn our attention to the extensional level  i e   the abox  the abox
essentially allows one to specify instance of relations between individuals and concepts  and
between pairs of individuals and roles 
let o be an alphabet of symbols  called individuals  instance of relationships are expressed in terms of membership assertions of the form 

c  a  

r a  b  

where a and b are individuals  c is an alcnr concept  and r is an alcnr role  intuitively  the first form states that a is an instance of c   whereas the second form states that
a is related to b by means of the role r 
   

fibuchheit  donini    schaerf

in order to assign a meaning to membership assertions  the extension function i of an
interpretation i is extended to individuals by mapping them to elements of i in such a
way that ai    bi if a    b  this property is called unique name assumption  it ensures
that different individuals are interpreted as different objects 
an interpretation i satisfies the assertion c  a  if ai   c i   and satisfies r a  b  if
i
 a   bi     ri   an abox is a finite set of membership assertions  i is a model for an abox
a if i satisfies all the assertions in a 
an alcnr knowledge base  is a pair    ht   ai where t is a tbox and a is an
abox  an interpretation i is a model for  if it is both a model for t and a model for a 
we can now formally define the problems     mentioned in the introduction  let  be
an alcnr knowledge base 
   kb satisfiability    is satisfiable  if it has a model 
   concept satisfiability   c is satisfiable w r t   if there exists a model i of  such that
c i      
   subsumption   c is subsumed by d w r t    if c i  di for every model i of  
   instance checking   a is an instance of c   written  j  c  a   if the assertion c  a  is
satisfied in every model of  
in  nebel        sec        it is shown that the abox plays no active role when checking
concept satisfiability and subsumption  in particular  nebel shows that the abox  subject
to its satisfiability  can be replaced by an empty one without affecting the result of those
services  actually  in  nebel         the above property is stated for a language less expressive than alcnr  however  it is easy to show that it extends to alcnr  it is important
to remark that such a property is not valid for all concept languages  in fact  there are
languages that include some constructors that refer to the individuals in the concept language  e g   the constructor one of  borgida et al         that forms a concept from a set of
enumerated individuals  if a concept language includes such a constructor the individuals
in the tbox can interact with the individuals in the abox  as shown in  schaerf      b  
as a consequence  both concept satisfiability and subsumption depend also on the abox 

example     consider the following knowledge base    ht   ai 
t   f teaches course v  student u  degree bs  t prof 
prof v  degree ms 
 degree ms v  degree bs 
ms u bs v  g
a   fteaches john  cs          degree  john   course cs    g
 is a fragment of a hypothetical knowledge base describing the organization of a university 
the first inclusion  for instance  states that the persons teaching a course are either graduate
students  students with a bs degree  or professors  it is easy to see that  is satisfiable  for
example  the following interpretation i satisfies all the inclusions in t and all the assertions
   

fidecidable reasoning in terminological kr systems

in a  and therefore it is a model for  
i   fjohn  cs     csbg  johni   john  cs   i   cs   
studenti   fjohng  profi      coursei   fcs   g  bsi   fcsbg
msi      teachesi   f john  cs    g  degreei   f john  csb g
we have described the interpretation i by giving only i   and the values of i on
concept names and role names  it is straightforward to see that all values of i on complex
concepts and roles are uniquely determined by imposing that i must satisfy the equations  
on page     
notice that it is possible to draw several non trivial conclusions from   for example  we
can infer that  j  student john   intuitively this can be shown as follows  john teaches
a course  thus he is either a student with a bs or a professor  but he can t be a professor
since professors have at least two degrees  bs and ms  and he has at most one  therefore
he is a student 
given the previous semantics  the problems     can all be reduced to kb satisfiability
 or to its complement  in linear time  in fact  given a knowledge base    ht   ai  two
concepts c and d  an individual a  and an individual b not appearing in   the following
equivalences hold 

c is satisfiable w r t  iff ht   a   fc  b gi is satisfiable 
c is subsumed by d w r t   iff ht   a   f c u  d  b gi is not satisfiable 
 j  c  a  iff ht   a   f  c   a gi is not satisfiable 
a slightly different form of these equivalences has been given in  hollunder         the
equivalences given here are a straightforward consequence of the ones given by hollunder 
however  the above equivalences are not valid for languages including constructors that refer
to the individuals in the concept language  the equivalences between reasoning services in
such languages are studied in  schaerf      b  
based on the above equivalences  in the next section we concentrate just on kbsatisfiability 

   decidability result

in this section we provide a calculus for deciding kb satisfiability  in particular  in subsection     we present the calculus and we state its correctness  then  in subsection      we
prove the termination of the calculus  this will be sucient to assess the decidability of all
problems      thanks to the relationships between the four problems 

    the calculus and its correctness

our method makes use of the notion of constraint system  donini et al       a  schmidtschau   smolka        donini  lenzerini  nardi    schaerf      c   and is based on a
tableaux like calculus  fitting        that tries to build a model for the logical formula
corresponding to a kb 
   

fibuchheit  donini    schaerf

we introduce an alphabet of variable symbols v together with a well founded total
ordering    on v   the alphabet v is disjoint from the other ones defined so far  the
purpose of the ordering will become clear later  the elements of v are denoted by the
letters x  y  z  w  from this point on  we use the term object as an abstraction for individual
and variable  i e   an object is an element of o   v    objects are denoted by the symbols
s  t and  as in section    individuals are denoted by a  b 
a constraint is a syntactic entity of one of the forms 

s  c  spt 

 x x  c  s      t 

where c is a concept and p is a role name  concepts are assumed to be simple  i e   the
only complements they contain are of the form  a  where a is a concept name  arbitrary
alcnr concepts can be rewritten into equivalent simple concepts in linear time  donini
et al       a   a constraint system is a finite nonempty set of constraints 
given an interpretation i   we define an i  assignment ff as a function that maps every
variable of v to an element of i   and every individual a to ai  i e   ff a    ai for all
a   o  
a pair  i   ff  satisfies  the constraint s  c if ff s    c i   the constraint spt if  ff s   ff t  
  p i   the constraint s    t if ff s     ff t   and finally  the constraint  x x  c if c i   i
 notice that ff does not play any role in this case   a constraint system s is satisfiable if
there is a pair  i   ff  that satisfies every constraint in s  
an alcnr knowledge base    ht   ai can be translated into a constraint system
s by replacing every inclusion c v d   t with the constraint  x x   c t d  every
membership assertion c  a  with the constraint a  c   every r a  b  with the constraints
ap  b         apk b if r   p  u       u pk   and including the constraint a  
    b for every pair  a  b 
of individuals appearing in a  it is easy to see that  is satisfiable if and only if s is
satisfiable 
in order to check a constraint system s for satisfiability  our technique adds constraints
to s until either an evident contradiction is generated or an interpretation satisfying it can
be obtained from the resulting system  constraints are added on the basis of a suitable set
of so called propagation rules 
before providing the rules  we need some additional definitions  let s be a constraint
system and r   p  u       u pk  k     be a role  we say that t is an r successor of s in s
if sp  t         spk t are in s   we say that t is a direct successor of s in s if for some role r 
t is an r successor of s  we call direct predecessor the inverse relation of direct successor 
if s is clear from the context we omit it  moreover  we denote by successor the transitive
closure of the relation direct successor  and we denote by predecessor its inverse 
we assume that variables are introduced in a constraint system according to the ordering
    this means  if y is introduced in a constraint system s then x  y for all variables x
that are already in s  
we denote by s  x s  the constraint system obtained from s by replacing each occurrence
of the variable x by the object s 
we say that s and t are separated in s if the constraint s  
    t is in s  
given a constraint system s and an object s  we define the function       as follows 
  s  s     fc j s  c   s g  moreover  we say that two variables x and y are s  equivalent 
   

fidecidable reasoning in terminological kr systems

written x s y   if   s  x      s  y    intuitively  two s equivalent variables can represent the
same element in the potential interpretation built by the rules  unless they are separated 
the propagation rules are 
   s  u fs  c   s  c g   s
if    s  c  u c  is in s  
   s  c  and s  c  are not both in s
   s  t fs  dg   s
if    s  c  t c  is in s  
   neither s  c  nor s  c  is in s  
   d   c  or d   c 
   s    ft  c g   s
if    s   r c is in s  
   t is an r successor of s 
   t  c is not in s
   s    fsp  y         spk y  y   c g   s
if    s   r c is in s  
   r   p  u       u pk  
   y is a new variable 
   there is no t such that t is an r successor of s in s and t  c is in s  
   if s is a variable there is no variable w such that w  s and s s w
   s   fsp  yi          spk yi j i      ng   fyi     yj j i  j      n  i    j g   s
if    s    n r  is in s  
   r   p  u       u pk  
   y           yn are new variables 
   there do not exist n pairwise separated r successors of s in s  
   if s is a variable there is no variable w such that w  s and s s w
   s   s  y t 
if    s    n r  is in s  
   s has more than n r successors in s  
   y  t are two r successors of s which are not separated
   s   x fs  c g   s
if     x x  c is in s  
   s appears in s  
   s  c is not in s  
we call the rules  t and   nondeterministic rules  since they can be applied in
different ways to the same constraint system  intuitively  they correspond to branching
rules of tableaux   all the other rules are called deterministic rules  moreover  we call the
rules    and   generating rules  since they introduce new variables in the constraint
system  all other rules are called nongenerating ones 
   

fibuchheit  donini    schaerf

the use of the condition based on the s  equivalence relation in the generating rules
 condition    is related to the goal of keeping the constraint system finite even in presence
of potentially infinite chains of applications of generating rules  its role will become clearer
later in the paper 
one can verify that rules are always applied to a system s either because of the presence
in s of a given constraint s  c  condition     or  in the case of the   x rule  because of the
presence of an object s in s   when no confusion arises  we will say that a rule is applied
to the constraint s  c or the object s  instead of saying that it is applied to the constraint
system s   
proposition      invariance  let s and s   be constraint systems  then 
   if s   is obtained from s by application of a deterministic rule  then s is satisfiable if
and only if s   is satisfiable 
   if s   is obtained from s by application of a nondeterministic rule  then s is satisfiable if s   is satisfiable  conversely  if s is satisfiable and a nondeterministic rule is
applicable to an object s in s   then it can be applied to s in such a way that it yields
a satisfiable constraint system 
proof  the proof is mainly a rephrasing of typical soundness proofs for tableaux methods  e g   fitting        lemma         the only non standard constructors are number
restrictions 
       considering the deterministic rules one can directly check that s is a subset of s   
so it is obvious that s is satisfiable if s   is satisfiable 
    in order to show that s   is satisfiable if this is the case for s we consider in turn
each possible deterministic rule application leading from s to s    we assume that  i   ff 
satisfies s  
if the  u  rule is applied to s  c  u c  in s   then s     s   fs  c   s  c g  since  i   ff 
satisfies s  c  u c    i   ff  satisfies s  c  and s  c  and therefore s   
if the    rule is applied to s   r c   there must be an r successor t of s in s such that
s     s  ft  c g  since  i   ff  satisfies s   it holds that  ff s   ff t     ri   since  i   ff  satisfies
s   r c   it holds that ff t    c i   so  i   ff  satisfies t  c and therefore s   
if the   x rule is applied to an s because of the presence of  x x  c in s   then s    
s   fs  c g  since  i   ff  satisfies s it holds that c i   i   therefore ff s    c i and so
 i   ff  satisfies s    
if the     rule is applied to s   r c   then s     s   fsp  y         spk y  y   c g  since  i   ff 
satisfies s   there exists a d such that  ff s   d    ri and d   c i   we define the i  assignment
ff  as ff   y     d and ff  t     ff t  for t    y   it is easy to show that  i   ff   satisfies s   
if the    rule is applied to s    n r   then s     s   fsp  yi          spk yi j i      ng  
fyi     yj j i  j      n  i    j g  since  i   ff  satisfies s   there exist n distinct elements
d          dn   i such that  ff s   di    ri   we define the i  assignment ff  as ff   yi     di
for i      n and ff   t     ff t  for t    fy           yn g  it is easy to show that  i   ff   satisfies s   
       assume that s   is satisfied by  i   ff    we show that s is also satisfiable  if s  
is obtained from s by application of the  t  rule  then s is a subset of s   and therefore
satisfied by  i   ff   
   

fidecidable reasoning in terminological kr systems

if s   is obtained from s by application of the    rule to s    n r  in s   then there
are y  t in s such that s     s  y t   we define the i  assignment ff as ff y      ff   t  and
ff v      ff  v   for every object v with v    y  obviously  i   ff  satisfies s  
    now suppose that s is satisfied by  i   ff  and a nondeterministic rule is applicable
to an object s 
if the  t  rule is applicable to s  c  t c  then  since s is satisfiable  ff s     c  t c  i  
it follows that either ff s    c i or ff s    c i  or both   hence  the  t  rule can obviously
be applied in a way such that  i   ff  satisfies the resulting constraint system s   
if the    rule is applicable to s    n r   then since  i   ff  satisfies s  it holds that
ff s      n r i and therefore the set fd   i j  ff s   d    ri g has at most n elements 
on the other hand  there are more than n r successors of s in s and for each r successor t
of s we have  ff s   ff t     ri   thus  we can conclude by the pigeonhole principle  see e g  
lewis   papadimitriou        page     that there exist at least  two r successors t  t  of s
such that ff t    ff t     since  i   ff  satisfies s   the constraint t    t  is not in s   therefore
one of the two must be a variable  let s say t    y   now obviously  i   ff  satisfies s  y t  
given a constraint system s   more than one rule might be applicable to it  we define
the following strategy for the application of rules 
   apply a rule to a variable only if no rule is applicable to individuals 
   apply a rule to a variable x only if no rule is applicable to a variable y such that y  x 
   apply generating rules only if no nongenerating rule is applicable 
the above strategy ensures that the variables are processed one at a time according to
the ordering    
from this point on  we assume that rules are always applied according to this strategy
and that we always start with a constraint system s coming from an alcnr knowledge
base   the following lemma is a direct consequence of these assumptions 

lemma      stability  let s be a constraint system and x be a variable in s   let a

generating rule be applicable to x according to the strategy  let s   be any constraint system
derivable from s by any sequence  possibly empty  of applications of rules  then
   no rule is applicable in s   to a variable y with y  x
     s  x      s    x 
   if y is a variable in s with y  x then y is a variable in s    i e   the variable y is not
substituted by another variable or by a constant 
   by contradiction  suppose s  s    s         sn  s    where   
ft  u             xg and a rule is applicable to a variable y such that y  x in s    then
there exists a minimal i  where i  n  such that this is the case in si   note that i       in
fact  because of the strategy  if a rule is applicable to x in s no rule is applicable to y in s  
so no rule is applicable to any variable z such that z  x in s          si    it follows that
from si   to si a rule is applied to x or to a variable w such that x  w  by an exhaustive
proof 

   

fibuchheit  donini    schaerf

analysis of all rules we see that whichever is the rule applied from si   to si  no new
constraint of the form y   c or yrz can be added to si     and therefore no rule is applicable
to y in si   contradicting the assumption 
   by contradiction  suppose   s  x       s    x   call y the direct predecessor of x  then a
rule must have been applied either to y or to x itself  obviously we have y  x  therefore
the former case cannot be because of point    a case analysis shows that the only rules
which can have been applied to x are generating ones and the    and the   rules  but
these rules add new constraints only to the direct successors of x and not to x itself and
therefore do not change     x  
   this follows from point    and the strategy 
lemma     proves that for a variable x which has a direct successor      x  is stable 
i e   it will not change because of subsequent applications of rules  in fact  if a variable
has a direct successor it means that a generating rule has been applied to it  therefore
 lemma        from that point on     x  does not change 
a constraint system is complete if no propagation rule applies to it  a complete system
derived from a system s is also called a completion of s   a clash is a constraint system
having one of the following forms 

 fs   g
 fs  a  s   ag  where a is a concept name 
 fs    n r g   fsp   ti          spk ti j i      n    g
  fti    tj j i  j      n      i    j g 
where r   p  u       u pk  
a clash is evidently an unsatisfiable constraint system  for example  the last case
represents the situation in which an object has an at most restriction and a set of rsuccessors that cannot be identified  either because they are individuals or because they
have been created by some at least restrictions  
any constraint system containing a clash is obviously unsatisfiable  the purpose of the
calculus is to generate completions  and look for the presence of clashes inside  if s is a
completion of s and s contains no clash  we prove that it is always possible to construct
a model for  on the basis of s   before looking at the technical details of the proof  let us
consider an example of application of the calculus for checking satisfiability 

example     consider the following knowledge base    ht   ai 
t   fitalian v  friend italiang
a   ffriend peter  susan  
 friend  italian peter  
 friend italian susan g
the corresponding constraint system s is 
s   f x x   italian t  friend italian 
peterfriendsusan

 

   

fidecidable reasoning in terminological kr systems

 
  

  
 
g

 

peter  friend italian
susan  friend italian
peter   susan

 

a sequence of applications of the propagation rules to s is as follows 
s    s   fsusan   italiang     rule 
s    s    fpeter   italian t  friend italiang    x rule 
s    s    fsusan   italian t  friend italiang    x rule 
s    s    fpeter   italiang   t  rule 
s    s    fsusanfriendx  x  italiang      rule 
s    s    fx   italian t  friend italiang    x rule 
s    s    fx   friend italiang   t rule 
s    s    fxfriendy  y  italiang     rule 
s    s    fy   italian t  friend italiang    x rule 
s     s    fy   friend italiang   t  rule 
one can verify that s   is a complete clash free constraint system  in particular  the    rule is not applicable to y   in fact  since x s   y condition   is not satisfied  from s   one
can build an interpretation i   as follows  again  we give only the interpretation of concept
and role names  
i   fpeter  susan  x  yg
peteri   peter  susani   susan  ff x    x  ff y    y 
italiani   fx  yg
friendi   f peter  susan    susan  x    x  y    y  y g
it is easy to see that i is indeed a model for  
in order to prove that it is always possible to obtain an interpretation from a complete
clash free constraint system we need some additional notions  let s be a constraint system
and x  w variables in s   we call w a witness of x in s if the three following conditions hold 
   x s w
   w  x
   there is no variable z such that z  w and z satisfies conditions    and     i e   w is
the least variable w r t   satisfying conditions    and   
we say x is blocked  by w  in s if x has a witness  w  in s   the following lemma states a
property of witnesses 

lemma     let s be a constraint system  x a variable in s   if x is blocked then
   x has no direct successor and
   x has exactly one witness 
   

fibuchheit  donini    schaerf

   by contradiction  suppose that x is blocked in s and xpy is in s   during the
completion process leading to s a generating rule must have been applied to x in a system
s    it follows from the definition of the rules that in s   for every variable w  x we had
x s w  now from lemma     we know  that for the constraint system s derivable from
s   and for every w  x in s we also have x s w  hence there is no witness for x in s  
contradicting the hypothesis that x is blocked 
   this follows directly from condition    for a witness 
as a consequence of lemma      in a constraint system s   if w  is a witness of x then w 
cannot have a witness itself  since both the relations    and s  equivalence are transitive 
the uniqueness of the witness for a blocked variable is important for defining the following
particular interpretation out of s  
let s be a constraint system  we define the canonical interpretation is and the canonical is  assignment ffs as follows 
proof 

 

  
  
  
  

is    fs j s is an object in s g
ffs  s     s
s   ais if and only if s  a is in s
 s  t    p is if and only if
 a  spt is in s or
 b  s is a blocked variable  w is the witness of s in s and wpt is in s  

we call  s  t  a p role pair of s in is if  s  t    p is   we call  s  t  a role pair of s in is
if  s  t  is a p role pair for some role p   we call a role pair explicit if it comes up from case
   a  of the definition of the canonical interpretation and we call it implicit if it comes up
from case    b  
from lemma     it is obvious that a role pair cannot be both explicit and implicit 
moreover  if a variable has an implicit role pair then all its role pairs are implicit and they
all come from exactly one witness  as stated by the following lemma 

lemma     let s be a completion and x a variable in s   let is be the canonical interpretation for s   if x has an implicit role pair  x  y    then
   all role pairs of x in is are implicit
   there is exactly one witness w of x in s such that for all roles p in s and all p  rolepairs  x y  of x  the constraint wpy is in s  

the first statement follows from lemma      point      the second statement follows
from lemma      point     together with the definition of is  
we have now all the machinery needed to prove the main theorem of this subsection 
proof 

theorem     let s be a complete constraint system  if s contains no clash then it is

satisfiable 

   

fidecidable reasoning in terminological kr systems

proof  let is and ffs be the canonical interpretation and canonical i  assignment for s  
we  prove that the pair  is   ffs   satisfies every constraint c in s   if c has the form spt or
s    t  then  is   ffs   satisfies them by definition of is  and ffs   considering the    rule and
the    rule we see that a constraint of the form s  
  s can not be in s   if c has the form
s  c   we show by induction on the structure of c that s   c is  
we first consider the base cases  if c is a concept name  then s   c is by definition
of is   if c      then obviously s    is   the case that c     cannot occur since s is
clash free 
next we analyze in turn each possible complex concept c   if c is of the form  c  then
c  is a concept name since all concepts are simple  then the constraint s  c  is not in s
since s is clash free  then s    c is   that is  s   is n c is   hence s     c  is  
if c is of the form c  u c  then  since s is complete  s  c  is in s and s  c  is in s   by
induction hypothesis  s   c is and s   c is   hence s    c  u c  is  
if c is of the form c  t c  then  since s is complete  either s  c  is in s or s  c  is in
s   by induction hypothesis  either s   c is or s   c is   hence s    c  t c  is  
if c is of the form  r d  we have to show that for all t with  s  t    ris it holds that
t   dis   if  s  t    ris   then according to lemma     two cases can occur  either t is an
r successor of s in s or s is blocked by a witness w in s and t is an r successor of w in s  
in the first case t  d must also be in s since s is complete  then by induction hypothesis
we have t   dis   in the second case by definition of witness  w   r d is in s and then
because of completeness of s   t  d must be in s   by induction hypothesis we have again
t   dis  
if c is of the form  r d we have to show that there exists a t   is with  s  t    ris
and t   dis   since s is complete  either there is a t that is an r successor of s in s and
t  d is in s   or s is a variable blocked by a witness w in s   in the first case  by induction
hypothesis and the definition of is   we have t   dis and  s  t    ris   in the second case
w   r d is in s   since w cannot be blocked and s is complete  we have that there is a
t that is an r successor of w in s and t  d is in s   so by induction hypothesis we have
t   dis and by the definition of is we have  s  t    ris  
if c is of the form   n r  we show the goal by contradiction  assume that s     
n r is   then there exist atleast n     distinct objects t           tn   with  s  ti     ris   i  
   n      this means that  since r   p  u       u pk   there are pairs  s  ti    pjis   where
i      n     and j      k  then according to lemma     one of the two following cases must
occur  either all spj ti for j      k  i      n     are in s or there exists a witness w of s in
s with all wpiti for j      k and i      n     are in s   in the first case the    rule can not
be applicable because of completeness   this means that all the ti  s are pairwise separated 
i e   that s contains the constraints ti    tj   i  j      n      i    j   this contradicts the fact
that s is clash free  and the second case leads to an analogous contradiction 
if c is of the form   n r  we show the goal by contradiction  assume that s     
n r is   then there exist atmost m   n  m possibly    distinct objects t          tm with
 s  ti     ris   i      m  we have to consider two cases  first case  s is not blocked in
s   since there are only m r successors of s in s   the    rule is applicable to s  this
contradicts the fact that s is complete  second case  s is blocked by a witness w in s  
since there are m r successors of w in s   the    rule is applicable to w  but this leads to
the same contradiction 

   

fibuchheit  donini    schaerf

if c has the form  x x  d then  since s is complete  for each object t in s   t  d is in
s  and  by the previous cases  t   dis   therefore  the pair  is   ffs   satisfies  x x  d 
finally  since  is   ffs   satisfies all constraints in s    is   ffs   satisfies s  

theorem      correctness  a constraint system s is satisfiable if and only if there exists
at least one clash free completion of s  

    follows immediately from theorem          clearly  a system containing
a clash is unsatisfiable  if every completion of s is unsatisfiable  then from proposition    
s   is unsatisfiable 
proof 

    termination and complexity of the calculus

given a constraint system s   we call ns the number of concepts appearing in s   including
also all the concepts appearing as a substring of another concept  notice that ns is bounded
by the length of the string expressing s  

lemma     let s be a constraint system and let s   be derived from s by means of the

propagation rules  in any set of variables in s   including more than  ns variables there are
at least two variables x y such that x s y  
 

each constraint x  c   s   may contain only concepts of the constraint system s  
since there are ns such concepts  given a variable x there cannot be more than  ns different
sets of constraints x  c in s    
proof 

lemma     let s be a constraint system and let s   be any constraint system derived from

s by applying the propagation rules with the given strategy  then  in s   there are at most
 ns non blocked variables 

suppose there are  ns     non blocked variables  from lemma      we know that
in s   there are at least two variables y    y  such that y  s y    obviously either y   y  or
y   y  holds  suppose that y   y    from the definitions of witness and blocked either y 
is a witness of y  or there exists a variable y  such that y   y  and y  is a witness of y   
in both cases y  is blocked  contradicting the hypothesis 
proof 

theorem       termination and space complexity  let  be an alcnr knowledge
base and let n be its size  every completion of s is finite and its size is o   n   

let s be a completion of s   from lemma     it follows that there are at most  n
non blocked variables in s   therefore there are at most m   n total variables in s   where
m is the maximum number of direct successors for a variable in s  
observe that m is bounded by the number of  r c concepts  at most n  plus the sum of
all numbers appearing in number restrictions  since these numbers are expressed in binary 
their sum is bounded by  n   hence  m   n   n  since the number of individuals is also
bounded by n  the total number of objects in s is at most m    n   n     n   n     n   n  
that is  o   n  
proof 

   

fidecidable reasoning in terminological kr systems

the number of different constraints of the form s  c    x x  c in which each object s can
be involved is bounded by n  and each constraint has size linear in n  hence  the total size
of these constraints is bounded by n  n    n   that is o   n  
the number of constraints of the form spt  s  
    t is bounded by    n       n  and each
constraint has constant size 
in conclusion  we have that the size of s is o   n  
notice that the above one is just a coarse upper bound  obtained for theoretical purposes 
in practical cases we expect the actual size to be much smaller than that  for example 
if the numbers involved in number restrictions were either expressed in unary notation  or
limited by a constant  the latter being a reasonable restriction in practical systems  then
an argumentation analogous to the above one would lead to a bound of   n  

theorem       decidability  given an alcnr knowledge base   checking whether 
is satisfiable is a decidable problem 

this follows from theorems     and      and the fact that  is satisfiable if and
only if s is satisfiable 
we can refine the above theorem  by giving tighter bounds on the time required to
decide satisfiability 
proof 

theorem       time complexity  given an alcnr knowledge base   checking
whether  is satisfiable can be done in nondeterministic exponential time 

in order to prove the claim it is sucient to show that each completion is obtained
with an exponential number of applications of rules  since the number of constraints of
each completion is exponential  theorem       and each rule  but the    rule  adds new
constraints to the constraint system  it follows that all such rules are applied at most an
exponential number of times  regarding the    rule  it is applied for each object at most as
many times as the number of its direct successors  since such number is at most exponential
 if numbers are coded in binary  w r t  the size of the knowledge base  the claim follows 
a lower bound of the complexity of kb satisfiability is obtained exploiting previous
results about the language alc   which is a sublanguage of alcnr that does not include
number restrictions and role conjunction  we know from mcallester         and  independently  from an observation by nutt        that kb satisfiability in alc  knowledge bases
is exptime hard  see  garey   johnson        page      for a definition  and hence it
is hard for alcnr knowledge bases  too  hence  we do not expect to find any algorithm
solving the problem in polynomial space  unless pspace exptime  therefore  we do
not expect to substantially improve space complexity of our calculus  which already works
in exponential space  we now discuss possible improvements on time complexity 
the proposed calculus works in nondeterministic exponential time  and hence improves
the one we proposed in  buchheit  donini    schaerf        sec     which works in deterministic double exponential time  the key improvement is that we showed that a kb has
a model if and only if it has a model of exponential size  however  it may be argued that
as it is  the calculus cannot yet be turned into a practical procedure  since such a procedure would simply simulate nondeterminism by a second level of exponentiality  resulting
proof 

   

fibuchheit  donini    schaerf

in a double exponential time procedure  however  the different combinations of concepts
are only exponentially many  this is just the cardinality of the powerset of the set of concepts   hence  a double exponential time procedure wastes most of the time re analyzing
over and over objects with different names yet with the same        in different constraint
systems  this could be avoided if we allow a variable to be blocked by a witness that is
in a previously analyzed constraint system  this technique would be similar to the one
used in  pratt         and to the tree automata technique used in  vardi   wolper        
improving on simple tableaux methods for variants of propositional dynamic logics  since
our calculus considers only one constraint system at a time  a modification of the calculus
would be necessary to accomplish this task in a formal way  which is outside the scope of
this paper  the formal development of such a deterministic exponential time procedure will
be a subject for future research 
notice that  since the domain of the canonical interpretation is is always finite  we
have also implicitly proved that alcnr knowledge bases have the finite model property 
i e   any satisfiable knowledge base has a finite model  this property has been extensively
studied in modal logics  hughes   cresswell        and dynamic logics  harel         in
particular  a technique  called filtration  has been developed both to prove the finite model
property and to build a finite model for a satisfiable formula  this technique allows one to
build a finite model from an infinite one by grouping the worlds of a structure in equivalence
classes  based on the set of formulae that are satisfied in each world  it is interesting to
observe that our calculus  based on witnesses  can be considered as a variant of the filtration
technique where the equivalence classes are determined on the basis of our s  equivalence
relation  however  because of number restrictions  variables that are s  equivalent cannot
be grouped  since they might be separated  e g   they might have been introduced by the
same application of the    rule   nevertheless  they can have the same direct successors 
as stated in point    b  of the definition of canonical interpretation on page      this would
correspond to grouping variables of an infinite model in such a way that separations are
preserved 

   relation to previous work
in this section we discuss the relation of our paper to previous work about reasoning with inclusions  in particular  we first consider previously proposed reasoning techniques that deal
with inclusions and terminological cycles  then we discuss the relation between inclusions
and terminological cycles 

    reasoning techniques
as mentioned in the introduction  previous results were obtained by baader et al         
baader      a      b   nebel               schild        and dionne et al               
nebel        chapter    considers the language t f   containing concept conjunction 
universal quantification and number restrictions  and tboxes containing  possibly cyclic 
concept definitions  role definitions and disjointness axioms  stating that two concept names
are disjoint   nebel shows that subsumption of t f  concepts w r t  a tbox is decidable 
however  the argument he uses is non constructive  he shows that it is sucient to con   

fidecidable reasoning in terminological kr systems

sider finite interpretations of a size bounded by the size of the tbox in order to decide
subsumption 
in  baader      b  the effect of the three types of semantics descriptive  greatest fixpoint and least fixpoint semantics for the language fl   containing concept conjunction
and universal quantification  is described with the help of finite automata  baader reduces
subsumption of fl   concepts w r t  a tbox containing  possibly cyclic  definitions of the
form a    c  which he calls terminological axioms  to decision problems for finite automata 
in particular  he shows that subsumption w r t  descriptive semantics can be decided in polynomial space using buchi automata  using results from  baader      b   in  nebel       
a characterization of the above subsumption problem w r t  descriptive semantics is given
with the help of deterministic automata  whereas buchi automata are nondeterministic  
this also yields a pspace algorithm for deciding subsumption 
in  baader et al         the attention is restricted to the language alc   in particular 
that paper considers the problem of checking the satisfiability of a single equation of the
form c      where c is an alc  concept  this problem  called the universal satisfiability problem  is shown to be equivalent to checking the satisfiability of an alc  tbox  see
proposition      
in  baader      a   an extension of alc   called alc reg   is introduced  which supports
a constructor to express the transitive closure of roles  by means of transitive closure of
roles it is possible to replace cyclic inclusions of the form a v d with equivalent acyclic
ones  the problem of checking the satisfiability of an alc reg  concept is solved in that
paper  it is also shown that using transitive closure it is possible to reduce satisfiability
of an alc  concept w r t  an alc  tbox t   fc  v d          cn v dn g into the concept
satisfiability problem in alc reg  w r t  the empty tbox   since the problem of concept
satisfiability w r t  a tbox is trivially harder than checking the satisfiability of a tbox 
that paper extends the result given in  baader et al         
the technique exploited in  baader et al         and  baader      a  is based on the
notion of concept tree  a concept tree is generated starting from a concept c in order
to check its satisfiability  or universal satisfiability   the way a concept tree is generated
from a concept c is similar in avor to the way a complete constraint system is generated
from the constraint system fx  c g  however  the extension of the concept tree method to
deal with number restrictions and individuals in the knowledge base is neither obvious  nor
suggested in the cited papers  on the other hand  the extension of the calculus based on
constraint systems is immediate  provided that additional features have a counterpart in
first order logic 
in  schild        some results more general than those in  baader      a  are obtained
by considering languages more expressive than alc reg and dealing with the concept satisfiability problem in such languages  the results are obtained by establishing a correspondence
between concept languages and propositional dynamic logics  pdl   and reducing the
given problem to a satisfiability problem in pdl  such an approach allows schild to find
several new results exploiting known results in the pdl framework  however  it cannot be
used to deal with every concept language  in fact  the correspondence cannot be established
when the language includes some concept constructors having no counterpart in pdl  e g  
number restrictions  or individuals in an abox  
   

fibuchheit  donini    schaerf

recently  an algebraic approach to cycles has been proposed in  dionne et al          in
which  possibly cyclic  definitions are interpreted as determining an equivalence relation over
the terms describing concepts  the existence and uniqueness of such an equivalence relation
derives from aczel s results on non well founded sets  in  dionne et al         the same
researchers prove that subsumption based on this approach is equivalent to subsumption in
greatest fixpoint semantics  the language analyzed is a small fragment of the one used in the
tkrs k rep  and contains conjunction and existential universal quantifications combined
into one construct  hence it is similar to fl     the diculty of extending these results
lies in the fact that it is not clear how individuals can be interpreted in this algebraic
setting  moreover  we believe that constructive approaches like the algebraic one  give
counterintuitive results when applied to non constructive features of concept languages as
negation and number restrictions 
in conclusion  all these approaches  i e   reduction to automata problems  concept trees 
reduction to pdl and algebraic semantics  deal only with tboxes and they don t seem to be
suitable to deal also with aboxes  on the other hand  the constraint system technique  even
though it was conceived for tbox reasoning  can be easily extended to abox reasoning  as
also shown in  hollunder        baader   hollunder        donini et al         

    inclusions versus concept definitions
now we compare the expressive power of tboxes defined as a set of inclusions  as done in
this paper  and tboxes defined as a set of  possibly cyclic  concept introductions of the
form a   d and a    d 
unlike  baader      a  and  schild         we consider reasoning problems dealing with
tbox and abox together  moreover  we use the descriptive semantics for the concept introductions  as we do for inclusions  the result we have obtained is that inclusion statements
and concept introductions actually have the same expressive power  in detail  we show that
the satisfiability of a knowledge base    ha  t i  where t is a set of inclusion statements 
can be reduced to the satisfiability of a knowledge base     ha   t  i such that t   is a set
of concept introductions  the other direction  from concept introductions to inclusions  is
trivial since introductions of the form a    d can be expressed by the pair of inclusions
a v d and d v a  while a concept name specification a   d can be rewritten as the
inclusion a v d  as already mentioned in section    
as a notation  given a tbox t   fc  v d           cn v dn g  we define the concept ct
as ct     c  t d   u    u   cn t dn    as pointed out in  baader      a  for alc   an
interpretation satisfies a tbox t if and only if it satisfies the equation ct      this result
easily extends to alcnr  as stated in the following proposition 

proposition     given an alcnr tbox t   fc  v d          cn v dng  an interpretation i satisfies t if and only if it satisfies the equation ct     
an interpretation i satisfies an inclusion c v d if and only if it satisfies the equation
 c t d      i satisfies the set of equations  c  t d               cn t dn     if and only
if i satisfies   c  t d   u    u   cn t dn        the claim follows 
proof 

   

fidecidable reasoning in terminological kr systems

given a knowledge base    ha  t i and a concept a not appearing in   we define the
knowledge base     ha    t   i as follows 
a    a   fa b  j b is an individual in g
t     fa   ct u  p  a u    u  pn  ag
where p    p          pn are all the role names appearing in   note that t   has a single
inclusion  which could be also thought of as one primitive concept specification 
theorem        ha  t i is satisfiable if and only if     ha   t  i is satisfiable 
  the following
proof  in order to simplify the machinery of the proof  we will use for t
 logically equivalent  form 
t     fa v ct   a v  p  a         a v  pn  ag
 note that we use the symbol  v  instead of      because now the concept name a appears
as the left hand side of many statements  we must consider these statements as inclusions  
    suppose    ha  t i satisfiable  from theorem      there exists a complete
constraint system s without clash  which defines a canonical interpretation is which is a
model of   define the constraint system s   as follows 
s     s   fw  a j w is an object in s g
and call is the canonical interpretation associated to s    we prove that is is a model of
   
first observe that every assertion in a is satisfied by is since is is equal to is except
for the interpretation of a  and a does not appear in a  therefore  every assertion in a 
is also satisfied by is   either because it is an assertion of a  or  if it is an assertion of the
form a b   by definition of s   
regarding t     note that by definition of s    we have ais   is   is   therefore both
sides of the inclusions of the form a v  pi  a  i             n  are interpreted as is   hence
they are satisfied by is   since a does not appear in ct   we have that  ct  is    ct  is  
moreover  since is satisfies t   we also have  by proposition      that  ct  is   is  
therefore  ct  is    ct  is   is   is   it follows that also both sides of the inclusion
a v ct are interpreted as is   in conclusion  is satisfies t    
    suppose     ha    t   i satisfiable  again  because of theorem      there exists a
complete constraint system s   without clash  which defines a canonical interpretation is
which is a model of    we show that is is also a model of  
first of all  the assertions in a are satisfied because a  a    and is satisfies every
assertion in a    to prove that is satisfies t   we first prove the following equation 
ais   is
   
equation   is proved by showing that  for every object s   is   s is in ais   in order to do
that  observe a general property of constraint systems  every variable in s   is a successor of
an individual  this comes from the definition of the generating rules  which add variables
to the constraint system only as direct successors of existing objects  and at the beginning
s contains only individuals 
then  equation   is proved by observing the following three facts 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

   

 

fibuchheit  donini    schaerf

   for every individual b in is   b   ais  
 

 

   if an object s is in ais   then because is satisfies the inclusions ais    p  a is         
ais    pn  a is   every direct successor of s is in ais  
   the successor relation is closed under the direct successor relation
 

 

 

 

 

 

 

from the fundamental theorem on induction  see e g   wand        page     we conclude that every object s of is is in ais   this proves that equation   holds 
from equation    and the fact that is satisfies the inclusion ais   ct  is   we derive
that  ct  is   is   that is is satisfies the equation ct      hence  from proposition
     is satisfies t   and this completes the proof of the theorem 
the machinery present in this proof is not new  in fact  realizing that the inclusions
a v  p   a         a v  pn  a simulate a transitive closure on the roles p           pn   one can
recognize similarities with the proofs given by schild        and baader      a   the difference is that their proofs rely on the notion of connected model  baader uses the equivalent
notion of rooted model   in contrast  the models we obtain are not connected  when the
individuals in the knowledge base are not  what we exploit is the weaker property that
every variable in the model is a successor of an individual 
note that the above reduction strongly relies on the fact that disjunction  t  and complement     are within the language  in fact  disjunction and complement are necessary
in order to express all the inclusions of a tbox t inside the concept ct   therefore  the
proof holds for alc  knowledge bases  but does not hold for tkrss not allowing for these
constructors of concepts  e g   back  
furthermore  for the language fl  introduced in section      the opposite result holds 
in fact  mcallester        proves that computing subsumption w r t  a set of inclusions is
exptime hard  even in the small language fl    conversely  nebel        proves that
subsumption w r t  a set of cyclic definitions in fl  can be done in pspace  combining
the two results  we can conclude that for fl  subsumption w r t  a set of inclusions and
subsumption w r t  a set of definitions are in different complexity classes  hence  assuming
exptime    pspace  inclusion statements are strictly more expressive than concept
definitions in fl  
it is still open whether inclusions and definitions are equivalent in languages whose
expressivity is between fl  and alc  
 

 

 

 

 

 

 

 

 

   discussion

in this paper we have proved the decidability of the main inference services of a tkrs based
on the concept language alcnr  we believe that this result is not only of theoretical
importance  but bears some impact on existing tkrss  because a complete procedure can
be easily devised from the calculus provided in section    from this procedure  one can build
more ecient  but still complete  ones  as described at the end of section      and also by
applying standard optimization techniques such as those described in  baader  hollunder 
nebel  profitlich    franconi         an optimized procedure can perform well for small
sublanguages where reasoning is tractable  while still being complete when solving more
complex tasks  however  such a complete procedure will still take exponential time and
   

fidecidable reasoning in terminological kr systems

space in the worst case  and it may be argued what could be its practical applicability  we
comment in following on this point 
firstly  a complete procedure  possibly optimized  offers a benchmark for comparing
incomplete procedures  not only in terms of performance  but also in terms of missed inferences  let us illustrate this point in detail  by providing a blatant paradox  consider the
mostly incomplete constant time procedure  answering always  no  to any check  obviously this useless procedure outperforms any other one  if missed inferences are not taken
into account  this paradox shows that incomplete procedures can be meaningfully compared only if missed inferences are considered  but to recognize missed inferences over large
examples  one needs exactly a complete procedure even if not an ecient one like ours 
we believe that a fair detection of missed inferences would be of great help even when the
satisfaction of end users is the primary criterion for judging incomplete procedures 
secondly  a complete procedure can be used for  anytime classification   as proposed
in  macgregor         the idea is to use a fast  but incomplete algorithm as a first step
in analyzing the input knowledge  and then do more reasoning in background  in the
cited paper  resolution based theorem provers are proposed for performing this background
reasoning  we argue that any specialized complete procedure will perform better than a
general theorem prover  for instance  theorem provers are usually not specifically designed
to deal with filtration techniques 
moreover  our calculus can be easily adapted to deal with rules  as outlined in the
introduction  rules are often used in practical tkrss  rules behave like one way concept
inclusions no contrapositive is allowed and they are applied only to known individuals 
our result shows that rules in alcnr can be applied also to unknown individuals  our
variables in a constraint system  without endangering decidability  this result is to be
compared with the negative result in  baader   hollunder         where it is shown that
subsumption becomes undecidable if rules are applied to unknown individuals in classic 
finally  the calculus provides a new way of building incomplete procedures  by modifying
some of the propagation rules  since the rules build up a model  modifications to them
have a semantical counterpart which gives a precise account of the incomplete procedures
obtained  for example  one could limit the size of the canonical model by a polynomial in
the size of the kb  semantically  this would mean to consider only  small  models  which
is reasonable when the intended models for the kb are not much bigger than the size of the
kb itself  we believe that this way of designing incomplete procedures  from above   i e  
starting with the complete set of inferences and weakening it  is dual to the way incomplete
procedures have been realized so far  from below   i e   starting with already incomplete
inferences and adding inference power by need 
further research is still needed to address problems issuing from practical systems  for
example  to completely express role restrictions inside number restrictions  qualified number
restrictions  hollunder   baader        should be taken into account  also  the language
resulting from the addition of enumerated sets  called one of in classic   and role fillers
to alcnr is still to be studied  although it does not seem to endanger the filtration
method we used  instead  a different method might be necessary if inverse roles are added
to alcnr  since the finite model property is lost  as shown in schild         finally  the
addition of concrete domains  baader   hanschke        remains open 
   

fibuchheit  donini    schaerf

acknowledgements
we thank maurizio lenzerini for the inspiration of this work  as well as for several discussions that contributed to the paper  werner nutt pointed out to us the observation mentioned at the end of section    and we thank him and franz baader for helpful comments
on earlier drafts  we thank also the anonymous reviewers  whose stimulating comments
helped us in improving on the submitted version 
the research was partly done while the first author was visiting the dipartimento di informatica e sistemistica  universita di roma  la sapienza   the third author also acknowledges yoav shoham for his hospitality at the computer science department of stanford
university  while the author was developing part of this research 
this work has been supported by the esprit basic research action n       compulog    and by the progetto finalizzato sistemi informatici e calcolo parallelo of the
cnr  italian research council   ldr  ibridi  

references

abrial  j          data semantics  in klimbie  j     koffeman  k   eds    data base
management  pp        north holland publ  co   amsterdam 
baader  f       a   augmenting concept languages by transitive closure of roles  an alternative to terminological cycles  tech  rep  rr        deutsches forschungszentrum
fur kunstliche intelligenz  dfki   kaiserslautern  germany  an abridged version appeared in proc  of the   th int  joint conf  on artificial intelligence ijcai     pp 
        
baader  f       b   terminological cycles in kl one based knowledge representation languages  tech  rep  rr        deutsches forschungszentrum fur kunstliche intelligenz
 dfki   kaiserslautern  germany  an abridged version appeared in proc  of the  th
nat  conf  on artificial intelligence aaai     pp          
baader  f   burkert  h  j   hollunder  b   nutt  w     siekmann  j  h          concept
logics  in lloyd  j  w   ed    computational logics  symposium proceedings  pp 
         springer verlag 
baader  f     hanschke  p          a schema for integrating concrete domains into concept
languages  in proc  of the   th int  joint conf  on artificial intelligence ijcai    
pp          sydney 
baader  f     hollunder  b          a terminological knowledge representation system with
complete inference algorithm  in proc  of the workshop on processing declarative
knowledge  pdk     lecture notes in artificial intelligence  pp         springerverlag 
baader  f     hollunder  b          embedding defaults into terminological knowledge
representation formalisms  in proc  of the  rd int  conf  on principles of knowledge
representation and reasoning kr     pp           morgan kaufmann  los altos 
   

fidecidable reasoning in terminological kr systems

baader  f   hollunder  b   nebel  b   profitlich  h  j     franconi  e          an empirical
analisys of optimization techniques for terminological representation systems  in proc 
of the  rd int  conf  on principles of knowledge representation and reasoning kr    pp           morgan kaufmann  los altos 
beck  h  w   gala  s  k     navathe  s  b          classification as a query processing
technique in the candide semantic data model  in proc  of the  th ieee int  conf 
on data engineering 
borgida  a   brachman  r  j   mcguinness  d  l     alperin resnick  l          classic 
a structural data model for objects  in proc  of the acm sigmod int  conf  on
management of data  pp        
brachman  r  j     levesque  h  j          the tractability of subsumption in framebased description languages  in proc  of the  th nat  conf  on artificial intelligence
aaai     pp        
brachman  r  j   pigman gilbert  v     levesque  h  j          an essential hybrid
reasoning system  knowledge and symbol level accounts in krypton  in proc  of
the  th int  joint conf  on artificial intelligence ijcai     pp          los angeles 
brachman  r  j     schmolze  j  g          an overview of the kl one knowledge representation system  cognitive science                 
buchheit  m   donini  f  m     schaerf  a          decidable reasoning in terminological
knowledge representation systems  tech  rep  rr        deutsches forschungszentrum fur kunstliche intelligenz  dfki   saarbrucken  germany  an abridged version
appeared in proc  of the   th int  joint conf  on artificial intelligence ijcai    pp 
        
catarci  t     lenzerini  m          representing and using interschema knowledge in
cooperative information systems  journal of intelligent and cooperative inf  syst  to
appear 
dionne  r   mays  e     oles  f  j          a non well founded approach to terminological
cycles  in proc  of the   th nat  conf  on artificial intelligence aaai     pp          
aaai press the mit press 
dionne  r   mays  e     oles  f  j          the equivalence of model theoretic and structural
subsumption in description logics  in proc  of the   th int  joint conf  on artificial
intelligence ijcai     pp          chambery  france  morgan kaufmann  los altos 
donini  f  m   hollunder  b   lenzerini  m   marchetti spaccamela  a   nardi  d     nutt 
w          the complexity of existential quantification in concept languages  artificial
intelligence               
donini  f  m   lenzerini  m   nardi  d     nutt  w       a   the complexity of concept
languages  in allen  j   fikes  r     sandewall  e   eds    proc  of the  nd int 
conf  on principles of knowledge representation and reasoning kr     pp          
morgan kaufmann  los altos 
   

fibuchheit  donini    schaerf

donini  f  m   lenzerini  m   nardi  d     nutt  w       b   tractable concept languages 
in proc  of the   th int  joint conf  on artificial intelligence ijcai     pp         
sydney 
donini  f  m   lenzerini  m   nardi  d     schaerf  a       c   a hybrid system integrating
datalog and concept languages  in proc  of the  nd conf  of the italian association
for artificial intelligence  no      in lecture notes in artificial intelligence  springerverlag  an extended version appeared also in the working notes of the aaai fall
symposium  principles of hybrid reasoning  
donini  f  m   lenzerini  m   nardi  d     schaerf  a          deduction in concept languages  from subsumption to instance checking  journal of logic and computation 
to appear 
fitting  m          first order logic and automated theorem proving  springer verlag 
garey  m     johnson  d          computers and intractability a guide to npcompleteness  w h  freeman and company  san francisco 
harel  d          dynamic logic  in handbook of philosophical logic  vol     pp          
d  reidel  dordrecht  holland 
heinsohn  j   kudenko  d   nebel  b     profitlich  h  j          an empirical analysis of
terminological representation systems  in proc  of the   th nat  conf  on artificial
intelligence aaai     pp           aaai press the mit press 
hollunder  b          hybrid inferences in kl one based knowledge representation systems  in proc  of the german workshop on artificial intelligence  pp         springerverlag 
hollunder  b     baader  f          qualifying number restrictions in concept languages 
tech  rep  rr        deutsches forschungszentrum fur kunstliche intelligenz  dfki  
kaiserslautern  germany  an abridged version appeared in proc  of the  nd int  conf 
on principles of knowledge representation and reasoning kr    
hughes  g  e     cresswell  m  j          a companion to modal logic  methuen  london 
kaczmarek  t  s   bates  r     robins  g          recent developments in nikl  in proc 
of the  th nat  conf  on artificial intelligence aaai     pp          
lenzerini  m     schaerf  a          concept languages as query languages  in proc  of the
 th nat  conf  on artificial intelligence aaai     pp          
levesque  h  j          foundations of a functional approach to knowledge representation 
artificial intelligence              
lewis  h  r     papadimitriou  c  h          elements of the theory of computation 
prentice hall  englewood cliffs  new jersey 
macgregor  r          inside the loom description classifier  sigart bulletin        
      
   

fidecidable reasoning in terminological kr systems

macgregor  r          what s needed to make a description logic a good kr citizen  in
working notes of the aaai fall symposium on issues on description logics  users
meet developers  pp        
macgregor  r     bates  r          the loom knowledge representation language  tech 
rep  isi rs         university of southern california  information science institute 
marina del rey  cal 
macgregor  r     brill  d          recognition algorithms for the loom classifier  in
proc  of the   th nat  conf  on artificial intelligence aaai     pp           aaai
press the mit press 
mays  e   dionne  r     weida  r          k rep system overview  sigart bulletin 
      
mcallester  d          unpublished manuscript 
mcguinness  d  l          making description logic based knowledge representation systems
more usable  in working notes of the aaai fall sysmposium on issues on description
logics  users meet developers  pp        
mylopoulos  j   bernstein  p     wong  e          a language facility for designing databaseintensive applications  acm trans  on database syst                  
nebel  b          computational complexity of terminological reasoning in back  artificial
intelligence                  
nebel  b          reasoning and revision in hybrid representation systems  lecture notes
in artificial intelligence  springer verlag 
nebel  b          terminological cycles  semantics and computational properties  in sowa 
j  f   ed    principles of semantic networks  pp           morgan kaufmann  los
altos 
nutt  w          personal communication 
patel schneider  p  f          small can be beautiful in knowledge representation  in proc 
of the ieee workshop on knowledge based systems  an extended version appeared
as fairchild tech  rep      and flair tech  rep      october      
patel schneider  p          undecidability of subsumption in nikl  artificial intelligence 
            
pratt  v  r          a practical decision method for propositional dynamic logic  in proc 
of the   th acm sigact symp  on theory of computing stoc     pp          
quantz  j     kindermann  c          implementation of the back system version    tech 
rep  kit report     fb informatik  technische universitat berlin  berlin  germany 
rich  editor  c          sigart bulletin  special issue on implemented knowledge representation and reasoning systems       
   

fibuchheit  donini    schaerf

schaerf  a       a   on the complexity of the instance checking problem in concept languages with existential quantification  journal of intelligent information systems    
         an abridged version appeared in proc  of the  th int  symp  on methodologies for intelligent systems ismis    
schaerf  a       b   reasoning with individuals in concept languages  tech  rep        
dipartimento di informatica e sistemistica  universita di roma  la sapienza   an
abridged version appeared in proc  of the  rd conf  of the italian association for
artificial intelligence ai ia    
schild  k          undecidability of subsumption in u   tech  rep  kit report     fb
informatik  technische universitat berlin  berlin  germany 
schild  k          a correspondence theory for terminological logics  preliminary report 
in proc  of the   th int  joint conf  on artificial intelligence ijcai     pp         
sydney 
schmidt schau  m          subsumption in kl one is undecidable  in brachman  r  j  
levesque  h  j     reiter  r   eds    proc  of the  st int  conf  on principles of
knowledge representation and reasoning kr     pp           morgan kaufmann 
los altos 
schmidt schau  m     smolka  g          attributive concept descriptions with complements  artificial intelligence               
vardi  m     wolper  p          automata theoretic techniques for modal logics of programs  journal of computer and system science               a preliminary version
appeared in proc  of the   th acm sigact symp  on theory of computing stoc   
vilain  m          deduction as parsing  tractable classification in the kl one framework 
in proc  of the  th nat  conf  on artificial intelligence aaai     pp          
wand  m          induction  recursion  and programming  north holland publ  co  
amsterdam 
woods  w  a     schmolze  j  g          the kl one family  in lehmann  f   ed   
semantic networks in artificial intelligence  pp           pergamon press  published
as a special issue of computers   mathematics with applications  volume     number
    

   

fi