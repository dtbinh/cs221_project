journal of artificial intelligence research                 

submitted       published     

research note

applying gsat to non clausal formulas

roberto sebastiani

mechanized reasoning group  dist  viale causa           genova  italy 
mechanized reasoning group  irst  loc  pante        povo  trento  italy 

rseba dist unige it

abstract

in this paper we describe how to modify gsat so that it can be applied to non clausal
formulas  the idea is to use a particular  score  function which gives the number of clauses
of the cnf conversion of a formula which are false under a given truth assignment  its
value is computed in linear time  without constructing the cnf conversion itself  the
proposed methodology applies to most of the variants of gsat proposed so far 

   introduction

gsat  selman  levesque    mitchell        selman   kautz        is an incomplete
model finding algorithm for clausal propositional formulas which performs a randomized
local search  gsat has been shown to solve many  hard  problems much more eciently
than other traditional algorithms like  e g   dp  davis   putnam         since gsat
applies only to clausal formulas  using it to find models for ordinary propositional formulas
requires some previous clausal form conversion  this requires extra computation  which can
be extremely heavy if the  standard  clausal conversion is used   much worse  clausal form
conversion causes either a large increase in the size of the input formula or an enlargement
of the search space 
in this paper we describe how to modify gsat so that it can be applied to non clausal
formulas directly   i e   with no previous clausal form conversion  an extended version of the
paper  sebastiani        provides the proofs of the theorems and a detailed description of
the algorithm introduced 
this achievement could enlarge gsat s application domain  selman et al         suggest that some traditional ai problems can be formulated as model finding tasks  e g   visual
interpretation  reiter   mackworth         planning  kautz   selman         generation
of  vivid  knowledge representation  levesque         it is often the case that non clausal
representations are more compact for such problems  for instance  each rule in the form
 vi i    gives rise to several distinct clauses if some i are disjuncts or is a conjunct  in automated theorem proving  a t p   some applications of model finding have been
proposed  see  e g    artosi   governatori        klingerbeck          for instance  some
decision procedures for decidable subclasses of first order logic iteratively perform nonclausal model finding for propositional instances of the input formulas  jeroslow        
more generally  some model guided techniques for proof search  like goal deletion  ballantyne   bledsoe         false preference   or semantic resolution  slaney         seem to be
applicable to non clausal a t p  as well 
c      ai access foundation and morgan kaufmann publishers  all rights reserved 

fisebastiani

procedure gsat  
for j      to max tries do

t    initial  
for k      to max ips do

if t j  
then return t
else poss ips    hill climb   t  
v    pick poss ips 
t    ip v t 
updatescores   v  

end
end
return  no satisfying assignment found  
figure    a general schema for gsat 

   gsat

if  is a clausal propositional formula and t is a truth assignment for the variables of
  then the number of clauses of  which are falsified by t is called the score of t for 
 score t      t satisfies  iff score t         the notion of score plays a key role in
gsat  as it is considered as the  distance  from a truth assignment to a satisfying one 
the schema of figure   describes gsat as well as many of its possible variants  we use
the notation from  gent   walsh         gsat performs an iterative search for a satisfying
truth assignment for   starting from a random assignment provided by initial     at each
step  the successive assignment is obtained by ipping  inverting  the truth value of one
single variable v in t   v is chosen to minimize the score  let ti be the assignment obtained
from t by ipping its i th variable vi   hill climb   returns the set poss ips of the variables
vr which minimize score tr      if the current values of si   score ti      score t   
are stored for every variable vi   then hill climb   simply returns the set of the variables vr
with the best sr   pick   chooses randomly one of such variables  ip   returns t with v  s
value ipped  after each ipping  updatescores   updates the values of si   for all i 
this paper exploits the observation that the functions initial     hill climb     pick   and
ip   do not depend on the structure of the input formula   and that the computation
of the scores is the only step where the input formula  is required to be in clausal form 
the idea is thus to find a suitable notion of score for non clausal formulas  and an ecient
algorithm computing it 

   an extended notion of score

let cnf    be the result of converting a propositional formula   into clausal form by the
standard method  i e   by applying the rules of de morgan   then the following definition
extends the notion of score to all propositional formulas 

definition     the score of a truth assignment t for a propositional formula   is the
number of the clauses of cnf    which are falsified by t  
   

fiapplying gsat to non clausal formulas

mpp
pp
pp
pp      
     
p m
m
      






m
  b
 

      

      
        

       
      
  

     
         

       
         

   

 a
b
                   
 
b      

a
 
       
                   
b
 
      
a

 
     c
     
d  e b   s
a
         
 j                  

 s
     
 a
e
      
 
j

s
ss          

e
     
     
     
 
          


j
 aa

   
s
     
     
   
  
 
 f
 b
     a  d
 b
b
       c    
 a
 a      
 a      
 
     a

b
 b

a

a

a
 c  
b
 c     
    
a
a


a

 b
a
 
     a  b c  e  f      d a  e c f d  a  f d  b e  c f
                             
        
                
              
                
                
                                                               

m

m

       
        

m

m

 
      
        

m

m

m

m

        
       

m

   
      
       

       
       

 
      
        

       
        

m

      
      
  

m

        
       

 
      
        

figure    the computation tree of s t     
cnf   represents the  natural  clausal form conversion  cnf    has the same number of
propositional variables as   and it is logically equivalent to    the problem with cnf   is
the exponential size growth of cnf      that is  jcnf    j   o  j j   definition     overcomes
such a problem  for it is possible to introduce a linear time computable function s t    
which gives the score of t for a formula    this is done directly  i e   without converting  
into clausal form  we define s t     recursively as follows   
 
s  t    
s   t    
  if t j   
  if t j   
  literal
  otherwise
  otherwise
 v  
sp   t     
sq t     
   k  
 
s
 
t 
 
 
wk  k
q k s t    k 
pk ss   t 
t   k 
k
k k
k
k
       s   t       s t     
s t        s   t     
 
      s t        s   t      
       ss  t t      ss  t 
 t     
 s   t        s t      
 

 

 

 

s   t   k  is s t    k    the distinction between s t   k   and s   t   k  is due to the polarity
of the current subformula  k   during the computation of s t      a call to the function
s t   j    s   t   j    is invoked iff  j is a positive  negative  subformula of   
example     figure   represents the computation tree of the score of a truth assignment
t for the formula    
 d

    a

  

  

b c   d   e f    c    d a e    c f    
e b      d a    f d b   f   a   e c f   b    
 

 

 

 

  

  

 

 

 

  

 

 

  

  

 

  

 

 

 

  

 



  

 

 

 

  

t assigns  true  to all the variables of    the information in square brackets associated
to any subformula  j represents  s t   j    s   t   j     for instance  if we consider the small
subtree in the left of figure    then the score is computed in the following way 
   notice that the definition of s t     can be easily extended to formulas involving other connectives  e g  
nand   nor   xor   if then else           or more complicate boolean functions 

   

fisebastiani

s t    a b c   d   e f      
s t  a b c   s t  d  s t  e f    
 s t  a    s t  b     s t  c    s t  d   s t  e     s t  f     
                          
 

 

  

  

 

 

 



 



  

 

 

 

  



 



  

 



 

 

w

q

  s t  vk  k     pk s t   k  
  s t  k  k     k s t   k  
  literals



 

notice that cnf     is     clauses long 

theorem     let   be a propositional formula and t a truth assignment for the variables
of    then the function s t     gives the score of t for   

the proof follows from the consideration that  for any truth assignment t   the set of the
false clauses of cnf          is the cross product between the two sets of the false clauses
of cnf     and cnf      
theorem     let   be a propositional formula and t a truth assignment for the variables
of    then the number of operations required for calculating s t     grows linearly with the
size of   
the proof follows from the fact that  if time s   i  t    is the number of operations required
for computing both s t   i  and s   t   i   and if time s   i  t     ai  j ij   bi   then
time s          t     maxi  ai   j      j      maxi  bi       for any    f         g 
the number of operations required for computing the score of an assignment t for
a clausal formula  is o jj   if    cnf      then jj   o  j j   thus the standard
computation of the score of t for  requires o  j j  operations  while s t     performs the
same result directly in linear time 

   gsat for non clausal formulas

it follows from sections      that we can extend gsat to non clausal formulas   by simply
using the extended notion of score of definition      let nc gsat  non clausal gsat 
be a new version of gsat in which the scores are computed by some implementation of
the function s     then it follows from theorem     that in nc gsat    the function hillclimb   always returns the same sets of variables as in gsat cnf      so that nc gsat   
performs the same ips and returns the same result as gsat cnf      theorem     ensures
that every score computation is performed in linear time 
the current implementation of gsat  selman   kautz        provides a highlyoptimized implementation of updatescores   v     which analyzes only the clauses which
the last ipped variable v occurs in  this allows a strong reduction in computational cost 
in  sebastiani        we describe in detail an analogous optimized version of the updating
procedure for nc gsat  called nc updatescores    v     and prove the following properties 
 i  if   is in clausal form  i e       cnf      then nc updatescores    v   has the same
complexity as updatescores    v    
 ii  if    cnf      then nc updatescores    v   is o j j   updatescores   v   is o  j j  
the latter mirrors the complexity issues presented in section   
   

fiapplying gsat to non clausal formulas

the idea introduced in this paper can be applied to most variants of gsat  in  csat 
 cautious sat  hill climb   returns all the variables which cause a decrease of the score 
in  dsat   deterministic sat  the function pick   performs a deterministic choice  in
 rsat   random walk sat  the variable is picked randomly among all the variables  in
 msat   memory sat  pick   remembers the last ipped variable and avoids picking it 
all these variants  proposed in  gent   walsh               can be transposed into ncgsat as well  as they are independent of the structure of the input formula  selman and
kautz        suggest some variants which improve the performance and overcome some
problems  such as that of escaping local minima  the strategy  averaging in   suggests a
different implementation of the function initial     instead of a random assignment  initial  
returns a bitwise average of the best assignments of the two latest cycles  this is independent
of the form of the input formula  in the strategy  random walk   the sequence hill climb  
  pick   is substituted with probability p by a simpler choice function   choose randomly a
variable occurring in some unsatisfied clause   this idea can be transposed into nc gsat
as well   choose randomly a branch passing only for nodes whose score is different from
zero  and pick the variable at the leaf  
one final observation is worth making  in order to overcome the exponential growth of
cnf formulas  some algorithms have been proposed  plaisted   greenbaum        de la
tour        which convert propositional formulas   into polynomial size clausal formulas  
such methods are based on the introduction of new variables  each representing a subformula
of the original input    unfortunately  the issue of size polynomiality is valid only if no   
occurs in    as the number of clauses of grows exponentially with the number of    in
   even worse  the introduction of k new variables enlarges the search space by a  k factor
and reduces strongly the solution ratio  in fact  any model for is also a model for    but
for any model of   we only know that one of its  k extensions is a model of  plaisted  
greenbaum        

acknowledgements
fausto giunchiglia and enrico giunchiglia have given substantial and continuous feedback
during the whole development of this paper  toby walsh provided important feedback
about a previous version of this paper  aaron noble  paolo pecchiari  and luciano serafini
helped with the final revision  bart selman and henry kautz are thanked for assistance
with the gsat code 

references

artosi  a     governatori  g          labelled model modal logic  in proc  of cade  
workshop on automated model building 

ballantyne  m     bledsoe  w          on generating and using examples in proof discovery  in michie  d   ed    machines intelligence  vol      pp        halsted press 
davis  m     putnam  h          a computing procedure for quantification theory  journal
of the acm             
   

fisebastiani

de la tour  t  b          minimizing the number of clauses by renaming  in proc  of the
  th conference on automated deduction  pp           springer verlag 
gent  i  p     walsh  t          the enigma of sat hill climbing procedures  tech  rep 
     university of edinburgh  dept  of artificial intelligence 
gent  i  p     walsh  t          towards an understanding of hill climbing procedures for
sat  in proc  of the   th national conference on artificial intelligence  pp        
jeroslow  r          computation oriented reduction of predicate to propositional logic 
decision support system             
kautz  h     selman  b          planning as satisfiability  in proc    th european conference on artificial intelligence  pp          
klingerbeck  s          generating finite counter examples with semantic tableaux and
interpretation revision  in proc  of cade   workshop on automated model building 

levesque  h          making believers out of computers  artificial intelligence              
plaisted  d     greenbaum  s          a structure preserving clause form translation 
journal of symbolic computation             
reiter  r     mackworth  a          a logical framework for depiction and image interpretation  artificial intelligence                   
sebastiani  r          applying gsat to non clausal formulas  tech  rep          
dist  university of genova  italy  available via anonimous ftp from mrg dist unige it 
 pub mrg ftp  
selman  b     kautz  h          domain independent extension to gsat  solving large
structured satisfiability problems  in proc  of the   th international joint conference
on artificial intelligence  pp          
selman  b   levesque  h     mitchell  d          a new method for solving hard satisfiability problems  in proc  of the   th national conference on artificial intelligence 
pp          
slaney  j          scott  a model guided theorem prover  in proc  of the   th international joint conference on artificial intelligence  pp           morgan kaufmann 

   

fi