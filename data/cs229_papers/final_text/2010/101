

parallelizing
juan benet

slack

matt

ali

alive
involves computationally intensive operations
grow grow becomes spread
computers cores
qjam rapid prototyping parallel



easy parallelize
theory creating
organizes manages obstacle
parallelizing prototyping
qjam adhere
constrained mapreduce

perhaps notable
contribution mapreduce programming
applies
functional programming spread

mapreduce concepts
projects parallel apache
hadoop
chu ten written summation
parallelization straightforward authors mapreduce multicore yielded
speedup cores
whereas chu experimented multicore
extends ideas
networked computers
hadoop intended batch
jobs designed lightweight
latency minimal
server configuration

style
stylistically
operations operations
equivalents matlabs
interpreter plotting
visualizing structures easy
pythons syntax suited operations numpy
interface emulate matlabs syntax
designed programmers
ease porting syntactic
overly verbose transpose
hinder readability
strictly syntactic stylistic perspective
wins simplicity pythons slight disadvantage outweighed


mathematical extensible mathematics packages numpy interpreted
call avoid overhead computationally intensive operations multiplication yielding
sacrificing ease readability
benchmarked pythons
numpy
avoid

benchmark algebra
multiplication ubiquitous

choosing


operations

operations
winner outperforms
worst


criteria ease algebra operations
excellent
conducive rapid prototyping matlabs costs infeasible
options
sections explain

implementations serial tend slower
equivalents benchmarks parallel autoencoder pythons
penalty parallel execution
workers
targeting rapid prototyping peak production hit acceptable










multiplication


















element wise multiplication



















remoteworker
reached ssh
say
cores
remoteworker creation
remoteworker remote
copying requisite worker
ssh bootstrapping completes
remoteworker starts worker remote attaches remoteworker
proxy master worker
master master divides
assigns pool
remoteworker instances remoteworker
instances relay worker programs
remote wait









transpose














communication channels









inner














master

qjam


master


benchmarks algebra operations

worker

remoteworker
remoteworker
slave
slave
slave

worker

architecture

worker

remoteworker

worker

describes architecture qjam
subsection defines
communicate
subsection explains programming interface subsection describes protocol qjam communicate subsection describes details


remoteworker

remoteworker pool
corn

corn


master controlling workers




qjam api

qjam master
instances

describes interface exposed qjam
workflow
typical qjam divided
phases initialization client creates
master passing
remote workers execution client
specifies module mapfunc
executed worker

breaks pieces
worker processes sub

worker worker copied
remote bootstrapping
responsible waiting instructions
master receiving
returning
remoteworker remoteworker special
communicates remote

names parallelizing

sections elaborate details
initialization
fundamental qjam
remoteworker remoteworker
defines connection worker remoteworker passed
master pool workers
master
demonstrates initialization
worker pool master
workers remoteworker corn
remoteworker corn
remoteworker corn
master master workers

execution
master
initialized client wrap static
call
master distribute

call
creating master
partition registered
needs notion
structured fulfill requirement
client resort convenience
qjam custom

qjam tuples lists kind numpy

client wishes
disk

client wishes custom

member
chunks chunks
internal divided
slice slice
integer chunks
defining module executed remote worker written client
self module module mapfunc
mapfunc arguments argument passed
client call master
passed modification remote
worker argument mapfunc
client
qjam guarantees workers
receive overlapping



client option defining module client
option mapfunc
defines operator
operator
client defines custom
mapfunc
def multiply theta
theta
mapfunc multiply

calling master
module
client
call master distribute master client
module arguments master

call
master
import multiply
params

master multiply params

protocol
communication qjam master
workers occurs connection persistent
throughout existence master describes details communication protocol
assign remote workers efficiently distribute
protocol relies
messages messages typical communication workflow
message
message sent master
worker initiate encoded clients module hash chunks
compose workers encoded client specified
message
receiving message worker respond message message
status
blocked status
blocked worker whose
hash hash identifies chunk worker
encoded



master

worker



blocked





bootstrapping
qjam execution easy
strives
setup worker qjam
bootstrap remote
worker needs communicate
master initiating ssh connection worker
master sends worker protocol remotely executes worker
ssh server
serve remote manual setup




benchmarked workers
bfgs autoencoder

communication master remoteworker
execution typical qjam

message
master receives message whose status
blocked responds message
message encoded
correspond chunks worker

message
message sent
worker master whenever completes
message encoded computations
message
worker encounters unexpected
send reply message sent
master message


benchmarked qjam autoencoder
bfgs autoencoder
automatically learns
unlabeled
adjusts
bfgs
quasi newton
unconstrained
benchmarked autoencoder parallelized bfgs optimizing regular core
workers multicore
patches summarizes
plus
masters setup overhead
workers




























seconds

highlights
remote caching
qjam caching
remote worker master initially sends worker
hash chunk worker
worker
hash requests master caches
master advantage locality assigning workers chunks


workers


































seconds

job qjam
core

names parallelizing

speedup





core

speedup faster

















workers



speedup




speedup faster













reliability stress moreover

reveal whatever bottlenecks remain
regard
parity parallel
frameworks mapreduce handling worker failures
smarter job scheduling
yield improvements particularly heterogeneous

ssh json transfer
messages protocol encoding reliability noticed ssh occasionally dropped connections workaround automatically
failure remains biggest instability qjam
aside improvements usability
offer wider convenience subclasses
beyond encapsulate lists
vii







workers



speedup
speedups patches reflect client
whereas incorporate masters coordination overhead

speedup qjam
workers worker trial saw
speedup cores
speedups
trial reveals
master overhead yielding
slowdown
intensive job saw smallest trivial
job overhead workers
drove
cores
workers suited
job patches trials
workers
core
job worker runtime
lowest savings workers proportionally requiring twice workers
confirms
overhead distributing job workers
picked job
job worker pools
vi
logical qjam benchmarks
observe

greatly simplifies
rapid prototyping qjam abstraction complexities

computers parallel
rapidly prototype execute
computations explicitly manage communication overhead
remote workers
moreover qjam offers satisfactory
seconds
workers
speedup workers
viii acknowledgements
recognize assistance
prof andrew adam
coates bobby


jeffrey dean sanjay ghemawat mapreduce simplified

symposium operating
berkeley ca usa usenix association
apache hadoop hadoop apache dec
chu kim lin yu bradski
multicore advances
mit press

scientific tools numpy
numpy scipy dec
dong liu jorge nocedal bfgs
mathematical programming bf


