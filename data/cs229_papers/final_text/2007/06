tls speculate
seo
dept electrical engineering


thread speculation
hardware parallelizing sequential
programs
parallel nearly
heuristics


parallelizing widely accepted
inevitable trend boost computers
microprocessor vendors announced
roadmap cores conventional
parallelizing
decreases effectively
exploiting resources
crucial devise
parallelizing studies
replace ease
parallelizing speculation candidate
thread speculation tls hardware
parallelize sequential programs speculation
promising utilize core
architectures choosing speculation
challenging researches
heuristics
heuristics
applicability
questionable
propose
speculative speculation

invocation site speculatively fork threads
call sites

efficiently wide
contributions



automatically
parallel thread speculation

sang kim
dept electrical engineering





rely runtime
runtime involves
runtime overhead consuming profiling
combining
eliminate burden
offers
wide

speculation
overview
decade thread speculation
widely recognized promising facilitate shift
sequential parallel programming unlike
parallelizing transactional
tls exploits parallelism sequential
speculatively executing segments parallel
potentially parallel segments sequential
annotated runtime
tls compilers annotated tls hardware
forks threads maintains flow
execution parallelizing alter
tls hardware keeps track
loads stores dependency
violations violation occurs threads
speculative threads roll execute piece

locating speculatively parallelize proven
selecting
degrade excessive
violations mainly focused
parallel loop parallelization
threads
parallelize
speculative threads
invocation sites constraints
speculation

challenges
researchers demonstrated
promise tls heuristics
perfect heuristics tend favor
limiting applicability
heuristic

fimethod



store

stores violation
stores




execution

call

longer execution
call

loop

loops longer execution
loops nested loops

call site aware



conflict

conflict call site continues
speculatively violation
conflict decreases

conflicting accesses

conflicts call site continues speculatively
violation



call site wasting
idle cycles decreases


poorly
decide heuristic

thread speculation adverse
side runtime
heuristics require profiling runtime
profiling hints
execution profiling impractical
beforehand
collecting runtime heuristics
fly undesirable impose
runtime overhead


overview
broad studies
develops computers

inherent
effectively

piece mapped


propose
statistically parallel sequential
speculation
speculative
invocation site
contrast
runtime static
sufficient

potentially parallelizable intuitively
runtime execution
share static
guarantee

maximize optimality
workload runtime
static
simplicity workload
adequately justification
require runtime sized
workloads parallel
infeasible specify
parallel uniformly
unlike
exceed heuristic
law implies speedup parallelism
coverage speculative
coverage speedup
infinite cores
studies heuristics somewhat
limit targeting
contribution demonstrate
comparable
heuristics wide
overcomes difficulty choosing
heuristic
profiling
avoids profiling
noted considerable
needs
conducted

fion
unlike profiling
os installation convenient




possibility speedup violation describes
speedup
whereas call site aware violation
selecting
execution
speedup
tend execution
speedup exact
decide
read write
conflicts access avoid complicated pointer
simplify declaring
conflict loaded
speculative thread overlap stored older
thread
capable
overcoming
pass java
analyzer pass analyzer


call site aware pass
explored sophisticated
pass
constraints
extracting
determining
obvious programmers
vary
exhaustively parallelize
call sites

grows call sites
infeasible keeping mind
constraints adopt greedy enables
advantage heuristic


annotations speculative
alter
annotation call site
exhibits repeat
speedup
negligible noted
annotations execution







java expert shell



java compiler



variant

jack

java parser generator





barnes

gravitational

water

water molecules

java benchmarks

methodology
tools benchmarks
simplify reuse trace driven
infrastructure
instrumentation tool trace analyzer trace tls
simulator trace driven tls proceeds
traces executing instrumented
codes native amd
traces trace analyzer produces annotations
speculative specified
heuristic tls simulator trace
speculatively forks threads annotated

modify instrumentation tool call site
trace runtime
traces analyzed
java
analyzer java
comprise
speculative
invocation site
weka suite

tls simulator detects violations
accesses heap dependencies stack
neglected violation stack
speculatively parallelize void
stored stack
constraints resolve
parallelizing void simplify

speculative threads beginning invocation
thread forks cpu idle
utilize resources runtime
unclear

java benchmarks
java oriented





benchmark















jack



barnes



water





jack exhibit speedup contrast
speedup void
speculative candidates probable
speedup lack inherent parallelism
void benchmarks nevertheless
heuristics suggesting
offers promising tls
speedup execution breakdown
programs exhibit calls
desirable evaluating speculation
simulating benchmark consuming

summarizes java benchmarks



half call
sites half



separating hyperplane
nonlinear


yielded


speedup

tls driven heuristics
constraints heuristics
si rt runtime heuristic si sc
store heuristic heuristics
barnes water
neither si rt si sc optimum
heuristics jack
somewhat comparably speedup
speedups heuristics
speedups
heuristics
heuristics
benchmarks differ


barnes eight processors


lists

typical
glance seem conflict
drop
noted call
sites
engineering assumed
execution spent
speculative
strongly influence
speculative candidates negligible
critical
call sites
degrade barnes water
successfully
critical speedup despite

suggest claim heuristics
poorly
necessarily
skewing toward randomness unacceptable

critical
statistically
ensure
wide
kept
call sites equally implies

speculative

attribute
completely
parallelization
explained

fifor runtime
violations
reaches dynamic
translation java
codes




processors failure
processors excessive thread forks
barnes
speedup approached speedup
heuristics cpus
illustrates
quickly
converges suggesting
imperfect greedy




speedup
parallelizing void inevitable
considerable analyzer
tls simulator
immediately

affect require

resolve
experimenting

improving
sophisticated static alias
critical speculative

devise favors critical
introduces
defining locating critical

integrate
runtime runtime
excluded runtime
compensate


thread speculation
speculation speculative
static java
analyzer
heuristics

parallelizing void


acknowledgements
special thanks john ben
providing simulators tools thank
reviewing


processors proc

intl symp architecture june
heuristics profile

driven speculative parallelization
proc intl parallel

chen exploiting

parallelism threaded java programs
proc intl symp architecture
oct
transactional

architectural lock free structures
proc intl symp architecture

chen

dynamically parallelizing java programs proc
intl symp architecture june
improving speculative

thread parallelism module
proc intl parallel
symp
speculative thread

parallelism proc intl
supercomputing june
dynamic

adaptive thread speculation submitted proc
intl symp architecture
en wiki pareto principle


