extending wordnet generalized automated induction
lawrence



todd sullivan







describes java automatically extending wordnet lexicons extending
lexicons traditional relationships expensive laborious
automatically relationships
flexible allowing modules
plugged
comes seamlessly integrate
parser wordnet
particularly
promising





wordnet lexicons vital
fields
extending lexicons traditional crafted
insertion taxonomy
cover vocabularies proved
expensive tedious recently
automatically relationships collections


capable relationships
handle relationships
flexibility allowing
custom packages
powerful
integrate parser
wordnet
parser parse structures


typed dependency
parser


snow automatically induce
exhibit hypernym creating
generic induction operate
exist invoke
induction repeatedly


snow hypernym
structured relational
dependency dependency
dependencies
improves layout

parser parser
incorporating wider relationships

corpora

creating structures
wordnet supplying
lexicons
packages induction





layout generalized automated
gari


gari
discover structures
structures
free phrase
penn typed dependency
discovered
arbitrary
occurring

discovery yet unknown
newly discovered induced

repeated chain reaction fashion feedback loop
continues observe
induced



libraries

designed gari
java libraries libraries separately
packages

packages
core functionality
alternatively wishes exploit
individually separately

layout gari





plain
parser
penn typed dependency
dependency connecting nouns hypernym interacts parser java api





interfaces gari
initiate
induction functionality
interface gari wordnet interfaces enable gari
alternative lexicons
plain
interface wordnet interacts
wordnet java api wordnet interface generates wordnet
relation pruned
exist
saved disk
flexible plug lexicon
relation specified
default functionality supported relationships antonyms
hyper hyponyms meronyms synonyms





converted
structures
sub
dependency relating
sub
derive generic indicative instances
discovered discovered

occurrences


derive
representative occurrences


cpu
intensive thousands
analyzed
threaded cpus





deriving


induce

entropy
designed
flexible plug




feedback loop

induced

repeated loop
degradation relation induction

feedback loop showing newly
relationships retrain



packages

packages
skeleton gui
front ends exploiting gari functionality manner



methodology



deriving

generating
wordnet
relation removing
occur
generating noun
wordnet




deriving

conventional dependency
free phrase
penn

derive stages
stemming penn seemed
consistent dependency penn physical computations longer strings




relation
depending
indicative anti indicative
relation summing
occurrence




consisting nuclear abstracts
studies
institute studies



fiwe frequent

hypernym relation

agree
commonly hearst hypernym
relation induction



generating

unknown relation matched







entropy


reg


deriving

commonly occurring
restricting
mitigated

discovered

swept
recorded

decreases

becomes starts
overfit turn relation
fall unknown decreasing
minus relation unknown

tradeoff

penn
yield
drop







successfully
penn
compile penn




relation



relation



pos neg



























induced
divided


penn dependency
tagging
hypernym relation induced relation

infer


induced relations virtually accuracies relation
yes


suited sort
consisting
putting
yes labelings leaving
unknown labelings middle
tends decrease
tend
inverse
partially
decreased



induced
tagged



inducing relation

feedback loop induce
entropy

relation yes
unknown

despite induction processor intensive
consuming prevented
compiling
parallelizing threaded

speedup




feedback loop

terminates feedback loop
begins induce incorrect relation

incorrectly
relation
feedback loop induce
breaking
meet constraints





primary recommend
generalizing
optimizing generalizing capable inducing
paragraph relationships relationships
verb verb relationships induce


parsing
verbs occur frequently
nouns
sec

unknown
yes
lowest

suited hessian



hessian



par
















thread

execution

optimizing processor
intensive applies
require cpus feasible

storing extracting
cpu intensive



acknowledgements

thank graduate student
rion snow advised shared

thank dan jurafsky andrew advice





snow jurafsky
syntactic hypernym discovery nips
mc manning
cd generating typed dependency parses
phrase parses
resources
lrec italy
hearst acquisition hyponyms corpora proc fourteenth
linguistics france


