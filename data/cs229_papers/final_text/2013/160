loop free bit


autumn



jessica su

wilson







nr gmail






ever advent compiler scientists
efficiency programs active researchers seek instruction
arbitrary researchers schkufza
stoke chain monte carlo

runtimes alternative instruction
improvements



starting instructions notable exception operations branch
instructions limit
operands registers prevent external access designed
narrow investigation interaction
instructions proceeding linearly free
external influence runtime

determining efficiency
nontrivial modern processors architectures hundreds instructions boost processors incorporate hardware optimizations register execution
machinery complicated operation
deterministic observer operation exhibits
unpredictable repeatable depending sequencing instructions beginning
execution require proprietary engineering prohibitively brute force


runtimes placing
timestamp programs linux
environment timestamps execution excluding spent threads
runtime looping instructions
instructions
interaction loop instructions instructions
loop instructions
offset
instruction subtracted
runtimes

assembly instruction runtime

stoke maintains
purpose gauge
alternative
expensive
refine beyond scope

dependencies instructions
eric schkufza working assembly parser primitives
flow tools extracting read
write register dependencies instructions operands
wrote
instruction



eric schkufza
collaborator instruction intel family processor runtimes
processor family instruction
runtimes





contribute runtime linearly
runtime
yb runtime contributions
yb xt

squares
minimized squares

fitraining



solving


logical improving static dependence neighboring instructions perhaps
instruction processor execution multiplications parallel accomplish
perhaps simplest occurrences ordered
instructions

opt arg


squares

hope

slow

pairwise












pk pk



notation

static

xm

aim runtime arbitrary instructions programs
ordered lines pk
specifies instruction instruction
operands denote


proved intensive matlabs divide operator introduced
iterative
equations formed equations


ith
runtime
runtime cpu register
measurement
perfect necessarily imply

static
started replicating
schkufza sharma static assumes runtime pj static property instruction
operands processor lines pk runtime
runtimes instructions

pj instruction



ax







solved stabilized bi special care
ensure sparsity preserved necessarily dense
xz multiplying
xz
proved practical
division
bi unless detected
progress numerical











pk



lacked
hardware resource access
instruction
runtimes
overhead looping property
offset runtime consistent instructions meant
interact
consistent
calculating
intercept meaningfully
subtract empirical offset runtimes
subsequent
runtimes instruction squares
solved squares minimization
arg division operator advantage
sparsity
nonzero





pairwise introduced
suffered
inspecting
presence instructions susceptibility

inspecting programs
instructions tend predictable runtime narrow
poisson instructions tend exhibit strange
runtime appeared bimodal exponential
bimodal instructions explained trigger bad
instructions
calculations iterative instructions root instructions

ideally normalize
estimator require detailed instruction

fia instruction
instructions
instruction



simplicity partitioned
stages replacing minimization
equivalent formulation columns rows
lv hv
splitting
xlv

lv hv













arg xlv lv hv
lv hv



rows identically




xlv





xlv
formulation
instructions
dominate
lv arg xlv


hv
arg xlv lv



solving lv hv

exploiting involve
solves minimizing whose
dominated



















dependency

designs modern processors elaborate hardware locally parallelize instruction
register registers
register
subsequences
technology execution
listing toy






movl

movl
movl
movl


ax






underlying instructions
programs
runtime instruction


yj
instruction
yj yj
variances instructions appearing
bimodal gap
gap serve
instruction

extending definition instructions static
straightforward

pairwise neighbor highvariance instruction
relaxing definition dependence strictly strictly
investigation definition rules
rows inclusion xlv
instruction instructions
decays bernoulli instruction
xlv tend shorter programs
longer programs custom


dependency
experimented hope capturing
processor
schedules instructions execute quickly register valid registers named operands
named operands flag registers
toy listed listing instruction

fimodel

static instruction
static pairwise inst
static pairwise
static unweighted height
static height
static longest static inst






programs
programs


programs
feat
rms
rel
rms
rel
rms
rel


















executed instruction instructions register
instruction depends instruction instructions affect registers
executed simultaneously
dependencies eric
schkufza draw dependency
instruction depends instruction
conjectured affect runtime
starting simplest



unweighted dependency height

height unweighted dependency plus instructions longest

longest static perhaps overly
informative



dependency height

runtimes instructions longest greatest
runtime ns
longest
instruction static runtime
instruction instruction runtimes
static assumes
execution instructions
ordering instructions view enhancement
unweighted height processor acts predicts
contribute greatly runtime
perfectly runtime instruction perfectly
creating



longest dep static inst

instruction
instruction longest
movl

extends assuming
runtime instruction except purpose longest calculation
wrong
wrong processor assuming
properly longest




rms
rel









runtimes instruction static earlier consistency ideal
static static runtimes
instruction extension static
perfect execution






insight
subsets
programs whose programs
instructions
rms





yb


squares
equivalently minimizes
ease reading


fifi yb fifi




listed
absolute
yb serve rms




static

rms static instruction proved
predictor runtime
squares reduces

programs subsets nearly suggesting

multiples nearly suggesting squares
weighting outliers purposes



pairwise

pairwise rms

causing somewhat
orders
outliers severely

rms squaring said mildly
led
introduced


possibilities removing instructions problematic focusing behaved instructions



derive
instruction
isolation closely examine
programs instructions yield
clues


static pairwise
squares minimizer definition

static instruction rms
notably
subsets minimizes


dependency
dependency nearly identical static instruction
longest dependency
static instruction doubles
static instruction
suffer


tools exist heuristic runtimes intel architecture analyzer tool tools slow
generation instructions loop
runtime runtimes
tools potentially yield

assuming tools yield consistent




acknowledgments

thank eric schkufza
generating providing tools
providing underlying behind dependency


conclusions
generalizing none worthwhile
static instruction static pairwise
yielded
orders remains

intended purpose producing
rapidly runtime

yield improvements
tends tightly
instructions
subsets fewer featured programs

instructions dominate affected
theory
improvements
links instructions interactions registers execution
generation adequate estimator deduced perhaps instructions
skew caused outliers
extended stages
desired

somewhat dependency
yield authors
yield unclear flawed
generation
solver





chang lin

schkufza
eric processor
implementing deeper pipelines architecture

van der bi smoothly
converging variant bi cg



