reconstructing non intrusively collected keystroke data using
cellphone sensors

luis hector chavez

lhchavez stanford edu

abstract

text input through keyboard can be intercepted by an attacker without having to
compromise the system or the connection
with the keyboard by relying only on sidechannel information  such as acoustic emanations from keystrokes or vibrations induced
on the surface it is resting upon  this project
combines ideas from several previous works
to make a robust interception  using only sensors available on a modern portable computing device  in particular  mel frequency cepstral coefficients are used to extract features
from audio data  fourier transform is used
to extract features from accelerometer data 
and support vector machines with a radial
basis function are used to classify the events
when recorded 

   introduction
computer systems can be eavesdropped upon without
the need to compromise a specific part of the system 
side channel attacks are possible when an attacker has
an additional channel of information about the system
 kelsey et al          magnetic fields  rf emissions 
power consumption  timing and interference on other
data channels can all be used for side channel attacks
 ferguson and schneier         the term is usually applied to cryptographic systems  but it can also be used
to describe attacks on other computer systems  i will
explore a side channel attack on a computer by detecting the keystrokes a user performed that only requires
physical proximity with the victim and an everyday
portable computing device  such as a mobile phone or
a tablet  previous attacks on non intrusive keystroke
data collection have been made using acoustic emanations  zhuang et al         or vibrations picked up by
a cellphone accelerometer  marquardt et al         

figure    sound profile of a keystroke in a mechanical keyboard   a  finger touches the key cap and slides down the
switch  membrane keyboards emit almost no noise in this
part  b  the cap exceeds the necessary force to activate the
switch  which clicks against the backplate  c  the switch is
released and a spring pushes the switch and the cap back
to its regular position 

     acoustic emanations
most common keyboard technologies rely on mechanically depressing a button to close a circuit that goes
back to its original position when released  to do that 
flexible membranes or mechanical switches are often
used  miller         membrane keyboards are significantly quieter than mechanical switches  emitting only
    db of noise  mechanical switches on the other
hand can emit up to     db  for reference  a quiet
room has ambient noise of about   db   the sound
profile of a typical keystroke can be seen in figure   
these acoustic emanations can be easily picked up by
a microphone 
     vibrations
while most of the energy used to press a key gets used
either to make the keycap travel and close the circuit
or dissipates as noise  some of that noise and energy is
propagated to the surface the keyboard rests upon  vibrations are produced even when typing on keyboards
that have no moving parts and produce significantly
less noise than membrane or switch keyboards  like
virtual keyboards on tablets and phones  or the microsoft surfaces capacitive keyboard  vibrations can

fireconstructing non intrusively collected keystroke data using cellphone sensors

audio     bit pcm   normalization was then used to
avoid clipping and to boost the signal 
     keystroke segmentation

figure    although similar to the acoustic profile  the vibration profile only clearly shows the vibration produced
by the switch hitting the backplate 

be picked up by a nearby accelerometer placed in the
same surface as the keyboard  unfortunately  the rate
at which accelerometer data can be sampled on common devices is significantly lower than audio  the data
is noisy  and the rate is not constant  so it alone cannot be used to accurately detect keystrokes  previous approaches have complemented the collection of
vibrations with dictionaries to improve detection rates
 marquardt et al          the vibration profile of a
typical keystroke can be seen in figure    

   data set
the data set used in training and testing the system
was a collection of        keystroke events distributed
across all keys of a keyboard with cherry mx blue mechanical switches placed on a       thick wooden table 
audio and accelerometer data were collected using a
very simple app made for android  using a nexus   device placed    cm away from the keyboard with mono
audio at       khz and the fastest accelerometer collection rate supported of     hz 
     data cleanup
the device already does applies noise reduction to the
stream before providing it to the app  so no further action was necessary  accelerometer data is returned as
a timestamp  in nanoseconds since the unix epoch  
and three floating point readings for the x  y  z accelerometers  measured in meters per second  due to
the orientation of the device  only the z accelerometer
is used after normalizing it to have a bias of zero instead of g  since the accelerometer events are polled
using a software timer  the timing of the readings is
not consistent  so interpolation with a  th degree polynomial considering   points before and   points after
each pair of readings was used to produce a consistent
    hz signal and encode it in the same format as the

when both the audio and accelerometer data are collected in order to be processed  a small program identifies all the potential keystrokes in the audio file and in
the accelerometer data file by splitting both the audio
and accelerometer data in     ms windows and comparing the root mean squared  rms  of both windows
with a threshold of     of the maximum amplitude 
this helps reduce false positives since ambient noise
has little effect on the vibrations picked  and most vibrations done on the table  like hand motions or mouse
movements  do not produce as much audible noise 
     training data set labelling
labels were produced with the help of an sdl program running in the desktop computer that logged
keystroke events  both key up and key down  together
with timing information  since the audio  accelerometer data  and labels come from machines and subsystems with different clocks  they are not synchronized  after the potential keystrokes were identified 
another program correlated the events with the key
log by using linear regression to obtain an affine transformation mapping the key log timing data to the potential events that minimized synchronization error 
once the events were synchronized  random     ms
windows were chosen from the recording and added to
the events  with roughly the same cardinality of the
most frequent event  the space bar   and labelled with
no key  this was then used to train the classifier 

   feature extraction
mel frequency cepstral coefficients were chosen to extract audio features since they are widely used in
speech recognition and in previous attempts to aurally
recognize keystrokes  zhuang et al          a hamming windowing function was used in   ms steps with
    overlap  then obtained the log of the fft  and
then calculated the ifft to obtain the cepstral coefficients  that was done using scikit talkbox  david 
      using the default parameters  and then selecting
the first    coefficients for the first    windows 
since the accelerometer data showed peaks in the      
hz range  and was is sampled at     hz      samples
     s  were needed to correctly extract the features 
the accelerometer data was then passed through a
hamming window function and then the fft was obtained  and only the buckets between    and    hz

fireconstructing non intrusively collected keystroke data using cellphone sensors

were used as features  this made the feature vector to
be     dimensional 

   classification
the data was first normalized by setting the mean of
the data equal to zero and the variance equal to one in
each of the dimensions of the features  several configurations of svm were evaluated  using the implementation provided by scikit learn  pedregosa et al         
linear  polynomial  and rbf kernels were evaluated 
as well as two multi class classification strategies  oneagainst one approach outlined by  knerr et al        
and a one vs the rest strategy  pedregosa et al         
several values of c were also evaluated 

   evaluation
the best results were achieved using a svm with a
rbf kernel with c      when measured with    fold
cross validation  this achieved           training error and       validation error  which is roughly the
same as the results in previous papers  figure   has a
graph with more details 

   real time classification

figure    a screenshot of the application running and receiving recognized keyboard events from the server  with
just one recognition error

the devices that were tested didnt have enough computation power to keep up with the sensor reading 
segment the data  extract features and classify the
keystrokes in real time  to compensate for that  the
extraction program was modified to feed the uncompressed raw data to a more powerful machine through
a tcp socket using a very simple framing scheme to
be able to easily demultiplex the data on the server 
the server uses the same code to perform training and
validation  and if a key is classified  a packet with that
information is sent back to the device for display figure   shows a screenshot of the application running on
the testing device  the volume of the data limits the
applicability of this technique to local area networks 

multiple high quality microphones are available in the
market today  such as the nokia lumia       but they
are not as widespread  as the sensors of the portable
computing devices improve  more and better eavesdropping attacks similar to this can be used in public environments to collect information non intrusively
and without raising suspicion 

   future research and conclusion

john kelsey  bruce schneier  david wagner  and
chris hall  side channel cryptanalysis of product ciphers  journal of computer security  pages
                     

having more spatial information through the use of
stereo microphones can yield to increased accuracy
when classifying keystroke events  despite the fact
that most devices have two microphones  the second
one is typically used for noise reduction  and is not
available for the developers to use  other devices 
such as the microsoft surface  do allow the recording
of stereo audio  but do not allow raw audio to be captured  the audio compression used takes away most
of the gains of the extra audio channel  devices with

references
cournapeau david  scikit talkbox  a set of python
modules for speech signal processing         
niels ferguson and bruce schneier  practical cryptography  wiley         

s  knerr  l  personnaz  and g  dreyfus  single layer
learning revisited  a stepwise procedure for building and training neural network  neurocomputing 
algorithms  architectures and applications         
p  marquardt  a  verma  h  carter  and p  traynor 
 sp iphone  decoding vibrations from nearby keyboards using mobile phone accelerometers  in

fireconstructing non intrusively collected keystroke data using cellphone sensors

figure    training error with respect to data size

proceedings of the acm conference on computer
and communications security       pages        
chicago  il              
patrick miller  mechanical keyboard faq  pick the
right switch        url http   www pcworld 
com article        mechanical keyboard 
faq pick the right switch html     
f  pedregosa  g  varoquaux  a  gramfort  v  michel 
b  thirion  o  grisel  m  blondel  p  prettenhofer 
r  weiss  v  dubourg  j  vanderplas  a  passos  d  cournapeau  m  brucher  m  perrot  and
e  duchesnay  scikit learn  machine learning in
python  journal of machine learning research     
                 
li zhuang  feng zhou  and j  d  tygar  keyboard
acoustic emanations revisited  in proceedings of the
  th acm conference on computer and communications security  pages         alexandria  va 
          

fi