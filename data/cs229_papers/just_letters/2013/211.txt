estimation of inertial parameters in simulation
keegan go
abstractin this paper  we develop and test two methods for
estimating the inertial parameters of a robot in simulation  this
problem is difficult due to the high dimensional space  and the
nonlinearity of the problem  since our goal is to develop methods
that could be applied to a real robot  we cannot examine the
parameters directly and instead use an error that reflects how well
a set of parameters can predict its future position and velocity  we
find that minimizing this prediction error does not improve our
estimation of the inertial parameters  however  these estimated
parameters do significantly increase the accuracy of predicting
future positions and velocities 

i 

i ntroduction

in robotics  it is essential for the model of the robot to
be both accurate in order for the calculations necessary for
control and operation to be precise for fine tasks  previously 
estimations of these parameters were done by disassembling
a robot and meticulously computing the inertia parameters
of each link      however  disassembling a robot is a timeconsuming process  especially for robots with complex linkjoint structure and high degree of freedom  dof   additionally 
this approach does not scale well if we want to dynamically
choose new payloads for the end effector 
subsequent work has been done on creating methods
for both offline and online estimation of parameters through
examination of data about a robots movements over time 
khosla and kanade lay out one framework which takes the
newton euler formulation of the dynamics of a robot and
turns the system into a linear system which can be solved     
this initial approach found that some parameters could not
be identified due to the assumptions made  and so additional
knowledge about the system is required in order to determine
the parameters  khosla continued this work  applying the
method to the cmu dd arm ii     
since then  new methods for modeling robot dynamic
parameters have been developed  olsen and petersen use a
statistical approach and maximizing likelihood to generate
an estimate      bompos used this method and applied it to
the mitsubishi pa    arm  but focused mostly on obtaining
parameters for this device rather than developing a generalized
approach     
following up on this work  we will develop two general
methods to estimate the inertial parameters of any robot  both
of these methods represent a data centric approach that relies
on collecting a large number of samples about the robots
movements and using this data to attempt to determine the
inertial parameters  rather than use a sophisticated formulation
of the robot  these methods use an error metric to guide a
search over the parameter space 

kenji hata
and includes convenient interfaces for control and a physics
engine to run the simulation      we used scl to perform both
data collection as well as to test our estimated parameters 
b  problem specification
our model for a robot uses   inertial parameters for each
actuated link of the robot  mass  center of mass  x  y  z   and
rotational inertia  xx  yy  zz   a configuration consists of a
complete choice of these parameters for all links in a robot 
in our simulation  the configuration used to initialize the
robot was considered the true configuration  this set of inertial
parameters would be the unknown values that we try to
estimate if our tests were run on a real unknown system 
to accurately simulate this scenario  we never access this
configuration directly  and can only learn about it by examining
how the state of the robot changes over time when exposed
to different forces  we also assume that we are given a
configuration that represents an initial guess of true inertial
parameters of the robot  while initially this was nothing
more than a seeding point  we later chose to use the initial
guess to impose some reasonable bounds on the problem  see
constraints section  
during testing  we decided to run our parameter estimation
on the puma    whose full configurations were provided by the
stanford robotics lab  on each robot  we ran a gc sinusoidal
controller with different frequencies on each joint to ensure we
tried a wide range of motions 

fig     puma in scl simulation
c  parameter error
given a configuration with parameters  p          p n    we can
compute two measures of error  the first is called parameter
error  and is
x  pi  p   
i
   
p
i
i
where pi is the value of the actual parameter  the division by
pi is needed because our inertial parameters inherently differ
by up to   orders of magnitude  this division ensures that each
parameter is fairly represented in the error 
d  generalized coordinate error  gc error 

ii 

s etup and data m odel

a  experimental setup
our testing framework is built on the standard control
library  scl   which provides a complete robotic simulation

however  since computing parameter error requires knowledge of the true parameters  we cannot use parameter error
outside of an analysis of our methods  therefore  we have
  the

puma is a   dof industrial robot consisting of all revolute joints 

fideveloped a second formulation of error which we call generalized coordinate error or gc error  in generalized coordinates 
each links state can be represented by two scalars  one for
position and one for velocity  a vector q is defined that
contains all the position scalars for all links  and dq is similarly
defined as containing all the velocities values for all links  q
and dq together make up the complete state s of the robot at
a given time  gc error is then computed as
x
 
 si  sp  
   
i

where sp is the predicted state and si is the actual state for
some initial condition i 
in practice  we collect samples of initial states  position
and velocity  as well as the forces that are being applied on
our simulated robot  for each such condition we record the
resultant state of the robot after a fixed time interval  this pair
of initial state and final state make up one data point in our set 
given another configuration  we can then simulate running the
robot from the same initial conditions with the same forces
applied  and compare the final state to the recorded state
obtained from simulating the robot with the true configuration 

each configuration in the population  whereas the nlo needs
to simulate many times per configuration   as a result  the ga
can maintain a much larger population of configurations and
run many more iterations in the same amount of time as nlo 
in our ga  we choose individuals   configurations   using
roulette wheel selection where the fitness of the individual
is measured as the inverse of the gc error  mutations were
performed at the level of single parameters  where a new
parameter is selected from a normal distribution centered on
the current value and with a standard deviation proportional
to the current value  crossovers were performed by selecting
two individuals of the population and generating a new configuration whose parameters were randomly chosen from one
of the two individuals 
in addition to the basic algorithm  we also implemented
what we refer to as the migration step  after generating the
new population  we find the centroid of all individuals  and
then move all individuals away from this center point  this
helps ensure that the population stays reasonably dispersed 
and allows us to sample a greater portion of the configuration
space 
c  constraints

e  relationship between parameter error and gc error
it is difficult to show any clear relationship between these
two measure of error  however  they clearly must have a
common global minimum because  if we chose our testing
configuration to be the true parameters  we find both a zero
parameter error and a zero gc error  intuitively  our ability to
predict our position velocity state should get better as our configuration approaches the true values  part of the objective here
is to understand whether there exists a discernible relationship
between these two quantities that we can use to estimate the
parameters from only the gc error 
iii 

a lgorithms

a  nonlinear optimization
since the integration equations with respect to the parameters are nonlinear  we used a nonlinear optimization
 nlo  algorithm to find a configuration of parameters which
minimizes gc error  our nlo starts with an initial estimate
configuration and creates two mutations from this initial configuration  resulting in three seed configurations  we then use
a nonlinear optimizer  on each of these seeds  and choose the
configuration with the minimal gc error among the optimized
configurations  this configuration becomes the new initial
estimate and the process is repeated until the gc error becomes
zero 
b  genetic algorithm
we have also implemented a genetic algorithm  ga  as
another method to search for inertial parameters  in contrast
to the nlo  the ga runs much more quickly because each
iteration of the algorithm needs to simulate the robot once for
  we used nlopt  an open source library created by mit  the specific
optimizing algorithm we chose was constraint optimization by linear approximation  cobyla   which supports the constraints we use to narrow the
search 

since it is impossible for inertias to have negative values 
we initially placed a non negative constraint on inertias in our
nlo and ga 
however  the lack of other constraints allowed the nlo
and ga to output configurations that had some parameters
with nearly impossible values  assuming that one takes a
reasonable initial estimate of the robots configuration  we
further constrained all parameters to be within     of our
original estimation to prevent our search from drifting  in the
case of robots such as the puma  this assumption should hold 
however  when parameter values are small  we acknowledge
that this assumption becomes too strong  as the range of the
constraint is consequently small  a different constraint may be
needed 
finally  recognizing that the entire robots mass is constant
and can be easily measured  we placed a constraint on the sum
of the masses to be constant  this final constraint was placed
only on the nlo due to the nlos tendency to drift  whereas
the gas masses were stable 
iv 

r esults

both of the methods described above yield configurations
that do significantly better than the original initialized parameters  below we show the graphs of the two errors for each
method  note that the gc error is significantly reduced on both
robots in both methods   fig    
these results also hold up for different patterns of motion
other than the one data was collected on   fig    
to understand how these error compare against those from
other parameters  we generated a histogram of errors for
configurations that are near the true configuration  randomly
generated a number of configurations where each parameter of
  nlo makes approximately ten thousand of these simulation calls per
configuration optimization 

fi  
min gc

 

  

  

 

parameter error

gc error

initial
 

parameter error as a metric of whether our populations of
configurations trend toward the true configuration  however 
our results showed that finding low gc errors does not
correlate well with finding low parameter errors   fig    

  

iteration

fig     gc errors of nlo  top  and ga  bottom  over the
training iterations

 

gc error

nlo
ga
initial

     

 

dataset

 

 

 

  

 

 

iteration

min gc
min param
initial

  

fig     parameter errors of nlo  top  and ga  bottom  over
the training iterations
one possibility is that our model of an inertial configuration
is over parameterized  clearly there may be some parameters
that can never be estimated due to the particular combination
of links  in this two dimensional case  the product of the mass
by the offset of the center of mass determines the rotational
inertia  since we can only apply torques to this revolute joint 
we will never be able to tell the difference between any pair of
mass and center of mass whose product is the correct rotational
inertia 

fig     gc error of two different control paths
v 
the configuration was chose to be within a    range of the
true value for that parameters  the green bar highlights the
bucket into which our average error on the testing data falls
into   fig    

f uture w ork

one possible change to make would be to sample over
different motions and control patterns in hopes that gc error
becomes a better approximator for parameter error  another
would be to combine the two algorithms to see whether the
ga would help the nlo cover more of the parameter space 

  

number of configurations

acknowledgment
we thank samir menon for providing us with scl and
advising us  we also thank ellen klingbeil for her helpful
suggestions 
r eferences
   

 

   

   

gc error

   

fig     gc errors of randomly generated configurations
where parameters are within    of true values
a  relation between parameter error and gc error
we find that the correlation between gc error and parameter error was not as strong as we hoped  while they both
have the same global optimum  we never found a case where
the true configuration was generated  at each iteration of both
nlo and ga  we recorded two configurations  the one that
minimizes parameter error and the one that minimizes gc
error  for each of these configurations we then compute the

   

   
   

   

   
   

brian armstrong  oussama khatib  and joel burdick  the explicit
dynamic model and inertial parameters of the puma     arm  ieee
international conference on robotics and automation  vol     ieee 
     
pradeep k  khosla and takeo kanade  parameter identification of robot
dynamics  ieee conference on decision and control  vol      ieee 
     
pradeep k  khosla  estimation of robot dynamics parameters  theory
and application       
martin m  olsen and henrik gordon petersen  a new method for
estimating parameters of a dynamic robot model  ieee transactions
on robotics and automation  ieee       
nikolaos a  bompos  et al  modeling  full identification and control of
the mitsubishi pa    robot arm  ieee asme international conference
on advanced intelligent mechatronics  ieee       
samir menon  standard control library 
http   www stanford edu smenon projects html
steven g  johnson  the nlopt nonlinear optimization package 
http   ab initio mit edu nlopt

fi