method  to  suggest  similar  api  calls  across  languages  and  
frameworks  
maesen  churchill    
jess  fisher  
alex  valderrama  
 maesenc stanford edu   
 jessf stanford edu   
 avald stanford edu 
  
abstract  
for  software  developers   finding  equivalent  api  calls  across  different  languages  and  
frameworks  can  be  a  difficult  and  tedious  task     however   doing  so  is  often  necessary  for  
cross platform  development   or  for  educational  purposes   e g   programming  classes      
currently   programmers  must  find  equivalent  api  calls  for  different  frameworks  by  
searching  documentation  or  reading  code  samples     we  propose  a  novel  way  of  suggesting  
similar  methods   given  a  source  and  target  api   by  using  classification     we  trained  two  
classifiers   using  perceptron  and  support  vector  machines   to  recognize  functionally  similar  
methods     we  then  test  the  classifiers  on  a  set  of  equivalent  methods  from  javame  and  
android  graphics     our  classifiers  are  reasonably  successful  at  identifying  the  most  similar  
methods  in  the  target  api   in  the  svm   the  most  similar  method  in  the  target  api  was  the  
first  method  suggested         of  the  time      we  also  identified  future  work  that  could  
improve  the  classifier  performance   including  more  accurate  parsing  of  words  from  method  
names  and  more  advanced  relationship  extraction  from  method  descriptions   
  
i   introduction  
documentation     this  can  be  tedious  and  
as  a  software  developer   the  ability  to  
time consuming   and  at  times  challenging     
work  across  different  languages  and  
for  novice  computer  science  students   
frameworks  is  a  valuable  skill     most  
working  with  language  libraries  was  
companies  demand  that  their  applications  
identified  as  one  of  the  most  difficult  
be  available  across  several  different  
programming  concepts   along  with  
platforms     furthermore   computer  
recursion   pointers  and  references   
science  students  are  often  expected  to  
abstract  data  types   and  error  handling  
work  with  different  languages  for  
        
different  classes   
  
  
amrutha  gokahale   vinod  ganaparthy  and  
working  in  an  unfamiliar  framework  can  
yogesh  padmanaban  of  rutgers  
be  difficult  for  even  the  most  experienced  
university  proposed  an  automatic  way  to  
programmers     even  if  a  developer  
infer  likely  mappings  between  apis  by  
suspects  an  api  method  exists   finding  the  
analyzing  stack  traces  of  implementations  
right  one  for  any  given  situation  can  be  
of  the  same  application  on  different  
difficult     if  a  programmer  wants  to  find  
frameworks   for  example   the  tictactoe  
the  analog  in  api  a  of  method  from  api  b   
game  implemented  on  javame  and  
they  must  do  so  by  looking  through  
android      gokahale  et   al   inferred  

firelationships  between  methods  in  source  
and  target  apis  by  looking  at  features  of  
functions  such  as  their  call  frequency   call  
position   call  context  and  method  name  
      
  
  with  this  research  in  mind   we  propose  a  
novel  way  of  suggesting  similar  methods  
in  a  target  api  to  a  function  in  some  
source  api   using  machine  learning  on  api  
documentation     in  this  paper   we  attempt  
to  train  classifiers  to  recognize  similar  
function  calls  from  function  names   
parameter  names   and  function  
descriptions     we  then  use  the  decision  
functions  of  the  trained  classifiers  to  
suggest  similar  functions  to  a  given  
method  from  a  specified  target  api   
  
method  name   abs  
parameters  
a  
description  
returns  the  absolute  
value  of  a  double  value   
figure      the  information  from  a  single  method  we  
use  in  classification   

  
ii   methods  
our  training  set  was  compiled  and  labeled  
manually  from     different  api  categories  
across     different  languages     we  selected  
only  object oriented  languages   but  we  
sampled  from  both  scripting  and  
compiled  languages   and  both  weakly  and  
strictly  typed  languages     methods  were  
given  unique  ids  so  methods  that  were  
functionally  equivalent  from  two  different  
apis  were  given  the  same  id         methods  
were  only  compared  in  the  training  set  of  
our  classifiers  if  they  were  from  the  same  
type  of  api   

library  types  

languages  

graphics  
math  
i o  
strings  
threads  
date time  

python  
java  
c   
c    
javascript  
php  

figure      sources  of  training  data     we  classified       
methods  to  create        data  points   method  pairs    

for  each  pair  of  methods   we  extracted  
twelve  features     we  chose  any  features  
that  might  inform  whether  two  methods  
were  functionally  equivalent     we  did  not  
include  return  or  parameter  type  
information  so  that  our  method  selection  
system  could  be  used  on  object oriented  
languages  that  are  not  explicitly  typed   
such  as  python   
  
the  edit  distance  of  the  method  names  is  
defined  as  the  number  of  insertions   
deletions  and  substitutions  needed  to  
transform  one  method  name  to  the  other     
an  uncommon  word  in  a  given  library  
type  is  defined  as  one  that  appears  in  
fewer  than      methods  in  libraries  of  that  
type  in  our  training  set     we  also  included  
features  for  the  number  of  words  the  
names  have  in  common   and  the  number  
of  distinct  words  in  the  method  names     
to  parse  words  from  method  names   we  
used  the  following  heuristic   
   if  the  method  name  includes  
underscores   let  underscores  serve  
as  word  boundaries   
   otherwise   use  changes  in  
capitalization  as  indications  of  
word  boundaries   e g   tolowercase  

fiwould  have  words  to   lower  
and  case   
  
features  
the  edit  distance  of  the  method  names  
whether  the  methods  had  the  same  
number  of  parameters  
the  difference  in  the  number  of  
parameters  
the  number  of  parameter  names  the  
methods  share  
the  difference  in  the  lengths  of  the  
method  descriptions  
the  number  of  words  the  descriptions  
share  
the  number  of  words  that  appear  in  
exactly  one  description    
the  manhattan  distance  of  the  
descriptions  
the  number  of  uncommon  words  the  
descriptions  share  
the  number  of  uncommon  words  that  
appear  in  exactly  one  description  
the  number  of  words  the  method  names  
share  
the  number  of  words  that  appear  in  
exactly  one  method  name  
figure      features  extracted  from  each  pair  of  
methods   

each  method  pair  was  classified  as  a  
match  if  the  methods  had  the  same  
unique  id   indicating  they  are  
functionally  equivalent        
  
the  training  set  was  used  to  train  two  
classifiers   one  using  the  perceptron  
algorithm   and  one  support  vector  
machine     we  then  tested  the  classifiers  
on  a  test  set  composed  of  pairs  of  

methods  from  the  java  mobile  edition  and  
android  graphics  apis     our  test  set  
contained      pairs  of  equivalent  methods   
we  tested  the  algorithm  in  the  following  
way   for  each  method  in  javame   we  
paired  it  with  all      possibilities  in  
android  graphics  and  ran  both  trained  
classifiers  decision  functions  on  that  pair  
of  methods     we  used  the  outcome  of  the  
decision  functions  as  a  measure  of  
similarity  between  the  methods   and  
suggested  the  top  five  method  matches  in  
android  graphics  for  each  method  in  
javame     
  
iii   results  
both  the  perceptron  and  svm  performed  
reasonably  well  at  recommending  
methods  for  the  test  set       
  
perceptron   svm  
  
correct  
       
method  was  
first  
suggestion  
correct  
       
method  was  
in  the  top  
five  
suggestions  

       

       

figure      classifier  performance  on  the  test  set   

in  both  classifiers   edit  distance  of  the  
names  and  the  number  of  words  the  
names  shared  were  the  most  relevant  
features     in  all  cases  of  similar  method  
names   the  classifiers  could  correctly  
suggest  the  method  from  android  
graphics       
  

fisuggestions  for  isitalic   javame   
isitalic   
ismutable  
isbold  
isvisible  
isshowing  
figure      the  top  five  suggestions  for  javame  
method  isitalic  in  the  android  graphics  api     these  
results  were  typical  when  paired  methods  had  
similar  names     asterisk  indicates  correct  match   

for  methods  in  javame  that  had  matches  
in  android  graphics  that  didnt  share  
similar  names   the  classifier  had  worse  
performance     however   the  svm  still  
performed  fairly  well     even  if  the  target  
method  wasnt  the  top  suggestion   it  often  
appeared  in  the  top  five     
  
suggestions  for  createimage   javame   
createbitmap  
create  
setmessage  
decodebytearray   
setmessage  
figure      the  top  five  suggestions  for  javame  
method  createimage  in  the  android  graphics  api     
results  for  suggestions  when  paired  method  names  
were  dissimilar  were  less  reliable     

number  of  methods  

svm  classixier  
performance  
    
    
    
    
   
   
   

   

   

   

   

   

   

rank  of  correct  method  call  
figure      svm  performance  for  test  set   

   

   

iv   analysis  
classification  of  similar  methods  using  
documentation  was  generally  successful     
our  classifiers  perform  favorably  
compared  to  previous  work  in  this  field     
gokahale  et   al   had  a       success  rate  at  
predicting  matching  methods  and  a       
success  rate  at  having  the  matching  
method  appear  in  list  of  the  top  ten  
suggestions  when  testing  on      methods  
from  the  apis  we  used    javame  and  
android  graphics          though  we  cannot  
be  sure  how  much  our  test  set  overlaps  
with  that  of  gokahale  et   al    we  are  
convinced  that  we  have  topped  their  
performance     
  
support  vector  machine  performance  
topped  the  performance  of  the  weighted  
classifier  trained  by  the  perceptron  
algorithm     perhaps  this  is  because  the  
svm  is  a  bit  more  resistant  to  over  fitting   
due  to  it  keeping  the  magnitude  of  the  
weight  vector  small          
  
however   there  are  a  few  shortcomings  of  
our  classification  scheme     perhaps  the  
most  obvious  pitfall  of  our  method  for  
similar  function  call  suggestion  is  that  it  
requires  robust  documentation  from  
both  source  and  target  apis     being  able  
to  identify  the  target  api  and  find  
documentation  can  be  difficult   especially  
for  novice  programmers     furthermore   if  
the  api  does  not  give  adequate  
documentation  for  each  method   our  
classification  scheme  will  not  work   
  
another  shortcoming  of  our  classification  
scheme  is  the  performance  drop off  that  

ficomes  when  two  functionally  equivalent  
functions  do  not  have  similar  names     in  
both  perceptron  and  svm   edit  distance  
between  method  names  is  heavily  
weighted  as  the  most  important  feature     
however   this  has  negative  implications  
for  both  specificity  and  sensitivity       
  
placing  such  importance  on  method  name  
can  introduce  some  false  positives  to  
method  pairs  by  chance     for  example   
before  features  for  the  number  of  words  
in  common  between  method  names   
getfont  was  the  top  suggestion  for  
seticon  by  the  svm   rather  than  its  true  
match   setimage    in  large  part  because  
seticon  and  getfont  happen  to  have  a  low  
edit  distance   due  to  the  presence  of  et  
and  on  in  both  words   as  well  as  the  
similarity  in  the  lengths  of  the  names        
  
furthermore   the  high  weight  of  edit  
distance  ensures  that  when  true  pairs  
have  dissimilar  names   they  are  often  
classified  as  negatives  incorrectly     in  
these  cases   our  classification  still  does  
much  better  than  random    for  the  svm   
the  correct  method  is  always  in  the  top      
suggestions     however   the  distribution  of  
the  rank  of  the  suggestion  for  the  
matching  method  is  near  uniform  from  
the  second  to  the  ninth  suggestion   see  
figure         this  suggests  a  lack  of  reliable  
prediction  when  method  names  differ  
significantly     
  
to  try  to  correct  for  this   future  work  
would  include  pruning  back  the  feature  
set  to  prevent  over fitting   and  trying  to  

compile  a  list  of  more  informative  
features   
  
for  the  future   the  following  extensions  
could  be  made  to  create  more  informative  
features   
   compile  a  list  of  synonyms  to  be  
able  to  more  accurately  quantify  
name  and  description  similarity   
   use  named entity recognition  to  
extract  parts of speech  from  
method  descriptions     
   use  more  advanced  natural  
language  processing  to  extract  the  
return  value  category   e g   
number   image   void   from  each  
method  and  create  a  feature  for  
whether  these  categories  match   
   use  more  advanced  natural  
language  processing  to  reason  
about  parameter return  value  
relationships   
we  predict  that  more  accurate  feature  
sets  could  lead  to  better  classification  
performance   
    
references  
     lahtinen   essi   ala mutka   kirsti   and  jarvian   
hannu matti   a  study  of  the  difficulties  of  
novice  programmers   submitted  to  the        
conference  on  innovation  and  technology  in  
computer  science  education   
     gokahale   amrutha   ganaparthy   vinod   and  
padmanaban   yogesh   inferring  likely  
mappings  between  apis   published  for  the    th  
international  conference  on  software  
engineering   may           
     ng   andrew     cs     lecture  notes   support  
vector  machines     
http   cs    stanford edu notes cs    
notes  pdf  

fi