relevanseek  determining relevant images from
html source
david zhang
drz cs stanford edu

abstract
webpages of online articles typically contain one or more images which are relevant to the article  such as a photo of a key person or a graph of figures mentioned
in an article  and many images which are irrelevant  such as links to related articles  share buttons  and advertisements  given the html source to an article
webpage  but without actual image data  we are able to train a model able to distinguish the two classes of images with high accuracy 
relevanseek was the winner of diffbots machine learning challenge for this
classification problem  

 

introduction

diffbot     a company specializing in
automated content extraction of webpages  posted a challenge  given the
html source to an article  determine
which images are relevant to the article content 
an example article is shown in figure    this particular slate article
has text content about some flying
gadgets  and includes a relevant image of one such toy at the top of the
page  other images on the page  such
as social media buttons  the authors
photo  and related article thumbnails 
are irrelevant to this article 

figure    example of an article with relevant images
highlighted in green and irrelevant images highlighted
in red 

it is easy to see why an effective algorithm for this task is valuable  for
example  when sharing a url on a service like facebook or skype  a thumbnail might be generated
from one of the relevant images on the target webpage  as another example  a browser user agent
 either a local client or a hosted service  can try to strip out irrelevant information  intrusive styles 
etc and leave the reader with just relevant text and images with plain formatting  determining which
images are relevant is a key component of both of these systems 
diffbot has provided a training set consisting of the raw html source for several articles  because
the actual images are not included in the data set  all analysis is performed on the html source only 
however  diffbot has annotated the source with a small amount of helpful information  specifically 
 
sadly  relevanseek was the only submission in the contest though many teams signed up  whether this
means others were unable to produce competitive programs  or whether they dropped out for some other reason 
is unknown to the author 

 

fiselected html element tags are annotated with an extra element describing how the element is
rendered in diffbots browser implementation  for example  the image of the helicopter is described
by the following annotated html tag 
 img src       alt          x    y     w     h     mbo  px dis inline  

the extra   attribute describes the rendered  x  y  position and size  the bottom margin   px   and
the display mode  inline   this information can be used to obtain valuable features 

 

architecture

html parser
sizewidthfeature
sizeheightfeature

feature extraction

attributelengthfeature

relevanseek is written entirely in java  its
core pipeline consists of three principal
components  the same pipeline is used
whether the intent is to train  evaluate training using cross validation or other methods  or to predict unknown samples 

nearbyimagecountfeature
   

   

page parser

training prediction

as the first step in the pipeline  the parser
builds a dom using jsoup     and then
naive bayes logistic perceptron    
svm
   
sanitizes and normalizes the resulting tree 
the resulting well formed dom is then
converted to javas native dom structure 
weka
libsvm
from this  the the parser builds a list of images and extracted image features  more on
figure    processing flow of one document through
this in     if labels are known  then the
relevanseeks pipeline 
parser associates each image with its label 
the parser produces a strongly typed data
structure to avoid potential bugs caused by inconsistent interpretation of matrix values 
   

classifier interfaces

the parser hands off extracted information to one of the many classifiers  the classifiers are
designed to be pluggable and extend a common interface iclassifier in order to facilitate
rapid development feedback and short iterations  switching from one classifier to another to
test different models requires only swapping half a line of code  most of the classifiers  e g 
naivebayeswekaclassifier  libsvmclassifier  simply perform translation between
relevanseeks native format and the underlying librarys required format  but it is also possible to
write custom classifiers  for example  the leastsquareslinearregression ols classifier 
is implemented using only jama     a generic matrix library 
the classifier architecture also allows parameters  e g  bias for unbalanced data set  and composition
 e g  adaboost  or other arbitrary refinements without any changes in the application layer 
   

classifier backends

to avoid reinventing the wheel  we reuse existing high quality machine learning libraries  several
classifiers are wrappers for weka    and libsvm     which both have pure java interfaces and
implementations  by placing the backends behind this abstraction layer  arbitrary backends can be
used by relevanseek without any changes to the application layer 
 
while the ols classifier was useful for rapid early prototyping  its results are not included here because
the features being used led to singular matrices 

 

fi 

feature extraction

relevanseek reduces each image to a vector of features along with a binary label  about    of these
features are static  including 











size of image
distance between image and the four edges of the rendered webpage
length of the alt and title attribute values
similarity of alt and title value values compared to header and title text
number of other images rendered close by
number of other identically sized images
whether images bounding box overlaps with elements like  p  or  article 
whether the image is a hyperlink
the size of the smallest rendered ancestor
the position of the first text heavy ancestor element

two of the features are generated based on the training data 
 whether the image or its ancestor elements contain certain strings in their class and or
id attributes
 whether the image has an ancestor of some specific tag name  e g   figure  
each feature is implemented as a class extending a common ifeature interface  similar to the
common interface for all classifiers mentioned previously  this allows rapid feedback for feature
performance and enables automated feature selection 

 

results

   

classifier performance

because of the unbalanced data  even the trivial always irrelevant classifier achieves       accuracy  thus  we use the f  score to measure performance 
classifier performance is determined using   fold cross validation  training each classifier on    
of the labeled documents and predicting image relevance in the remaining documents  the training
set consists of     documents containing       images  of which     are relevant 
the cross validation performance is as follows 
classifier
svm  rbf 
logistic 
perceptron 
naive bayes 
always irrelevant
always relevant
 

accuracy
     
     
     
     
     
     

precision
     
     
     
     
     

recall
     
     
     
     
     
     

f score
     
     
     
     
     

with adaboost

   

learning curve

the learning curve for the svm classifier is shown here  while precision and recall on the training
set remains high throughout the curve  accuracy on the test set during cross validation plateaus after
about     documents  although the learning curve may suggest high variance and overfitting  each
one of the many features contributes positively towards testing accuracy and removing any of them
reduces testing accuracy  one challenge of this particular problem is the large amount of information
included in each html page  it is difficult to represent all of the relevant information into a concise
set of real numbers 
 

figiven more time to continue this strategy and
implement more features  we believe the testing accuracy plateau can be shifted up and to
the right  and an f score of           is reasonably achievable 

 
   
   
   
   
   
   

 

limitations and future work

   
   

   
test
train
relevanseek compresses information about
 
each image into a single feature vector  which
 
   
   
   
   
   
   
may be overly restrictive  in addition  this
creates the implicit assumption that the clasfigure    svm testing and training f scores dursification of each image is independent of
ing cross validation with   folds
others in the same document  building more
complex models could improve performance  for example  the popular adblock program detects
advertisements primarily by using simple pattern matching against urls  which is not well suited
for classification using numeric features  a similar strategy could be added to relevanseek to efficiently eliminate several classes of irrelevant images 

another potential improvement is filtering dirty data  diffbot provides a training set of about    
labeled documents  but the labels are not always accurate  some labels are malformed  some are
missing  some are duplicated  some are wrong based on manual judging by the author   exploring
options to either clean up the data as a preprocessing step or to filter out bad training data may
improve performance 
finally  one quirk of this task is that diffbot provides the  img src        attribute in the
training data  but not the evaluation test set  even though the url of the image provides useful
information regarding the relevance of the image  for example  a simple image feature describing
the end of the image url  e g   png vs  html etc  improved accuracy in cross validation  but
had to be removed for classifying the test set  similarly  another possible feature could be generated
by comparing the domain of the image source to the domain of its containing webpage  or to look
for certain keywords in the url  e g  share  

 

conclusion

we have described a supervised learning classifier for determining whether images in an html file
are relevant to their containing article  the documents are parsed and images are processed into
vectors of carefully chosen features  and several learning algorithms are compared for accuracy  by
choosing an appropriate classification algorithm  relevant images can be chosen with high precision
and recall 

references
    diffbot technologies  diffbots machine learning challenge        http   diffbot 
com robotlab diffbotcontest   online  accessed    nov       
    jonathan hedley  jsoup  java html parser        http   jsoup org  
    joe hicklin  cleve moler  peter webb  ronald f  boisvert  bruce miller  roldan pozo  and
karin remington  jama  java matrix package        http   math nist gov 
javanumerics jama  
    mark hall  eibe frank  geoffrey holmes  bernhard pfahringer  peter reutemann  and ian h 
witten  the weka data mining software  an update  sigkdd explorations              
http   www cs waikato ac nz ml weka  
    chih chung chang and chih jen lin  libsvm  a library for support vector machines  acm
transactions on intelligent systems and technology                     software available at
http   www csie ntu edu tw cjlin libsvm 

 

fi