detecting network intrusions
naveen krishnamurthi  kevin miller
stanford university  computer science
 naveenk   kmiller   stanford edu

abstract
the purpose of this project is to create a predictive model for detecting network intrusions 
it makes use of a dataset  which consists of nine weeks of raw tcp dump data for a local area
network  lan  that was designed to simulate a typical u s  air force lan  we implemented a
variety of different classification algorithms based on logistic regression and the nave bayesian
model to determine if individual connections were malicious  false positive and negative error rates
were used as criteria to evaluate the relative performance of these approaches  we determined that a
multi dimensional nave bayesian model is an effective approach for filtering network connections
that minimizes impedance of normal network activity 

introduction
detecting malicious use of network connections is an important challenge that many
security professionals face  network attack detection is an active field of research  and a number of
different approaches have been employed  since reactive systems risk damage to the network  a
pressing need exists for a predictive model that can accurately identify network attacks before they
occur  with prior research in mind  we therefore attempt to develop a model that can accurately
detect network attacks  we are interested in applying our model as a filter that can be incorporated
into existing network security systems  which means that it must minimize misclassification of
normal network connections in order to limit harms to network performance 

data
the dataset that was used for training and testing our network attack identification model
was prepared by mit lincoln labs   researchers simulated a typical u s  air force lan for nine
weeks  and exposed it to a number of different network attacks  the networks raw tcp dump data
was then processed into a training set consisting of approximately five million connections  and a
test set consisting of approximately four hundred thousand connections  each data entry in both sets
contains seven discrete features  service  protocol  log in status  etc   and thirty two continuous
features  duration of connection  bytes downloaded  log in attempts  etc    the data points also
contain a label classifying each connection as either normal or an attack  it is important to note
that eighty percent of the connections in both the training set and the test set are network attacks  in
contrast  research suggests that approximately only five percent of real word network traffic is
malicious in nature   this necessitates that our model have a low false positive classification rate
 rate of misclassification of benign connections   it is also important to note that the training set
contains only twenty eight different attack types  whereas the test set consists of forty two different
attack types  this is designed to test our models efficacy at classifying attacks that have not been
seen previously  processing the data involved discretizing discrete data that was represented
 

 

data collected from http   kdd ics uci edu databases kddcup   kddcup   html 

based on a research collected by the private security firm incapsula  source  http   www incapsula com the incapsulablog item     what google doesnt show you    of website traffic can harm your business

fisymbolically  and breaking up both the training set and test set into different files that contain the
discrete and continuous features 
i  nave bayseian model using discrete features
the first algorithm that was implemented was a nave bayseian classifier that incorporated
a multinomial approach and laplace smoothing  the classifier was trained on the discrete features
in the training set and tested on both the test set and a     sample of the training set  this resulted
in an error of only      on the     sample of the training set  and       on the test set  however a
close inspection of the results revealed that the       error on the test set was composed of a   
false negative  missed attack  rate  and an unacceptably high     false positive rate  from these
results it is clear that a simple nave bayseian classifier that relies purely on the discrete network
data is not a practical model for a network connection filter in this use case  and another approach
must therefore be used instead 
ii  logistic regression
our next approach was to design a model that could take advantage of the continuous
features in the training and test data sets  because the algorithm simply needs to determine whether
or not a network connection is an attack  logistic regression seemed to be the best candidate  to
train theta  logistic regression was implemented using newtons method for approximately        
iterations  the resultant theta classified the     subset of the training set extremely well with only
      error  unfortunately  logistic regression had an extremely high variance as the error
increased to     when classifying the test set  close examination of the error also revealed that the
algorithm had a false positive rate of approximately      which is completely unacceptable for our
use case 
in an attempt to decrease the massive variance  we considered modifying our selection of the
continuous features  since most of the continuous features have a value of zero for each connection 
it seemed likely that running logistic regression on the features that were predominantly non zero
would result in a model with decreased variance and a lower false positive rate  the results of the
new regression are shown in figure   below 

figure    difference in logistic regression error rates with refinement of feature selection
by refining our feature selection we were able to successfully decrease the false positive rate of the
logistic regression model  and only increase its error as result of simpsons paradox  both the error
and the false positive rate  however  were still unacceptably high and therefore logistic regression

fialone appeared to be insufficient for our use case 
iii  nave bayseian model using all features
since logistic regression had such poor results  a decision was made to try incorporating the
continuous features into the nave bayes model  to do this  the continuous features of each file
were discretized by assigning each of them a discrete value based on their continuous value  and
then combined with the discrete features of each file for use by the nave bayesian classifier  the
combination approach did decrease the training error by a significant amount  but had no visible
impact on the testing error  as a result  it seemed unlikely that the addition of discretized
continuous data would result in decreased bias  and would instead only increase the variance of the
model  we therefore decided to try and come up with another approach that would involve
modifying our nave bayes algorithm to achieve better results 
iv  multi dimensional nave bayseian model using discrete features
the final algorithm that we examined was developed by taking a closer look at the
implementation of our nave bayseian classifier  the training stage of the nave bayseian
classifier returns a vector of probabilities in which the ith entry represent the probability that a
connection is an attack given the presence of the ith feature  in this dataset  however  an increased
value of a feature does not necessarily mean an increased chance of attack  for example  a
connection with a service of aol  which is represented using the discrete value     does not
necessarily have a higher chance of being an attack than a connection with service http  which is
represented using the discrete value      using this intuition  a modified version of the navebayesian model was implemented using an mxn array a of probabilities where m is the number of
features      n is the max value taken on by any of the features      and the value at aji is the
probability that a connection is an attack given that the ith feature has value j  using this multidimensional nave bayseian classifier  mdnbc  resulted in an overall error of        a
comparison of its overall error rate against the error rates our other approaches is provided in figure
  below 

figure    comparison of overall error rates of different approaches
the mdnbc therefore outperforms our other approaches based on overall error  a closer
examination of the mdnbcs false positive rate of      also shows significant improvement in
comparison to other approaches  a summary of the false positive and negative rates of our
approaches on the test set is provided in figure   below 

fifigure    comparison of false positive and false negative rates of different approaches
it is important to acknowledge that the simple nave bayes classifiers false negative rate
of        does outperform the mdnbcs false negative rate of     and logistic regressions
false negative rate of       the significant impacts on network performance that accompany using
these models as filters suggest that the mdnbc model is the ideal approach that can be integrated
into existing network security defense systems  this is especially true when results are projected
based on real world traffic  where only    of connections are malicious and     are benign  a
comparison of the projected error rates based on real world traffic is provided in figure   below 

figure    comparison of projected error rates based on real world traffic

conclusion
the mdnbc model therefore clearly outperforms our other models  given that it has a projected
error rate of approximately    based on real world traffic  it is also important to note that the
mdnbcs     false positive rate is much lower than the current state of the art algorithm used to

ficlassify this dataset  which uses a hidden nave bayesian model   the state of the art algorithm
does have a slightly lower overall error for this data set  with an error rate of only        as
opposed to the mdnbcs rate of        however its higher false positive rate suggests that it will
be a less practical filter for real world network traffic conditions compared to the mdnbc in most
use cases 

areas of further research
there are three approaches that we plan to continue researching in order to improve our
results and develop an even more accurate model for network connection filtering  the first would
be to make another attempt at logistic regression using a feature selection algorithm to determine
which features to use  this algorithm would possibly select features that could accurately train our
theta to work well on the test set as well as the training set  another major source of error is our use
of the nave bayesian assumptions  which is by no means true in this context  since the features are
not necessarily independent from each other  dropping these assumptions and or using a weighted
nave bayes approach would exponentially increase the time to build a classification model  to the
point of impossibility for this project  however  such a model could be implemented in the future
with enough time and computational resources  finally  the third major improvement would be to
obtain a data set that was refined to show a sequence of events  i e  first a connection was
established  then x bytes were downloaded  then a log in attempt was made  etc   rather than simply
listing features  data in this form could be used in a markov model based algorithm that could
probably classify attacks more accurately 

 

levent koc  thomas a  mazzuchi  shahram sarkani  a network intrusion detection system based on a hidden nave
bayes multiclass classifier  expert systems with applications  volume     issue        december       pages             issn            http   dx doi org         j eswa             
 http   www sciencedirect com science article pii s                 

fi