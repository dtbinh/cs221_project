an adaptive intelligence for heads up no limit texas holdem
etan green
december         

skill in poker requires aptitude at a single task  placing an optimal bet conditional on the game state and
the opponent  the best poker artificial intelligences place bets that are optimal with respect to the game
state  but not the opponent  these pokerbots train complex betting functions from tens of millions of hand
histories or billions of simulated games  and they tend to work well against opponents that resemble the bots
collective experience  but an optimal strategy against one opponent may be a poor approach against another 
games of heads up poker last for dozens  if not hundreds  of hands  and each hand provides information about
the opponents strategy  existing bots cannot use this information to adapt their betting functionstheir
parameters  trained on billions of hands  are too numerous to update from relatively sparse experience with a
given opponent  by contrast  my bot relies on a parsimonious betting function whose parameters are updated
when it observes its opponents bets  this function will likely be inferior to existing pokerbots when it has no
information about its opponent  but after a number of hands  it should outperform generic betting functions 
for my cs    final project  i trained the initial parameter vector using hand histories from a      computer
poker tournament 
strategies vary considerably  even among top players  consider two of the worlds best pokerbots  entropy
and hugh  figure   depicts how each bets when it faces the first bet of a hand  here  the blinds are    and
     so the first bettor can either fold  call with     or raise by at least      on the x axis is the winning
probability associated with the bots hole cards  at this point  the shared cards are unknown  and the bot
knows nothing about what its opponent might hold  i calculate these winning probabilities by running a monte
carlo simulation over all of the unseen cards  pocket aces win close to     of simulated hands  low  unsuited 
non pairs win about     of simulated hands  both bots fold less and raise more as their cards improve  but
similarities end there  entropy predominantly folds when its cards are weak  hugh is most likely to raise even
on the weakest cards  entropy calls on as much as     of hands  hugh never calls 
the strategies of these bots also diverge when they raise  figure   shows a histogram of their raises on
the left and the relationship between their raises and the quality of their cards on the right  entropy chooses

 

fifigure    probability of folding  calling  or raising by winning probability for   entrants in a computer poker
tournament  sample restricted to the first bet of the hand with blinds of         winning probabilities calculated for players hole cards via a monte carlo simulation over unseen cards  estimates via kernel regression 

  
probability of bet
  
  
  
 

 

  

probability of bet
  
  

  

 

hugh

 

entropy

  

  

  
winning probability
fold

  

call

 

  

  

raise

  
winning probability
fold

  

call

 

raise

among three values when it raises initially            and      hugh chooses uniformly between     and      
the more entropy bets  the better its cards tend to be  for hugh  there is no relation between the size of its
initial raise and the quality its cards 

hugh

raise amount
   
   

   

   

   

density

   

   

   

entropy

   

figure    histogram of raise amounts on first bet of hand  left   and kernel regression of raise amount on
winning probability  right  

 

  
   

   

   

       

   

   

   

raise amount

  

  
winning probability
entropy

graphs by left

  

 

hugh

the proclivities of ones opponent matter when making a bet  an opponents bets give information both
about the cards it holds and about how it plays in particular game states  a generic betting algorithm might
rightly suppose that an initially high bet signals good cards  but if its opponent were hugh  that supposition
would be false  it might also make a bet under the belief that its opponent would call with high probability 
 
the minimum value of     represents the amount the player has put in the pot       the amount needed to call       and the
minimum raise       

 

fiwhich will be more true for some opponents than others 
my bot keeps track of two functions that predict an opponents actions from the game state  the first
function predicts whether the opponent will fold  call  or raise  or check or raise  in a particular game state 
the second function predicts how much the opponent will raise  conditional on choosing to raise  let  x 
summarize the game state  then for bet   fold  call  raise  or bet   check  raise  
exp  x i  
p  bet   i  x       p
 
j exp  x j  
where i     for some i  i assume that each raise  r  is a random drawn from a log normal distribution  for
some realization r        of r 

p  r   log r   x      n    x           

where     x  and    is assumed to be known 
with   the bot can identify its opponents expected action in a particular game state x and calculate
the value of its bets through an expectimax routine  let a indicate whos turn it is and b be an object that
summarizes a betting round  then the value function for a betting round is 



b scores bot    p  bot wins   b pot
b isover



vopt  a  b   
maxbetb bets vopt  a  b makebet bet  
a   bot



p


betb bets p  bet   bet  x    vopt  a  b makebet bet   a   opp
when a betting round is over  the bot gets the negative amount it has put in the pot  b scores bot   plus its
share of the pot in expectation  p  bot wins   b pot   
two quantities remain undefined  the attributes of the game state   x   and the probability that the bot
will win the hand  the game state is partly defined by attributes of the betting round  the round number
 blinds  flop  turn  river   the size of the pot  and the amount to call  but it is also defined by the cards held
by the bot  the shared cards that have been revealed  the unseen shared cards  and the hole cards the opponent
might hold  because the combinatorics of these cards is immense  i define the game state in terms of winning
probabilities  the bots beliefs about how likely it is to win given what it knows about the cards  and what it
thinks its opponent believes about its own likelihood of winning 
 
vopt is infinitely recursive if the bots best response is always to raise  and the opponent responds by raising with some probability 
i amend vopt to consider only d successive raises by the opponent  after  d recursive calls  the opponent calls or folds with probability
   ending the betting round 

 

fithe bots beliefs encapsulate three quantities 
   the probability that the opponent holds a particular pair  ppair  
   the probability that the bot will win conditional on its opponent holding pair  pwin pair  
   the opponents beliefs conditional on holding pair 
 a  the probability that the bot holds a particular pair    qpair pair 
 b  the probability that the opponent will win conditional on the bot holding pair    qwin pair pair   
at the beginning of a hand  the bot knows its own cards and that the opponent holds one of

  
 



pairs with

equal probability  for each pair  pwin pair and qwin pair  are deterministic and can be calculated via a monte

carlo simulation over the   
  combinations of shared cards  the bot believes its probability of winning  pwin   to
be the dot product of p pair and p win pair   it also believes that its opponent believes its own winning probability 
qwin   to be p pair   qwin pair   where qwin pair    qpair pair    qwin pair pair    the attributes of a game state  x  include
both observables of the betting round  r  and pwin and  qwin pair  
beliefs are updated when shared cards are revealed  or when a player makes a bet  when shared cards are
revealed  pairs that contain any of the shared cards are eliminated from beliefs  and the vectors of winning
probabilities p win pair and p win pair opp are recomputed by iterating over the possible unseen shared cards  when
the opponent makes a bet  the bot performs a bayesian update on p pair by weighting pairs that are rationalized
   

   

by the bet  ppair  ppair p  bet   bet  r  qwin pair     if the opponent typically raises when it believes its winning
probability to be high  then observing the opponent raise tells the bot that it likely has cards associated with
   

high subjective winning probabilities  the bot represents p pair as a dirichlet distribution  since the likelihood
follows a multinomial distribution with non integer counts  and the dirichlet and multinomial are conjugate
   

distributions  p pair also follows a dirichlet  when the bot makes a bet  the bot updates  qpair pair  for each pair
   

   

and pair    qpair pair   qpair pair  p  bet   bet  r     qwin pair pair       bets by the opponent inform the bots
beliefs about the pair the opponent holds  bets by the bot inform the bots beliefs about the opponents beliefs
about the pair held by the bot 
since p and q are both functions of  and factor into the likelihood of a bet  i estimate  from hand histories
using a two step estimator  the data come from a      computer poker tournament in which    bots played
   m hands   i estimate  on        hands played by entropy and hugh  i loop over the data   times 
in each iteration  i loop through the hands in a random order  for each hand  i progress through the bets
 

note that qwin pair pair    or what the bot suspects the opponent to believe about its chances of winning if the opponent holds
pair and the bot holds pair    is a function only of the cards  not the bets  were i to presume common knowledge  beliefs would be
infinitely recursive  i specify only one level of recursion 
 
unlike hand histories from poker websites  these data show the hole cards of each player for each hand  even when the hand
does not end in a showdown 

 

fisequentially  updating the parameters once for each bet  estimation at each bet occurs in two stages  first 
i update the agents beliefs from the previous bet  holding  fixed  then i perform one iteration of gradient
ascent on   holding p and q fixed               p  bet  x  
  i settled on           which appears to produce

some measure of convergence after   iterations  i define the  transformation to include the linear  squared 
and cross terms of x 
a principal obstacle in estimation is computational  when shared cards are revealed  the bot updates


  
p win pair and  qwin pair pair  for each pair  after the flop  each vector is   
  pairs long  and there are     

vectors to update   updating each pair requires iteration over   
  combinations of unseen shared cards  this
update requires over a billion iterations for each flop  for each agent  this is an infeasible chore  so i estimate 
only on betting during the blinds  before any shared cards are revealed  the estimates are directionally sensical 
the higher an agent believes its likelihood to be  the more likely it is to raise and to raise larger amounts  the
larger the pot  the less likely the agent is to fold  and the higher the amount required to call  the more likely
the agent is to fold 
the problem is that pots in the data tend to stay small during the blinds round  and parameters estimated
on these bets do not perform well in simulations when the pots become large  for instance  when my bot makes
the first bet of the hand  it uses vopt to evaluate the expected payoff of a call  a fold  and the raise r that
maximizes the payoff heuristic  

 

payoff r    popp  bet   f old  x r             popp  bet   f old  x r    pwin         r       pwin  r

here  the bot gets a pot of     if r induces a fold  if the opponent does not fold  the bot gets a pot of        r
with probability pwin or r with probability    pwin   since folds are not often observed in the blinds stage 
popp  bet   f old  x r   does not reach   at any r  and the bot bets high         when pwin        at these
raises  the likelihood is dictated by the size of the pot and the amount to call  and is uniform across the belief
variables p and q  this means that each element of p pair and  qpair pair  is given the same weight after a bet 
yielding no update to pwin or  qwin pair  
in addition to estimating  on later betting rounds  i plan to put more structure on  x    x  should
correspond to the payoff an agent expects from a bet  the additive specification of squared and cross terms does
not  i suspect parameterizing  x  as in the payoff function above will inspire intelligent play across a range of
game states 
 
 

one for each pair in  
qwin pair pair  plus one for p
 win pair  
i maximize this quantity using the golden section algorithm 

 

fi