sound design learning for frequency modulation
synthesis parameters
juan pablo caceres
center for computer research in music and acoustics  ccrma 
stanford university
jcaceres ccrma stanford edu
   overview
sound design is an extremely slow processes that requires
a significant amount of experience to achieve specific goals 
through a process of trial and error the designer uses an
existing synthesis engine or program its own to create a
sound that is closer to a specified target  the sound target
can be either an existing sound or a verbal specification 
frequency modulation  fm  synthesis     uses a very
efficient algorithm to match a wide variety of sounds  this
technique has the advantage that through the use of a small
number of control parameters  it can achieve a wide range
of timbers  this flexibility makes it also hard to get to the
correct parameters for a specific sound target 
a general heuristic to match synthesis parameters of
a fixed sound engine to an arbitrary sound target is proposed  after the generation of training data from the synthesis engine  pca is perform to extract relevant metrics
and a combination of k means and gradient descent is used
to get an estimation 

   previous work
andrew horner     has applied genetic algorithms to match
fm synthesis parameters  the engine topology can also
vary with the added complexity of model selection  genetic algorithms used lead to good results but are computationally expensive and slow  making them not suitable
for real time purposes 
a more general approach has been presented by matt
hoffman      where simulated annealing is used as an alternative to genetic algorithms to match synthesis parameters  these algorithms are also very slow  so a database
is filled and a general locality sensitive hashing is used to
get fast approximate lookups 
in general the problem with models with variable synthesis engine is that the more complex the more accurately
the target can be matched  this naturally leads to spectral
modeling synthesis      a generic approach to match any
sound through spectral features  this is very accurate but
very slow and the mapping problem of how to control the
synthesis parameters is an open question 

   proposed framework
this work proposed a general approach to match parameters to a fixed synthesis engine  a fixed topology is preferred over an evolutionary one because 
 training and database generation based on the topology and parameters range is possible 
 a better control can be achieve in real time performances without the need of a higher level mapping 
the steps consist on the following stages that will be
discussed in details in what follows 
   define the synthesis engine and range of control parameters
   generate random training data spanning the space
of the control parameters
   chose a feature vector and a distance metric and
cost function to evaluate similarity
   perform iterative k means clustering on the training
set to generate a decision tree based on feature similarity
   for a target sound  do a tree search on the tree database
and use that as a starting point to perform gradient
descent to reach the local minimum of the cost function
     synthesis engine
synthesis engines like the ones available on commercial
synthesizers or ad hoc computer synthesis graphs can be
used  e g   fm synthesis and subtractive synthesis  the
control parameters are completely specified within a range 
     training data
to generate training data we simply generate random control parameters values  each of them within its specific
range  so that we span a wide variety in the control space 
some algorithms like fm synthesis have strong nonlinearities  so in general what we want is to maximize the
variety of features  to do that we do pca and clustering
on the feature space and not on the control space 

fi     feature vector and a distance metric
to match parameters for steady state sounds  spectral feature are much more relevant than time features  in general 
any spectral feature may be use that provides a good representation of the spectral characteristic of the family of
sounds generated by the specified synthesis engine  pca
is then performed on the chosen feature vector to reduce
dimensionality in the evaluation of similarity 
it has been showed that the mfcc  mel frequency cepstral coefficient  is a perceptually valid metric for timbre
     it has also the advantage that it incorporates pca on
its arrangement  so performing pca again wont be necessary  it is also more important to inform the system with
psychoacoustic features since ultimately the target sound
has to be similar psychoacoustically and not physically
 although in many situation both coincide  
the mfcc coefficients are a representation of the spectrum into total energy per critical band using auditory filter
banks  we use    coefficients that are computed with the
auditory toolbox     in matlab 
for the purpose of matching steady state sounds  we
define the sample mean mfcc vector c as the average
of the the successive mfcc across the chosen total time
frame  the comparison between sounds is done in terms
of the norm of the difference between the target feature
vector and the estimated one 
dc   kctarget  cestimated k
independently of the metric chose  others may be more
appropriate for other problems  the purpose is to minimize
dc  

   fm synthesis example
a very simple frequency modulation engine is used as an
example  the engine consists of two sinusoids  one acting
as carrier and the other at modulator 
x t    a sin  fc t   i sin  fm t   m     c  
fc   fm   i are used as control parameters  fc fm have
a rango of    hz to      hz and i goes from   to    
the other parameters are fixed at a      m     and
c      to generate the training data  we use     discrete
steps on the three control parameters and generate random
combinations of them 
      random combinations are generated  this number is chosen to be    times bigget than the minimum
nc nl         in order to avoid having clusters without
data 
the clustering is done using    clusters and   levels 
     k means clustering
figure   shows the first level clusters of the training data 
the cluster centroids are also plotted  it is clear that the
clustering is grouping sounds with similar mfcc features 
this clustering is done again in   levels  with    cluster
groups each 
kmeans mfcc clustering
   

 

   

    

     k means clustering decision tree
we want to maximize the variability on the feature vector
that represents the variability of the target sounds  in the
training data we perform k means clustering on the feature
vectors  the spider     is used to do the computations in
matlab  this is going to group the data into clusters sound
features 
the clustering is done in an iterative way  in order to
generate a decision tree for a fast lookup of the closest
match of a target sound with the sounds on the database 
the system defines a number of clusters nc and a number
of levels nl   so we can span a total of nc nl plus the last
level training data  for example  with    clusters and  
levels  we can span a total of approximately     training
examples
     gradient descent
after finding the closest match in our training database
tree  we use that point as a starting point and perform gradient descent to get to the local minimum  hopefully we
are in a region where the local minimum is also the global
one  the bigger the training data  the highest the chances
that we reach the global minima 

    

 

 

 

 
 
mfcc number

  

  

  

  

  

  

kmeans mfcc clusters centers
   

 

   

    

    

 

 

 

 
 
mfcc number

figure    k means clustering and cluster center for the
mfcc of the fm example

     system performance
the system performance was evaluated with the generation of random parameters to generate a target sound  and
then try to match the parameters  informal listening tests
suggests that estimation is very accurate in terms of sound
quality  but sometimes is in a slightly different pitch  this
suggest that for a future work harmonicity coefficients and
spectral centroid may be helpful in the feature vector to
make the estimated parameters more accurate 

fitable   shows for example of target and estimated parameters  the corresponding spectrograms are shown in
figures            
we see that even when one of the parameters is far from
the global minimum  table    the spectrograms are still
similar  this suggest that different configurations produce
different sounds  and even if we dont get to the exact parameters of the original sounds  perceptually it is still acceptable 
all these examples need no more than    iterations 
what makes the algorithms very fast  with less than a second to estimate the parameters in matlab  the order of
the iterations needed for genetic algorithms and simulated
annealing is much highier 
table    center frequency fm parameter for each band 
fc
fm
i
target  
   
   
 
estimated                     
target  
   
  
 
estimated  
    
           
target  
   
   
 
estimated                     
target  
   
   
 
estimated                     

target sound

target sound

  

  

   

   

   

   

   

   

   

   
 

 

 

 

 

 

estimated sound

  

  

   

   

   

   

   

estimated sound

   

   

   

   

   
 

   

   

   

   

   
 

 

 

 

 

 

 

 

figure    spectrogram comparison for example  

target sound

   
 

 

target sound

  

 

 

figure    spectrogram comparison for example  

  

 

estimated sound

 

 

 

estimated sound

  

  

   

   

   

   

   

   

 

figure    spectrogram comparison for example  

   conclusions and future work
a fast algorithm was implemented for a simple example
of fm synthesis  the example performs very fast and
does not require a huge database to store the training data 
however we need to review the feature vector in order to
make it more accurate  different distance metrics that can
be tried are the raw spectrogram with reduced dimensionality  and the addition of harmonicity and spectral centroid
to the mfcc coefficients 

   

   
 

 

 

 

 

 

 

figure    spectrogram comparison for example  

 

fiin some synthesis engines the use of kernel pca may
be useful to account for the non linearities of the system 
a similar approach of the k means tree implemented may
be tried using kd tree algorithm 
other extensions include implement more complex systems  like second order fm synthesis and use a localized
global minimum algorithm to find the global minimum in
the region given by the k means tree estimation but without getting stuck on a local minimum for systems with
strong non linearities 
testing the system with sounds not generated with the
system is also planned 
   acknowledgments
i would like to thanks hiroko terasawa for the advice on
psychoacoustic metrics and stefano corazza for his valuable ml algorythms sugestions 

references
    j  chowning  the synthesis of complex audio spectra
by means of frequency modulation  journal of the
audio engineering society                     
    m  hoffman and p  r  cook  real time feature based
synthesis for live musical performance  in nime    
proceedings of the  th international conference on
new interfaces for musical expression  pages    
     new york  ny  usa        acm 
    a  horner  j  beauchamp  and l  haken  machine
tongues xvi  genetic algorithms and their application to fm matching synthesis  computer music journal              winter      
    x  serra and j  o  smith  spectral modeling synthesis  a sound analysis synthesis system based on a deterministic plus stochastic decomposition  computer
music journal              winter      
    m  slaney  auditory toolbox  version    technical
report          interval research corporation  palo
alto  california  usa       
    h  terasawa  j  berger  and j  o  smith  using a
perceptually based timbre metric for parameter control estimation in physical modeling synthesis  in
proceedings of international computer music conference       
    j  weston  a  elisseeff  g  bakir  and f  sinz  the
spider 

fi