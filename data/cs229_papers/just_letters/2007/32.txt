automatically detecting banner ads in web pages
douglas greiman
stanford university  stanford  ca      
duggelz gmail com

   introduction
this paper describes adzap  a program for
detecting and blocking advertisements on web
pages  adzap uses a set of labeled training data
collected from the user as input to a supervised
learning algorithm  the trained algorithm then
examines images embedded in html
documents shown to the user and hides images
classified as advertisements 

   background
there are a number of mechanisms for
delivering advertisements on the web  for
simplicity  adzap only considers img tags 
which are the most common mechanism  an
html document contains embedded images
where each image is represented by an img
element  an img element has a set of html
attributes  and a set of css attributes  one of
the html attributes is a url pointing to the
image file to be displayed in the document  in
the rest of this paper  references to html
attributes will mean all attributes except the
url 
advertisement urls are usually generated by
ad serving software based on the location and
content of the document in which they appear 
along with other factors such as current
advertisement inventory  the same page
viewed at different times will display different
advertisements  although usually in the same
format and the same location on the page 
there are a large number of different ad serving
software packages available  each package
constructs urls in a fairly arbitrary and
distinctive way 
there are also number of ad blocking software

packages available to detect and block
advertisements on web pages  currently  these
ad blockers use hand constructed lists of
regular expressions  every url fetched by the
user s browser is compared against the regular
expressions  images that match are hidden
from display or replaced with a blank image 
other html and css attributes of the images
are ignored 
lists of regular expressions are reasonably
effective for advertisements already seen 
however  they require regular maintenance 
furthermore  the great majority of end users are
not capable of or willing to craft regular
expressions to identify advertisements  thus 
ad blocking programs rely on lists maintained
by small groups of experts and distributed to
end users on a regular basis 

   classifying images
adzap constructs labeled feature vectors based
on clicks from the user  as described below 
there are two possible labels  ad and notad  these vectors are used to train a nave
bayes multivariate bernoulli event model  the
model is retrained each time the user creates a
new feature vector  when the model changes 
all currently displayed images are reclassified
and redisplayed as appropriate 
an image has two types of information
associated with it  image content  and image
context  image content is the actual pixel data
of the image  image context is all the ancillary
information required by the browser to locate
and display the image correctly  adzap  like all
other ad blockers  only uses context
information  the actual content of the image is
not examined 

fithere is a lot of context information available
for use  the img element contains html and
css attributes  which are key value pairs with
semantics based on key names  the most
important is the  src  attribute  whose value is
the url of the image file to display  this
attribute is treated separately from all others 

    feature construction
adzap uses a very simple method of creating
features from the url  the url is broken
into tokens at non alphanumeric boundaries 
series of tokens that are separated only by dots
or hyphens are joined together to create
additional larger tokens  for example  the url
http   speed pointroll com pointroll  is translated to the feature set 
 url speed  url pointroll 
url com  url speed pointroll com 
url point  url roll  url pointroll      the hostname is not

distinguished from the other parts of the url 
it is common for ad urls to include
redirection steps  where the actual address of
the image file is embedded as a query
parameter inside a url to a redirector site  for
user tracking and other purposes 
adzap uses another simple method of creating
features from the html and css attributes 
each key value pair is concatenated into a
single token  for example   img height   
border    is translated to the feature set
 attribute height    
attribute border    

note that attributes with the same key and
different values are treated as unrelated by the
model  that is  height    and
height    are separate dimensions in the
feature vector  with possible values   and   
rather than a single dimension height with
values from   to       also  integer valued
attributes are not grouped into a smaller number
of buckets  e g  values from height    to
height    are not normalized to
height      this is motivated by the fact
that the ad industry has a set of standard ad

sizes  specified to the pixel  an image with one
of the standard sizes is very likely an ad  and
conversely  a size that is even one pixel
different is much less likely to be an ad 
location of the image on the page is also
informative  banner advertisements are
commonly placed along the top and right side
of web pages  and less often on the left side or
in the center  however  location is a difficult
attribute to work with  since it depends on the
shape  size and layout of the browser window
and the rest of the document  maximizing the
browser window  adding or removing ui
elements to the browser window  or even
changing the font  can change the location of
images  adzap currently ignores attributes
specifying location 

   implementation
adzap is a firefox browser plugin  note that
adzap is a new piece of software and is
unrelated to the adzapper package for squid
proxies 
when a document is first loaded in the browser 
each img tag is examined  and classified as
ad or not ad by the model  ads are hidden
by rendering them     transparent  this
makes ads virtually invisible  but still makes the
image visible enough for the user to recover
from classification errors 
adzap adds some controls to the browser
window  clicking on the adzap button puts the
browser in zapping mode  in zapping mode 
a left click on an image labels that image as an
ad  similarly  a right click labels the image
as not ad  the image list at the bottom of the
window contains all the images in the current
document  and left and right clicks in this list
behave the same as zapping mode clicks 
labels created by these clicks are saved in a
persistent store  and the model is retrained each
time the user clicks 

fifigure   adzap user interface

    training data
the first design of adzap only allowed the user
to label ads  every image on a page that was
not explicitly labeled ad was implicitly
labeled not ad and used to train the model 
this implicit labeling works poorly 
experienced web surfers have trained
themselves to identify and ignore ads at a
subconscious level   ad blindness    so it is
easy to overlook ads even when consciously
looking for them  beyond that  pages contain
dozens  sometimes of hundreds of images that
are small  unobtrusive  or even invisible  for
example  cnns home page has more than    
images  a small number are ads or news

photos  the majority are company logos 
invisible web bugs  partner logos  icons of
unknown purpose  cobranding logos  and more 
web bugs are a particular problem  because
their urls are very similar to ad image urls 
but they never get marked as ads because they
are invisible 
finally  there are many images that are simply
ambiguous  for example  forbes home page
contains a medium sized image of a vehicle
linked to forbesautos com  on the one hand 
this is a legitimate navigation link to another
section of forbes web site  forbesautos com
contains free auto reviews and other meaningful
content  on the other hand  the image
prominently features a lincoln towncar  and

ficlicking the link takes you directly to the
lincoln section of forbesautos com  complete
with ads by lincoln and links to purchase a
lincoln  its purposely unclear where the
dividing line between editorial content and
advertising is 
this was a real problem until i realized that  for
the great majority of images on the web  their
proper classification is dont know and dont
care  the user cares about the large  flashing 
annoying ads  and the large  interesting 
meaningful photos and other actual content 
everything else is ignorable 
the second and current design of adzap
introduces a category of ignore  all images
smaller that a certain area are ignore  this
takes care of web bugs  company logos  and the
like  images that are very narrow or very short
are also ignore  this takes care of border art
and lines  images in ignore are not used as
training data  unless explicitly relabeled as ad
or not ad by the user   and are not classified
by the model  they are displayed normally in
the browser 
furthermore  the second design of adzap
allows the user to explicitly label images as
not ad as well as ad  these labeled images
are used as training data  images that are not
labeled are not used as training data  however
they are classified by the model and hidden if
classified as an ad  since ad images are
rendered mostly transparent instead of totally
hidden  this creates a simple feedback loop with
the user  when the user notices misclassified
images  they can explicitly label them and thus
improve the model 

   experimental results
it was not immediately clear what the best way
to gather training data was  one could imagine
enumerating all the web pages in existence and
visiting a random sample of them  this has
some logistical problems  and its not clear that
this would actually be representative of a real

user experience anyway 
i decided to visit a selection of news sites 
these sites offer a rich selection of news
photos  advertisements  and miscellaneous
images  my test procedure was to visit
news google com  and for each story on the
front page  follow the top three links for that
story  each story link goes to an article page on
a news site like nytimes com  on each article
page  i classified every visible image as ad 
not ad or dont know and dont care  by
not clicking on that image   i repeated this
procedure at intervals  since the stories on
news google com change over time  until i had
sufficient data points 
this training data was used to evaluate the
model using different sets of features  as shown
on figure    see next page   each color
represents a model that incorporates only the
features listed in the legend above  each
feature set was evaluated using    fold crossvalidation on training sets of various sizes 

   conclusions
training a nave bayes model on image urls
is very effective at identifying ads  the few
errors that occur have little negative effect on
the users browsing experience  some error is
unavoidable due to the inherent ambiguity of
certain images 
training a model on html and css attributes
is not very effective at identifying ads  there
are a number of standardized shapes and
positions for banner ads  and these types of ads
are detected easily  however  images in
unusual places  such as the center of the page 
or images with unusual shapes  are poorly
classified 
training on both urls and html attributes
isnt any better than training on just urls 
this might be due to overtraining 

fifigure   evaluation on various feature sets

   future work 

   references

currently  ad urls are distinctively different
from non ad urls  however  if large numbers
of users started using ad blocking software  ad
companies would probably respond by making
their urls indistinguishable from other image
urls  which would be fairly easy  if this
happened  then ad classification based on
html attributes like size and location would
become relatively more useful  since these
attributes cant be obfuscated like the url can 

nielsen  jakob  banner blindness  old and
new findings  jacob nielsons alertbox 
http   www useit com alertbox bannerblindness html  accessed december           

it might be possible to improve the
performance of html features by more
complex analysis of web pages  for example 
most advertisements are clickable links 
meaning that the img element is contained
inside an a element  the a element has its own
attributes  and its own url  describing where
the user will be sent if they click on the
advertisement 

ragget  dave  arnaud le hors  and ian jacobs 
ed  html      specification  w c 
http   www w  org tr rec html     accessed
december           
extensions  mozilla foundation 
http   developer mozilla org en docs extensions
 accessed december          
adblock  the adblock project 
http   adblock mozdev org  accessed december
         

fi