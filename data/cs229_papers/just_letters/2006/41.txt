machine learning based botnet detection
vaibhav nivargi
mayukh bhaowal
 vnivargi  mayukhb  tlee    cs stanford edu
cs     final project report
i  introduction
a botnet     is a large collection of compromised
machines  referred to as zombies      under a
common command and control infrastructure
 c c   typically used for nefarious purposes 
botnets are used in a variety of online crimes
including  and not limited to  large scale ddos
attacks  spam  click fraud  extortion  and identity
theft  the scale and geographical diversity of the
machines enlisted in a botnet  coupled with easily
available source code  and support from
communities  as well as mercenary botmasters
providing botnet services for rent  have resulted in
botnets becoming a highly sophisticated and
effective tool for committing online crime in recent
times         botnets with thousands and millions
of nodes have been observed in the wild  with
newer ones being observe every day      
the lifecycle of a botnet is depicted in
fig    the initial enlisting occurs by exploiting a
known vulnerability in the operating systems
running on the machines using a wide variety of
mechanisms like worms  trojans  p p file sharing
networks  and exploits of common windows
vulnerabilities  etc  once compromised  the bot is
programmed to connect to a central location
 typically an irc      server   where the botmaster
could login and issue commands to the logged in
bots  this mechanism essentially means that the
communication is free  as broadcast is taken care of
by the irc channel  most bots additionally ship
with multiple irc and dns addresses  meaning
taking down one such irc channel does not in
general impair the activities of the botnet 
originally  most techniques to thwart
botnets have been reactive  reducing their
effectiveness significantly  e g  using honeypots to
trap and study malware  etc  of late  significant
research has been made into the dynamics of a
botnet  and more proactive techniques have been
suggested                  a wide variety of features
and watermarks for network activity are employed
to predict botnet activity  including tcp syn
scanning  dns monitoring  and extensive models
of botnet attack and propagation      despite all

teddy lee

these concerted efforts  botnets remain an unsolved
problem for the online community 

fig    botnet in action

ii  data
we had two separate data sets to collect for the
purpose of our experiments  the first set included a
large number of binaries executables labeled as
botnet binaries and benign binaries  we acquired
the botnet binaries from the computer science
department at john hopkins university  this is the
same data they used for botnet related work      
as far as the benign binaries are concerned we
randomly picked them up from unix and windows
machines  namely from  usr bin and from windows
system   directory  this data was comprehensive
and well represented 
we also needed labeled irc logs for our
experiments  while benign irc logs are easily
available on the web  botnet affected irc logs are
not readily available because of privacy and legal
issues  the benign irc logs were collected from
several publicly available irc logs from irc
channels
like
wikipedia 
linode 
and
kernelnewbies  these represent a diverse collection
of logs  with different purposes  some of these logs

fialso have automated bots for channel maintenance
operations 
obtaining malicious irc logs proved to be
extremely hard  there are several independent
security forums who actively track botnets      
they monitor and mine botnet irc logs for
analysis and mitigation  due to privacy and security
issues  we were unable to obtain this data  which
clearly represents a rich set of real world botnet
irc logs  and which would have definitely
provided more qualitative as well as quantitative
results  several other potential sources setup their
own private infrastructure for collecting such
training data     
nevertheless we acquired data from
northwestern university where the department of
cs is conducting research on wireless overlay
network architectures and botnet detection      the
data regarding botnet irc logs was not
comprehensive in the sense that it was irc traffic
over a small amount of time  a larger and more
comprehensive dataset could have established our
results and hypothesis more conclusively 
iii  approaches
 
we tried a   stage approach to solve this issue 
these methods are complementary and we can
combine them for better results  they are as
follows 
    botnet binary detection
there are several stages in the lifecycle of a botnet
where a machine learning based solution can be
deployed to thwart its effectiveness  during an
early stage  a binary detection and classification
system can warn of a potentially malicious
executable which might endanger a host machine 
there has been some work already in this area    
and we leverage on top of their work to classify
botnet executables which propagate as worms on
networks scanning for vulnerable machines for
infecting them  and enlisting them into the bot
network 
unlike virus scanners like norton av  or
mcafee  a machine learning solution can perform
this classification without the need for explicit
signatures  identifying such binaries without
explicit signatures needs recognizing common
features and correlations between these binaries 
e g  a botnet executable will be a self propagating
worm with a simple irc client built in  presence or
absence of such a feature is an indicator that such a
binary might potentially be a botnet executable 

we used supervised learning techniques on groups
of benign executables vs  botnet executables 
      features
we are focusing on binary profiling  and hex
dumps for feature extraction  identifying the strain
of these binaries might also give an insight about
the location of the command and control center
and about the botnet capabilities in general  we
used n grams  more specifically   grams  of
hexdump of the binaries as our features  for
example if the hexdump is ff        a     our
features will be ff        a and       a     we
extracted around more than a million features  we
then used chi square to select around        most
informative features  for each feature  we find its
value as follows 

class botnet
classbotnet

feature      a  
a
b

    botnet  f    

feature     a  
c
d

n   ad  cb   
  a   c   b   d   a   b  c   d 

now we select the top        features with the
highest chi square scores 
      classification
we used several classification algorithms to
classify the binaries into malicious benign  the
models we used are as follows 
   multinomial nave bayes
   linear svm
   knn
this makes use of similarity metrics  e g 
cosine similarity  to find k nearest neighbors
and classifies the point under consideration
into the majority class of its k nearest neighbor
      we used k   
   logistic regression
   multiboost adaboost   class for boosting a
classifier using the
multiboosting
method  multiboosting is an extension to the
highly successful adaboost technique for
forming decision committees  multiboosting
can be viewed as combining adaboost with
wagging  it is able to harness both adaboost s
high bias and variance reduction with
wagging s superior variance reduction  using
c    as the base learning algorithm  multiboosting is demonstrated to produce decision
committees with lower error than either

fiadaboost or wagging significantly more often
than the reverse over a large representative
cross section of uci data sets  it offers the
further advantage over adaboost of suiting
parallel execution  see      for more details 
  

j   decision tree  this is an entropy based
approach for generating a pruned or unpruned
c    decision tree  for more information see
      in general  if we are given a probability
distribution p    p   p       pn  then the
information conveyed by this distribution  also
called the entropy of p  is 

attributes not yet considered in the path from
the root 
for the purpose of our experiments we did not
make use of any separate testing data set  to stay
unbiased we used    fold cross validation to get the
results  we used off the shelf softwares such as
weak     and libsvm     for experimental results 
    irc log based detection

irc has played a central role in the
simplicity and effectiveness of a botnet  using a
public communication channel  the botmaster can
i   p      p    log  p      p    log  p            pn   log  pn    use a simple command interface to communicate
with a huge number of compromised zombie nodes 
instructing them to carry out his orders 
there are two phases to this approach 
if a set t of records is partitioned into disjoint
first 
to
separate
irc traffic from other traffic  this
exhaustive classes c   c       ck on the basis
of the value of the categorical attribute  then is a reasonably solved problem         the second
the information needed to identify the class of step comprises of identifying botnet traffic in the
an element of t is info t    i p   where p is irc traffic  hence the problem now boils down to
the probability distribution of the partition  c   a text classification problem 
to be able to differentiate a benign irc
c       ck  
log from an irc log manifested with botnet
activity  we used features involving both dialogues
and irc commands  then using these features  we
  ck  
  c      c    
experimented with a variety of machine learning
p  
 
     
 
algorithms on them  in particular  we ran
 t    t  
 t  
algorithms such as nave bayes  svm  j  
decision trees  knn  etc  with    fold cross
if we first partition t on the basis of the value validation  the main categories of features we used
of a non categorical attribute x into sets t   t   included 
    tn then the information needed to identify
the class of an element of t becomes the  number of users  an irc channel with botnet
weighted average of the information needed to
activity should contain an unusually large
identify the class of an element of ti  i e  the
number of users 
weighted average of info ti  
 mean   variance of words per line and
characters per word in dialogues  bots usually
n
do not produce dialogues that resemble human
  ti  
info  x   t    
  info ti  
dialogue 
i      t  
 number and frequency of irc commands  we
have noticed through examination of the logs
consider the quantity gain x t  defined as
that there tends to be a large number of irc
commands at small intervals in botnet
manifested logs  one possible explanation
gain  x   t     info t    info  x   t  
would be the immense number of joins and
exits from the result of accommodating a huge
this represents the difference between the
number of users in one channel 
information needed to identify an element of t

number of lines  dialogues  and commands  in
and the information needed to identify an
a benign irc log  the number of dialogues
element of t after the value of attribute x has
should be much greater than the number of
been obtained  that is  this is the gain in
commands  and as mentioned above  a botnet
information due to attribute x  we can use this
manifested log tends to contain an immense
notion of gain to rank attributes and to build
number of irc commands 
decision trees where at each node is located the



attribute

with

greatest

gain

among

the

fiiv  results and evaluation
    botnet binary detection
the results obtained from the botnet binary based
detection approach are summarized in fig    
clearly all the models performed reasonably well 
special mention must be made about nave bayes
which performed remarkably well although it is
one of the simplest of models  svm performed
good too  however some models like knn gave
an accuracy of      which was lower than that of
others  we will discuss about these results in
details in the discussion section  in particular our
evaluation metric included accuracy  f  score and
kappa measure 

accuracy  

  correctly predicted data po int s
  total data po int s

accuracy

f 
score

kappa
score

nb

   

    

    

linear svm

    

    

   

j    decision     
tree

    

   

knn

    

    

    

logistic

    

    

    

multiboostab

    

    

    

fig    performance of irc based detection

    irc log based detection

    pr ecision   re call
f   
pr ecision   re call

kappa  

model

observed agreement  chance agreement
total observed  chance agreement

the results obtained from the irc log
based detection approach are summarized in fig    
a large chunk of the problem here involves text
classification  and all algorithms  barring nave
bayes  perform encouragingly well 
v  discussion

model

accuracy

f 
score

kappa
score

nb

    

    

    

linear svm

    

    

    

j    decision     
tree

    

   

knn

    

    

    

logistic

    

     

    

multiboostab

    

    

    

fig    performance of binary based detection

in the binary based classification approach  most of
the linear classifiers such as nb and linear svm
performed remarkably well  knn however
performed relatively bad  this can be explained on
the basis of linearity of the data set  knn is a nonlinear model and hence it has less bias and a high
variance unlike nb which is linear and has high
bias and less variance  given our data set was
linear  it was therefore no surprise that knn
exhibited a higher generalization error compared to
nb or linear svm 
in the irc log based approach  most
classifiers performed similarly  except for nave
bayes  which was significantly worse  one
possible explanation would be that there are
dependencies in the features  these dependencies
may be resolved with more training data  since the
set of irc logs we obtained was not very large and
comprehensive  it is possible that currently
correlated features are not actually correlated in a
larger dataset 
the other classifiers performed very well 
all having accuracies greater than      since svm

fiand logistic regression had the best accuracies  f 
scores  and kappa scores  it is likely that our
dataset is linear 
in the logs that we collected with botnet
activity  there werent strong attempts of log
obfuscation by botmasters  but suppose that there
were strong attempts to produce human like
dialogues by the bots  then to potentially fool our
classifiers  the dialogues must produce similar
averages and variances in terms of words per line
and characters per word 
pushing the above scenario to the extreme 
suppose that the bots produce perfect dialogues  in
this case  our classifier should still work due to one
fundamental difference between benign logs and
logs manifested with botnet activity  there is an
immense number of join and exit commands in a
botnet infested channel 

vi  conclusion
in this course project we aimed to
highlight a major problem plaguing the internet
today and a potential solution to the problem by
employing novel machine learning techniques 
our results are encouraging  indicating a definite
advantage of using such techniques in the wild for
alleviating the problem of botnets 
conversion of the problem in the text
classification domain has opened up new avenues
in feature extraction for our solution  possible
future enhancements include adding additional
features to the irc traffic classification engine 
also to solve the problem of training data which 
in retrospect  seems to be the critical to the success
of such a project  we propose setting up a farm of
virtual machines as a testbed for collecting and
mining our own logs for training purpose 
lastly  the end goal of such a tool should
be to provide proactive help to system
administrators  in this regard  it is easy to envisage
an application which can run on a gateway or a
router  and look at network flow traffic  and
classify it on the fly enabling automated
blacklisting of involved machines in the network 

vii  acknowledgement
we take this opportunity to thank elizabeth stinson
of stanford security group for her help and
support  we also extend our acknowledgements to
yan chen of northwestern university for providing
us with botnet irc logs and to andreas terzis of

jhu for botnet binary datasets  we further
acknowledge our gratitude to prof  andrew ng and
the tas of cs    for their help and support 
viii  references
    http   en wikipedia org wiki botnet
    http   en wikipedia org wiki zombie computer
   http   securitywatch eweek com exploits and at
tacks everydns opendns under botnet ddos attac
k html
   http   it slashdot org article pl sid             
   
    w  timothy strayer  robert walsh  carl
livadas  and david lapsley  detecting botnets
with tight command and control  to appear in
  st ieee conference on local computer
networks  lcn      november     
    using machine learning techniques to identify
botnet traffic  carl livadas  robert walsh  david
lapsley  w  timothy strayer
    yan chen  towards wireless overlay network
architectures
    binkley  an algorithm for anomaly based
botnet detection  
    e  cooke  f  jahanian  and d  mcpherson  the
zombie roundup  understanding  detecting  and
disrupting botnets  in usenix sruti workshop 
pages            
    http   www vnunet com vnunet news         
botnet operation ruled million
     http   www irc org tech docs rfc     html
     www shadowserver org
     http   www csie ntu edu tw  cjlin libsvm 
     detecting botnets with tight command and
control  carl livadas  robert walsh  david
lapsley  w  timothy strayer 
     aha  d   and d  kibler         instancebased learning algorithms   machine learning 
vol    pp        
     ross quinlan          c     programs for
machine learning   morgan kaufmann publishers 
san mateo  ca 
     geoffrey i  webb          multiboosting  a
technique for combining boosting and wagging  
machine learning                  kluwer
academic publishers  boston
     moheeb abu rajab et al       a
multifaceted approach to understanding the botnet
phenonmenon
     http   www cs waikato ac nz ml weka 

fi