predicted movie rankings  mixture of multinomials with features
cs    project final report            
hau jia chew
haujia stanford edu

dimitris economou
dimeco stanford edu

raylene yung
rayleney stanford edu

  introduction
the netflix prize is an on going contest organized by the online dvd rental company  netflix  contestants
try to design and implement algorithms that can best predict a user s movie rankings based on their movie
preferences  we started our project by joining the stanford netflix prize team and taking the probabilistic model
approach  our first implementation used the mixture of multinomials model     as a baseline approach and obtained
promising results  we then modified the algorithm to make use of additional features in the form of clusters 
creating a method that we will hereby refer to as mixture of multinomials with features  we evaluated the mixture
of multinomials with features approach by experimenting with clustering techniques and varying model parameters 
clusters were generated using data extracted from the imdb database  such as movie genre  cast  etc  to deal with
both the complexity of the algorithms and the enormity of the dataset  we parallelized our implementations using the
message passing interface  mpi  
  mixture of multinomials
    theory
consider a problem with n users and m items  where each user can give each item a rating r  in a simple
multinomial model for this problem  ratings for individual items are assumed to be independent of one another  and
no distinction is made between users  for a user u and rating profile r   p   r   r    
u

u

m

 p  r

y

  ryu    

y   

in a mixture of multinomials model however  we now suppose that users fall into one of k latent classes  and item
ratings are instead conditionally independent given a users class 
the prior probability that a user u belongs to a class z is given by

p  z   z      z

the probability that a user u gives a rating v to item y is now denoted by a parameter 

p  r y   v z   z      u   y   z
we then construct the joint probability of a user having a rating profile ru and class z as
m

p  r   r u   z   z     p  z   z   p  r y   v z   z  
y   

finally  we can then use our parameters as defined above to predict an individual item rating 
m

k

p  ru   y   ru      ru       l   ru   m      

 z   u  y z
z   

y   

k

m  

  
z   

z

   
u  y z

y   

    implementation
we used the netflix prize database as the source for both our training and testing data  and implemented
the em algorithm to learn our model parameters  with           users and        movies in the entire dataset 
complexity became an important concern  if we let n represent the number of user profiles  m the number of
movies  v the number of ratings  and k the number of latent classes  the complexity of a single iteration of em was
o n m v k   or on the order of       the average number of movies rated by each user was measured to be m     
significantly less than the total number of movies  thus to reduce the complexity by a factor of m m  instead of
iterating over all m movies for every user  at each step we iterate only over the movies rated by the user 

fi  mixture of multinomials with features
    motivation
the mixture of multinomials approach derives the probability of a users ranking using nothing more than
the set of known user rankings  intuitively  adding more information to the ranking prediction algorithm would yield
improved results  expecting that user preferences are influenced by movie properties  such as genre  cast  film
release date  film budget  format  etc  the only information provided for each of the movies in the given netflix
dataset is the year of release and the title  using this information to index into imdb  we can extract additional
movie properties  once provided with such data  we modified the prediction phase of the mixture of multinomials
algorithm to make use of additional features in the form of movie clusters  the resulting algorithm is further
discussed in the next section 
    algorithm
during the mixture of multinomials prediction step  the probability that a specific user is part of a latent
class is calculated using the parameters derived in the learning algorithm  in the mixture of multinomials with
features algorithm  for each user and each movie that has not been ranked by the user  we calculate the probability

 zy where y is the movie id and z is the latent class number  this  zy
is calculated using all p  r y     v z   z      u   y    z where y is in the same cluster as y and introducing a scaling
factor         for all  u   y     z where y is not in the same cluster  setting      weights the  u   y   z of
that the user is part of a latent class  denoted

related and unrelated movies equally making it equivalent to using the mixture of multinomials algorithm  the
pseudo code for the prediction step of the algorithm is shown below where the function

  rya    y  y     v     

only if the movie y is part of the same cluster as y and the users ranking of movie y 
function

 is equal to zero otherwise 

if and

rya    is equal to v   the

pseudo code 

comments 

input  r     
output  r a

for each user predict ranking for each unranked
movie 

a

for z   k do
for y   m do

 z  y     v     vy   z
m

 zy  



   rya    y  v  

v



z     z    y     v    vy   z  
m

k

end for
end for

v

      rya    y   y   v   

 vy   z

   rya    y  v  

      rya    y   y   v   

 vy   z  

calculate probability that user is in latent class z
for unranked movie y based on derived
parameters for related movies and scaled down
parameters for non related movies  by factor
       

for y   m do
for v   m do

pv    z    vyz  z
k

end for
v
ry   v    v  pv

y

use classification probabilities and derived
parameters for unranked movie to predict
probabilities of ranking 
calculate predicted ranking 

end for
    implementation
as mentioned in      one iteration of the original mixture of multinomials em learning algorithm requires a

firunning time of o n m v k  while the prediction step takes o m v k  time  this algorithm predicts a users movie
ratings based on all the movies the user has rated  thus  in equation      we only need to compute the parameters
once for each user profile and apply them to each of the users test cases  with the modifications to the prediction
step  however  we have added another dimension to the complexity of the algorithm  we now predict a users movie
ratings based on a mixture of related and unrelated movies rated by the user  consequently  we need to compute a
different set of parameters for each of the test movies in the user profile  this increases the complexity of the
predicting step to o m m v k  
this increase in computational time complexity made running the modified algorithm on a single processor
intractable  to overcome this  we parallelized the computation and distributed the workload across multiple machines
using the message passing interface  mpi   since the parameters  s  are user specific  it seems natural to split the
computation along the n dimension  in our distributed computing environment  we have a master node and n child
nodes  the master node is responsible for initializing the child nodes  distributing initial parameters and aggregating
results from all the child nodes  figure   shows a graphical representation of our modified algorithm running across
multiple machines 
send s  
s

send new
s

send new
s   s
child  

child  
child  

master

send
rmse

child  

master

master





child n

child n

prediction step

learning step
update s

compute new s  
s

predict   compute
rmse

aggregate  
compute final
rmse

figure    distributing computation across multiple machines  refer to     for details on the learning step 
to further reduce the computational time required  we note that a user profile contains many movies of the
same cluster  therefore  the claim that we need to compute a distinct set of parameters for each of the test movies in
the user profile is not entirely true  on the contrary  for a user profile  we can cache a set of parameters for each
distinct cluster  whenever we encounter a movie from a cached cluster  we do not need to repeat the computation of

 zy

as shown in section     

    methodology
the modified algorithm added a few degrees of freedom  such as the value of  and using different
clustering techniques  whose effects and properties were not immediately clear to us  the straightforward way to find
the optimal combination was to run the algorithm with different configurations and pick the one with the best result 
however  this is not practical due to the large time and space complexity  to alleviate this  we ran the algorithm with
different configurations on a smaller data set and then applied the best configuration to the full dataset 
we first experimented with different ways of clustering the movies  in particular  we used movie genres to
separate the movies into overlapping and non overlapping clusters  overall there are    basic genres  ranging from
horror to romance  note that since a movie can belong to more than one of the basic genres  with overlapping
clusters  two movies are related if at least one of their genres is the same  with non overlapping clusters  we first
preprocessed the movie genre information to form distinct combinations of genres  we found on the order of     
distinct genre combinations  with      movies belonging to a single genre  in this scheme  two movies are in the
same cluster if and only if their genre combinations are exactly the same 
we evaluated the performance of our algorithm using the root mean squared error  rmse   this is the
standard performance metric measured by the netflix prize     rmse is calculated using the following equation 

 
n

  r
n

u   

u
y

 ryu

 

 

fito minimize the rmse  we computed the prediction of a user u for a movie y by taking the expected value
over all possible ratings from   to   as follows    
v

ryu    vp   r y   v  
v   

in order to find the optimal  for related and unrelated movies  we ran the algorithm with these two
clustering schemes on a     times smaller training set with the number of latent classes  k  set to   for    iterations 
we then evaluated the performance of each setting by comparing the root mean squared error  rmse  obtained after
testing against the corresponding     times smaller test set 
the derived optimal clusters and parameter values were then applied to the full dataset 
  results
    mixture of multinomials
rmse vs  number of latent classes

rmse vs  iterations
    

    
k  

    

k   

     

k   

    

k   
k   

 

k   
    

rmse

rmse

    

    

k   
k   

    

     

     

k   

    

k   

    
 

 

  

  

  

 

  

  

  

iterations

  

  

  

  

latent classes  k 

figure    rmse vs  iterations for different numbers of latent classes  left   rmse vs  number of latent classes  right  

the mixture of multinomials algorithm converges after   iterations in every run  increasing the number of latent
classes improves the performance of the algorithm  though after k    the increase in performance is negligible while
the increase in complexity is still significant  the best performance measured was with k     attaining an rmse of
about       
    mixture of multinomials with features
rmse vs  alpha
 overlapping movie genre clusters 

     
    
     
     
     
     
    
     
     
     
     

rmse

rmse

rmse vs  alpha
 non overlapping movie genre clusters 

 

   

   

   
alpha

   

 

      
     
      
     
      
     
      
     
      
     
      
 

   

   

   

   

 

alpha

figure    rmse vs  alpha for movies clustered by non overlapping genres  left   rmse vs  alpha for movies clustered by
overlapping genres  right   results shown for iteration    of algorithm where k   and using    x smaller training and testing sets 

fithe optimal combination of clusters and values of  was    with overlapping clusters  this combination achieved
the lowest rmse  though       with non overlapping clusters performed almost as well  applying the algorithm
with    and overlapping clusters on the full netflix dataset with k     on    nodes using mpi  achieved an rmse
of       
method
rmse

avguserrating

avgmovierating

avguserrating  avg avguserrating   mixmulti
  avgmovierating
     
     
     
     
table    baseline results     and results using mixture of multinomials algorithms

mixmultifeatures
     

  discussion
we expected the overlapping clusters to perform worse than the non overlapping clusters because the former
can relate two movies as different as a romance comedy and a romance adult film  however  using overlapping
clusters improves the performance which may be due to the availability of more information  for example  there are
many genre combinations excluded in the non overlapping cluster case that would expectedly improve the results 
such as sci fi action  sci fi horror  and sci fi adventure  to compensate for the lack of information when using the
non overlapping clusters  the optimal  is greater than   weighing in the influence of all the users movie predictions
 including unrelated movies  
  further work
currently  not all of the netflix movie ids are mapped to imdb movie ids  thus all clusters used in the
experiments were generated using only     of the movies  completing this mapping will undoubtedly improve the
results of the mixture of multinomials with features approach  additionally  using different imdb movie properties
or combinations of them with more sophisticated clustering techniques may generate clusters that better capture user
preferences 
the mixture of multinomials with features approach only improves the prediction phase of the mixture of
multinomials algorithm  modifying the learning phase to incorporate cluster information as well would be an
interesting variation to our approach 
another slight variation to our algorithm that we think would be interesting to test is using a threshold value 
t  to filter out predictions derived from a set of related movies smaller than t  by setting t     for example  the
algorithm would revert to the mixture of multinomials prediction approach when the number of related movies is less
than     in this way  the algorithm would prevent predictions based on very little information which could be more
likely to be incorrect than the original approach  of course  testing would determine the optimal t 
  conclusion
we modified the prediction step of the mixture of multinomials algorithm to make use of additional features 
in the form of clusters  we applied the resulting mixture of multinomials with features algorithm to the netflix
dataset using clusters derived from movie genres and achieved an improvement in performance over the original
algorithm 
the mixture of multinomials with features algorithm can be applied to any set of users ranking a specific set
of items that can be grouped based on their properties 
  acknowledgments
we would like to thank tom do for implementing the high precision math library  and providing helpful
advice as well as systems support  thanks to tom do and thuc vu for organizing and maintaining the stanford
netflix prize team  finally  we would like to thank the other stanford netflix prize team members for their help
with data curation 
  references
    marlin  benjamin  collaborative filtering  a machine learning perspective       
    the netflix prize  http   www netflixprize com faq
    stanford netflix prize wiki  http   stanfordnetflixprize pbwiki com baselines

fi