 

using atomic actions to control snake robot
locomotion
joseph c  koo
email  jckoo stanford edu

i  i ntroduction

l

ocomotion problems are generally difficult because
of the large amount of coordination required to make sure
that desired movements occur  while undesired actions  such as
falling over  are avoided  snake locomotion     is no exception
to the rule  in this project  we show that we can simplify the
control of a snake robot so that it is computationally tractable 
but yet can still produce interesting locomotion strategies 
our particular application is to have a snake robot navigate
through complex terrains in order to reach a goal of traversing
the greatest distance possible  this scenario could arise  for
example  in applications where a robot needs to look through
the rubble field of a building collapse in order to search for
survivors  in such a situation  well known strategies such as
sidewinding may not work because these strategies are highly
specialized for particular terrains  in the case of sidewinding 
for example  acceptable movement is produced only when the
terrain is flat enough that the contact between the snake and
the surface occurs at regular intervals along the snake length 
unfortunately  this is hard to come by on a rubble field 
the snake robot being used for this project  shown in figure
   consists of l      body segments connected in a chain 
consecutive body segments are connected by pairs of revolute
joints  giving   degrees of freedom at each link  thus  there
are a total of    degrees of freedom in the entire snake 
making precise control of snake movement very difficult  for
reference  we set up a coordinate frame such that the length
of the snake is considered the x direction  sideways from the
snake is the y direction  and up and down constitute the zdirection 

analyzable databefore being attempted on a physical robot 
a model of a snake robot was built in the rigid body dynamics
simulator open dynamics engine     for this purpose 
ii  atomic actions
the first step in narrowing down the possible action space
is to define a set of atomic actions  each atomic action
consists of a short sequence of commands for each of the
joints in the snake  so that instead of carefully specifying a
complete sequence of joint angles to move  one only needs
to issue the command for a particular atomic action  this
reduces the need for fine control of each angle while still
allowing for fairly robust actions to take place  then  when
atomic actions are strung together in succession  the snake can
perform complicated gaits with only a few quick commands 
the atomic actions approach requires that the actions be
able to perform some useful function for the snake  we
specify actions which are useful for lateral movement of the
snakeso that we can accomplish a goal of maximimizing
the lateral distance traveled  some of the atomic actions were
inspired by actions already proven to be able to lift a snake
over steplike obstacles  these include the lifting of the head
segment  then a follow the leader sequence to lift successive
segments  and concluding with a tail swing up and over  each
of these components are then specified as an individual atomic
action  another inspiration for defining the set of atomic
actions comes from snake sidewinding  where the snake is able
to move sideways by simultaneously pushing on the ground
and shifting its body position to make ground contact at a
different location 
for this project  we created a set of n      atomic actions 
drawn from the activities mentioned  most of these atomic
actions are specified in terms of changes in angles  where the
action gives the number of radians a joint should move from
its current angle  there is also a relaxation atomic action 
where the snake is told to move all its angles absolutely to a
resting   radians position  at a rate proportional to its current
deviation from   radians 
iii  l earning g ood s equences

fig    

snake robot on a rubble field 

for the project  techniques and ideas were first run in
simulationin order to show proof of concept and to generate

once the atomic actions are defined  the next major task
is to determine good sequences of atomic actions to perform 
this requires searching through possible sequences of actions
in order to find something satisfactory 

fi 

a  metrics and reward function
in order to perform good searching  we have to know what
the goal of our search is  thus  we must first devise an
appropriate metric to measure the progress of our snake  for
example  we could look at the total displacement of all of the
snake bodies  or we could keep track of the smallest of the
displacements that any of the bodies have moved from their
starting position  we choose to include minimum displacement
ymin in our metric  since it encourages all bodies to move
from their initial positions  rather than rewarding a sequence
of actions which can  for example  move the head very far
while keeping the tail fixed at its starting position 
we also want to keep the snake fairly straight  if possible 
as it moves across the terrain  this seems reasonable since
the snake will be unable to create much movement when it
is wound up tightly  unless the snake is curled together in
a wheel and rolling around  but that particular configuration
is undesirable for physical reasons   thus  we introduce a
pairwise angle cost cpairwise given by  for pitch angle i and
yaw angle i connecting segment i    with segment i 
cpairwise  

l 
x

  i      i    

   

i  

if cpairwise is small  then it means that all the joint angles are
close to   
combining these two criterion  we formulate the reward
function which we wish to maximize as
r   ymin  e  cpairwise cpairwise des     

   

where cpairwise des is a desired value corresponding to a fairly
straight snake 
b  search techniques
   exhaustive search  the first method tried was exhaustive search  where all possible sequences of depth d were
enumerated  and the results of the simulations compared 
we then chose the sequence which maximized our reward 
because of its exhaustiveness  we could guarantee that we had
found the best sequence  but at great computational cost  for a
sequence of d actions  the enumeration of nd     d different
branches was required  meaning that we could not expand past
a level of about d     within a reasonable amount of time 
   greedy best first search and modified greedy best first
search  the opposite extreme in terms of search complexity
is best first search  at each depth  by expanding only the node
with the highest current reward  we can reduce the number of
branches to search down to nd     d  however  it was noticed
that if at each step in the sequence one always chose the
myopic best next action  it would preclude choosing actions
which might at first appear to be bad but actually lead to
good actions later on  thus  we modified the greedy best
first search so that it searched in tiers  toward this end  we
specified tiers of depth dtier      performed exhaustive search
on all sequences of actions of depth dtier   and then chose
the best sequence from this tier as our best action sequence 
then  using this found sequence as a node  we would expand

another set of dtier actions and find the best one out of
those  in this way  we performed greedy best first search not
on individual atomic actions  but on subsequences of depth
dtier   this increased the range of behaviors allowed by our
actions  without having to resort to exhaustive search  for a
search of depth d  modified greedy best first search enumerates
d
dtier
sequences  which can be much less than the nd
dtier  n
sequences of exhaustive search 
c  speeding up search
   pruning branches  in order to speed up our searches 
we would like to avoid expanding nodes which seem like they
might not lead to good configurations later on  if we can
prune these branches early  then we can reduce the number
of branches we will need to search through without affecting
our final solution  some simple heuristics we used initially for
pruning branches are the following 
 if the snake has moved significantly in the direction
opposite from our goal  we would eliminate that sequence
of actions from our search space  it would be highly
unlikely that an optimal sequence would require much
backtracking  since the snake would then have to recover
the lost distance before continuing on its path   of course 
if there were a very large obstacle directly next to the
snake  backtracking might be beneficial  but currently we
are not considering such large obstacles  and in fact  our
current method enables the snake robot to navigate over
some fairly sizeable obstacles already  
 as mentioned before  we imposed a desire for straightness into our reward function  this is because  for a snake
that has coiled together  it will probably need to uncoil
itself before being able to do anything else useful  thus 
we prune out sequences of actions which lead to the snake
being tightly wrapped around itself 
 it was also discovered that there are particular joint
configurations which were infeasible for the snake  for
example  if both the pitch i and yaw i angles are moved
to their extreme limits  i e   both angles near       then
the brackets attached to these joints would collide  and
in fact  intersect  with each other  which is unphysical 
as a result  sequences which led to these configurations
were also pruned 
   using svms  classifying or ranking actions may offer
insight into which actions are better than others  if we can
reduce our set of actions to those which are predicted to lead
to higher reward  we can prune off those branches which do
not satisfy such a requirement  in the following section  we
discuss how we use support vector machines     in order to
learn better searching strategies 
iv  s upport v ector m achines for e nhancing
s earch p erformance
support vector machines were implemented  using the software package svm light      in order to classify actions
based on the current configuration of the snake and terrain  the
purpose of using svms is that if we can classify an action
to improve the reward function  then we would most likely

fi 

want to expand our search tree in that direction  using this
information  we can utilize beam search to focus our search
down the most promising paths 
a  feature selection
our input feature set takes into account descriptions of the
snake shape  its relative orientation  and its relationship to the
terrain immediately surrounding it 
   snake configuration  one set of features which is
important in identifying the snakes state is its current configuration  that is  using the coordinate frame of one of the
bodies  e g   the tail body  as a reference frame  we find the
position and rotation of all of the other bodies with respect
to this reference frame  so that we obtain a full description
of the shape of the entire snake  position is described using
cartesian coordinates    dimensions  and rotation is written
in quaternion form    dimensions       so that for each body 
we have   features  thus  the snake configuration is described
by a    dimensional feature vector 
   overall snake orientation  because the snake is not
always upright  i e   with the up side always up   we include
in our feature vector elements which describe the rotation of
the snake with respect to the world frame  i e   the reference
frame is the coordinate frame of the terrain   again  rotation is
represented in quaternion form  so there are   dimensions  by
combining this information with the information on the snake
configuration  described previously   we know the orientation
of all of the bodies with respect to the world frame 
   local terrain  since we are traversing an irregular
terrain  it is intuitive that we should also include some measure
of our terrain knowledge within our feature set  that is  what
happens to the snake depends a lot on what the nearby terrain
looks like  we include the following terrain features 
 height of each snake body above the terrain 
 height of each snake body in relation to the terrain height
one body width laterally forward  i e   in  y direction  
recalling that our goal is to maximize the lateral distance
traveled  i e   travel as far in the  y direction as possible   we
would like to know the features laterally forward since we
need to know what obstacles we will need to overcome soon 
we choose not to look at terrain features too far away  i e  
no more than one body width surrounding the snake  because
we are learning for limited lookahead  where each action does
not propel the snake very far  so it is not necessary to know
what the terrain looks like  say     body widths away 
   normalization  the entries in our feature set differ
widely both in their scales as well as their average variations 
this ends up affecting our learning performance since we will
be using linear kernels  to fix this  we normalize our data so
that each entry has zero mean and unit variance  in a sense 
then  the variation in each entry will be weighted equally 
we can see the improvement in training performance due to
normalization  by looking at the increase in the true positive
rate between the first and second entries in table i 
b  target values
the target values for our learning algorithm come from
the reward function defined in      thus  we would like

table i
c omparison of t raining data p reprocessing m ethods
training set size

normalized 

true positive rate

false positive rate

     samples per action
     samples per action
full training set

no
yes
yes

       
       
       

       
       
       

to maximize the predicted lateral distance traveled  while
keeping the pairwise angle cost from becoming too large 
when using svm classification  only the sign of the target
values is utilized  so the learning algorithm will only take
into account positive versus negative progress of the snake
without bothering about the correction term introduced by the
pairwise angle cost 
c  training data collection
training data for our svm was obtained by running short
 i e   of depth d      modified greedy best first searches on
randomly generated rubble fields  for each training run  data
was collected on the current snake state and relation to terrain
 i e   the feature vector   the action which led to this state  and
the action which is taken next  we also recorded the reward
metric that arose from taking this next action 
we were able to reduce training time by taking random
samples of the training set and only training over these
samples  this was acceptable because the training data had
low variance  training errors were similar for training on the
entire set versus training on a pared down training set  as can
be seen in table i 
d  learning to choose good actions
the training data was then split into n      data sets 
according to the particular next action taken in the training run 
within each of these data sets  the features were normalized as
described previously  and then an svm with linear kernel was
trained for that set  thus  we constructed n      svms
one for each of the individual data setswhere each svm
corresponds to taking a particular next action 
with these svms available  we would then run our searches
over extended depths  say  d       on the particular rubble
field being traversed  whenever an atomic action needed to
be chosen  the controller would first determine the feature
vector associated with the current state of the snake and
terrain  then  for each of the n      atomic action svms 
a predicted reward value  or  in the classification case  the
svm margin  would be computed  after ranking these values 
the controller would perform beam search and only expand
the nodes associated with the top nreduced actions  thereby
avoiding having to look through any actions not predicted to
have decent outcomes 
v  r esults
a  simulation results
we show selected frames from a sample simulation run of
the robot traversing a rubble field in figure    this simulation

fi 

 a 

 b 

 c 

 d 

 e 

 f 

 g 

 h 

fig     sequence of still frames showing the snake robot traversing a rubble field   a  the snake sidewinds across a small flat patch of land   b    c  a tall
but narrow obstacle is overcome by a lifting of the tail over the obstacle  right side of frame  b     d    e  the snake prepares to traverse a larger obstacle by
raising its center segments   f  after lifting  there is a brief pause on top of the obstacle   g  the big rock is cleared   h  the snake relaxes after a job well
done 

was generated using a search of depth d      and beamwidth nreduced      training and computation of this path
required approximately   hours  more videos of the robot
traversing this and other rubble fields can be found online
at http   ai stanford edu jckoo snake
some significant aspects of the snake gait can be observed
from this simulation  in frame  a   we see the snake in the
middle of a sidewinding motion  which works here since it is
in a relatively flat patch of land  frame  b  shows the snake
getting past a narrow high point at its tail end by lifting and
then resting on top of it  before nudging itself off the other
side in frame  c   frames  d  g  show the snake in a series of
actions to climb over a fairly large obstacle  it starts to push
itself together so that its center portion is raised  in frames  d 
and  e    allowing it to rest these bodies on top of the rock in
frame  f   another few actions finds the snake going over the
rock in a jump rope fashion  g   before straightening out and
coming to a rest on the other side  h  

fig    
receiver operating characteristic for training data  points are
generated by varying the misclassification penalty c in the svm formulation 
also included is the use of different penalties cf p and cf n for false positives
and false negatives  respectively 

b  empirical analysis
   training data errors  training with our particular feature set and target values turned out to perform very well 
looking at points on the roc curve  figure     we see that
they are concentrated toward the upper left corner  meaning
that we have good separation between positive and negative
examples within our feature space  as far as the training data
goes  classification performs reasonably well  although the
same analysis was not undertaken for the test data  we present
a much more meaningful analysis of the test data in the next
section by looking at how the ranking of actions with and
without learning compare 
   rank analysis  one aspect of our learning algorithm
that we are concerned with is how often the actual best action
is searched  given that we have a particular beam width  data
from test runs  see figure    indicate that even when we only
expand a small subset of actions  the search algorithm will

still perform fairly well because the best action will still be
highly likely to be chosen  for example  if we always look
at the top    actions from our svms  we will explore the
best action approximately     of the time  also  not always
picking the best action might not be too detrimental to the
progress of the snake robot  since the best action will be
taken often  that is  we may be able to recover from a current
sub optimal selection by taking good actions later  since good
actions will be expanded quite often   in addition  we should
not underestimate actions which are not ranked as the best one
to take  since they might still perform well 

fi 

fig     distribution of svm margin ranks  for best action  taken from several
test runs   best action means that the actual metric for the best action is higher
than the actual metric for any of the other actions  svm margins are then
computed for all of the actions and the actions ranked again  this plot shows
where the best action stands amongst all the other actions in terms of its svm
margin ranking 

vi  c onclusions and f uture w ork
the results indicate that our feature set includes the salient
features necessary for rubble field obstacle navigation  our
learning algorithm is able to choose good atomic actions 
without sacrificing much in terms of performance  these
atomic actions can be chained together to create novel snake
gaits which move the snake considerable distances across
complex terrains  we show that we can significantly reduce
the time it takes to compute such paths and still achieve some
certainty as to the goodness of the gait  so that automatic
rubble field traversal by a real snake robot can be made
feasible 
there are still many potential avenues for further investigation  a deeper analysis into the optimality of the beam
search should be undertaken  so that perhaps the beam width
may be varied in different situations  one method of doing so
would be by considering a more descriptive measure of the
goodness of a particular atomic action besides just its rank 
such a description may involve using the computed margins

in a way that indicates the probability of an atomic action
being a good action for that scenario 
we might also wish to apply the atomic actions approach
toward other terrain types  perhaps requiring the generation of
an additional set of atomic actions  this way  we will have a
more robust snake robot capable of traversing an even larger
variety of terrains  besides the rubble fields considered   an
idea worth pursuing is the ability to learn good atomic actions
 as opposed to learning good sequences of atomic actions  
robustness can also be achieved by implementing higherlevel planning  our current learning algorithm performs well
when multiple short sighted good actions sequenced together
can lead to an overall good set of actions  i e   when we can
traverse the rubble field by moving laterally all of the time  
but if there is no good straight line path then our algorithm
may return an unsatisfactory solution  a higher level motion
planner would be able to chart a course around an obstacle 
rather than one that just goes over or slightly sideways of the
obstacle  we may need to apply reinforcement learning  in
order to take a more far sighted approach to snake planning 
a major future goal is to be able to implement our algorithm
on a physical snake robot  we can then judge real world
performance of the atomic actions approach 
vii  acknowledgements
i would like to thank prof  andrew ng and zico kolter for
many helpful ideas and thoughtful discussions throughout the
course of this project 
r eferences
    s  hirose  biologically inspired robots  snake like locomotors and
manipulators  oxford  oxford university press        translated by
p  cave and c  goulden 
    r 
smith 
open
dynamics
engine 
 online  
available 
http   www ode org
    v  n  vapnik  statistical learning theory  new york  john wiley  
sons       
    t  joachims  making largescale svm learning practical  in advances
in kernel methods  support vector learning  b  scholkopf  c  burges 
and a  smola  eds  mit press        ch      pp         online  
available  http   svmlight joachims org
    k  shoemake  animating rotation with quaternion curves  acm siggraph computer graphics  vol      no     pp          july      

fi