cs    project  object keyboard  identification in images
by  mark mao

   algorithm summary

abstract

the algorithm consists of six main steps 

in this project  an object detection algorithm is implemented  the algorithm is capable of locating keyboards
in images  main component of the algorithm is based on
gmm models which can be applied to objects other than
keyboards as well  while parts of the algorithm is heuristics
based on the characteristics of the keyboard object  the
algorithm achieved     detection rate for this task 

   feature extraction  extracts dct features on each
block of the training and testing images 
   gmm training  creates   gmm models from training
images  one for the keyboard  one for the background
using feature vectors obtained in step   
   gmm classification  in testing images  calculates the
probabilities of each pixel block belonging to the keyboard class based on the gmm model 

   introduction
identifying objects in images is a trivial task for human
brains  while at the same time  an extremely challenging
task for computers  in this project  a specific object  keyboard is selected to limit the scope and the difficulty of the
task  the goal of the project is to implement an algorithm
that can locate the position of keyboard in images 
many algorithms have been developed for object identification and image segmentation  some algorithms only
use local features while other algorithms try to combine local and non local features 
gmm has been shown to be a robust technique for classification in high dimensional feature space  the algorithm in
this project starts with local block based features and build
gmm models for these features  it then tries to incorporate
some non block base features 
the training and testing images are real photos of offices 
desks and computers from the mit csail image library 
an example image is shown below  the images are manually annotated     images are used for training and another
   images are used for testing 

   edge detection  detects the edges in the images 
   combining  combines the probability score of the
gmm model in step   and the edge features in step
  to create a final score for each pixel block 
   locate keyboard  searches through images and locate
the keyboard object using the score obtained from step
  

   feature extraction
all training and testing images are first normalized into
         gray scale images  dct is then calculated for
all        blocks in images  shifting by   pixels between
each block  let the dct coefficients for each blocks be
dij   i          j          a    dimension feature vector
f    f    f       f    is calculated as follow 

f 

 

  x
 
x

dij    

   

dij    

   

i   j  

f 

 

  x
 
x
i   j  

   
f 

 

   
   x
  
x

dij    

   

i   j  

   
f 

 

   
   x
  
x
i    j   

 

dij     

   

fition until convergence 
m

j

 

j

 

j

 

  x
  z  i    j  
    
m i  
pm
 i 
  j x i 
i     z
p
 
    
m
 i 
  j 
i     z
pm
 i 
  j i  x i   j     x i   j   
i     z
pm
    
 i    j 
i     z

     classification with gmm
once the gmm is created with training images  it is used on
testing images to classify each block as keyboard or background  the probability is calculated as follow 
 k 

p x k   

   gmm

j

once feature vectors are extracted  two models are trained 
one for the keyboard  one for the background  gaussian
mixture model is used to represent the models in the    dimensional feature space     gaussians are used for each
model  and to simplify the model  diagonal covariance matrix is used for each gaussian 

p x b   

  p z  i    j x i         

j

 

j

 

j

 

       b      
j      
j

 

 b   

e     xj

 b  

  j

   

m
x

 
 i 
  
   
m i   j
pm  i   i 
i   j x
   
pm  i   
i   j
pm  i 
 i 
 j     x i   j   
i   j i  x
    
pm  i 
i   j

     training simplification with vq
a simplified version of gaussian mixture model with hard
assignment of data points of vq instead of the soft decision
with em is also implemented to save computation time  the
resulting models showed no significant changes in terms of
performance  in the simplified model  the gaussian parameters are updated with the following equation in each itera 

 b 

 xj   

p x k 
    
p x k    p x b 
the classification results of one test image is shown below  the first one is the original image  the second image represents likelihood of a pixel being part of a keyboard
or background with intensity  the darker pixel blocks are
more likely to be keyboard blocks  the classification shows
reasonable results as pixels in the keyboard area are generally darker  but it also shows that the model can not distinguish well enough between keyboard and certain areas such
as the upper right corner wall  and the notepad to the left 
p 

for each class  the gaussian mixture model is trained with
the standard em algorithm  parameters of the gaussians
are calculated with the following equation in each iteration
until convergence 
 i 

 
  

 b 
j

  
x

where k is keyboard  b is background and p is the probability of pixel x is part of a keyboard

     training with em

j

  
j
 k     k  
 k 
 
  x
 xj   
e     xj   j
    
 k 
   j                 

    

fiprobability scores obtained from the gmm model for all
blocks  a new image showing this combined score is shown
below  now the lighter area represents pixel more likely to
be keyboards  as we can see  now the keyboard blocks
standout well compare to the background 

  

edge detection and combined
score

for the specific object we want to detect in this project 
keyboards  it is noticed that pixel blocks on the keyboards
all have a very high frequency component because of the
individual keys  this becomes obvious after running edge
detection on the test images  as shown below  the keyboard
area has the highest concentration of edges 

   locating keyboard
a simple algorithm is implemented to search through all
pixels in the image  and find a rectangular box such that
pixels inside the rectangular box have the maximal average
combined score  as shown in the image below 

even though the dct features being used captures both
low and high frequency energy  this specific high frequency
component is not well captured because of the low resolution in our features for high frequency components 
to compensate this  a new score is computed for this
high frequency component for each block on the edge detected images  then this new score is combined with the

     a simple markov chain
anther keyboard locating algorithm that follows a simple  state markov chain is also tried  in this algorithm  for each
 

fipixel block  start with a small rectangular box around it  assuming the pixel inside the box are keyboard pixels  then
grow the rectangular box larger and larger  and accumulate
the probabilities that the pixels on the edge of the box belong to keyboard  at some point  the box will grow pass
the edge of the keyboard  then start calculating the probabilities that the pixels on the edge of the box belong to the
background  unfortunately  this algorithm did not perform
as well as the simple algorithm above  the reason is that
this algorithm is more sensitive to the shape and and the rotation of the keyboard  but if more tuning time is available 
i do feel that this algorithm has more potentials 

the center  arrow and control keys on the center right 
and numeric keys to the far right  can be modeled  it
will greatly help identifying the whole keyboard 
 at higher level  keyboard almost always show up below the monitor  combined identification of monitor
and keyboard should also improve the robustness of
the keyboard locating algorithm 

references
    andrew ng  cs     machine learning course
notes  fall      

appendix
images that the algorithm failed
total   

   experiment results and summary
the training is done on    gray scale images     x    
testing is done on a different set of    images  the algorithm correctly identified the location of the keyboard in
   images  achieving accuracy rate of      or     error
rate   all testing images   errors     correct  are attached
in the appendix 

   conclusion  discussion and future
work
in this project  an algorithm that locates the keyboard in images is implemented  the main component of the algorithm
uses gmm model trained based on dct features  this part
of the algorithm can be applied to any objects  another
component of the algorithm uses heuristics that tailored to
the characteristics of the keyboard  which is less than universal  overall  the algorithm achieved good results  with
    recognition accuracy on the    test images 
through this project  i learned that with enough training data  a decent gmm model can be built for local features  but local features at single resolution level can only
go so far in a complicated task such as object identification 
things i would like to try in the future 

images that the algorithm succeeded
total    

 explore features in hierarchical structure  in the context of keyboards  it means  
 at lower level  keyboard does have internal structures 
if individual keys can be modeled  and also if the structure of groups of keys  e g  regular keys on the left and
 

fi 

fi