automated parameterization of the joint space dynamics of a robotic arm
josh petersen
introduction
the goal of my project was to use machine learning to fully automate the parameterization of the joint space
dynamics of a robotic arm  when given a set of joint angles  joint velocities  and motor torques  the program would
determine the a  b  c and g matrices of the dynamics 

                                
this was accomplished in several parts  first  two methodologies were created which could automatically
smooth noisy positions  velocities  and accelerations  next  two methodologies for creating the feature vector for finding
the matrices using least squares were developed  lastly  a structure was setup to combine these elements into one
streamlined process 

automated position  velocity  and acceleration smoothing
the first goal was to automatically smooth the position  velocity  and acceleration profiles  if this program were
to be used in practice on a real robotic arm  smoothing these profiles would allow for better results by reducing the
effect of noise in the sensor data  two methods were developed to accomplish this 
first  weighted linear regression was used  to automatically choose  such that high bias and high variance was
avoided  leave one out cross validation was used  the optimal fit occurs when the training error is close to the test error
where the test error is the defined to be the average of the squared differences between the left out data point and the
test prediction at that point and the training error is the average of the squared differences between all the training data
and the predicted points at those locations 

       
  

    

  

    



  

 

  

  

          

   

 

next  n th order polynomial fitting was tried using the same criteria  fits between   order to   th order
polynomials were tried and checked using loocv 

       

fiabove are the results for a set of data points generated from a third order polynomial with some noise added 
additional testing with varying noise revealed that the weighted linear regression was still susceptible to high variance in
some cases as discussed in the project milestone  also  weighted linear regression was much more time intensive than
the n th order polynomial fit in general since it required a larger number of  to try to fit and computing the value at a
particular point required calculations from each point in the data set 

generating feature vectors
next  two methods were developed to create feature vectors for performing least squares to find the
components of the matrices 
first  a function was created that would use the denavit hartenberg parameters  general center of mass
directions for each joint and the direction of gravity to form the matrices in symbolic form and another function was
created to turn these matrices into the feature vector 
second  a method was developed to generate a general feature vector for an n degree of freedom robotic arm 
several properties of the dynamic matrices were used as well as some simplifying assumptions 

fithe i th row and column of the mass matrix      can not contain joint angles at or below the i th joint angle 
additionally  the coriolis and centripetal matrices     and     are simply derivatives of particular components of
the    matrix 

to simply the problem further  the auto generated feature vectors would be restricted to arms consisting of
revolute joints only  this restricted the    matrixs components to be linear combinations of cosines of the joint
angles  additionally  a base frame in which the x direction is perpendicular to gravity was assumed  this led to the   
matrix components being linear combinations of cosines of the joint angles 

                                             

          


                                     

               




                               



   
    


   

                               

               a  cos      a  cos               cos          
     

 
          
 
    
    


          
 
   

    
    

   

     
     

    

     
     


    

   

    

 
   

     
     

    

     
     


    

        

        



        

  
  

   

 











g cos          cos                cos           
   

   cos                   cos           


    



  cos           


code structure
a generalized code structure was then setup to allow any of these methodologies to be used in combination 
the user can pass in the data and the options desired for smoothing and feature vector creation and the program
returns the matrices found and plots of the smoothed velocity  the smoothed acceleration  and simulated motion from
the resulting computed matrices 

fione degree of freedom results
after the basic structure for the program was setup  a one degree of freedom robotic arm was simulated to test
the effects of the differences between the two smoothing methods  noise was added to the simulated position and
velocity data and the feature vector in both cases was created using the specified dh parameters 
simulation equations of motion

n th order polynomial fit

weighted linear regression

fiwhile both result it close approximations of the simulated equations of motion  the n th order polynomial fit
slightly out performs the weighted linear regression in this case  weighted linear regression also took a much longer
time than the n th order polynomial fit 
the test revealed another important aspect of finding the matrices  initially  the simulated trajectory inputted
into the program was a more ideal trajectory from a controls point of view  with no overshoot or oscillation  the
calculated parameters were not as close to the actual values as in the above case  further testing with higher degree of
freedom systems and varying gains revealed that to get more accurate results from this methodology  the trajectory
coming in must have all the modes activated  that is  more oscillation helped to get better parameter estimations 
two degree of freedom results
to test the auto generated feature vector  a two degree of freedom  planar revolute joint arm was simulated 
the following equations are the simulation equation of motion and the computed equation of motion respectively 

fiother cases in which extra terms existed that were not in the simulated dynamic model performed well but not
as well as this case  the extra terms tended to have very small coefficients that affected the resulting simulation to a
greater degree than that above but still not large enough to cause significant deviation 
further work
one thing to notice is that the mass matrix is not symmetric in the two degree of freedom example  for
simulation  the mass matrix was made symmetric using the worse estimate but further work could improve up the
current process by ensuring the mass matrix is symmetric  additionally  since the    and    matrices are derivatives
of the    matrix  a more accurate set of equations may be able to be found by try to learn just    and then
derivating to find    and     further work could also be done to ensure that trajectories coming into the program
activate all modes  commanding oscillatory torques and recording the output to be put into the currently developed
may lead to better matrix estimations and would lead to a more completely automated system 

fi