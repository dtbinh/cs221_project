classification of book titles
gongmyung lee
december        

   introduction
the aim of this project is to apply machine learning classification to scraped data from the
stanford bookstore and amazon to find incorrectly matched results 
the data comes from a website that i have been working on  whichtexts com  that enables
students to find out which textbooks they need for their courses   all they need to do is enter
their classes and the website will automatically create a list of required books  additionally 
the website also gives a price comparison for each book on the major bookseller websites
 amazon  half com  alirbis  etc   this involves a lot of data scraping   an automated script
scrapes the stanford bookstore website to get the required books for each course  then looks
up the price of each book on amazon  half com  etc and stores the price in the database 
unfortunately  the stanford bookstore site does not store the isbn of each book  so the
amazon listing must be found using the title of the book  once the amazon listing is found 
the isbn can be used to search the book on other websites   this would not be a problem
except that the stanford bookstore site sometimes arbitrarily changes a portion of the book
title   examples are  shortening principles to prin  randomly putting the edition of the book
in parentheses after the title  etc  this results in books having incorrect amazon links or no
amazon link at all  when no search result is found   additionally  some of the required materials
can only be found at the stanford bookstore  like course readers or prs clickers  and thus
does not have an amazon link  this presents a classification problem   the data needs to be
classified into    books with a correct amazon listing     books with an incorrect amazon listing 
and    books with no amazon listing  like course readers and prs clickers   the goal of my
project will be to create a supervised learning algorithm that will correctly classify future booklink pairs based on the book and link data has been already scraped 

   designing the solution
at first  it seemed like this project would be a simple one step classification problem  upon
examination of the different types of inputs  however  it turned out that using multiple machine
learning algorithms in sequence provided much more accurate classifications
the inputs could be separated into two classes   books with an amazon result and books

fiwith no amazon results  i differentiated between these two classes because the books with
an amazon result had both the title from the stanford bookstore and the title form amazon
available  whereas the books with no amazon results only had the title from the stanford
bookstore  thus the books with amazon results had a different set of input features then the
books with no amazon results  i decided to do a multi stage classification process described as
follows 
   take all the books with a corresponding amazon listing as inputs  classify the books into
having a correct amazon listing or having an incorrect amazon listing   example  if a books
title on the stanford bookstore is prin  of programming in scheme and the listing we find on
amazon is intro to scheme creation  prince edition  then we would classify it as incorrect 
   take all the books identified as having an incorrect amazon listing from part    and all the
books with no amazon listing  these will be the inputs for step    use input features based
on the title of the books from the stanford bookstore to classify these books into   categories 
things that are valid books and things that are not books   example  intro to programming in
scheme is a valid book while prs clicker is not 

   implementing the solution
training data 
the first step was to compile the training data that was needed for step    a perl script was
used to compile the necessary information from the database  as well as do some basic datascraping to get the book titles on amazon  the links to amazon were stored in the database but
not the titles  

fiwe had      books in the database  and      of those books had an amazon listing  a
randomly selected sample of     books was taken from the latter as the training data for the
first classifying step  the     books were manually labled as having correct amazon listings
and incorrect amazon listings  after going through those selected books     incorrect books
were found  for the second classifiers training data  i took another random sample of    
books  where     of the books were books with no listing and     of the books were books with
an incorrect amazon result   the ratio of books with no amazon result to books with an incorrect
amazon result was about      
step   
in general  it was very clear when a book had an incorrect amazon result   the titles would often
only share a word or two and otherwise be completely different  thus i decided that just the
feature of the   of similar words between the two titles would be sufficient by itself to correctly
classify if a book had a correct amazon listing or not with amazon links 
amazon titles

stanford bookstore titles

more formally  the feature of how closely the titles match was calculated for each title by
counting how many words in the bookstore title is contained within the amazon title  then
dividing by the total number of words in the title to get a word matching percentage  the
other way was calculated as well  how many words in the amazon title are contained within
the bookstore title   and the bigger percentage was taken  this accounts for cases where
the bookstore title is a subset of the amazon title vs the amazon title being a subset of the
bookstore title 
step   

fifor step two of the algorithm  i used a vector of all the words in the titles of books in our
database as the inputs to the algorithm  i used the method outlined in class used for email
spam classification   each title would be a vector where each component of the vector
represented a word  and a   would mean that word was in the title and a   would mean that
word was not in the title  i then used a naive bayes classifier to classify the books into two
possible categories   books and non books  i included anything that could only be found at the
stanford bookstore  such as course readers  as non books  
i expected this to work reasonably well because most things that are not valid textbooks have
a specific subset of words that they share  course readers always have the words course
and reader  prs transmitters always have the word  prs  art supplies typically have the
words canvas  brush  etc
   results 
step   
it turned out that linear regression worked extremely well with the  words matching feature for
step    i used a   fold cross validation  where each time i trained the classifier on     examples
 of which    were incorrect examples   and tested it on the remaining      there was a      
accuracy rate   out of the   times the algorithm ran  on     test examples each time   there was
only   error for an error percentage of      
step   
again  the naive bayes classifier worked very well  it did not work with the accuracy rate
of the first classifier  but that was to be expected because there were many examples that
were outliers  for ex  inequality reader   this is a course reader that does not contain the
word course and first course in finite element method   this is a textbook that contains the
word course   again i did a   fold cross validation with     training examples and     test
examples  this time  the classifier had a       accuracy   out of the   times the algorithm ran
on     test examples each time  there was    errors for an error percentage of       
   conclusions 
overall  both the linear regression and naive bayes classifier worked well with the selected
features for the problem of classifying book title matching  unfortunately  the overlap of features
for multiple examples during the second stage of classification made that step much less
accurate then step    it was  however  still good enough to use to identify books that needed to
be manually updated on the site  since we could use the first classifier to filter all the books that
had incorrect links  that reduced the number of books we needed to look at to about     of the
total  plus     for the books without amazon links   and then the second algorithm reduced that
number by      in the end  we were left with a list of     books that we needed to look at and
fix manually  which was much more manageable the the original number of      

fi