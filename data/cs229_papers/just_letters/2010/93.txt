signature recognition on multitouch computers
chris moore
   december     

 

introduction

 

algorithm

   

mobile computing devices sporting multitouch
displays for user input such as apples iphone
and googles nexus s have exploded in popularity in the last few years  on such devices 
performing a common function such as initiating a phone call often requires the user to
look at the screen and tap several elements 
for instance  to call someone using an iphone
requires looking at the screen and tapping at
least twice  once to select the icon for the
phone application  and again to select the person to call  such devices  however  are often used in situations such as driving in which
looking at the screen is dangerous or impossible  so it is useful to have a way to trigger
specific  common actions without looking at
the screen  one way to do so is to allow the
user to assign specific actions  ex  call mom 
to specific signatures   continuous shapes
traced out on the multitouch display 

goals

at minimum  the algorithm should satisfy the
following goals 
   recognize signatures invariant to rotation and scale 
   detect the presence of outliers in test
data since there is no guarantee that a
user will enter a signature that reasonably corresponds to one of the defined
signature classes 
   ensure that all examples in one signature
class are sufficiently distinct from all examples in other signature classes 

   

scale and rotation invariance

raw input to the algorithm consists of a sequence of screen coordinates along the path
of the users signature provided by the os  for
instance  the sequence of coordinates produced when drawing the letter m is shown
below 
to ensure that the algorithm recognizes signatures independent of rotation  we transform
the provided screen coordinates to a feature
vector that is rotation invariant  specifically 
we track the direction of the signature  relative

here we explore an algorithm for classifying
such signatures using training data provided
by the user  the algorithm is encapsulated
in the provided ipad app  the user is able to
define as many signature classes as he she
wishes and provide multiple training examples
for each class  when finished  the user can
enter test mode and the app will classify each
new signature the user then enters 
 

fidinterp
  j            n   at which wed like
j
interp

to have direction information uj
 j 
         n  we linearly interpolate the di s and
ui s to calculate the uinterp
s 
j
finally  we calculate the elements of our
feature vector  x as 

xj   cos   ut  uinterp
 
j
the feature vector extracted from the signature plotted in figure   is shown in figure  

figure    screen coordinates while drawing
the letter m
to the initial direction  furthermore  to ensure
that the algorithm recognizes signatures independent of scale  the feature vectors list this
direction as a function of the fraction of total
distance travelled 
specifically  let zi   i            m  be the ith
screen coordinate in the signature  the total
distance travelled is computed as 

d 

m 

i  

figure    features for one example of letter
m

  zi    zi   

we then normalize the distance between
   
each point by the total distance travelled 

outlier detection

when users enter a signature  there is no
guarantee that they will enter a valid signature 
they could enter an outlier  a signature that
and compute the direction between sequen  does not match any of the defined classes 
tial points 
thus  a generative model was selected so that
p  x   the likelihood of seeing a given feature
zi    zi
vector could be computed and used to detect
ui  
  i            m    

di  

  zi    zi   
  i            m    
d

  zi    zi   

 

for

this

then  given a set of normalized distances                     
 

project we
t

use

dinterp

 

fioutliers  specifically  the gaussian discrimi  described above  there are two ways to renant analysis model was used 
solve this problem 

x yi  n  i    

   modify the feature vectors so that m and
n are more distinct 

y  m ultinomial  

here y is our vector of signature classes 
the threshold p  x   below which the software considers a test example to be an outlier  is set to the minimum p  x i    out of all the
x i  s in the training set 

   

   add a check to ensure that examples in
different classes are sufficiently distinct
from one another that they will not easily be confused 
while the first modification may help with
these examples  there is no guarantee that it
would help with all examples that users could
enter  it would still be possible  for instance 
for users to enter identical examples  in feature space  for two different signature classes 
thus  the second option was chosen  after each training example is entered  we run
loocv on the training set and ensure that the
test error is zero 

distinctness detection

one of the first training sets collected consisted of approximately    examples each of
the letters m and n  running leave oneout cross validation  loocv  on this dataset
with an early implementation of the algorithm
gave a test error of      unacceptably high 
projecting the data into a   dimensional subspace selected by pca and plotting in figure
  clearly shows the problem 

 

implementation

the app was implemented using a combination of c   and objective c  it requires the
ios     sdk  feature extraction is handled in
the c   class directionvsdistancemovedsignature  while training and testing are implemented in signaturerecognizergda  the app
will run in the ipad simulator included in the
ios sdk  but it is much easier to enter consistent training data using ones finger on an
ipad than using a mouse in the ipad simulator  the interface was designed to be used in
landscape mode 
evaluating a multivariate gaussian paramfigure    feature vectors projected into  d
eterized by covariance matrix  and mean 
subspace
at a point x requires computing    x   
there is significant overlap in training exam  and     the lapack function dgetrf   was
ples from each class using the feature vectors used to perform lu decomposition of   and
 

fiof values from  for instance  dinterp  
                    t   care must be taken 
however  to include enough features that
outliers are not easily confused with valid
examples 

then dgetrs   was used to solve the system of
equations required to compute    x    
the determinant is easily computed from the
product of the diagonals of the u factor  but
in reality it is not needed  when computing
 y 
p  y x    p  x y p
for classification  the norp  x 
malization constant for the gaussians cancel 
for outlier detection  all of the p  x i   s for the
training examples x i  s and p  x  for test example x will be scaled by the same normalization constant     n            so it is ignored
 i e  we actually threshold on unnormalized
p  x   

 

future work

there is ample room for future work  several
avenues include 
   evaluating other models such as hidden markov models that might be better
suited to sequential data 
   improving how we handle failures in the
loocv based distinctness test  currently  if after the user enters a new training example  the new training set fails
loocv  we simply block the user from
entering test mode  we make no effort
to either automatically or with user input
reject the new training example  a better
approach to distinctness failures might be
to run a clustering algorithm on the training set to try and detect mis labeled examples  the user might then be given the
option of re labeling or rejecting an example 
   instead of using a constant dinterp  
                    t to compute feature
vectors  applying a feature selection algorithm to find the most relevant subsets
 

fi