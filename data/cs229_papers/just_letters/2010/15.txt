rss feed recommendation
charles chen charles chu chen gmail com

introduction
really simple syndication  rss  feeds allows users to access blogs and articles in an easy to read
format  it cuts out the overhead of navigating websites for content and allows users to get information
more quickly  currently  the user is in total control of their rss feeds  adding and deleting feeds
according to their tastes  this requires the user to actively search out rss feeds that interest them  the
proposed recommendation algorithm will aid users in their search for new and exciting feeds  it will
suggest feeds by extracting features from the user s subscription history and predict the feeds they will
most likely enjoy 
because there are many recommendation algorithms  it is important to choose an algorithm
that is suitable for this problem and the data set  therefore  i begin by describing the data set in section
i  then i discuss the results of using a simple recommendation algorithm that utilizes k means clustering
in section ii  the disadvantages of clustering will motivate the use of maximum margin matrix
factorization  mmmf      for this problem in section iii 

section i
for my data set  alphonso labs has generously provided a database of rss feeds from the past
four months  furthermore  they have user activity logs for pulse  their rss reader application for the
ipad and iphone  this user data includes actions such as adding or deleting feeds from ones subscription
list and articles read by that user  user activity is split into sessions in which the user logs on to browse
some feeds and ends the session by logging off  therefore it is possible to track the articles each user
has read during each session 
there are many potential features that can be extracted from the data set  i quickly discovered
that extracting features from individual stories would be difficult  the main issue is that the articles were
saved directly from the web  therefore the article content was still embedded within a sea of html
markup  the task of extracting the content for each story was highly infeasible  without access to the
article content i had to focus on algorithms that did not require feature extraction of articles  this
sidelined my original plan to use an algorithm such as td idf to identify the unique terms for each story
therefore creating a feature set for each article 
after ruling out feature extraction from stories  i focused on user activity  i noticed that the
action of adding and deleting a feed was similar to rating that feed  if a user keeps a feed and never
removes it  it signifies that he she likes the content from that feed  this implies a high rating for that
feed  however  if a user adds a feed and then subsequently removes it  then the content of that feed is
not what the user wants  this implies a low rating for that feed  therefore i collected all activity for each
user that had to do with adding and removing feeds  a total of        unique feeds were found from the
actions of        users  with this dataset i was now able to apply k means clustering to group users
together based on their  ratings  

section ii

fik means clustering is an unsupervised learning algorithm that groups the training examples into
clusters  training examples are assigned to the closest cluster based on the distance from their feature
vector to the center of the cluster 
the idea behind using k means clustering to recommend feeds comes from the intuition that
users will enjoy feeds that similar users have added  once users are in clusters  recommendations can be
made based off of the feeds from other users within the same cluster 

a feature vector for each user     is chosen to be a n dimensional vector      where the j th
element of   is as follows 

  
ff  ff ff   
            
 
  
ff
by choosing feeds that have at least     user subscribers  i limited the initial        unique feeds down
to      popular  feeds  subsequently  this fixes the dimension of the feature vector to be n        the
reason for limiting the feeds down to more active feeds is that most of the feeds only had a few
subscribers  this is not enough information for the learning algorithm to work with  also it unnecessarily
creates a higher dimension problem for the learning algorithm to solve  the final parameter needed is
the number of clusters  i found through experimentation that with k       the users were split into
clusters of a couple hundred each with no clusters having too few users 
to set a metric for the ability of clustering to correctly recommend a feed to a user  i use a soft
generalization approach      before clustering  i randomly choose    percent of the users and remove r
feeds from their subscription list  then i perform clustering on the entire data set including the users
with feeds removed  after clustering  for each user with r feeds removed  i recommend a set of m feeds 
this set of feeds is a collection of the highest m subscribed to feed by other users in the same cluster 
for each removed feed for that user  i check if the feed is in the set of recommended feeds  if it is  then
this is a successful recommendation  otherwise it is not  recommendation accuracy  ra  is calculated as
follows
        ff 
  
         
figure   is a plot of ra for    runs of r     with m varying from   to     the blue lines are the ra
of recommending the most popular feeds within the same cluster that the user does not have  the red
lines are the ra of recommending the most popular feeds overall that the user does not have  because
the blue and the red line are so close together  even overlapping  it suggests that clustering does not
help the recommendation process especially when m is less than    however once m      the clustering
is able to predict more accurately the feed that the user is missing  overall the performance of clustering
for recommending feeds is very poor  it starts off at around    chance of recommending the removed
feed with m     to around a     chance of recommending the removed feed with m      furthermore 
the plot does not differ by much in varying r and k 
i believe that there are a couple reasons that make this problem unsuitable for clustering  the
first issue is that by assigning a   in the feature vector to feeds that a user is not subscribed to is
equivalent to saying that this user does not like any of these feeds  it may be the case that the user has
never seen this feed before and has yet to pass a judgment on it  in this representation  this cannot be
distinguished from a true    where the user actually added and deleted the feed  signifying dislike  in




fifigure    clustering results

other words  this feature vector does not have the ability to code an unknown rating  which can
potentially be a good or poor rating  and naively labels it as a poor rating 
also another issue is that grouping users together purely by what they have subscribed to may
not be the correct thing to do  other user features such as  user interest in sports  movies  fashion 
technology  etc  may serve to cluster similar users together  in the current setup  users that have the
same tastes might not even end up in the same cluster  a difference in just one feed in their
subscriptions may bounce them into separate clusters  due to these concerns with clustering  i propose
using mmmf to mitigate some of these problems 

section iii
maximum margin matrix factorization  mmmf  is an algorithm that is able to predict a user s
ratings on a set of m items based solely on a few ratings provided by the user and other users  mmmf
learns from users that rate similarly to the current user and predicts the current user s unknown ratings 
recommending the user a new item may be as simple as recommending the highest predicted rated
items in his her set 
mmmf is suitable for this problem because for a given user not all the ratings are known for
each feed  most users have only voted on a couple feeds  the ones that they are currently subscribed to
and the ones that they have added and removed  other feeds have not been voted on yet and mmmf is
capable of filling in the ratings for these feeds  another reason that mmmf is good for this problem is
that it does not require any extra feature extraction  this is ideal for my data set since i only have user
activity to work with  i e  features to do with personality and interests will be difficult to determine  
in mmmf the observed ratings is represented as matrix           where n is the number of
users and d is the number of feeds  the non zero elements of y are the observed ratings  each row
represents the ratings for all feeds of one user  since each user votes on a few feeds  this row will mostly
be all zeros  it will be up to mmmf to fill in these zero elements with a predicted rating  mmmf finds a
rank k matrix         which is a product of two matrices         and           the rows of u

fican be thought of the  feature vector  for each user and the columns of v as a linear predictor 
predicting the entries in the corresponding column of y based on the  features  in u  parameter k is
chosen to be relatively small        and represents the number of  features  in the  feature vector  for
each user 
both u and v are unknown and are estimated by mmmf by minimizing their frobenius norms 
the sum of squares of entries  of u and v and a chosen loss function l  in the simplest form  mmmf uses
a regression based l which is the sum of the squared errors of user ratings in y and the predicted values
for those same ratings in x  the following equation is the optimization problem that mmmf solves
 

 

 
 
 
min                                    a
     
 
     

ff  ff   ff  
ff

the optimization problem is not jointly convex in u and v  but it is still convex in u if v is kept
constant and vice versa  using a solver such as one provided in the cofirank     software bundle
enables mmmf to be performed efficiently on large data sets 
as in the clustering section  users have not actually rated the feeds  therefore i have to infer a
rating based on the user s actions  i have approached this rating inference in two ways which i will
describe separately in the following two sections 

section iv
in the first attempt at inferring a rating for each user i used a binary approach very much akin to
that used in the k means clustering section  however  instead of only keeping track of the feeds a user
adds  i also include those that the user removes  each element of matrix y is now defined as follows
ff  ff ff   
 
    b  ff  ff ff         
 
ff
using this rating system  mmmf will predict for the feeds that the user has not yet subscribed to
if he she will add and keep the feed or add and remove the feed  this decision boundary is by default
set at     
to evaluate the performance of mmmf  i again used a soft generalization approach  i randomly
chose    percent of the users and for each user  set r non zero elements in their ratings list to zero 
then i ran mmmf on the resulting y matrix  the test accuracy is defined as the ratings that were
removed earlier and correctly categorized by mmmf as a rating   or    given the decision boundary of
     divided by the total number of ratings removed 
using this metric with parameters r     and k       the test accuracy was averaged over ten runs
to be        this means that the rank k matrix x that approximates the observed matrix y could predict
with an approximate     accuracy the feeds that the user will keep and those that the user will add and
remove 
there are a few shortcomings to this rating system  first of all  it assumes that the action of a
user subscribing to a feed means that the user likes the feed  this is a weak assumption since some
users may add a feed and never read from it  also  users may add a feed on accident and remove it
because it wasn t what they were looking for initially  this doesn t mean that the user doesn t like that
feed  the user just made a mistake  lastly  although the mmmf can achieve a high accuracy for
predicting feeds that the user will keep and those that they will remove  it doesn t show how much a

fiuser will like the feed  there is no way to select out of the all the feeds that the user is predicted to keep
which ones they will like the most  the following section will attempt to satisfy all of these shortcomings
by inferring ratings of feeds for each user from the articles read by that user 

section v
inferring a rating purely through the actions of subscribing and removal of feeds was argued to
be a weak indicator of the user s true preference for that feed  looking back at the available data  it
became evident that tracking the articles read by each user from each feed would yield a better
indicator  the assumption here  which is quite reasonable  is that the user will read more from feeds
that he she prefers and less from feeds that he doesn t 
because feeds update at different rates  articles per day  it is important to choose a rating
system that does not favor feeds that have higher update rates than other feeds  therefore  i chose to
use a session based approach  as mentioned before in section ii  a session is one which the user logs on 
reads some articles  and then logs off  for each feed  i record session reads  the number of sessions
where the user reads from that feed  this prevents from over counting a feed just because it updates
often  it is important to note that this format is susceptible to biasing against feeds that update at very
low rates  if the user logs on often and his favorite feed has not released a new article he she will not
access that feed giving it a low session read count  this is one of the drawbacks of this format 
given the session reads for each user  we can now infer a rating for each feed  a simple and
linear choice would be to normalize for each user the session reads for a feed by the total sessions by
that user  then uniformly discretizing the normalized session reads into   buckets yields a rating system
between   and   
again  using the soft generalization approach  r feeds were removed from the ratings for   
percent of users  now  because the rating is no longer a binary classifier as it was in section iv  the test
rmse  root mean squared error of the r ratings initially removed  is the metric used  with the linear
ratings between   and    an average test rmse of      was achieved 
the test rmse seems to be on the high side so i looked for a more nonlinear way of mapping the
session reads to a rating to bring down the rmse value  the intuition exploited here is demonstrated in
the following example  take for example two feeds that differ by   session reads  if their session read
values are both relatively high with respect to the user s total sessions the ratings should not differ
much  in other words  a feed read    times versus another feed read    times out of    total sessions
should still yield almost equivalent ratings  the user likes both and will generally read from both in a
given session  on the other hand  for low session reads    session reads makes a large difference 
looking at a feed   time versus another feed   times out of    total sessions should be distinguished
more widely  the user dislikes articles of the feed that has only   session read but is mildly interested in
the other feed 
the resulting nonlinear rating system is defined as follows
         ff    ff      
    ff                ff 
 
  ff      c 
 
ff          
 
ff
the breakpoints of   and      total sessions may seem a little arbitrary  i didn t have time to
optimize these values but this was just used to demonstrate how a nonlinear mapping of session reads

fito ratings helps lower test rmse  with the soft generalization approach  an average test rmse of     
was achieved  this is a significantly lower test rmse than that achieved with a linear mapping 

conclusion
rss feed recommendation is similar in difficulty to movie recommendations  extracting features
from rss feeds is quite difficult and is highly dependent on how and what you extract from the feeds 
therefore it seemed fit to use algorithms that depend on features that are easily accessible given the
data set  this is why the k means clustering algorithm was used where there was one feature per feed
for each user  a binary value designating if the user subscribed to that feed or not  clustering proved to
be ineffective for many reasons  the main one being that it could not distinguish between feeds that the
user has not yet seen and ones that he she has seen and disliked  also  the accuracy of the
recommendation of the algorithm was determined to be too low 
mmmf was found to succeed the areas where the k means clustering algorithm failed  mmmf
is able to fill in missing ratings for each user based on users who rate similarly  this is a form of
 collaborative filtering   the final issue addressed with mmmf was to determine a way to accurately
infer a rating for each feed given the user s reading history  a nonlinear mapping of the number of
session reads for each feed to a rating between   and   yielded the best average test rmse of      
completing the recommendation algorithm will require more testing of the nonlinear
breakpoints  also  it may benefit to explore finer nonlinear functions that span over more ratings such as
  to    finally once the test rmse is at an acceptable low value  feeds that are predicted to be highly
rated by the user can be recommended confidently 

    n  srebro  j  rennie  and t  jaakkola  maximum margin matrix factorization  in l  k  saul  y  weiss 
and l  bottou  editors  advances in neural information processing systems     cambridge  ma       
mit press 
    weimer  m   karatzoglou  a   le  q     smola  a          cofi rank  maximum margin matrix
factorization for collaborative ranking  in advances in neural information processing systems    
cambridge  mit press 

fi