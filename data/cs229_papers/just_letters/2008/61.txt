cs    project

hai wei

teleo reactive planner on ros
hai wei  haiwei stanford edu 

introduction
with the rapid development in ai  robots nowadays have a number of basic capabilities  e g 
navigation  opening the door  grasping objects  placing dropping objects  object recognition etc 
however  to further exploit of robots  we  or the robot  need to come up with a sequence of
actions that will achieve a goal  this is also referring as planning  traditionally  strips  stanford
research institute problem solver  language could be used to represent the planning problems
in terms of states  actions and goals  generally  this kind of method will induce searching in the
state space  which is too complicated to be feasible for agent control 
other than that  people can manually specify all possible conditions  however  in reality 
the number of possible things that could happen  and thus the number of cases that such a
system needs to handle  is very large  while it is possible to try to hand code vast amounts of
software to handle every special case that we can think of  in practice this is extremely difficult
to do  and would not only be extremely time consuming  but would also lead to a system that is
unlikely to be robust  because of special cases that the programmer missed  
in this project  i built a tr framework based on tr algorithm     proposed by nils nilsson
in       to enable complex applications to be built easily  tr programming represents a
systematic way of organizing the high level decision making problem to cover essentially all
possible cases all possible contingencies that the robot could possibly handle using its basic
capabilities  further  it allows us to ensure that in all of these cases  the robot can select some
reasonable action to take to move forward towards the goal 

tr algorithms and concepts
tr concepts
tr program consists of a sequence of conditions as their corresponding actions  shown in the
figure below  while running  the tr program will check all the conditions  from k  tok m   listed
on the left hand side  and searches for the first condition  for example  k i   that is true  then  the
corresponding action  ai in this case  will be executed respectively as long as k i is true  a
requirement for user is that the action sequence should be defined in such a way that the
durative execution of ai will eventually lead to at least one condition k j   j   i  being true 

moreover  tr program can be hierarchical  that is to say  certain action for one tr
program could be another tr program  with this feature of recursion  people can start reuse the
 

fics    project

hai wei

code done before  for example  once the tasks  such as making coffee  grabbing stapler and
greeting visitor  are accomplished  people can easily achieve the function  like office assistant 
based on the previous medium level tasks 

implementation on ros
ross communication system  topic and service
ros  robot operating system  is a framework that supports the development of robotics
software  in the ros  there are a bunch of discrete nodes  the communication between
different nodes is done in two different ways  topic and service     
topic  messages are routed via a transport system with publish subscribe semantics  a
node sends out a message by publishing it to a given topic  a node that is interested in a certain
kind of data will subscribe to the appropriate topic  logically  a topic is a typed message bus 
each bus has a name  and anyone can connect to the bus to send or receive messages 
service  the publish subscribe model is a very flexible communication paradigm  but its
many to many one way transport is not appropriate for request reply interactions  which are
often required in a distributed system  a providing node offers a service under a string name
and a consuming node uses the service by sending the request message and awaiting the reply 
tr managers structure
the structure of tr framework is shown below  there is one manager  m checkers for the whole
framework  each checker  i  is responsible for condition k i   in the run time  checkers will check
the all the conditions continuously and report to the manger repeatedly  once the manger gets
the information  true false of all different conditions  from checkers  it will decide which action
 the one with highest priority  to take and execute that action as well  instead of asking manger
to check all different conditions sequentially  i use m different nodes to check conditions  the
major reason is that some condition checking can be extremely time consuming  thus  it is
better to assign a different node to do that job independently  besides  all conditions can be
checked simultaneously and the robot can observe the world faster 

checker   
k 

checker   
k 



manager

checker n 
km

ai  i     m 

choice of communication mechanism
from the chart shown above  it is obvious that the one way communication  from checker to
the manager  is sufficient  hence the topic is used in this case  other than that  we can also have
each check set up a service and let manager loop around  from k  tok m   to query each checker
for result  however  there could be a case that certain condition will take hours to do 
consequently  the manager will get stuck  since the manger will wait for the result after sending
the querying requirement 

 

fics    project

hai wei

process control within manager
since the condition function as well as the action function are all define by the user  which could
be compiled executables  process is need to run those executable  inside the manager  there are
two processes  one is the real manager  doing the control job  talking to all checkers  decide the
right action to take  etc   the other one actually serves as the labor  who executes the specific
action decided by the manager  when starting to take an action  the manager process will
launch a labor process and ask it to execute the action  upon the transition of actions  the
manger process  which is also the parent process  will terminate the old action by killing the
original old labor process  after the older one is killed  manager will start a new process to take
the new action 

tr wrapper
as described above  one needs to run m different checkers and one manager to make the whole
system working  this could be tedious to user  when number of conditions is large  to be more
user friendly  i further coded a tr wrapper program to do everything automatically  the user
only needs to provide a script file with all conditions and actions  a sample script is like this 
condition     home haiwei ros ros hai fcond
action     home haiwei ros ros hai helloworld hai wei
action     home haiwei ros ros hai helloworld
condition     home haiwei ros ros hai tcond

tr robo simulator for trp on ros
to verify the functionality of the tr framework  a simulator called robo is built on ros to
simulate a robot in the real world  robo has four capabilities  navigation  go to the specified
coordinate in the world   grasping the object  as long as robo is at the specified object  
placing dropping the object  object recognition  find the characteristics of the object  
furthermore  one sensor is used as well  radar  find the position of unknown objects remotely
and check whether the robo is at some object or not  
with the capabilities designed above  the robo is asked to do the recycle task with the
control from one tr program  shown in the figure below  in the virtual world  there are six
objects  some of which are bins  while others are garbage items  each bin has a label  paper or
bottle   so does the garbage item  the robo need to find all the garbage items and bins  and
most important  put each garbage item into the right bin 
initially  the world is also plotted in the figure below 
id
position
name
object a
 
      
book
 

label
paper

fics    project
object b
object c
object d
object e
object f

hai wei
 
 
 
 
 

     
       
       
       
       

bina
binb
 up
newspaper
pepsi

recycle bin bottle
recycle paper
bottle
paper
bottle

under the control of tr progam  the action sequence of robo is 
 navi  i go to        
       
 navi  i go to       
 navi  destination        arrived 
 find  i found   objects so far  they are    
 robo  i picked up book at       
 navi  i go to       
       
 navi  i go to      
 navi  destination       arrived 
 find  i found   objects so far  they are       
 navi  i go to      
       
 navi  i go to        
 navi  destination         arrived 
 find  i found   objects so far  they are          
 goto  i go to binb robo  i dropped book at        
 navi  i go to        
       
 navi  i go to        
 navi  destination         arrived 
 find  i found   objects so far  they are             
 robo  i picked up  up at        
 navi  i go to        
 goto  i go to bina navi  i go to       
       
 goto  i go to bina navi  destination       arrived 
 find  i found   objects so far  they are             
 goto  i go to bina robo  i dropped  up at      

 navi  i go to      
       
 navi  i go to        
 navi  destination         arrived 
 find  i found   objects so far  they are                
 robo  i picked up newspapar at        
 navi  i go to        
 goto  i go to binb navi  i go to        
       
 goto  i go to binb navi  i go to        
 goto  i go to binb navi  destination         arrived 
 find  i found   objects so far  they are                
 goto  i go to binb robo  i dropped newspapar at
       
 navi  i go to        
       
 navi  i go to        
 find  i found   objects so far  they are
                  
 robo  i picked up pepsi at        
 goto  i go to bina navi  i go to        
       
 goto  i go to bina navi  i go to      
 goto  i go to bina navi  destination       arrived 
 find  i found   objects so far  they are
                  
 goto  i go to bina navi  destination       arrived 
 goto  i go to bina robo  i dropped pepsi at      
congratulations  succeed  

when the task is accomplished  the world looks like
 

fics    project

object a
object b
object c
object d
object e
object f

hai wei

id
 
 
 
 
 
 

position
       
     
       
     
       
     

name
book
bina
binb
 up
newspaper
pepsi

label
paper
recycle bin bottle
recycle paper
bottle
paper
bottle

conclusion
agent planning is needed for robot to make high level decision  in this project  i implemented
the tr framework based on the tr algorithm proposed by nilsson  with the demonstration of
recycle task  it is shown the tr framework make it easy to synthesize single actions into a
complex task  in future  i will continue to implement more applications with tr framework  also 
some learning algorithms will be explored to assist user to better program in tr 
acknowledgement
thank adam coates for discussing the problem with me and providing a variety of useful
suggestions  also  thank prof  andrew ng for teaching the learning algorithms  though no
machine learning algorithm is directly used in my project  i do benefit from the methodology
part of how to applying ml 
reference
    teleo reactive programs for agent control  nilsson  n  journal of artificial intelligence
research                  
    ros wiki   http   pr willowgarage com wiki ros

 

fi