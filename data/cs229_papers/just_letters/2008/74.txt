movie recommendations using social networks
ankit gupta  rohan jain  shiwei song
 gankit rohanj shiweis  cs stanford edu
cs     stanford university
stanford  ca      
dec         

abstract

also gather how they are connected with each other in
the social graph  using these pieces of information 
we build a recommendation engine that can take advantage of the rich information available from social
networks  our motivation and goal is to explore the
usage of these newly available data in building a better movie recommendations engine 
the outline of this paper is as follows  section  
looks at previous work in the area of movie recommendations and currently available recommendation
services  section   discusses how data is gathered
and represented  section   goes into details of our
recommendation algorithms  section   discusses our
results and observations  finally  section   concludes
this paper by discussing possible future extensions to
our work 

this paper explores utilization of information from
social networks in making automatic movie recommendations  implementations of three different algorithms  svm  clustering  and ranking svm  are
implemented and evaluated  the general approach
utilizes a large collection of facebook profile information as training set in order to generate a list of
movie recommendations for a particular user  client  
a brief analysis of the importance of specific profile
features in making movie recommendations is conducted using feature selection on each of the recommendation algorithms 

   introduction
generating good movie recommendations has been
a problem tackled by large companies such as netflix
and amazon  solutions by these companies often utilize large data sets of movie ratings by thousands of
users and use a users previous movie preferences  usage history on their site  to predict future movie preferences      although these solutions generally work 
they have many shortcomings      because these sites
are product based  their data do not capture the personality and tastes of a user  furthermore  people
tend to rent buy movies for family and friends  making their data noisy  we believe many personal factors and characteristics  such as age  relationship status  political view  affect ones preference for movies 
since like minds gather  who ones  real world  friends
are and what they like may also be a factor in recommending novel movies  with the advent of social
networks and accessibility of personal profile information  it is now possible to build recommendation
engines that incorporate personal profiles 
in this project  we utilize information available
through the facebook api to gather personal profile information about our client and his friends 
aside from just information about individuals  we

   previous work
the netflix prize     has sparked interest in movie
recommendations research  a variety of approaches
have been attempted  such as using k means clustering     and logistic regression      these approaches 
however  still suffers from the limitations of the netflix data set 
many online movie recommendation engines such
as yahoo  movies and movielens uses collaborative
filtering to generate movie recommendations  this
approach works well given a large data set of the
users movie viewing history and ratings  which often involves filling out lengthy surveys 
golbeck     presents work in using social networks
for movie recommendations  the approach presented
uses a trust based social network in conjunction with
collaborate filtering  however  this approach does not
use personal profile information of users and still requires lengthy surveys 
we hope to develop an effective movie recommendations engine that utilizes existing personal profile
information available on social networks without the
need for further user input 
 

fi   data gathering and feature
representation

catenation of representation of each pieces of information collected from his profile  the representations
are as follows 

    data gathering
the facebook api allows access to personal profile information of a client and his friends  after receiving permission from our friends  clients   we use
a ruby script that gathers the following raw information about each client and his friends  favorite
movies  favorite books  favorite music  birthday  location  name  relationship status  sex  activities  and
political view  we hypothesized that items in this
list of information that we gather will have influence
over ones movie tastes  between each two friends of
the client  we check if they are friends as well  this
information is used to compose the social graph of
the client  the social graph information is stored as
an adjacency matrix g with gij indicating friend i is
also friends with friend j 
the raw information gathered above cannot be
used directly as features in our algorithms  one
problem is that the location information itself does
not work well as a feature  rather  the relative distances between cities is needed  in order to find possible movie preferences for particular geographical regions   to accomplish this  we use yahoo  geocoding
api for each city that appears in our data set to find
its longitude and latitude  we then create a table of
distances between any two cities in our data set 
another major problem is that movie  book  and
music names in the raw data are not standardized
across user inputs  due to spelling and punctuation inconsistencies  the same movie title may appear
to be separate titles when used in training set directly  therefore  these features need to be standardized  standardization of features is done by using
the results of google search  using the google ajax
search api  with the user inputs as part of the query
strings  to standardize movies  we construct queries
with the format  movie name  imdb  a movie title
that appears in the top   results is then used as the
standardized name  similarly  to standardize books 
 book title  wiki is used as query string  a book
title from wikipedia in the top   results is used  finally  to standardize music written as band or song
name  the query is  band song name  last fm  a
music title from the website last fm in the top   results is used as the standardized name 
we gathered the entire social graph for    users
and their friends  combined  we got the profile information for over      users  section     describes
how the data is used in our tests 

   sex  a bit vector with       for male and      
for female 
   relationship status  political view  bit
vectors with   for the specific relationship status political view of the user 
   location  vector with an entry for each city 
let di be the distance between city i and the
users location  the ith entry in the vector is
maxj dj di
  this is the inverted norequal p  max
j dj dk  
k
malized distance from the user location 
   age  vector with entry corresponding to each
age bucket  age is divided into buckets for users
under        to    with step of    and over    
let vi be the ith entry in the vector  if the users
age falls into bucket i  then vi         vi   
vi          and all other entries equals    e g 
a person of age    would have the age vector as
                         
   books  music  bit vectors with   for the
books music the user listed in his profile 
in case some feature was not present  we gave equal
weights to all of the possible entries  the sum of
entries for each vector is   
for the cases when we want to use the social graph
in training  we added another feature for every user
with the value as number of friends he has in common with the person we are trying to predict movies
for  this feature tries to capture the closeness of two
people based on the number of friends they have in
common  for the client himself  the value of this
feature is the number of friends he has  although
there are many other ways to incorporate the social
graph information  we could not explore this space
much due to lack of time  see section   for possible
alternatives improvements 

   recommendation algorithms

    svm
the first approach we tried was to train an svm
for each movie and find a separating hyperplane between the users who liked the movie and users who
didnt  we recommend movies in the order of the
largest margin for the client  intuitively  this is rec    data representation
the standardized data for each user is converted ommending movies we are most confident that the
into feature vectors  a users feature vector is a con  client will like 
 

filet the set of all unique movies in the training set eled as
be m   for client x and users in the training set x k  s
 m  
x
  x  i  t  i 
 represented by feature vectors   we do the following 
min
 w   w   c
i j k
 i 
for each movie m  m   we train an svm to get w   w     w         w  m        i  
i j k
 i    b i    we define y  k      if x k  liked movie m i   
 m i   x k  m j     w i   t x k     w j   t x k     
to make recommendations for x  we compute
 i j k
x  i 
 k 
 k 
i  j  k i j k   
score i   
k y k x   x 
k

each condition m i   x k  m j  can be derived if x k 
 i 
not m j  in his favorite movies list 
which is effectively the margin for x on the svm for has listed m but
   
let w    w   w              w  m       let i j k be a
m i    we then rank the movies in decreasing order of
vector of size  m   x k    such that if m i   x k  m j   
score i  and recommend high scoring movies 
i j k                  x k               x k                with x k 
both linear and gaussian kernels were tried and
and x k  at ith and j th position respectively   we
results are presented in section   
can then remodel the previous svm as a standard
svm
    clustering
x
  t
the second approach we tried is doing k means
w w  c
i j k
min
w
 
clustering for each movie on the users who liked that
i j k
movie 
 m i   x k  m j    w t i j k      i j k
the training step consists of the following  for
i  j  k i j k   
each movie m i  liked by some subset of users x  i 
 i 
from the training set  find up to k
clusters in this svm finds  m   weight vectors w for each movie
i
 i 
x  i    model each cluster cj as a normal distribu  representing weights given to individual user features 
 i 
 i 
to make a prediction for client x  we find the valtion n  j    j       in our tests   x  i    is generally
fairly small  less than      in order to not over fit the ues  w i   t x for all movies m i  and rank the movies
based on this value 
data  we used i  k  i      
due to the enormous size of the feature vectors
to make a movie recommendation for client x  first
and
the large number of constraints  this algorithm
calculate the score for each movie with
suffers from poor running time  if the average user
 
lists f favorite movies and the training set contains
 i 
kx  j k 
 p   users  then the size of the feature vector is  m   x 
score i    min
 i 
j
 j   
and the number of constraints is  f  m   p    for example  with a total of     movies and     people each
then sort the movies by their score in descending having    features    favorite movies  the size of the
feature vector is        and the number of constraints
order and recommend movies with high scores 
intuitively  this algorithm works by first finding is         
stereotypes of people who like a particular movie 
scores indicate how closely the client fits into one
of these stereotypes  recommend movies with high
scores to the client 
this algorithm has the benefit of being very easy
to implement and very intuitive to understand 

   results and evaluations
    evaluation criteria
the subjective nature of movie preferences makes
evaluating the algorithms difficult  there are several
issues that standard evaluation criteria fail to capture 

    adapted ranking svm
the third approach was using an adapted ranking
svm  the ranking svm algorithm     represents a
ranking problem in terms of an svm  given a set of
favorite movies for each person  the goal is to come
up with a ranking of the movies for the client 
let w i  be movie specific weights for each movie
 i 
m such that user x k  likes m i  more than m j 
 represented as m i   x k  m j    if  w i   t x k   
 w j   t x k    the svm for this problem can be mod 

   users dont really know the ranking of their favorite movies  they can only tell the few movies
they like a lot 
   although users movie preferences may remain
constant over time  their list of favorite movies
changes  movies seen recently are more likely to
be remembered and become favorites 
 

fi   users dont spend a lot of time listing favorite smaller training set is used for it in test    addimovies on facebook  thus reducing the reliability tionally  only the top     most frequently occurring
movies are considered by ranking svm  intuitively 
of their favorite movies list data 
this is taking the movies with the highest prior probdue to the above reasons  the ground truth data
ability of being liked 
we gather from facebook is not reliable  so our
evaluation criteria should not take the entire favorite
algorithm
percentage
movies list into account or there would be too much
clustering
       
variance in outcome  instead  we used a metric which
linear svm
        
reports the score of the highest ranked movie present
gaussian svm
       
in a users favorites list 
rankingsvm
       
let fk    mfk     mfk             mfk n   be a list of favorite movies of person pk   let rankk  m  represent
table    test   scores  lower   better 
the rank of movie m in the ranked output of the
recommended movies for pk after running some recommendation algorithm  the maximum reciprocal
algorithm
percentage
rank  m axrr  for pk is
clustering
       
 
linear svm
       
m axrr pk    
gaussian svm
       
maxmfk rank m 
rankingsvm
       
let m be the set of all possible movies we can
recommend and t    pt    pt            ptn   be the test
table    test   scores  lower   better 
set  the evaluation metric we use is
  x
average m axrr  
m axrr p 
    feature selection
 t  
pt
to find the importance of each of the features we
used in making movie recommendations  feature se   
score  
lection is conducted on linear svm  gaussian svm 
 m  average m axrr
and the clustering algorithm in test   
the score represents the average percentile in
which one of the movies in a persons the favorites list
appear in our recommendations list  for example  a
score of   for  m         means on the average  one
of our top   recommendations will be in the clients
favorite list  the score is normalized for different  m  
  m   depends on the training set  
    test results
the data gathered is used to construct two separate tests  test   evaluates the results of the algorithms when social graph is taken into consideration 
test   evaluates the algorithm when only using profile figure    scores when ignoring each of the features
information 
in test    for each of the    users we have social
graph for  we used the set of his friends as training
data to make recommendations for him  the social
graph is factored into the feature vectors as described
in section      the scores reported for each algorithm
is the average score for the    users  the average
 m         
in test    the data is randomly split into a training set and test set  the training set has about     
users and test set has about     users  scores are calculated as described in section      this large training set gives  m          
due to the running time problems ranking svm figure    percent change in scores when ignoring each
encounters for large data sets  a randomly sampled of the features
 

fithe scores for each algorithm are calculated when
each of the features are ignored  the results are plotted in figure   and figure    an increase in score
indicates that removing the feature made the recommendations worse 

   an intuitive way to incorporate information from
the social graph in the ranking svm is by using
a kernel  this can be done by using a diffusion
kernel      this approach defines a matrix h as


if edge from i to j
 
hij   di if i   j


 
otherwise

    observations
from our results  we can make several observations 
   the clustering algorithm works quite well  indicating that movies do appeal to certain stereotypes  we expect that the performance of this
algorithm to increase with a larger data set as
clustering becomes more accuate 

where di is the degree of node i  using the kernel
exp h  for the svm incorporates this information  here  the parameter  controls how much
importance is given to the links in the graph 
thus  increasing  will increase the probability
of making decisions based on the choices of your
friends and vice versa 

   the ranking svm does not do well probably
because we had to sample the data and reduce
the number of movies we were considering for it 

   currently  we are not using interests and activities from a users facebook profile as it is very
hard to standardize  in the future  we can semantically cluster them to use as features in our
algorithms  since books and music turn out to
be good indicators of ones movie preferences  we
believe that including activities and interests will
help as well 

   gaussian kernel is expected to do better than
a linear kernel  which turns out to be the case
while conducting test    in test    both have
comparable performances for the smaller data
sets 
   there is high correlation between tastes in books
and music and taste in movies as expected 

   surprisingly  features like sex and the location references
reduce performance  sex is a bad indicator be    bennett  james  and stan lanning  the netflix
cause our data set was biased towards males 
prize  proceedings of kdd cup and workshop
location does not help because people tend to
            
list their hometowns rather than where they currently reside 
    chen  harry  why netflix movie recommendation doesnt work  weblog post  harry chen
thinks aloud    oct           dec      
 http   harry hchen  com                 

   conclusion

    sa  brian  and patrick shih  k means for netflix
user clustering  cs           

our project shows that it is possible to use relatively fast algorithms such as svm and clustering to     sadovsky  adam  and xing chen  evaluating the
make fairly accurate movie recommendations witheffectiveness of regularized logistic regression
out the need for any additional input from the user 
for the netflix movie rating prediction task 
the techniques used here can be utilized by a procs           
duction social network based movie recommendation
engine to make seed recommendations  when it has     jennifer golbeck  generating predictive movie
recommendations from trust in social netno additional user data yet   as more data is colworks  proceedings of the fourth international
lected  collaborative filtering or other online learning
conference on trust management        
algorithms can be used to improve results 
there are a few things to explore for continued     t  joachims  optimizing search engines uswork on this subject 
ing clickthrough data  proceedings of the acm
conference on knowledge discovery and data
   one way to improve the algorithms is to incormining  kdd   acm       
porate movie specific features from imdb such
as movie rating  genre  and release date  we can     risi imre kondor  john lafferty  diffusion keralso use information retrieval methods to gennels on graphs and other discrete input spaces 
erate textual features from the plot  title  user
proceedings of the nineteenth international concomments etc 
ference on machine learning       
 

fi