video montage
abhishek gupta  shakti sinha
december         

 

introduction

these vectors and compute the following features 
   optimal number of clusters  using a modified
k means algorithm  

unedited video often has significant content that is of
low interest to the viewer  one way to present such
videos is by creating a video montage preserving interesting content  manually doing this is difficult for
a non expert without specialized video editing software  we propose and demonstrate a technique
for creating a video montage automatically from
unedited video with minimal need for user intervention 
interestingness in a video is inherently subjective 
therefore to incorporate the users notion of interestingness we ask for user input  this constrains us
to using a small amount of data for training  the
scenario that we have in mind is  the user browses
through a few segments of the original video  marking them as interesting or uninteresting  we use this
labeled data to train a classifier about what is interesting to the user  and then classify the rest of
the video  the video classified into interesting and
uninteresting segments is then processed to join the
interesting segments and to shorten the uninteresting
segments 

 

   mean speed of the cluster
k q
x
v x i   v yi   
   k  
i  

   maximum speed of the cluster
q
max v x i   v yi   
i    k

   minimum speed of the cluster
q
min v x i   v yi   
i    k

building the feature set

after the user input  we partition the video into shots
 a small portion of the original video  based on scene
changes  the label that the user selected for a segment is considered for the whole shot  all the labelled
shots are treated as part of the training set and each
unlabelled shot as a test video  for every shot in
the test set  we compute the percentage of its frames
classified as interesting with the aim of classifying the
whole shot into one category 
we compute pyramidal lucas kanade optical
flow for every pair of adjacent frames  we get k  optical flow parameter    d positions and   d velocities as a combined vectror x y vx vy  of the k fastest
moving points with respect to the next frame  we use

figure    illustration of the division of frames into   
equal sized rectangles  the points indicate the fastest
moving points in this frame relative to its next frame 
the arrow originating from these points indicate the
velocity vectors of these points 
as shown in figure    we divide the whole video
into           equal rectangular frames and compute
the following features 
   mean of the ycbcr values of the points that lie
inside each of these squares      each for y  cb
and cr 
 

fi   number of points that lie inside each of these algorithm      fbsmoothing y 
squares when we run optical flow algorithm for
every pair of successive frames      features 
for i 
   to n u m f ram es
do w i     
   sum of speed of all points that lie inside each
for iter
    to n u m it er
such square      features 
for i 

   to n u m f ram es



conf idence   w i   y i    f rametype  


   histogram of l  norm of  vx  vy  of the k


smooth   y i       w i       f rametype  
do


vectors as computed from the optical flow   giv

w i    arg maxw i       conf idence   smooth 
ing us    features 
do
for
i


 n u m f ram es to  



conf idence   w i   y i    f rametype  




smooth   y i      w i        f rametype  
do


  forward backward smooth

w i    arg maxw i       conf idence   smooth 
ing
return  w 
we also want to capture the time co relation between
the frames in the shots  consider that our classifier
where y i    the labels computed by running the
predicts a shot to contain many interesting frames shot as the test set and using the parameters learned
together and one or two non interesting frames in by the training set using logistic regression
between  we know that there is some time correlation between frames and therefore such a scenario
   for static frames since there is not much
is unlikely to occur  hence we try to smooth the premotion in the frame relative to its previous or
dictions for every shot  furthermore  we divide the
next frame  our classifier may not be able to preframes in the shot into the following categories 
dict its label correctly  but we are sure of the fact
that if the frame preceding it and the frame suc   boundary frames  frames at the start of
ceeding it are labeled as interesting then probathe shot and the ones at the end of the shot
bly this frame is also equally interesting 
   static frames  frames that dont change
much w r t the neighboring frames

   for normal frames we give higher weight
to the prediction made by the classifier 

   normal frames  the rest of the frames in
the shot

   for boundary frames  typically there
might be some errors in prediction near the start
of the shot because it takes time to build some
continuity within the shots  similarly  typically
near the end of the shot there might be a sharp
break in continuity  as the shot is about to finish   so we dont trust the prediction made by
the classifier and neither do we trust the continuity of the adjacent frame 

for the different type of frames we have varying
degree of confidence in the prediction made by the
learning algorithms and coupled with aim of time
correlation between the frames we have devised the
following equations 
frame type
boundary frames
static frames
normal frames


   
   
    


    
   
    

 

seams for transitions

we claim that seams  defined below  can be used effectively for creating smooth and visually appealing
finally  if     of the frames in a shot are classified transitions in the videos  we get information about
as interesting then we mark the whole shot as inter  the interesting and non interesting video segments usesting else we mark it as non interesting  we apply ing our classifier as described in the previous sections 
forward backward smoothing on the output of the the techniques outlined in this section are then used
classifier for every shot  y vector   our smoothing to remove the non interesting portions of the video
and to join the interesting portions together 
algoithm is as follows 
 

fia seam is a monotonic and connected manifold of in space and time  we use the energy equation
pixels cutting across the time axis of a video repree  x  y  t     i  x      y  t   i  x  y  t   
sented as a video cube  seams are associated with
regions of low energy  depending on the energy func  i  x  y      t   i  x  y  t   
tion  seams can represent regions of low activity and
  i  x  y  t       i  x  y  t   
low importance 
the seam computed on a graph using the above energy equation is the minimum energy manifold in
the video cube  removing this manifold reduces
  computing the seam
the length of the video by one frame  we repeat
this process till we have removed the desired number
we represent the video cube as a graph where each of frames  shot boundaries have very high energies
voxel is a node  the nodes are connected to their which prevent seams from cutting across them  we
adjacent nodes using the energy value of the voxel  use median filtering at places where we find energy
with the graph construction shown in figure    a spikes to allow the seam to cut across shots 
minimum cut on the graph gives us the optimal seam
in the video      for finding the minimum graph cut 
we use an implementation of      we resize the videos  
joining videos
to a lower resolution for efficiency 
videos should be joined along a seam such that the
transition is smooth and preferably occurs in low importance regions  with this aim  we define the energy
function as a weighted sum of the individual voxel energies and the difference in intensities of voxels in the
two videos  we consider the combined video to be
an overlap of the source videos  such that the output
contains one of the videos before the seam and the
other video after the seam  consider the video cube
configurations shown in figure    we start with a
configuration where a small number of frames from
the beginning of the first video overlap with frames
from the end of the second video  configuration a  
and compute the seam for the overlapping region 
we then shift the videos one frame at a time and
figure    graph construction for finding seam  this find seams for each position till we reach configurafigure shows a longitudinal section of the video cube tion c  the seam having the minimum cost among all
along the yt plane  similar construction is present the seams found is the optimal transition manifold at
in the xt plane  the unlabelled edges have infinite which we join the videos 
weights  these edges maintain the seam monotonicity and connectivity      the nodes in the first frame
are connected to the source and the nodes in the last
frame are connected to the sink 

 

shortening videos

figure    configurations for finding seams  the two
cubes represent the two videos being joined 

we reduce the length of the video by removing low
importance regions from the video cube  to represent
the importance of a point  we use the difference in
intensity of the point with the points surrounding it

if in some configuration  t  and t  are the overlapping frames  the energy function we use while constructing the graph for computing the seam is given
 

fiby
e  x  y  t      e    e       i  x  y  t        i  x  y  t    
where e  and e  are the individual voxel energies
in both the videos as defined in the previous section 
i x  y  tn   is the intensity of voxel in video n at point
 x  y  in frame t   is a parameter that controls the
relative importance of the individual voxel energies
and the difference in energies for finding the seam  a
small value of  makes the seam join similar regions
of videos  but it might cut through important areas 
a higher value of  causes the seam to go through low
activity areas of the video  but the transition might
be less smooth  we used values of  between     and
     for our results 

 

experimental setup and results

figure    pr curves for logistic regression and linear
svm

first the user is asked to mark some of the segments
as interesting and some other ones as non interesting 
we then split the video into shots based on scene
changes  for all the frames that were marked as interesting  we treat the shots containing as interesting 
we do the same for non interesting parts  with this
we have a collection of shots labeled as interesting and
another collection of shots labeled as non interesting 
we use these shots as training sets  the rest of the
shots are treated as the test set  we then compute
the above described features for every shot  we use
logistic regression to learn the parameters  for each
shot in the testing set  we use the learned parameters  run logistic regression and get a vector which
contains a label  interesting or non interesting  for
every frame in the test video  we have heuristically
decided that if greater than or equal to     of the
frames within a shot are predicted as interesting then
we consider the shot to be interesting else the shot is
marked as non interesting 
we present here the results from one of the three
experiements that we carried out  the experiemnt
was performed on      frames       interesting and
     non interesting frames   as training set i e  approximately    seconds of video  the test set comprised of       frames   around      interesting
frames and about       non interesting frames  i e 
approximately     seconds of video  this experiment
was done using tennis videos  similar experiment was
also performed and similar results were obtained for
basketball and snowboarding videos of approximately
the same duration 

classifier
logistic regression
linear svm
class
interesting
non interesting

accuracy
     
     

precision
     
     

recall
     
     

f measure
     
     

from the results we see that svm performs slightly
better than logistic regression for our data set  in
general  we want our classifier to identify interesting
segments as much as possible so that users notion
of interestingness is preserved  we can see from the
results that the precision for the interesting class is
quite high i e  around        on the downside the
precision for the non interesting class is low  equalling
only        this means we are performing poorly
at identifying the non interesting segments but are
performing reasonably well in identifying interesting
segments  this also means that we are able to shorten
only       of the actual non interesting segments 
we tried the seam techniques on a number of
videos  we observed that joining and shortening videos preserved areas with high variation content and motion  since it is easier to evaluate
splicing of images compared to videos  we also
tried the techniques on images  and found that
images were joined with minimal artifacts  to
ensure that joining videos worked  we took two
overlapping segments of the same video  and the
 

fifigure    shortening videos  frames in the original video  first two images  and the shortened video  third
image  show that static frame regions have been replaced by objects from other frames   right   one of the
manifolds that were removed demonstrates how it cuts through the static regions of the video 

figure    joining videos  some frames from the transition of two videos  we can observe that the videos
have been joined at a position of similar content  and the snowboarders from the two videos have been
matched  figure also shows the seam along which the videos are joined 
output video was a perfect join as in the original video 
the results are available online at
http   www stanford edu shakti videomontage  

 

gorithms for energy minimization in computer
vision  inieee transactions on pattern analysis and machine intelligence  september      

acknowledgements

we thank ashutosh saxena and the stanford ai lab
for guidance and resources for this project 

  

references

   rubinstein  m   shamir  a   and avidan  s 
      improved seam carving for video retargeting  in acm trans  graph        aug        
    
   boykov  y   kolmogorov  v         an experimental comparison of min cut max flow al 

fi