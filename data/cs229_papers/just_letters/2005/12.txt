controlling devices by using robot arm
by jinsung kwon and jaekwang lee
   introduction
we are willing to explore the possibilities to control several devices  such as mouse  keyboard 
etc   which are around us  using robot arm 
theory in controlling the mouse 

among those devices  we apply machine learning

mouse is a good example of devices which are hard to use

control theories  because the relation ship between input  external force  and output  mouse pointer
movement  is non linear and difficult to define 

for example  if we slide the mouse on the same

side with the same force several times  the reactions of the cursor would be different according to
the contact points 
to experiment this subject  we used puma    robot arm in the robot manipulation lab  we
can read the mouse cursor movement and get a lot of movement data for machine learning by letting
the robot arm touch the mouse in several possible ways and directions 

we applied two learning

methods  which are linear regression and reinforcement algorithm to move the mouse to desired
position 
at section    we are going to introduce briefly about puma    robot arm and our control
interface 

at section    we will compare linear regression and reinforcement algorithm in moving

mouse cursor straightly 

at section    we will use reinforcement algorithm in changing mouse

cursor direction 

   controlling robot arm
puma    is used for robot platform  the robot server is operating on a real time os  qnx  and
we developed an windows based client program  ui  by which a user can communicate with the
server 

this client program also loads matlab command windows and interfaces with

matlab program 

consequently  our ui program communicates with the matlab program to

calculate complicated computation and with the machine to move the robot arm 

client

server

  request to move robot

  control robot to move to desired position

  request to stop robot

  control robot to stand still

  request to send current robot position

  measure robots current configuration

  measure the movement of the mouse

  measure robots joint velocities

  complicated computation with matlab

  measure forces and torques at the end effecter

fimatlab

ui

servo

controller
figure    robot control model

figure    client user interface

   learning to move straightly  linear regression vs  reinforcement 
as first experiment  we applied machine learning theory to move mouse pointer straightly 
applied two different learning algorithms and compared them 

we

one algorithm is linear regression

using least mean square and the other algorithm is reinforcement algorithm 

     linear regression
in linear regression algorithm  we trained machine by following way  at first  machine moves a
little bit along x axis  and then machine moves toward randomly chosen angle            
detailed figure is shown below 

at each move  we gathered machine movement and mouse cursor

movement  and then we tried to find the relationship with the mouse cursor position in y axis and
those parameters 
linear regression   using lms  
  training  
continue to
 th move

v

v

initial
location

after
 nd move
after
 st move

 nd robot arm
movement           

 st robot arm
movement   straight  

figure    linear regression training

fisince there are many features   st mouse cursor movement in x y axis   nd mouse cursor
movement in x y axis   nd machine movement in x y axis and combined features of those primary
features   we used feature selection algorithm to find relevant features 

in testing each feature

subsets  coefficients were found from randomly chosen     samples  and tested with the other    
samples 

after testing all possible features  we found those feature subset are most relevant to the

result  mouse position in y axis after  nd movement  which are 
   robot position in y axis after  st move
   mouse cursor movement in x axis during  st move
   mouse cursor position in y axis after  st move
   robot movement in y axis during  nd move

     reinforcement
in reinforcement algorithm  we trained machine by following way 
little bit along x axis  and then machine determines its state 

at first  machine moves a

states are determined by following

features 
   robot position in y axis
   mouse cursor movement in x axis
   mouse cursor position in y axis
after finding current state  machine selects next action among   discrete directions and moves
toward the direction  detailed figure is shown below 

a trial consists of   movements and if

mouse position goes toward straight line  good action  during the trial  we gave positive reward 
and if mouse position in y axis goes away more than     pixels from the base line at any time  we
considered it as failure and restarted the trial 
reinforcement  moving straight 
  training  
  
 

v

  
after
 st move

initial
location

continue to
 th move

v

after
 nd move
 nd robot arm
movement            

 st robot arm
movement   straight  

figure    reinforcement training

     testing the algorithms
we tested both algorithms the same way as the reinforcement algorithm 

machine moves mouse

  times consecutively and if the mouse position in the y axis is between the     pixels from the
baseline  we considered the trial as success 

on the other hand  if mouse position in y axis goes

away more than     pixels from the base line at any move  we considered it as failure 

fiin testing linear regression algorithm  we chose different coefficients from                    
    training samples and tested its performance 
            trials and tested its performance 

and in reinforcement algorithm  we did        

the result is shown below 

reinforcement
    

   

   

   

   

   

   

   

   

   

   

success rate

   

success rate

linear regression   using lms  

learning set size
   
   

 st

 nd

 rd

 th

trial
 th

figure    test result

     conclusion
after training and testing the machine using two different algorithms  we compared linear
regression and reinforcement algorithm 
linear regression
advantage

 can make detailed target position
both in x axis and y axis
 can take more various actions

reinforcement
 fast learning with small number
of failure
 good performance even with
complicated features

disadvantage

 slow learning with many

 discrete actions and states

randomized trials
 hard to analyze the relationship

 state decision is very critical

between features

   learning to change direction
at section    we tried to move the mouse straightly along x axis 

after moving along x axis 

we have to move the mouse along y axis to locate the mouse cursor at desired position 
experiment  we are going to train the machine to change the direction correctly 

in this

fiwe trained machine by following way 
then machine determines its state 

at first  machine moves a little bit along x axis  and

states are determined by following features 

   mouse cursor movement in x axis
   mouse cursor movement in y axis
after finding current state  machine selects next action among   discrete directions and moves
toward the direction  detailed figure is shown below 

if  nd mouse movement isnt along the right

direction  vertical   test is considered as failure  and we gave negative reward to the trial 

reinforcement  changing direction 
 nd robot arm
movement                  

  training  
 st robot arm
movement   straight  

v

after
 st move

v

initial
location

after
 st move

after
 nd move

figure    reinforcement  changing direction 

since it has more actions and states than the experiment in section    it took much longer time to
train  but eventually we succeeded to change the direction 

   conclusion
if we combine   and    we can move the mouse cursor to desired position 

by this  we can

apply machine learning theories in controlling mouse without any complicated control theory or
mouse position sensors 

moreover  if we use different shaped mouse  its very difficult to find

proper control rules  but we can use machine learning by applying this method to get the
satisfactory result with any shape of mouse 

fi