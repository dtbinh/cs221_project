dynamic throttle estimation by machine learning from professionals
nathan spielberg and john alsterda
department of mechanical engineering  stanford university
abstract
to increase the capabilities of an automated audi tts  we applied learning algorithms to
experimental data from both autonomously and professionally driven test runs to determine transient
engine behavior  data was collected at thunderhill raceway by sampling the vehicle s dynamic states
over the course of testing  sparse pca was then performed to prune the feature set and remove
redundant data  learning transient behavior may increase the control systems performance in tracking
a desired velocity profile  compared to the current engine mapping derived under steady state
assumptions  to learn this transient behavior  nonlinear autoregressive neural networks  multi layer
perceptron networks  and random forests are used  contrasted  and validated  due to the highly
nonlinear nature of neural networks  small perturbations in input states result in physically impossible
and undesired predictions  thus  random forests prove to be a more robust predictor  similar
unpredictable performance was shown when implementing the multilayer perceptron regressor  which is
not included for lack of space  ultimately  the random forest method is chosen to learn the model by
estimating the throttle commands required for a given response  the random forest model is verified by
predicting race driver data given the current and past vehicle states during testing  predictions were made
with a mse of       and within a     confidence bound of        additional validation through model
inversion provided little insight into performance of the forest  because of correlation with measured
velocity and acceleration states  immediate next steps consist of optimizing the performance of the forest
for real time online predictions  and implementation on the vehicle for experimental validation 
introduction
the dynamic design lab at stanford university performs vehicle automation research on an audi
tts  shelley  shelley work focuses on following optimal paths and speed profiles at the limits of friction
to achieve lap times competitive with professional racecar drivers  to minimize lap times  the vehicles
controllers must follow speed profiles  as shown in fig     this requires the controllers physical models
of vehicle dynamics to closely match reality 
shelleys longitudinal controller operates in a feedback feedforward framework to follow desired
speed  part of the controller receives a desired longitudinal acceleration and predicts the throttle needed
to achieve it  its current form is a rudimentary lookup table augmented by the engines gear and rpm
state  shown in fig     this work aims to replace the table with a machine learned function incorporating
many more vehicle and engine states  with delay when appropriate     

fig   

fig   

fiproblem representation
the dynamic design lab has recorded several years of shelleys data sets  consisting of both
human and autonomously driven experiments  we selected a small subset of these data  two
autonomous and one professionally driven sets to train our models  and one professionally driven set for
validation  in total  the sets include        chronological feature target pairs  of which     form the
validation set 
these data consist of vehicle and engine states captured from shelleys onboard sensors at a
rate of    hz  the throttle  or pedal percentage actuated at each time step formed our target set  y 
twelve variables that might intuitively relate to throttle compose our feature set  x  then  to capture the
time dependent dynamics of the system  the feature set was transformed to incorporate delay  each
examples feature set was augmented with the features of the five preceding examples to form  x  
finally  an estimation function was learned to predict the throttle paired to each time steps features 
shown in fig    

fig   

additionally  we performed sparse principal
component analysis  spca  on our datasets to
investigate to the independence and potential pruning
of features  unnecessary features may slow model
computation  wasting precious seconds in the real
time environment we hope to embed our model  spca
is similar to traditional pca  but modified to limit the
number of features incorporated into each pc 
x   uvt
x   feature set matrix
u   non unitary basis
   singular values
v   loading matrix
traditional pca is not as helpful to identify
feature correlation  because each pc will be typically
built from components of every feature  after
modification however  spca concisely builds each pc from only those features most correlated to one
another      we chose the optimal number of features by experimentally increasing the spca feature
limit  three was deemed optimal for our data because additional components contributed less than    
to the loading vectors of ranking pcs  lateral acceleration  yaw rate  and steering angle were found to
comprise the highest scoring pc with similar weights  thus these features were suspected to be
redundant  a segment of their time series is shown in fig    which illustrates similarity in signal content 
removing yaw rate and steering angle from our feature set resulted in a negligible change in
performance  and were not included in the methods and results which follow 

fimethods   results
we first attempted to train a neural network to predict throttle percentage  matlabs recurrent
nonlinear autoregressive neural network with exogenous input  narx  was chosen due to its design
for time series data  the network is autoregressive because past target values y are fed into the model
as features in parallel to exogenous inputs x  during training  the algorithm is run in open loop  meaning
the observed target values are used as past throttle states  shown in fig   a  in validation however  the
observed throttle is withheld  and past throttle predictions are input to the model in a closed loop fashion 
shown in fig   b  parameters were updated through bayesian regularization backpropagation  br  
which minimizes a combination of squared errors and weights to produce a network that generalizes well
     matlab recommended br over levenberg marquardt and scaled conjugate gradient methods for
our noisy data  and experimental validation of performance confirmed this choice     

fig   a

narx network design parameters include the
number of hidden neurons and number of delay
states  in fig     a learning surface demonstrates that
increasing either parameter increased network
performance  conceptually  more neurons may
increase the networks complexity  while additional
delay states may allow the network to appreciate
more time dependent dynamics  beyond the
measurements
shown 
computation
became
prohibitively time consuming     hidden neurons and
  delays states  which minimize the mse in fig    
were used to build the network
responsible for the following
results 
the narx networks
training and test performance is
illustrated in fig     in training 
the network achieved a mse of
       validation testing was
performed using the additional
professional driver set  on this
new data  results were not
consistent  sometimes yielding

fig  b

fiphysically impossible throttle predictions as shown in fig   b  in the high liability field of human
transportation  the unstable characteristics shown discredit the narx network  beyond this point our
focus narrowed to the random forest algorithm 
using scikit learn  we were also able to apply a
random forest algorithm to estimate the throttle
percentage of the vehicle over the course of our time series
testing data      a random forest is an ensemble method that
uses decision trees for regression problems  the
randomness of the forest is exhibited by random features
that are selected for nodes in decision making  attribute
bagging  and that random subsets of the data are used in
training each tree  bagging      
the forest is constructed using the same training
data as the narx network  consisting of both autonomous
and professionally driven tests  to let the forest predict any
output value in the training set  we did not limit the number
of terminal leaves that each tree could have  in future
optimization for computational speed  this feature of the model may be necessary  the feature set
comprising the data consists of the vehicle inputs plus the time delayed feature transformation of these
inputs as shown in fig     if the feature set is not time
delayed  the mse of the model reaches over       as
shown in fig     which was unacceptable  in training the
forest  actual past throttle states are used from training
data  whereas in testing past throttle values are delayed
states of the previous predictions  in a similar closed loop
fashion to the narx network 
model validation was performed using a
separately recorded data set of a professional driver as
shown in fig   a  the current and time delayed vehicle
states are then used in the closed loop forest model to
estimate the drivers throttle percentage over the course
of the testing data  additional validation was attempted
using model inversion  by predicting the acceleration
fig   a
during the drivers test using previously predicted throttle
percentages  this validation proved unsuccessful  as the
error was less than the original forward model  we
hypothesize acceleration was predicted primarily from
velocity and not previously predicted throttle percentages 
in tuning the forest for best testing performance
and lowest generalization error  number of trees were
experimentally varied  as shown in fig      mse
decreased with added trees in the forest  and returns
diminished to less than    after    trees  with increasing
number of random trees in the forest  the model can
represent more of the bagged testing data as well as
attribute bagged parameters  leading to a model with
fig   b

fifig    

lower generalization error  even though mse decreased with
increasing number of trees  increasing number of trees can lead
to overfitting in data noise as shown in fig   a and increased
computation time in both testing and training     
in validating our predictions against professional driver
data  using a forest of    trees  we estimated the actual throttle
percentage with a mse of       with a     confidence interval
of       confidence intervals were calculated by considering
the upper and lower    of predictions made by individual trees
in the forest for each given prediction as shown in fig   b  an
observed     of our testing data fell within our     interval
indicating that our model has some generalization error from
testing to training predictions 

conclusion
this work shows strong potential to provide a throttle function which may outperform shelleys
current empirical map  the random forest algorithm  supplied with vehicle and engine states which are
available in real time  demonstrates capability to accurately predict the throttle necessary to achieve
desired accelerations within a mse of       and within a     confidence bound of        even though
narx networks were able to attain a mse of        the computational time required for training and
predictions provided limitations on utility  furthermore  the narx network showed limited utility because
of its propensity to generate undesirable and physically unattainable throttle values  similar performance
was shown when implementing the multilayer perceptron regressor  which is not included for lack of
space 
in the near future  we will integrate a pruned random forest model onto shelley for experimental
validation  to do so  the model must be optimized for real time performance and the existing control
architecture  future work in limiting the number of leaves  pruning features  and optimizing for number of
trees in the forest will allow us to limit computation time  and thus create a model that we are able to
experimentally validate on the car  further work in investigating the impact of delay states will also allow
us to consider adding future states to the feature set  future desired acceleration states are available in
more advanced control frameworks  such as model predictive control  mpc   this may allow our model
to learn the causality of future accelerations  expanding this work in other domains of shelleys controller
such as steering and brake systems may also be able to improve system performance  we have shown
the ability to accurately learn and predict the throttle profile for a given test from a professional  with the
goal increasing the speed tracking capabilities of the vehicle and minimizing lap times 
works cited
    kritayakirana  krisada  and j  christian gerdes  controlling an autonomous racing vehicle  asme dynamic
systems and control conference       
    l  breiman  random forests  machine learning                   
    m  segal  machine learning benchmarks and random forest regression  center for bioinformatics  
molecular biostatistics    apr      
    neural network toolbox reference  vers  r    a  natick  ma  the mathworks  inc 
    pedregosa et al  scikit learn  machine learning in python  jmlr                       
    xinxing pan  lee  b   chunrong zhang   a comparison of neural network backpropagation algorithms for
electricity load forecasting   intelligent energy systems       ieee international workshop on  pp             
    zou  hui  trevor hastie  and robert tibshirani  sparse principal component analysis  journal of computational
and graphical statistics                       

fi