learning to splash
cs     course project
wen zheng

 

introduction

physics based methods have been successfully applied to the production of realistic liquids simulation  nowadays  a giant tide of floods sweeping through the new york city is no longer a surprise in movies  however 
expensive computation prohibits applying the same visual effects to games  medical training  and other
real time applications 
one way to achieve the real time simulation is to simplify the model  so that computation cost can be
reduced to an acceptable amount  however  among infinite number of possible simplification methods  how
to choose the one that preserves the most visual credibility is a difficult task  another way to reduce the
computation cost while preserving visual quality is to use more complicated geometry primitives to represent
liquids  for example  particle based methods represent liquids as clusters of spherical particles  which are
very simple primitives  this simplicity benefits human who can easily develop simulation methods based
on those primitives  but it sacrifices efficiency of representation  and thus requires much more sampling and
computation cost 
this project aims at a real time but visually plausible simulation system by applying machine learning
methods learned from  ng        to achieve this goal  the planned work is divided into three parts  first  data
generation  which is to implement a full fluids simulator to generate training data  second  geometry primitives
learning  which is to use an unsupervised learning method to derive a set of representative primitives from the
full simulation results  third  dynamics rule learning  which is to use a supervised learning method to develop
the updating rules of the representative primitives attained previously from the full simulation results 

 

simulation

the first part of the project implements a navier stokes fluid simulator  the navior stokes equation for
incompressible viscous fluid is as follows 
p
u
   u   u      u  
 f
t

u  
where u is the velocity  p is the pressure   is the viscosity   is the density  and f is the external force 
such as gravity  buoyancy  surface tension  and other user defined forces  for the application of this project 
the viscosity term is ignored for simplicity  because the viscosity smears out interesting dynamics which is
needed for training 
the navier stokes equations describe the updating rules for the velocity field u and the pressure field p 
in addition to u and p  we also need to represent and evolve the interfaces of fluids  a typical fluid simulator
usually uses the signed distance function  to represent the distance to the nearest interface and the region 
     if outside the fluid region       if inside the fluid region       if on the interface  then we can
evolve  through the level set equation 

  u      
t
 

fiwhere the velocity field u that drives the  around is updated by the navier stokes equations  whereas the
updated  is then used to distinguish the fluid region and the non fluid region for solving the navier stokes
equations 
the numerical updating rule is divided into the following steps 
   evolve the interface  by solving the level set equation 
the bfecc method  dupont and liu       is adopted to solve the advection  and the fast marching
method  sethian       is then used to reinitialize  
   evolve the velocity field u by solving the navier stokes equation 
 a  solve the advection term by the bfecc method  dupont and liu       and the external force
term by the forward euler method to attain an intermediate velocity u  
u  uold
   u u   f
t
 b  project u onto an divergence free field  first  use a preconditioned conjugate gradient method
to compute the pressure p by solving the follwing poisson equation  foster and fedkiw       
  p  


  u
t

then use the pressure p to update the velocity 
p
unew  u
 
 
t


figure    snapshots of  d full simulation of splashing water for training 

 

data generation

since fluids are arbitrarily morphable  theoretically they can have any geometric shapes  however  the
deformation of fluids obays particular dynamics rules  and thus the probability of shapes that fluids will
form is not uniform  furthermore  given a specific class of scenarios that we concern the most  certain kinds
of shapes will be more possible to appear than others  for instance  in a game where the most fequent
 

fiinteraction with water is that characters step into water or objects smash into a pool  the most possible
shapes of water are splashes and breaking waves  this implies that we can extract some representative
geometric features from simulation data  it also implies that the training data are most useful when they
are generated in similar situations 
thus  in this project  the following scenario is considered for the source of training data  a rigid kinematic
object  sphere for simpicify  smashing through a pool of water  to cover a sufficiently large range of possible
shapes of splashes  a number of different simulations are run with randomly generated parameters  including
the moving direction  the velocity  the size of the object  etc   see fig      the result data were stored as
matrices of the signed distance function i j   where i is the index of simulations  and j is the index of time
steps 

 

learning the geometry primitives

figure    errors  y axis  of representation using different numbers  x axis  of principal components  the
red curve is the max errors  and the blue curve is the mean errors 
the next step is to attain a compact representation of the water geometry  so that we can reduce the
number of simulated elements and speed up the simulation  to achieve this goal  the training data i j is
first decomposed into column vectors i j k   where i j    i j k  k  
note that other ways of decomposition have also been tested  such as decomposing the domain into
rectangular blocks  however  they suffers from noises and discontinuities near decomposition boundaries 
among all the decomposition methods tested  decomposing the domain into columns is the only one whose
compressed geometry has acceptable visual effects  and thus it is selected as the final method of decomposition 
the principal component analysis method is used to compress i j k into a limited set of representative
column vectors   then each column vector i j k can be expressed as a small number of real values attained
from the following equation
i j k   t  i j k    
where i j k is a lower dimensional vector  and  is the mean value of i j k   also the column vectors can be

 

fifigure    comparison between original geometry  left  and compressed geometry  right  with   principal
components 

recovered as follows
i j k   i j k    
as we can see in fig     the errors of the compressed geometry representation decrease fast as the number of
principal components increases  geometry  the first   principal components are selected as the subspace basis
for compression  fig    shows the comparison of two snapshots from the original data and the compressed
data  we can see that the compression preserves most of geometric features except high curvature details 

 

learning the dynamics rules

the next step is to learn the dynamics updating rule of the geometry primitives attained previously  based
on the intuition from the navier stokes equation  the updating rule should be spatially and temporally local 
spatially symmetric  and since the final system solved in the full simulation model is a linear system  we
can also assume that the updating rule is in the form of a linear system 
based on the above assumption  a hypothesis model is attained as follows
in

 

jx
max kx
max




nj
nj
ajk  i k
  ik
   

j   k  

where in is the compressed geometry representation vector at time n at column i  and as are parameter
matrices to be trained for  the above equation can be expressed in the form of 
    a
    and thus can be
solved by the normal equation
a     

  t    
  
 t
where   is the pseudo inverse operator 
boundary conditions are also an important aspect for simulation  in lack of physical meaning of   two
commonly used boundary conditions are assumed to be applicable  the reflective boundary condition simply
copy the mirror image of neighbors of the boundary node to the exterior nodes  and the inverse boundary
condition is the negative of the reflective boundary condition 
to select parameters jmax and kmax that work best  a hold out cross validation has been executed  the
training set is formed by     of randomly chosen data  and the test set is the other      since the training
is on a large data set and thus expensive  only   different jmax and   different kmax are tested  the training
 

fitable    mean errors for the reflective boundary condition 

jmax    
jmax    
jmax    

kmax    
        
        
        

kmax    
       
       
       

kmax    
       
       
       

table    mean errors for the inverse boundary condition 

jmax    
jmax    
jmax    

kmax    
        
        
        

kmax    
       
       
       

kmax    
       
       
       

errors and test errors in table   and   show that larger jmax and kmax have both smaller training errors
and test errors  which implies that a global model will be a better choice  however  a global model requires
to train a huge parameter matrix which is infeasible  a possible solution is to update  in an implicit way 
which means the global information is incorporated into the updating by spreading local information through
a sparse linear system  we can also observe that errors of both boundary conditions have little difference
with each other  which may indicates that both of them are incorrect  the search for the correct boundary
condtion will be desirable in the future work 

 

conclusion

two steps of machine learning are designed and tested to speed up the water simulation  the first step
is to use unsupervised learning techniques to attain a compressed geometry representation of water  the
simulation data are first decomposed into columns and then compressed by the pca method  the compressed
result is visually pleasing and has a considerable compression ratio  the second step tried to attain a
dynamics updating rule based on the compressed representation attained from the previous step  the
resulting system fails to generate long term simulation results with acceptable accuracy  however  the result
of model selection implies that a global model and a new boundary condition can help to reduce the error 
solutions to these problems need to be explored in the future work 

references
 dupont and liu      

dupont  t   and liu  y        back and forth error compensation and correction methods for removing errors induced by uneven gradients of the level set
function  j  comput  phys                 

 foster and fedkiw       foster  n   and fedkiw  r        practical animation of liquids  in proc  of
acm siggraph            
 ng      

ng  a        cs    course notes 

 sethian      

sethian  j        fast marching methods  siam review             

 

fi