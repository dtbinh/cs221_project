intuition
kevin montag s cs    project  fall     

intuition is a library for classifying and transforming audio based on a number of different
learning algorithms  supervised and unsupervised  as well as a client of that library which utilizes it for
real time audio processing  the client was built as a final project for music    a  music  computing 
and design   so i will not discuss it at length in this paper  rather  i will focus on the library and the
learning algorithms it employs  the library provides functionality to classify audio files using logistic
regression  to find centroids of perceptual features in an audio file using k means clustering  and to set
parameters for audio production plugins  equalizers  compressors  etc   in real time using locally
weighted linear regression  it also allows users to mix and match these algorithms in ways that are
relevant to audio production  i will discuss each of these aspects of the library s functionality
separately 
first  however  it will be useful to discuss the framework which the library uses for audio
processing  intuition is written in c    and leverages a number of open source libraries for dealing
with audio data at low levels  audio files are accessed using libsndfile  http   www meganerd com libsndfile    and features are extracted from raw audio using libxtract
 http   libxtract sourceforge net   for perceptual features  and fftw  http   www fftw org   for spectral
content  intuition also provides an abstraction for transforming audio using arbitrary ladspa plugins
 http   www ladspa org   a large number of ladspa plugins are freely available  with a wide range of
functionality  everything from simple spectral filters to vinyl emulators and elaborate reverbs  each
plugin defines a set of parameters which can be modified to change its effect on audio  audio data is
abstracted via the samples class  which allows audio features to be lazily computed and cached  the
abstract feature class is extended to represent a particular type of audio feature  and the library s

filearning algorithms generally accept collections of feature instances on construction  which they
then use to extract training data from samples objects which are provided to them  this design
allows features to be defined generically  the library implements wrappers to libxtract to extract a
number of perceptual  for example  smoothness  rolloff  flatness  spectral skewness  and nonperceptual  for example  variance and average deviation  from audio  and then the learning algorithms
can be applied to arbitrary collections of these features 
the feature value set class provides an abstraction for k means clustering of audio data
with respect to some set of features  the class accepts a set of features at construction  the user adds
training data in the form of audio samples  and then the class computes the centroids for those samples
using k means clustering  clustering can be employed to extract feature values which represent a
collection of audio files  i will discuss later how this is employed by the library s regression algorithm 
the classifier class allows users to perform multinomial logistic regression to classify
audio  again  a set of features are specified at construction  and the user provides training data in the
form of samples instances and associated labels  we can then compute parameters for the regression
by optimizing the log likelihood for our training set  and then use the parameters to classify new audio 
this can be used for genre classification  the user specifies a collection of features which they feel are
relevant to distinguish genres  and then a number of samples from different genres  the success of the
algorithm is strongly dependent on feature selection 
the regression class abstracts the most complex of the employed learning algorithms
implemented by the library  performing locally weighted logistic regression to determine parameters
for ladspa plugins that transform sound in desired ways  the user specifies a collection of features
to use for training data  a collection of ladspa plugins to use for processing input  and a set of
target features which they wish new audio to have  these target features are specified as a
feature value set instance  the idea is that the user can extract feature centroids from a song

fior collection of songs that she likes with respect to some perceptual feature  if she likes  for example 
the flatness of a johnny cash song   and then train ladspa plugins to take input data and output
something which shares the specified features  training data is specified as audio samples  and then
the regression instance extracts the desired input features from those samples  and finds the
optimal ladspa parameters to make those samples sound like the target output with respect to each
centroid in the feature value set  here the optimal parameters are found manually  the
method for finding optimal parameters is discussed below   the regression instance stores the
training point as a  input features  plugin parameters  point  along with a label representing the targetfeature centroid which could be best matched by the plugins  internally these labels are managed by a
classifier instance   then  given new input data  the regression computes the input
parameters for that data  uses multinomial logistic regression to decide which target feature centroid to
try to approximate  that is  it predicts the centroid which it will be able to best approximate   and
performs locally weighted logistic regression using the optimal values it discovered for that centroid 
the selection of plugin parameters given new data happens in real time  and the client written for
music    a provides an interface for receiving audio from other applications  using jack 
http   jackaudio org  and transforming it to match the desired target features 
to compute optimal values for ladspa plugins for training data  we wish to minimize the
function 
n

j   y  i y i   
i   

here there are n target features  y i  represents value the ith feature given inputs  to the
ladspa plugin  and y i  represents the desired value of the ith target feature  this function is poorly
behaved in general with respect to optima  since y i  is a complex function of the ladspa
parameters  simple gradient descent therefore performs poorly  however  we can t just search the entire

fispace of plugin parameters for the optimal set of values  since this space can be very large  instead  we
take the approach of generating a large number of random points in the parameter space for the plugins 
choosing the one which gives the smallest value for j  and then performing gradient descent with that
parameter choice as an initial set of values  we approximate the partial gradient with respect to each
parameter by varying that parameter slightly and recomputing j for the new set of parameters  by doing
this for each dimension of the parameter space  we can obtain an approximate total gradient for the
function  and use this to perform the descent 

as mentioned  this project was created somewhat in conjunction with my music    a project
for this quarter  professor ge wang offered a lot of great insight with respect to the existing libraries
available for low level audio processing  and the scope of the project as it pertains to practical
applications 

fi