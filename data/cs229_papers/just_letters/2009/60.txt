a markov decision process social recommender

ruangroj poonpol
scpd hcp student          
cs     machine learning final paper  fall     

abstract
in this paper  we explore the methodology to apply markov decision process to the
recommendation problem for the product category with high social network influence 
in which the consumption decision is influenced by the users social network  we chose
to build food recommender as food choice is normally influenced by consumers
social network and food consumption   i e  lunch  dinner   is often considered social
process  we leverage the social interaction data from online social network of the author
in order to obtain necessary social interaction information to calculate social distance
feed into the model  we decided to apply the markov decision process which treat
recommendation process as sequential optimization problem rather than treating it as
static prediction problem  we also apply other machine learning techniques such as
collaborative filtering  knowledge based and content based recommender system to aid in
the dictionary building and model parameters initialization which are crucial to the
performance of the recommender  over time  the result is slightly better than normal
collaborative filtering technique and content based recommender which utilizes simple
similarity scoring model despite poorer initial result  however  when we explicitly
display the presence of the persons in the users social network that influences that
particular recommendation the most  the performance of the recommender improved
quite substantially  for example  rather than plainly recommending menu a  the
recommender stated that  menu a  your friend s x liked it  algorithmically speaking 
the user friends x saw this recommendation earlier and liked it  x s pattern is similar to
users patter  and x is close to the user as measured by social distance 

firesearch process key assumptions 
to build up the initial database  we conducted the survey of     users in the same online
social network for top of mind most favorite foods which each user must submit at least
top five choices  there are quite a few duplication so we have only     menus in total
and the author used his domain knowledge to manually add another     similar items
so there are     menus in total in the food data bank  we then add features to each
menu so each menu is an eight dimensional vector  food ethnicity  vegetarian  main
ingredient  meat  

main ingredient  vegetable   cooking method  spiciness  food

category  and special dietary  we then calculate the categorical similarity score based
mainly on match   mismatch  m m  score system for each pair of menu to get the
proxy of the similarity of each pair of menus  this is essentially one form of clustering 
the score is then adjusted manually using domain knowledge of the author  this food
databank and similarity score will be used in a  initialization of the recommender
parameters and b  to build the comparison model 
then  we need to calculate the social distance among     users  to simplify the model 
we use the average of the past    days of the interaction on online social network
between each user pair and count each interaction as one despite its depth  length of post 
number of response in the same thread  etc    we also take into account the direction of
interaction  i e  who post on whose wall   another simplification we apply to the model
is that we assume zero interaction  and hence  arbitrarily large social distance  if a
particular pair of users arent direct friends of each other on the online social network  
i e  degree of separation is      
the fundamental of the model 
markov decision process is a basically a four tuple    s  a  rwd  tr   where s is state 
a is action  rwd is the reward function that assigns a real value to each state action pair 
and tr is the state transition function which is the probability of the transition given
action state pairs  the goal of the agent is to maximize the sum of discounted reward and
the optimal policy denoted    s  is the policy that maximize sum of discounted reward 
we will use the policy iteration to compute the optimal policy  to find the   and v   we

fisearch the space of possible policy by beginning with initial policy    s    argmax a



a

 

rwd s a     at each step  we compute the value function based on prior policy and update
the policy given new value function 
vi  s    rwd  s  i s        sj



s tr

  s    i s   s i  vi  s j 

i   s    argmax a a  rwd  s  a       sj




s tr

  s  a  s i  vi  s j  

we did conduct the experiment on users to calculate the initial model parameters
especially transition function   tr   
we use simple maximum likelihood method to calculate the transition function from state
s to s  we will use n gram model which based on our design choice of top   most
favorite to be   gram models meaning the probability that the user will click like our
recommendation is based on last one  two  three  four  five items he like earlier 
hence  for example  the probability that users will like food item fk after liking
 f  f  f  f  f   is 
tr     f  f  f  f  f       f  f  f  f  fk     
count    f  f  f  f  f  fk   count  f  f  f  f  f   
we will further improve the model by  a  enhanced by some form of skipping   i e  if a
person liked f  f  f  f  f  then it is highly likely that some persons will like f   after
having chosen f   f   f  too  additionally  b  we will incorporate the clustering of food
menu and social distance into the clustering of the state  for example  if food menus f   
f   f   f   f  have very high similarity score to fk then fk    so the actual count of the
occurrence of transition state from  f  f  f  f  f   to fk has higher weight than
 f  f  f  f  f   to fk    we use sum of total square of similarity score as the measure
of the distance from new food item to vector of prior state  next  c  if we observe state
transition from  f  f  f  f  f   to fk from users that are closer as measured by social
distance   then that state transition receive higher weight  in essence  we measure
similarity of state  s   s   as followed  similarity s  s       k  k     s  s    i   

fiwhere    s  s   is the kronecker delta function and k  and k  is the adjustment factor
calculated from similarity of food menus and user social distance as mentioned above 
lastly  rather than looking at fixed number of previous items   in this case five prior
items  to calculate the most probable item to recommend  we will also consider
predicting the next recommendation based on prior one  two  three  four items too and
mix the model with the default five prior items that users like 
note that  we use epsilon of     as the trade off constant between exploration and
exploitation  so only         of the optimal solution will be considered  note that we use
boltzmann distribution to calculate this cut off when we consider the action that yielded
the value function in that range 
key metrics 
for each session of recommendation   each recommendation  to test users   test size n 
   out of total     users that we used to build the initial model parameters   we will
calculate the percent like as the key measurement of the recommendation system  for
example  if    out of    users like our recommendation  the performance is     
we need to define the reward function  for our case  we have defined   reward values    
if user like the item    if user is neutral  and    if user disliked the recommendation 
comparison model 
we used the standard collaborative filtering and similarity clustering model   based on
maximum likelihood of the next item given previous sequence   to compare with our
model 
result 
average  
recommendation  
performance  score  
    
    
    
    

collaborative  filtering  

mdp  social  
recommender  

     
     
     
     

     
     
     
     

fi    

     

     

initial results of mdp social recommender is lower than collaborative filtering yet after
   iterations  the result improved steadily and reached     which is slightly higher than
collaborative filtering 
model improvement 
the result mentioned above from mdp social recommendation doesnt provide
significant improvement over standard cf model and hence doesnt justify substantial
model complexity and computation headcount  so we come up with improvement idea
whereby we explicitly mention the name of the person that most influence model
outcome together with the recommendation of the menu and after    iterations  we
yielded     which is      above cf 
concerns and conclusion 
based on the above result  one key hypothesis we have is that the social dimension of
recommendation especially in relatively small data environment like this setting  doesnt
make markov decision process to be obviously superior to standard simpler method like
collaborative filtering  the substantial improvement will happen only if we make the
social element explicit in the recommendation by simply stating which node in the
social network that resulted in the recommendation  however  we dont know if the
improvement in recommendation performance is due to the algorithm or simply from the
appearance of the influencer in the social network in the recommendation which
essentially might change the initial decision of the users  in essence  what we are building
might not be recommendation system but influencing system  in addition  this definitely
will cause privacy concerns to users whose name is used to recommend products which
in practice could be serious problem  lastly  we should also consider exploring further on
the direction of the social interaction and the structure of the network on the
recommendation process  for example  will the influence of the users that have high
connection and act as the hub be higher than the users that proactively
comment post respond o other peoples wall

fi