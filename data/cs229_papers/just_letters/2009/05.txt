ai mahjong
wan jing loh
december   th     
wl    stanford edu

   introduction
games like chess and checkers offer a controlled environment with fixed rules and an easy way to
compute performance  with their built in victory conditions   making them ideal test cases for machine
learning techniques  as games generally allow for several players  by pitting the computer against
human players  one can see how the algorithm measures up against competition  computers have been
acknowledged to be world class players in various games ranging from chess  backgammon and
scrabble  while their performance is getting better in more complex games like go 
in this project  i attempted to develop a viable ai mahjong player  by building a hand evaluator that is
able to accurately calculate how many tiles from victory the player is 

   the game of mahjong   problems with applying ai techniques to it
mahjong is a  player game which is a common past time in asia  especially in china and japan  over
time  many variant  houserules  have developed  which vary from region to region  in the interests of
space  please consult the references for a link to the rules of the game  the rest of the paper will
assume basic familiarity with mahjong rules 
most machine learning techniques focus on two player games where each player takes turns in order 
this is true of most of the popular games that have been widely studied  with the possible exception of
poker  in mahjong  besides the fact that there are   players  it is possible for the players turn to be
skipped due to other players doing melds  which makes it hard to model 

fithe problem of hand value varying from game to game  and indeed within a game  makes it hard to
come up with a general way to evaluate a hand  this is particularly true in the case with a ping hu
 winning hand with all straights   which has many rules in order to be valid  for example  a ping hu
requires the player to be waiting for at least two tiles in order to win off another players discard  this
variability makes it hard to check if a hand is actually a winning hand  and the actual point value of the
hand 
lastly  draws are random  so luck plays a significant role in the game  a large number of games must be
played to get an accurate result of an algorithms strength  for example  whether to go for a easily made
hand with low point value  or a higher point hand that may take longer to form  a max payout hand is
worth    times the payout of a   point hand and a lucky draw could easily skew results 

   literature review
arthur samuels checkers playing program paved the way by using reinforcement techniques in game
playing  expanding on his work  the chess playing program deep blue defeated the world champion
gary kasparov in      using a mixture of brute force search and an evaluation function of the board
position that has been tuned by analyzing thousands of games 
while brute force search was sufficient for games like chess  it proved intractable in games like
backgammon  where the randomness of dice rolls led to a large branching factor  in these games  it is
far more important to accurately evaluate the board position than to be able to look many steps into the
future  previously  most evaluation metrics and the features were hand crafted by experts in the
games  with the weights then being fine tuned by playing many games against itself  g  tesauro used
combined multilayer neural networks along with temporal difference learning to build a backgammon
player that learns by playing itself  this program was able to play at world class level and overturned
many of the conventional concepts about how to best play backgammon 

   requirements for a good ai mahjong player
a  the ability to look at a hand of tiles and judge what kind of hand to form with it
this is the most important requirement  given tiles  we have to decide what hand to aim for  mahjong
has a large variety of hands and choosing the most likely hand will increase our chances of victory 
likelihood can be determined in many ways  one is the number of extra tiles we need for victory  the
second is the number of tiles remaining that will improve our hand  we may only need   tile to win  but
if all   of that particular tile have been discarded  it will be a pointless wait  this is hard to quantify
however  as the closer to victory we get  the fewer good tiles will improve our hand  in addition  the
value of the hand is also important  we want to maximize the expected value of the hand  not just the
probability of success  a     chance of a    point payoff is likely to be better than a     chance of a   
point payoff  however  we are unlikely to play an infinite number of games  so a       chance of a
million point payoff is something we shouldnt really aim for 

fib  the ability to choose when to meld
draws are random and based on luck  but melding allows us to get specific tiles from the discards of
other people  tile combinations that allow for melding effectively increase the chance of us getting good
tiles  however  melding provides information to our opponents and restricts our options  so weighing
the trade off is important 
c  the ability to choose the tile to discard
with the ability to evaluate a hand  it might seem simple to choose a tile to discard  we simply choose
one of the many tiles that are not useful in forming our hand and discard it  the reality is not so simple 
some tiles are better to discard than others  in the early stages of the game  it is often possible to have  
or more relatively viable hands  it is usually a good idea to discard tiles that keep both hands viable and
look at our next few draws before finally deciding on the hand we want to make 
we would also like to discard tiles that do not result in an opponent winning as the person that dealt the
winning tile has to play double the points of the hand  this may require us to sacrifice winning and play
for a draw in order to not deal into an opponents hand 
d  the ability to evaluate an opponents hand
an opponents discard can tell us much about what hand he is making and how close he is to success  if
an opponent has not discarded tiles from the tong suit since the start of the game  and suddenly
discards one now  it is likely he is close to success with a fullcolor tong hand  discarding tong tiles now
would be very risky and may lead to the loss of lots of points 
my main focus in this project is to get an accurate hand evaluator that looks at a hand and judges how
easily winning hands of particular hand types can be put together

   the hand evaluator
the structure of the problem naturally lends itself to a constraint satisfaction problem  csp   we have
several constraints  such as the fact that we must use all    tiles in our hand  there must be   triplets
and a pair  and the fact that the combination of triplets and pairs must satisfy a valid mahjong hand 
in poker literature  the easiest way to check for a poker hand is to convert the hand into a histogram
with bins dependent on which hand we are searching for  for example to find a   of a kind  the
histogram bins are the rank of the cards  and if a bin has   cards in it  we have a   of a kind  to check for
a straight    consecutive tiles   we look for   consecutive non empty bins 
simply applying the poker method to mahjong does not work  poker hands have relatively simple
patterns that are easily detected by the histogram method  mahjong hands have much more variation in
them  in addition melds are fixed  for example  pungs of  suo   suo and  suo could not be used as  

fisets of       instead  however  notice that the triplets and pair that make up the hand can be easily
detected using the histogram method  if we had a good way of dividing the mahjong hand 
the fact that we have triplets and a pair poses an interesting asymmetric problem in dividing up the
hand  finding all combinations of triplets and pairs was problematic  the problem was solved by
introducing an imaginary   th tile  now we simply have   triplets and can apply the same histogram
method to all of them  to see how many tiles satisfy the requirements  the input of the algorithm is the
tiles in hand and the melded triplets  the output of the algorithm is a score for each type of hand
indicating the number of tiles that are not in conflict with the constraints  a score of    indicates a
winning hand 

   detecting conflicts  the histogram method
we have   tiles  one of which may be imaginary  and we wish to figure out how many of those   tiles
actually aid in forming the hand  we do this by forming a histogram of    bins  with each bin
representing a single type of tile  some bins are actually unused and act as dividers  having these always
empty bins also simplifies searching when we have a suit restriction 
we fill the histogram with all three tiles    if there is an imaginary tile   if we are looking for a   of a kind 
we simply find the bin with the largest number of tiles in it and return the number  for consecutive tiles 
we look for the largest consecutive number of non empty non honor bins  the always empty bins help
prevent the search from crossing suit boundaries  i also searched for patterns that consists of filled 
empty  filled bins   since that represents a consecutive pattern missing a middle tile 
suit requirements  such as for a halfcolor hand  are checked by limiting the area of the search 
we set the kind of triplet constraints based on the hand we are currently checking  a halfcolor hand for
example  would limit the search to just that particular suit and return the maximum of the results of  of a kind and consecutive tiles  if there is an imaginary tile  we only accept the result of the   of a kind
search  since we are looking for a pair 

   discarding tiles
currently  a simplistic model is implemented  we take the most likely hand  and based on the triplets
generated  we can tell which tiles are not being used in forming the hand  we then choose one of them
to discard 

   the simulator
i created a simulator that supports an arbitrary number of human and or ai players  in   players mode 
the game behaves just like the real physical game with all the rules faithfully represented  this allows
me to compare the evaluation function against my own thoughts on the hand  this portion of the
program actually took up a large portion of my time  but will pay dividends in the future when i expand
on the code 

fi   interesting points

i initially evaluated this hand as having a score of       tiles from completion  for a ping hu  while the
hand evaluator evaluated it as only    tiles  clearly the   honor tiles are worthless in this case  but
where was the last conflicting tile  each suited tile has at least one neighbor  so what was wrong 
it turns out the structure of the triplets is to blame  while we do have   nice sets of at least   tiles  none
of them can form a pair  as a result  we would eventually have to break one of them up into a pair in
order to form winning hand  so we actually need   tiles and not   to win 
this hand shows the effectiveness of the hand evaluator  as it can spot things that a human might
otherwise miss 

i evaluated this hand as having a score of   tiles with the relevant   tiles shown in the center
arrangement  any non honor tiles may act as one part of a pair  the hand evaluator scored it with a
score of    with the relevant tiles being the tiles at the bottom  due to the evaluator making the  wans
as a pair  it was unable to make the     sets  without using at least   swaps to have an improvement in
score  this example proved that local optima exist  reshuffling and recalculating fixed this problem 

    future improvements
currently the hand evaluator can accurately calculate the tiles needed for victory  however  it does not
account for the availability of those tiles as well as the value of the hand when making decisions on
which hand to play  incorporating these will make the evaluator better able to distinguish between
similar hands and make it able to decide when to meld better  in addition  using temporal difference
learning to make the evaluator better able to judge the tradeoffs between hand value and hand speed
would be very useful 
the next big step would be to use a hidden markov model to guess at the opponents hand and decide
which tile to discard based on the relative value of your hand and the opponents hand 

fi    conclusion
this has been a very fun project and i learnt a lot  it clearly demonstrated to me that properly
formulating a problem can reduce the complexity of an algorithm by a lot  however  there is still a lot to
be done in order to a an ai that plays mahjong decently 

    references
   samuel  a  some studies in machine learning using the game of checkers  ibm j  of research and
development                    
   tesauro  g  a parallel network that learns to play backgammon
   tesauro  g  programming backgammon using self teaching neural nets  artificial intelligence    
             
   b  sheppard   world championship caliber scrabble  artificial intelligence                  
   http   en wikipedia org wiki mahjong rules of the game

    appendix   code description of hand evaluator
for each type of hand 

   melded tiles are checked to make sure they dont conflict with the hand  for example a
pong    of a kind  will exclude us from forming a pinghu hand 
   the sum of the remaining tiles   the imaginary tile will be a multiple  x  of  
   these tiles are used to form x triplets  which are the constraints for the problem
   the triplets stay fixed  there is one triplet for the first   tiles    for the next   and so on 
   a triplets constraints is defined when created  we can enforce that the triplet should be
  consecutive tiles    of a kind  the suit the tiles must have  etc  this is dependent on the
type of hand
   we can check how many tiles within the triplet satisfy the constraint  maximum of   
since there are   tiles  through the histogram method described in part  
   for the triplet with the imaginary tile  a maximum of   tiles can satisfy the constraint
 the imaginary tile does not fulfill any requirements and does not appear in the
histogram  
   we then do local search by attempting to swap tiles between triplets such that the total
number of tiles that are not in conflict are increased 
   we end when no swaps decrease the number of conflicted tiles
    the method is susceptible to local optima  so we shuffle the tiles randomly and repeat
step    until the maximum does not change for   reshuffles 

fi