music recommender system
utilizing users listening history and social network information
tianye lu
tianye stanford edu

cs    final report
jing xiong
jxiong  stanford edu

abstract

a music recommender system based on
users listening history and social network was
implemented in our project  we used
collaborative filtering with both user based and
item based
strategies 
for
user based
collaborative filtering  we measured users
similarity with both the binary information and
actual play count in their listening history  our
methods significantly increased the accuracy of
recommendation  furthermore  we modified the
user based collaborative filtering algorithm and
came up with a method that combined the users
listening history and social relationships for
music recommendation 
introduction
rapid developing of mobile devices with
internet capability makes it possible for us to access
different music resources freely  however  with
millions of songs to choose from  people sometimes
feel overwhelmed  music service providers also
need a more efficient way to manage songs and
improve users satisfaction 
music recommender system is an
information filtering system that builds on users
listening history to recommend users with new
pieces of music that meet users interest  music
service providers can utilize an effective music
recommender system to maintain user group and
attract new users  users can also benefit from the
recommender system with no more pain to make
decisions on what to listen  through studying users
listening history  we will be able to extract useful
information and predict users preference  music
service providers with social network information
can also utilize friendship between users in
recommending songs  because users might be
interested in what their friends have listened to  and
people with similar tastes tend to develop friendship 

xiaoye liu
xiaoye stanford edu

in this report  the first section introduces the
problem and the motivation for solving this problem 
background information including data sources is
given in the second section  the methodology
section and results section present the approaches
and results of training the large scale data of users
listening history we used in our project  the
discussion section discusses the limitation of our
project and further development possibilities  the last
part concludes the project and summarizes the
results 
background
the million song data challenge was an
open source data processing challenge concluded
this august on kaggle  the contest is to predict half
of the listening history of         users by training
the other half of the listening history and the full
listening history of the other one million users  the
data we worked on were the million song dataset
used in this contest and were downloaded from the
kaggle website  it is a freely available collection of
audio features and metadata for a million of
contemporary popular music tracks  each training
data triplet contains user  song  and play count
information     
methodology
simple recommending method    popularity
we created a baseline for later algorithm
comparison through recommending songs with
highest popularity without considering the listening
history of users from the test set  for each song  we
looked into the training set and calculated the
number of users who had listened to the song  a
higher number indicated a higher popularity  sorting
these numbers with a descending order  we obtained
a list of songs with descending popularity  and the
test of users were recommended with the most
popular songs 
collaborative filtering

ficollaborative filtering is a widely used
method for recommendation systems      the basic
memory based collaborative filtering algorithm is
quite intuitive  relatively easy to implement and
often has a good performance  the idea of
collaborative filtering is that users who consumed
similar items tend to have similar interests and will
probably continue to consume similar items  in our
case  listen to the same songs  alternatively  items
that are often consumed by the same user tend to
appear in the future shopping list as well 
from these two perspectives  we can have
both user based and item based strategies for
collaborative filtering  for either strategy  we
modeled the similarity between two users and two
songs  and then assigned a score to every song that
the user hasnt listened to accordingly 
let u  v denote two users and i  j denote two
items     is the set of songs that u had listened
to     is the set of users who have listened to i 
wuv and wij are measures of similarity  we used a
modification of cosine similarity  introducing a
parameter  
      
             
   
      

                  

   

then for a new user u and song i  the user based
scoring function is
hu
   
ui   vu i  f wuv       
the item based scoring function is
hiui   ji u  f wij       
   
function f gives locality of different similarities 
specifically  we used exponential family of function
f w          
   
when q is large  users or songs with higher
similarity contribute more to the final score  vice
versa  in our implementation  we adjusted the two
parameters  and q to see their impact on the results 
figure   gave interpretation of similarity in userbased and item based strategies 

measure similarity with play counts
in the above approaches  we did not use play
counts in processing our data     was a vector in
         where n is the number of songs  with this
notation  we can interpret the cosine similarity as
    
                  
   
with this modification  we easily modified the userbased similarity function in the previous section 
which was originally binary in nature  to include
play counts information  here        where
     is the number of times that user u listened to
song i 
recommendation gets social
in this section  we suppose there was a
social network with friend relationships built
between the users  our goal is to provide users with
a comprehensive recommendation list that takes into
account both the listening history and social network
relationships of the user 
figure   presents an idea of what an app will
be like when adding this social component  we aim
to provide users with a single list of songs as shown
in the left part of figure    the list consists of both
songs recommended according to the users listening
history and songs that the users friend listened to  in
the filter options  users will have an option of
configuring their own parameters by dragging a
scroll bar to decide how much social network
component they would like to add to the
recommendation list 

figure    demo of music recommender software with
social network filtering option 
figure    similarity in user based and item based
strategies 

fiwe can achieve this by modifying the userbased collaborative filtering method  when u and v
are friends  we rescale  to give more weight to
their similarity  specifically  the rescale function we
used is
        
      
 
   
k
otherwise
where
  
k   n  log    
   
k is the rescale factor  which increases two friends
similarity by k times  this allows us to give more
weight to all pairs of friends  moreover  a good
property of the rescaling scheme is that the relative
similarity among friends remains unchanged after
this modification  this property ensures that in our
recommendation  the users taste profile  modeled
by similarity in listening history  and social network
are both taken into account  one special case is that
when two friends never listened to the same songs 
we directly assign their similarity to be k 
the choice of k affects the percentage and
ranking of the songs friends have listened to in the
final recommendation list  we want to give users
more control over k  but it is tedious to directly
modify k  therefore  we introduced a parameter
       and provided a nonlinear mapping from  to
k  n is a constant which can be set before hand in
the system  we chose the function to be     so that k
grows relatively steady with respect to    and
quickly grows to infinity when  approaches   
when k passes a certain threshold  increasing k will
not affect the result  therefore  this mapping ensures
that a user can control k within a reasonable range
by changing  within the range of         figure  
shows k as a function of  with n    

evaluation
most recommendation systems with explicit
feedback from users such as rankings or ratings
would choose root mean squared error  rmse  as
the metric for evaluating recommender quality  such
kind of feedback is a bounded numeric score which
directly reflects the affinity of a user for an item 
however  what we are working with now is implicit
feedback  which is generally unbounded  moreover 
its indication on the users affinity for an item is not
as obvious as explicit feedback  therefore  its hard
to interpret the result if we predict a play count for
every song and evaluate by rmse     
instead  we used an evaluation metric called
mean average precision  map   specifically  we
recommended the top  predicted songs for each user 
we only made binary prediction for the user  i e 
whether the user listened to the song  when we
made a correct prediction on a song  it contributed to
the average precision according to its rank in our
recommendation list  top recommendations were
given more weight 
to formalize the definition  let m 
mn
     
denote the user song feedback matrix 
where m u  i    if user u listened to song i  let r
denote a song that we recommend to a user  r j  i
means that song i is ranked at position j in our
recommendation list  for k    precision at k  pk  
is defined as
 

pk  u  r    k kj   m u  r j    

   

for each user the average precision is defined as
 

ap u  r    n k   pk  u  r   m u  r k        
u

nu is whichever smaller between  and the actual
number of songs the user listened to  the average
mean precision is the average of the average
precision of all users 
 

map   m m
u   ap u  ru    

figure    k as a function of  

    

where ru is the ranked recommendation list for user
u 
for recommendation with social network 
our goal has changed  and we cant use the same
method to evaluate the recommendation  in fact  it
is quite ambiguous to set a standard against how to
evaluate our result  instead  we got a concrete result

fiof our algorithm to demonstrate how social network
elements affected our recommendation list 
results
collaborative filtering
one big challenge in our implementation of
collaborative filtering is how to handle such a big
dataset with millions of users and songs  one way to
speed up is to build a sparse matrix from the usersong play triplets and directly operate on the
matrices  instead of looping over millions of users
and songs  however  due to limitation of
computational power  we did not run the algorithm
on the full data from the million song dataset
challenge  which is one million users for training
and    k for testing  instead  we used the
information of    k users for training and tested on
  k users  for each user  we made top    
recommendations and calculated the map  we
implemented the two different strategies of
collaborative filtering with different settings of
parameters 
we used python to implement the algorithm
and the scipy package for constructing and handling
sparse matrix      the following tables summarize
our results  figure   and figure   show
table    baseline map

figure    item based map with varying  

figure    user based map with varying  

adding play counts
by measuring similarity with play counts 
we obtained results presented in the following table 
table    map of     with play counts for user based
approach

table    map of     recommended songs for item based
collaborate filtering algorithm 

table    map of     recommended songs for user based
collaborate filtering algorithm 

how map is affected with varying  

collaborative filtering in social network
to demonstrate the result when social network
structure is included  we built a virtual friendship in
our data and listed the top    recommendation for
one particular user given by the system with
different choice of   when       the result is the
original recommendation from the user based
collaborative filtering approach  as  increases  the
songs the users friends listened to ranked higher 
more and more of these songs appeared in our
recommendation list  when          all songs
recommended were listened to by the users friends 
table   illustrates how  changed our
recommendation list to a certain user with a virtual
friendship  songs listened to by the users friend are
bolded 

fitable    recommendation list generated with varying   songs listened to by friends are bolded 

discussion
the results show that both the basic user based
and item based approaches of collaborative filtering
significantly increased the recommendation accuracy 
the settings of  and q  especially q  played an
important role in the results  it shows that the
locality of the scoring function  i e  how much we
emphasize users or items that are relatively more
similar  is critical in the performance of the
algorithm 
besides  how we model similarity also affected
the relative weight among different similarities  by
changing parameter   we actually changed how we
model similarity  the user based approach with play
count similarity does not give a good result because
the similarity model is highly biased to the few
songs that are played multiple times 
conclusion
in our study  our user based and item based
music recommending algorithms significantly
improved the recommending accuracies as compared
to the baseline approach using solely popularity of
songs  both of the algorithms can be applied in
music related services to provide users with more
pre selected options according to their listening
history  we also combined the element of social
networking into the user based algorithm so that it
can be easily applied to social network based music
recommending mobile apps or websites  those
features will help make contributions improving user
experience and saving users time 
when computing similarity with play counts 
we did not obtain as good result as we expected due
to calculation noise generated by a few very popular
songs  we also approached the content based
strategy through performing clustering for music
pieces a user had listened to based on pair wise
euclidean distance similarity computation  however 

we did not finish this section due to technical
limitation on large scale data computation and time
constraints  further work can be done in
implementing content based filtering 
our work has implemented the main aspects
of music recommendation system  we improved our
project by adding innovative social component based
on the idea that users might be interested in friends
listening habit and people with similar tastes tend to
build friendship  our work can be potentially
utilized by social music service provider to increase
user satisfaction and boost their user group by
attracting friends of existing users 

references
    t  bertin et al   the million song dataset  pro
c  of the   th international society for music inform
ation retrieval conference       
    f  aioilli  preliminary study on a recommende
r system for the million songs dataset challenge 
ecai   workshop on preference learning  proble
ms and applications in ai       
    b  mcfee et al   the million song dataset challe
nge  proc  of the  th international workshop on ad
vances in music information research       
   su  x et al   a survey of collaborative filtering te
chniques   advances in artificial intelligence       
    sparse matrices
http   docs scipy org doc scipy reference sparse html
    mahiux ellis     
http   labrosa ee columbia edu millionsong tasteprofi
le

fi