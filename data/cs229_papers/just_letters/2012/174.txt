training intelligent stoplights
thomas davids  michael celentano  and luke knepper
december         

 

introduction

traffic is a huge problem for the american economy  in       the average american commuter spent    hours stuck in traffic    some of this is simply due to too many cars on the
road  however  much of this delay is caused by inefficient stoplights  imagine if stoplights
were intelligent  if they could look at incoming traffic in every direction  and make the best
decision in order to minimize the delay for all drivers  our project attempts to do exactly
that 
to model the road  we use the intelligent driver model  first developed in      by treiber 
hennecke and helbing    it models the behavior of individual cars in traffic with the formula
dv
 a  
dt



v
v 

 




s   v   v  
s

   


where s   v   v     s    v t   v v
  we use the parameters v        t        a        
ab
b         and s       our traffic simulator models a grid of streets in a city  and generates
cars with a fixed probability of appearing which behave according to this model  our model
has stoplights at each intersection to control traffic  and it is these stoplights to which we
apply our learning algorithms 

 

baseline

as a baseline algorithm  we used stoplights which waited    seconds before switching  they
would then spend   seconds in the yellow light phase  leading to intervals with a period of
   seconds  while obviously very rough  this algorithm provided an estimate of how a basic
stoplight might behave  and a useful goal for us to try to beat  when running a simulation
using these stoplights  the average speed for cars in our city was         meters per
second 
 

schrank  lomax  and eisele  texas transportation institute  ttis      urban mobility report      
treiber  hennecke  and helbing  congested traffic states in empirical observations and microscopic
simulations       
 

 

fi 

cs         

 

continuous state mdp

   

algorithm

our first approach involved implementing a continuous state mdp  in our algorithm  each
light learns and makes decisions independently of the others  with any correlation between
their decisions arising only through their responding to the same road  for the sake of
simplicity  each light will only consider information describing the two roads meeting at its
location  in particular  the state space any given light considers is parameterized by the
following variables 
 a   dimensional vector s  with s  the number of cars on the vertical street  s  the
average of their instantaneous speeds  and s  the sum of their instantaneous speeds 
components s  through s  contain the same information but for the horizontal street 
 a variable l       describing the state of the light  the possible states of the light on
the horizontal vertical street are red green and green red  corresponding to l       
respectively 
the set of actions a light can take at any given point in time  described by the binary
variable a  are to not change  a       or to change  a       we require that a     for five
simulation steps after the beginning of the state either being in state red green or green red
to avoid potentially erratic behavior  this design decision was made preemptively  prior
to any observation of such erratic behavior arising from our algorithm or indication that it
would 
a discount factor        was used 
the reward function r s  was given by the average speed of cars on the two roads meeting
 
at a given light  more precisely  r s    ss    s
 s    thus each light tries to maximize the average speed of lights on the two roads it sees  even though the ultimate goal is to maximize
the average speed across all streets  if the streets are empty  the average speed is undefined 
so we set r       this is a high value because empty streets suggest efficient flow of traffic 
to approximate a state update function  we sought a deterministic model in which st    
a  st   b  a where a is a      matrix and b a      matrix  because we expect the update
rule to depend upon the state of the light l  we would like to include this information in our
model  but because l acts as an index of light states  it is unlikely that the dependence of
our model on l is linear or can be expected to follow a simple mathematical relation that
could be reliably applied to several scenarios  thus  we seek not one update matrix a and
one matrix b  but   such matrices a    anda  and b    andb    we will apply each matrix
depending on what our light state is at any given moment 
we find  al   and  bl   by running linear regression on training data containing states in
which both the light switched and the light did not switch  when the light does not switch 
the training examples are of the form  st  st      when the light does switch  the
training data is of the form  st  st      we attempt to predict the state five simulation

fics         

 

steps in the future because a switch of the lightfrom red green to green red or vice versatakes five simulation steps  during which one of the lights is yellow  we do this because a
light will decide to switch because of the benefits in being in the opposite state  red green
or green red   not to be in the state red yellow or yellow red which it must endure to
get there  attempting to predict each of the five intermediate states could compound the
inherent inaccuracies in our predictions  preventing the foresight required to realize the potential future benefits of a switch  we decided use this approach after an initial attempt to
predict even the red yellow and yellow red states led to lights which never decided to switch 
finally  we sought a value function of the form v  s    t  s for  a      vector  as with
the update matrices al and bl   we find two vectors       corresponding the the different
values of l  thus  v  st     lt  st where the light state of st is l  these s were found
using fitted value iteration  treating l        separately 

   

results

the implemented algorithm resulted in enormous car build ups because the decision to
switch was rarely made  our initial attempt to address this was discussed briefly above
and involved predicting the state five simulation steps after a switch was made instead of
the state on the following step  this change increase the propensity of lights to switch  we
identified two further problems that may be preventing our algorithm from working 
 the failure of lights to decide to switch may result from their inability to notice the
benefits of switching  potentially because they cannot accurately predict the state of
the road after a switch  this may result from biases in our training data  in particular 
time steps in which a switch is made are far less common than time steps in which a
switch was not made  even in an optimally functioning traffic light system  thus  our
linear regression to find al and bl will value accuracy on predicting the outcomes of
not switching far more than accuracy on predicting the outcome of switching 
 because continuous mdps cannot be guaranteed to converge in general  it is possible
that the parameterization of the state space and value function we chose did not allow
our algorithm to converge 

 
   

linear regression
algorithm

our second approach involved implementing a linear regression algorithm  our feature
vectors x i  consisted of seven elements  the number of cars approaching the light on each
street  the average speed of those cars  normalized by the speed limit   and the average
squared speed of those cars  normalized by the square of the speed limit   as well as a
binary variable that was equal to one if the light decided to switch  and zero otherwise  a
seven dimensional weight vector  was also stored  and the value of t x i  represented the
prediction of the average speed of the system after a given number of time steps  this value
would give the decision  if the value was higher for the switched state than the constant
state  the light would switch  otherwise  it would remain constant 

fi 

cs         

the weight vector was learned using stochastic gradient descent for linear regression  we
used the formula


        y  i   h  x i    x i 
with parameter          and h  x i      t x i    this updated value of  was then used to
make the decision for the next step of the light 

   

results

after running our algorithm through             time steps  we converged on a value of  of
approximately


      
        


        


        


        


        
      
where the elements represent  in order  the number of cars on the street which is currently
green or will be green soonest  the normalized average squared speed on that street  the
normalized average speed on that street  the normalized average speed on the perpendicular
street  the normalized average squared speed on the perpendicular street  the number of
cars on the perpendicular street  and the binary variable indicating whether a switch has
just occurred 
while being run  this algorithm increase the total average travel speed  total distance
traveled by cars in the system divided by total time traveled by cars in the system  by
       meters per second  more impressively  however  when these weights were hardcoded and used to run make the decisions without learning  this algorithm increased total
average travel speed by up to        meters per second 

 

conclusion

while it was disappointing that our fvi algorithm failed to converge  the results of our
linear regression are very encouraging  saving over   meters per second on a baseline of   
meters per second is a very significant gain  furthermore  this algorithm  once learned  can
be applied on a very basic level  a light simply needs to use the available information to
make a decision  and no new data needs to be collected 
a couple of options are available for future steps  one interesting option would be to experiment with a different number of features  using a larger feature set would probably improve
the model  but a smaller feature set might better approximate real world situations  when
a light might only know whether at least one car is waiting at the light 
another option would be to use some method to discretize the data  as mentioned before 
some of our problems with the fvi algorithm came from the fact that continuous fvis are

fics         

 

less reliable than discrete ones  if we were to use a clustering algorithm such as k means
to model the state space as finite  this would improve that method and hopefully open up
a whole new set of options 
overall  although we suffered some setbacks along the way  we are very optimistic about
the results of this project  although there remains a lot of work to be done before it is
ready to be put into practice  we are hopeful that methods such as these could eventually
cut into some of those    to    hours spent in traffic 

fi