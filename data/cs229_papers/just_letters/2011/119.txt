incorporating weighted clustering in  d gesture recognition
john hiesey
jhiesey cs stanford edu

clayton mellina
cmellina cs stanford edu

zavain dar
zdar cs stanford edu

december         

 

introduction

we expand and improve upon the hidden markov model algorithm  khmm  presented in klingmann
    to improve identification of  d gestures on mobile devices  specifically  we extend the algorithm to
include a a weighted probability measure for clustering fit  as well as expand our feature space to use
gyroscope information  which is available on most mobile devices today  this gives nontrivial gains in both
robustness and accuracy in  d gesture recognition over klingmanns initial implementation 
we alter khmms clustering assumptions  specifically  we address the implicit assumption that clustering centroids remain uniform across gesture types  by assigning to each gesture type a unique set
of centroids we make significant and immediate gains  we derive two alternative algorithms to test our
hypotheses  denoting them cluster matching hmm and cluster matching 
there are a variety of reasons why we use gyroscope information  firstly  gyroscope data is additional
information that is useful for identifying gestures  especially considering that slight variations in the devices
orientation from gesture to gesture will affect accelerometer readings  these variations  however  can be
corrected for with judicious use of gyroscope data  we hypothesize that a machine learning algorithm will
be capable of utilizing the data to effectively make these corrections  thereby resulting in better orientation
invariance  secondly  if we wish to use  d gestures as an input modality for mobile devices  inclusion of
gyroscope information offers opportunities for greater expressiveness  gestures can now include and be
differentiated by orientation changes 
on a pragmatic note  we develop and test on the iphone platform  although our solutions have general
applicability  and an available matlab implementation  the iphone is chosen amongst our team as two of
our members have previous iphone development experience 

 

data

as with any learning algorithm we require to have some data available  we use apples iphone and
xsensor application to record  train and test our various algorithms  for each training example for any
gesture type xsensor returns to us an ordered series of vectors in rn containing instantaneous acceleration
and gyroscope data sampled at    hz  for the most part we normalize each training example by scaling
each vector in the training example by p nkxn k   where the training example consists of n instantaneous
n
feature vectors 

 

algorithms

we now discuss the three main algorithms that we examine and analyze  starting first with klingmanns
baseline khmm  followed by our cluster matching hmm and cluster matching alterations 

 

fi   

khmm

khmm uses k means clustering to discretize the space of real vectors followed by training one hidden
markov model for each gesture type  the intuition behind this can be thought of as follows  the clustering across all gesture types serves mainly to project each data vector which is in rn  where there are n
features  to z    concretely  this discretizes the data uniformly regardless of what gesture type it belongs
to  following the discretization khmm then trains a hidden markov model of the discretized training
sets for each gesture type 
formally we describe the algorithm as follows 
     

clustering

for all training examples across all gesture types  running k means on all of the training data simultaneously defines a single clustering function f   rn  z   
     

hidden markov model

for each set of training examples for each gesture type  train a hidden markov model  namely in this
k
stage  for each gesture type g  we generate a function hg    z     r      by the hidden markov model
k
process  hm m    z   t  hg   where each training example consists of k instantaneous data points and
there are t training examples for gesture type g 
     

classification procedure

to classify an unknown gesture example  which exists in  rn  k   we first transform it to its discretized
version  namely f  rn  k and then for each gesture type g  apply hg   f  rn   k   and classify the example
according to the g were hg returns maximum probability 

   

cluster matching hmm

the motivation for cluster matching hmm derives from the realization that in the clustering step
khmm applies the same centroids to each training example regardless of what gesture type it belongs to 
we hypothesize that different gesture types have vastly different vector features score  i e  lie in different
subspaces of rn   and thus we might gain information by clustering each gesture type independently and
then training an hmm for each clustered training type  in the classification step we then classify over each
clustering and each corresponding hmm  moreover we weight the resulting hmm probabilities according
to how well the training example fits in the the assigned cluster 
formally we describe the algorithm as follows 
     

clustering

for each gesture type g across all training examples  running k means on all of the training data from
for one gesture only defines a clustering function fg   rn  z  for each gesture type 
     

hidden markov model

for each set of training examples for each gesture type  train a hidden markov model  namely in this
k
k
set we generate a function hg    z     r      by the hidden markov model process  hm m    z   t  hg  
where each training example consists of k instantaneous data points and there are t training examples for
gesture type g 

 

fi     

classification procedure

to classify a new example  which exists in  rn  k   we first transform  for each gesture type g  the training
example to its discretized version  namely fg  rn  k and then apply hg   fg  rn   k    finally  we classify the
example according to the g   where hg   p  fg   k   returns the maximum value  here p is a fittness value
of how well the training example fit into the given clustering  namely we used an aggregate sum of the
distances of the training vectors to their respective assigned centroids  thus not only does each gesture
type receive its own hmm but also its own clustering 

   

cluster matching

motivated by the effectiveness  of cluster matching hmm we define cluster matching to naively cluster the training examples for specific gesture types  then  when classifying  we assign an unknown gesture
type to the gesture clustering to which it best fits 
formally we describe the algorithm as follows 
     

clustering

for each gesture type g across all training examples  k means defines a clustering function fg   rn  z   
     

classification procedure

for all g  compute p  fg  rn   k    return g that returns minimum value 

 

results

we tested our algorithms  on six datasets  circles  with the phone held relatively flat   triangles  with
the phone held similarly   bowling motions  flicking the phone upward  and flicking up and to the right  the
last set  used only in a few tests  consisted of squares  these datasets all include gestures of deliberately
variable quality  some are carefully controlled  and others less so 
normalization
yes
yes
no
yes
yes
yes
yes
yes
yes
yes
no
yes
yes
yes
yes
 
 

features
both
both
both
accel
accel
gyro
gyro
both
both
both
both
both
both
both
both

gestures types
all
all
all
all
all
all
all
all
all
all
all
squares and triangles
circles and reversed circles
circles and reversed circles
circles and reversed circles

see results 
all code available at https   github com jhiesey gesturerecognizer

 

algorithms
cluster matching hmm
khmm
khmm
cluster matching hmm
khmm
cluster matching hmm
khmm
cluster matching     
cluster matching     
cluster matching     
cluster matching     
cluster matching     
cluster matching     
cluster matching hmm
cluster matching hmm

    

    
    

    
    

accuracy
     
     
     
     
     
     
     
     
     
     
     
    
chance
     
     

fi   

choice of features

in general  the highest accuracy is achieved when using both accelerometer and gyroscope data  followed
by gyroscope data only  followed by accelerometer data only 
for example  using cluster matching hmm  both accelerometer and gyroscope data together achieves
      on all gesture types  followed by gyroscope data only at        and accelerometer data only at
       the same general pattern is evident in the khmm data as well 
as we could not find any examples of using gyroscope data for gesture recognition in the literature 
this seems to be unique way of improving gesture recognition accuracy 

   

clustering approach

our initial approach of clustering on all training data together worked reasonably well  when running
on all   sample gestures and with the hmm enabled  we got an an accuracy of       
however  on the same data  our cluster matching algorithm combined with an hmm reaches      
accuracy  we also observed similar improvements with other examples  as seen in the data 

   

hmm

although we found a few examples where the cluster matching algorithm benefits from using a hidden
markov model  in most real world examples there is little benefit  when running on all of the training
data  we found that adding the hmm actually decreased accuracy slightly  from       to        which
may be due to random fluctuations 
however  when comparing the data for circles to our contrived data set consisting of the first and
second halves of each circle switched  then using an hmm with alphabet size of    improved the results
from chance to        unfortunately we could not get such dramatic improvements with any non contrived
data 

   

number of symbols

increasing the number of symbols in the hmms alphabet improves accuracy up to a point  but at the
cost of a decrease in performance 
as shown in figure    the optimum accuracy is
achieved at an alphabet size of around    symbols 
with gradually decreasing accuracy outside of that
range 

   

normalization

in general  our normalization makes only a
small difference  with the khmm algorithm we
saw an improvement of less than      in accuracy 
and we saw no detectable difference using clustermatching 

 

future research

we see a variety of promising avenues for the
future development of cluster matching  more
work needs to be done to assess the scalability
figure   
classification accuracy of clustermatching hmm for   gestures
 

fiof our method  although the outlook is promising  current literature on accelerometer based gesture recognition usually reports classification results for   to   gesture types  we believe that
our method has the potential to scale to more gesture types given our current results  our technique
currently incorporates centroid distance and hmm
log likelihood scores heuristically by simply multiplying them before classifying  it is likely that a more principled method of combining centroid distance
and hmm loglikelihood   one possibly incorporating the data itself   will yield better results  this becomes
especially important for gestures in which one component of the classifier performs significantly better than
the other  lastly  future work should address the possibility of using cluster matching for automated segmentation of continuous accelerometer and gyroscope data  current proposals use only heuristic methods
and do not incorporate the trained gesture classifier  e g  prekopcsk demonstrates the feasibility of using
a speed threshold to detect the onset of a gesture  hmms do not provide an obvious means by which to
use them for segmentation  as they will readily assign log likelihoods to sequences of any length      we
suspect that cluster matching can be computed over a sliding window on the data stream  providing a
means by which to determine when a sequence of samples is being fit well by a subset of the clusters of
one of the gesture cluster sets 

 

conclusions

we thus show non trivial gains in accuracy with resect to our baseline classifier khmm  these gains
are accrued not only through the collection of a new set of features using gyroscope data  but also through
our novel algorithms cluster matching hmm and cluster matching  interestingly enough it appears that
erven though we are classifying sequential data  simply assigning cluster fitness scores to all the vectors in
a gesture example  regardless of sequential order  returns the most accurate classifiers  in fact  the only
times when this is not the case is when we synthetically manipulate the data files to purposely break our
cluster matching classifier  however  we could not mimic this break case using actual gesture data  we
are thus confident in the ability of cluster matching to accurately classify real human gestures  regardless 
we hope to have pushed forward the study and field of gesture recognition  not only by presenting classifiers
with high accuracy  but also through the presentation of a new cluster based paradigm of classifiers 

references
    klingmann  marco  accelerometer based gesture recognition with the iphone  masters thesis  goldsmith university of london       
    wu  jiahui and pan  gang and zhang  daqing and qi  guande and li  shijian  gesture recognition
with a   d accelerometer       
    zoltn prekopcsk accelerometer based real time gesture recognition       

 

fi