learning analytics
austin gibbons
december     

  introduction

course at stanford university  we used a sample of
   students from the same quarter who submitted all

computer science educators are faced with the trade 

ve assignments  when the student develops  every

o between the amount of time available and giving

time they compile their code  a copy of the   java

students individual attention 

in many classrooms 

les are sent to an external server  this allows us to

particularly in the k    grades  it is not possible for

observe the development process of a student as they

a single instructor to give as full of feedback to ev 

build their code 

ery student in an entire classroom as they would if

in order to model the progression of a student

they were teaching in a one on one setting  we hope

throughout the class  we took the individual features

to develop tools to automatically detect the evolu 

and chose some aggregating functions to represent

tion of student programming methodology over an

the student s changes across the program 

entire computer science course  and thus oer a way

quired some exploration of dierent features 

to quickly characterize the progression in programing

condunceted a preliminary study over commenting

style of a student that instructors can use to provide

features  and we observed that just summing the

feedback  assistance  and swiftly target the specic

changes across submissions was insucient to sep 

needs of their class 

we are specically interested

arate the students  and that generally an individual

in studying novice level programming courses due to

metric was insucient to fully capture the patterns

the abundance of data  the large and general applica 

we would later observe  we found a good represen 

bility of the study  and to capture more fundamental

tation of the changes to be the average the feature

ground truths of programming education versus the

was changed  average   the largest dierence between

many inuencing factors that enter at the higher level

any two submissions  range  and the total number of

computer science courses 

times a feature changed between submissions  count  

this rewe

we then created the  average  range  count  tuple

  data

for each feature  thus creating a new feature list for
each student that includes these aggregations for several consecutive projects the student built 

this work extends from work by piech et al    
which analyzed patterns in single java project 
ing the data les from that work 

  feature selection

us 

our goal was

to do a similar analysis over the progression of
the class by analyzing projects the students de 

part of the challenge in performing analysis in stu 

veloped from week to week 

we choose to ana 

dent code is ensuring that our ad hoc assumptions do

lyze checkerboardkarel java  pyramid java  break 

not limit the scope of the investigation  as part of

out java  hangman java  and yahtzee java  these are

the study  we needed to perform feature selection to

signicant implementation les from the rst ve as 

make comparisons across specic aspects of students

signments for cs   a  the introductory programming

code 

 

for example  our intuition may tell us that

fithere will be a strong relationship between the number of

if

else

statements and the number of

and

state 

         comments versus prediction on if stateelseif   else  switch  and case statements 

ments 

ments as the latter requires the former  but it may be
that for some assignments  many students choose to
use

switch

statements instead  to address the ques 

tion of which features are rightly coupled  we attempt
to form classication over a subset of the features and
determine if we can correctly classify an external feature  the canonical approach would be to compute
the conditional probabilities and nd strong correlations  but as a machine learning exercise we took a
dierent approach 
as part of our development  we built a classication system to address the following question  given
student grades as labels and the features we have collected  can we predict students  grades without ever
looking at their code 

unfortunately  we were not

given permission to access student grades in sucient

we can make several conclusions   rst note that

time to execute this study  as we had to appeal to

i have chosen the assignments from weeks       and

stanford s human subject research institutional re 

  of stanford s introductory java course  the assign 

view board for access to sensitive information 

we

ments from earlier weeks did not have enough usage

shelved this project for next quarter  but instead

of these feature to warrant comparison  we can see

asked can we predict feature characterization from a

the general increase in performance of our prediction 

subset of the total features   to this end  we pigeon 

and this is derivative of the increased number of lines

holed students into being a frequent or infrequent

of code in the assignments as the students struggle

and awarded labels

 

and

 

respectively 

we then

with more complex concepts 

conducted experiments over dierent combinations
of features to determine which were good predictors 
we tried several classiers  we found the linear rela 

we can further deduce that there is a relationship

tionship between some features caused non positive

amongst our randomly chosen features  but it is not

denite covariance matrices for quadratic classiers 

as pronounced as the relationship amongst features

so we used a linear classier to be able to analyze all

we suspected would be related  the second set of bars

of the feature subsets in which we were interested 

pertaining to branching statements   we can observe

while the prediction rates are not high enough to

the introduction of switch case statements in lecture

make claims of strong predictive ability  we can never 

by the jump in predictive ability from the blue bar to

theless get a sense of good feature selection from the

the red bar  going from essentially random to mean 

predictive ability of our classier 

ingfully high accuracy  in section     we discuss how

we can observe

switch statements in favor

that dierent assignments produce dierent predic 

some students abandoned

tions  and this allows us to better rationalize about

of using

the relationship between individual features  such as

recognize students making with regards to branching

the results in section      

when we observe the

statements increases  we can infer that there is a re 

trends in these sections  we can do so knowing the

lationship between understanding dierent branching

more global relationship between the features we are

techniques and choosing which branching statements

comparing and can account for that bias 

to use from our ability to predict more accurately in

if

statements relative to

print

but here we can see our ability to

light of students more evenly distributing themselves

as an example  we compare the predictive abilities of

elseif  

across the programming methodology 

statements

 

fi  programming methodology
analysis
we elect course assistants from the class as domain
experts to assist in the analysis of the data  given
our list of features  we perform k means clustering
on the students  and have the domain experts perform manual analysis on the cluster centroids 

we

tried dierent cut os for the k values and discovered as few as four features already created clusters
with only one or two students  this is indicative that
there were only two or three main cluster bodies  so

we can observe a natural progression in the matu 

we conducted analysis at two  three  and four clus 

rity of the commenting style as more students aban 

ters  we made the simplifying assumption that the

don the idea of writing all their code and entering all

feature centroid was representative of the members of

the comments at the end  checkerboardkarel being

that cluster  this may not be perfectly true  and is

the exception as the students had not yet had any

something we are investigating  but an ad hoc anal 

feedback about commenting procedures  so many did

ysis of the features saw this to be generally true  by

not add to the comments  some were written into

observing the size of the clusters and the feature cen 

the assignment by the class sta   

troids  our domain experts were easily able to real 

tionally see an increasing preference for using inline

ize the underlying patterns of student programming

comments  these are used especially for bookkeeping

methodology 

data  and get changed often throughout the program

we can addi 

we performed this analysis on the comments the

with few of them making it into the nal write up 

students added to get an estimate for the documenta 

and many only persisting as the programmer devel 

tion practices  and the java code they wrote to get an

ops 

estimator for the amount of code written  we took

morph some of their inline comments into block com 

our clusters and found the centroid  and stated that

ments  usually as method headers 

empirically  we can see that students tend to

this was the pattern that each student who fell into
this cluster used in their program  we then used the
relative sizes of the clusters as an indicator for the
number of students who programmed this way  we

   

performed analysis of the centroids without revealing
the number of students in each cluster in order to

mirroring our comment features  we also cluster by

avoid pushing the results in a desired direction 

   

lines of code

using the  average  range  count  of lines which are
not comments  namely lines which are java code  we

comments

perform a comparison aimed at separating tinker 

we count the number of dierent comment lines     

ers from planners  the former preferring trial and

        and use this as a feature set 

error  and the latter having a preference to have a

these features

give us an indication of the preference for block com 

more detailed plan before they begin coding 

ments  line comments  and commenting frequency 

classify the students as performing large batch up 

we

some interesting patterns that arise in the are

dates  small updates  incremental updates  and updating dynamically  a student can t into multiple

   how the frequency of students who comment all

categories  for example updating in small increments

at once  batch update  changes

versus batch increments 

we observe several inter 

esting trends in this model 

   students who use line comments for bookkeeping

 

fi   

if else versus switch case

we can also observe how students respond to new
topics  for example  they were exposed to the idea
of a switch statement in lecture before the breakout assignment  and after getting feedback on its use
from the graders  many more adopted it in hangman  we can see that its use dropped o in yahtzee 
showing that while many students did prefer it  some
did reject it after their experimentation 

by ana 

lyzing the specic students in each cluster  we can
survey the students asking why they abandoned using switch statements in favor of the usually messier

it is important to note that checkerboardkarel

if else chaining  this provides educators with more

and pyramid both have generally much smaller sub 

specic and targeted feedback  and will let them ad 

missions  as they are much shorter assignments 

just their teaching style to accommodate the needs
of specic individuals  we can observe this trend by

the increase in total line count dierence  batch 

looking at the ration of students who use

noticeably increases with each submission  the pro 

switch case

grams themselves are not increasingly large projects

if  else

  

easily 

as to require that much more code  but rather this
is indicative of the conceptual challenge the students face   as young programmers they often require unnecessary verbosity relative to what an experienced programmer requires to solve the same problem  they are required to handle increasingly complex data structures and increasingly complex algorithms and this is represented by their increase in
verbosity  as many students chose naive and lengthy
solutions over concise solutions  for example  many
students in creating yahtzee wrote long and inecient methods to perform nding three of a kind  four
of a kind  full house  small straight and long straight 

   

failing to recognize the simpler solutions for nding

matchn of akind  

and

matchstraight   

while loops versus for loops

as another example we can see the introduction of for
loops in the second assignment  and the quick stabi 

additionally  observe that students who code in a

lization as students realize that both

while loops and

dynamic way  many more commits relative to the

f or

size of the commit  initially jumps at the rst large

shows is how to infer information not just about stu 

project breakout  and then decreases as the quarter

dents  but also about your assignments  when stu 

progresses  this may be representative of an increase

dents demonstrate a mastery over simpler topics  it

in programming skills  as the students need to use less

is a larger statement on the problem set than the stu 

trial and error  additionally  we observed an increas 

dents that the fth assignment involved many more

ing trend in the frequency and size of code deletion 

students using a large amount of

which is indicative of students recognizing good de 

over the ve dice and the thirteen scoring categories 

composition and code reuse when they re factored

performing this analysis over the full set of features

their code as part of their style grade 

allows an instructor to check his expectations of the

 

loops are valuable  what this graph additionally

f or

loops  itearting

fiprogramming assignment in addition to what the stu 

technologies lab  the author conducted his experi 

dents are learning  note that this graph counts stu 

ments independently  he would like to thank profes 

dents who use a large number of

f or

loops and

while

sor paulo blikstein  marcelo worsley  mustafa saf 

loops as having chosen to use both 

dari  and tarun vir singh for their feedback on his
ideas and progress 

references
    chris piech 

mehran sahami 

daphne koller 

stephen cooper  and paulo blikstein  modeling
how students learn to program       

  conclusions   inference
the most important thing to infer from this study
is the simple ability to automate qualitative analysis 
we hope that other researchers may nd success in
running the same methodology over their own students code  even if they observe dierent trends 
we hope that we can accurately characterize the
relationship between features and oer insight into
the programming paradigm shift the student body
takes as they learn new programming tools 
we believe these education analysis tools will allow educators to target the individual needs of their
students and oer the ability to assess which students are retaining the material 

we can provide

educators with specic students who chose dierent
programming methods  and this enables the instructor to get specic  targeted feedback  we additionally hope that the results oer educators of introductory programming classes a solid model of the typical
progression a student body takes  so that they have
something other than an ad hoc evaluation of their
own teaching methods 

  acknowledgments
this work was done in conjunction with the learning analytics group in the transformative learning

 

fi