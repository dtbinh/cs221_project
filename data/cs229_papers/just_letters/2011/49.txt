football futures
adrian sierra
vigilante

james fosco
tinman

carlos fierro
sleeping tiger

  introduction
the emergence of online fantasy sports since the mid     s and a continued growing
interest in sports handicaps for betting purposes have shown the significance of
accurately predicting the outcomes of sports games  traditional methods for predicting
sports games uses several features to predict future games  assigning a point spread to
provide input on the outcome  popular free oddsmakers set the line to keep an equal
number of bets on both sides with limited features  private methods with more features
that are given different weights would prove more effective and more accurately predict
game outcomes without any adjustments by oddsmakers 
the difficulty of predicting game outcomes is the assembly and analysis of game
statistics  player statistics  and other features in a meaningful way  also  this data must
consistently be analyzed and updated after each new game to more accurately predict
upcoming games  a system that analyzes freely available game data and can be updated
efficiently to make predictions would prove useful for those interested on the outcome of
an upcoming game 
in this paper  we explore the use of machine learning to process  weigh  and interpret
game statistics to correctly predict game outcomes  our work will focus on only one
sport  nfl football  but a similar approach for interpreting game data can be used for
other similar sports  we will attempt for predictions to be competitive with professional
sports bettors and test our data on several algorithms  svm  linear  polynomial  and
radial basis function  and logistic regression  including locally weighted  

 

game predictions

   

training data

given an upcoming game  we need to be able to predict the winning team and losing
team  to do this  we needed training data related to both teams past performance on
individual games  this data was obtained freely from espns game stats website  http   
espn go com   box scores provided valuable game by game data and individual statistics
for each game 
manual input into correct matrix format for matlab is something we wanted to avoid 
to do this we scraped each games box score web page and stored the features in a
nicer table format using mysql  this was automated using shell script  gawk  and
python to do some initial parsing  our script allows us to specify a year and receive all of
espns game data for every game in that year  espn has game data dating back to     

fiin a convenient format  which gave us a sufficiently large data set to train and test our
algorithms on  additionally  the automation of scraping online data proved valuable for
updating our learning algorithm and in saving time gathering data  fast data collection is
as necessary as a strong algorithm so that it can be used quickly and easily 
once we had the box score site for a game  we then created an html parser in python
to parse and write the data into an easier format for our database  this database will
allow us to manipulate our nfl data quickly and efficiently  and allows for us to make
individual queries over the data to try to find additional patterns  taking the difference 
average  and other important values is much easier by using database queries wrapped in
python 
   

features

training samples collected include the following features and facts on a per game basis 
team one
team identification
 team id
 name
 city
game identification
 game id
 season
 week
turnovers
 fumbles
 interceptions
red zone
 made
 attempted
penalties
 number
 yards
st
  downs
 total
 passing
 rushing
 penalties
game statistics
 total plays
 total yards
 non offensive tds
 possession time

team two
team identification
 team id
 name
 city
game identification
 game id
 season
 week
turnovers
 fumbles
 interceptions
red zone
 made
 attempted
penalties
 number
 yards
st
  downs
 total
 passing
 rushing
 penalties
game statistics
 total plays
 total yards
 non offensive tds
 possession time

  machine learning algorithms

fiinitially  we ran linear support vector machine  svm  on the data from the      season 
to test the algorithm on our data we trained the algorithm on the games from weeks   to
   and then put each teams average performance over the first   weeks into the match ups
that occurred during the   th week  this basic case gave us       accuracy  correctly
guessing the winner of         games on average  this accuracy shows that even our
initial algorithm has a statistical advantage over random guessing  however  while its
better than guessing  we need to be able to beat typical calculated odds in order to turn a
profit  this means we will have to beat about a     accuracy rating 
to improve accuracy  we tried to manipulate our features in a number of ways  for one 
we found that our initial way of training on specific game data and testing with a teams
average game data gave results with extremely high variance  often going down below
a     prediction rate on some weeks  to fix this  we tried normalizing our data so that
every feature had values between   and    which helped marginally  however  the major
change came with a larger overhaul of our features 
first  we collected more data  so that in total we had games from years             and
      then we made each training sample contain the average of a teams stats over
their past   and    weeks  to account for the most recent performance of that team  this
also enabled us to actually test on the same type of data that we trained on  giving more
consistent results 
with this method we achieved an average prediction rate with linear svm of about
                 on each week of       interestingly  using the   and    week game
histories did not make much of a difference at all  additionally  using  nd and  rd order
polynomial svm actually lowered our test results to                  and             
      due to over fitting  there was   training error  
to improve our prediction rates  we also decided to manually remove major upsets from
our training data  in order to get an overall better success rate  we had to accept that its
often nearly impossible to predict certain outcomes  so these outliers were removed  this
managed to boost our linear svm predictions to an average of                  

training error

test accuracy

best week

worst week

 

 

random

 

      

logistic
regression

 

      

     

   

      

      

      

      

linear svm

fipolynomial
svm        

  

      

      

      

rbf svm

  

      

      

      

analysis and conclusions
espn expert results of      season  through week    
name

accuracy

games

allen

      

       

golic

      

       

hoge

      

       

jaworski

      

       

mortensen

      

       

schefter

      

       

schlereth

      

       

wickersham

      

       

accuscore algorithm

      

       

in comparison to espns experts and espns accuscore algorithm  our best solution
 using linear svm  performs at as least well  specifically  it performs on par with
even the best of the expert picks  as well as with the accuscore algorithm  given that
espns experts are paid to analyze and predict football games  we consider this a
success 
our linear svm performed fairly well  with an accuracy of         and did better than
our  nd and  rd degree polynomial svm  over fitting the training set was  therefore  a
significant problem that our linear model avoided  furthermore  omitting game statistics
from major upsets that were certainly outliers improved our accuracy  careful data and
feature selection is therefore necessary to avoid over fitting and improve accuracy  other

fialgorithms that performed worse used a large number of features and included all past
season data to make their predictions 
possible areas of improvement include using more features  including defensive statistics
for each team  our current feature set only includes non offensive touchdowns  and
therefore cannot get a comprehensive understanding of a teams overall performance 
this resulted in a sub optimal evaluation of teams with a better defense  weighing our
algorithm toward offense heavy teams 

references
   beating the ncaa football point spread  http   cs    proj     liulaibeatingthencaafootballpointspread pdf
   http   www mathworks com help toolbox bioinfo ref svmtrain html
   espn nfl expert picks
http   espn go com nfl picks
   espn football scores
http   scores espn go com nfl scoreboard

fi