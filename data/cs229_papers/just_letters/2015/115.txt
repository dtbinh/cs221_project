cs     final project 
divergent recommendations for yelp users
sigberto alarcon viesca  christopher heung  shifan mao

abstract

date   date  formatted like            
 

the objective of this project is to make a recommendation
for a yelp user that is significantly different from what the
user has tried in the past  we refer to such recommendations
as divergent recommendations  for this goal  we leveraged
machine learning methodologies and used various regressionbased models and collaborative filtering to predict ratings and
user restaurant similarity  by combining these two predictions  we made  divergent recommendations  based on user
and restaurant profiles  in addition  we implemented methods
in solving constraint satisfaction problems  csps  to ensure
the diversity of recommendations 

 

introduction

 

relevant past work

current recommendation systems typically produce a list of
recommended items based on two approaches  content based
filtering and collaborative based filtering      in particular 
collaborative based filtering is based on collective rating history of many users  it then predicts whether a user will like
a particular item based on their similarity to other users          such recommendation system has been popular in industry  such as the item to item collaborative based filtering used
by amazon and last fm      however  one major assumption
of such recommendation is that users future behavior will
be consistent with his previous preferences  in the scope of
our work  a  divergent recommendation  system will recommend businesses that are significantly different from users
past visits  therefore  when considering similarity between
users  the difference between businesses also becomes an important factor for generating recommendations  by recommending a very different business that a similar user rated
highly  the recommender allows the user to explore new experiences with a minimized risk of not enjoying them  this
feature is the major distinction between this work and previous recommenders 

business review sites like yelp have become commonplace in
peoples daily decision making  it is normal for potential customers to consult star ratings and other user reviews before
deciding to eat at a restaurant  yelp has helped users find
new restaurants for foods that users already enjoy  however 
there are few options for users that want to try seomthing
unlike what they have tasted before 
in this work  we build a recommendation system can give
restaurant suggestions that are highly different than the past
places a user has tried  for example  given that someone like
dominos pizza and pizza hut  a simple recommendation system might recommend patxis or pizza my heart  but one
problem definition
might be bored of pizza and might want to try something  
entirely different  like ethiopian food  our recommender determines the best divergent recommendation given a users     input
history  one that is not only different  but that the user is
we are given a user u who we will make recommendations for 
also likely to enjoy 
and we have all reviews that user u has written in the past 
for a given restaurant i  the yelp data set has metadata about
i  including past reviews  location  categories  neighborhood 
  data
price range  opening hours  and we can find all reviews for i 
i 
our project utilized a small subset of the yelp data set     
which includes     million reviews from         users for
       businesses  in order to create meaningful results  we     problem components
only created recommendations for users who have at least   
reviews  additionally  we only looked at businesses that have we want to recommend restaurants that are divergent  but
at least    reviews  the publicly available data is formatted that the user will still enjoy  we decided to break this probin json  an example of a review object from the data set is lem into two parts so as to make evaluation more tractable
by evaluating each model separately  we then combine the
given below 
subproblems to provide an answer to the main one  the two
review
components of the recommendation system include 
 
   rating prediction
type  review 
business id   encrypted business id  
   similarity
user id   encrypted user id  
stars   star rating to half star  
a visual representation of the problem breakdown is given
text   review text  
by the following flowchart 

fifigure    recommendation flowchart

   

rating prediction

in this subproblem  we want to ensure that the user will enjoy
the divergent recommendation  our goal here is to predict
the number of stars that the user u will give to a restaurant
i  we evaluate a prediction against the actual rating that a
user gave a business 
for our baseline  we calculate the mean review score the
user u has given in the past and predict that score for any
restaurant  this is a lower bound approximation since it does
not customize to the restaurant itself  for the oracle  we use
the training error of our best model rather than the test error
to approximate an upper bound 

   

similarity metric

intuitively  this can be thought of as a weighted jaccard
similarity  these equations define a metric    sim u  i    
that sums over the overlap in the categories of a business ci
and the categories of all businesses that a user has been to
in the past cu and weighs them by the percentage of that
category in the users reviewed businesses ui   even though
this similarity is inherently limited due to the fact that it
is untestable with our data set  it is a useful proxy because
it is positively correlated with whether a user has been to
a business with the same category and how many times a
user has been to that category  notice that sim u  i      iff
ci  cu   ci  cu and sim u  i      iff ci  cu    
however  this similarity metric is only available in a rich
data set  like yelps  we want our model to be applicable to
simpler data sets  so we used this similarity as the label for
training various machine learning algorithms  to maximize
applicability to predict the similarity metric in eqn       we
included the mean and standard deviation of users star ratings  to capture the overlap between users and restaurants
profiles we also included the compiled review texts for the
users and restaurants  we then use these features to predict
the similarity metric  in figure    we show some sample users
and categories 

in this part  we measure the similarity between the user us
past reviews and restaurant i  intuitively  a person whose history is entirely composed of italian and mexican restaurants     output
will be divergent and dissimilar from a thai establishment 
we combine our rating predictor and similarity metric to obtain an overall evaluation of the divergent recommendations 
we define a divergent constant  where        that represents the tradeoff between exploration and exploitation  such
parameter can be a user defined parameter allowing the users
preference between exploration and exploitation of restaurant
choices  specifically  lower  value favors exploitation and a
higher  favors exploration  we define the composite score
as 

   
scorefinal    rat u  i         sim u  i 
 
where rat and sim represent rating prediction and similarity 
respectively  note that we normalize our predicted rating
score by its maximum value  rat    such that it will range
between   and    with this formula  we can compare the
user u against all restaurants i and output the top scoring
restaurants as recommendations for a users particular choice
of  

 
figure    user restaurant similarity matrix 
squares represent higher similarity 

the darker

one of the most significant challenges of our recommendation system is modeling a similarity metric because there
is no single figure in the data set that represents it directly 
hence  we resort to heuristic methods to approximate similarity  as a label for supervised learning  we leveraged the
fact that the yelp data set contains categories for restaurants
 e g   american  new     french    pubs   to define

sim u  i   

k
x

w ck   u 

   

m
  x
w ck   u   
   ck   cl   
m

   

c ci cu  

lui

   

early model
feature selection

in order to run parametric models to learn a good recommendation  we first defined what features to extract and created a
feature vector for each user restaurant pair  from each user
and restaurant  their past text consisted of all the reviews
each has written or received  respectively  for each review 
we used the bag of words approach and found the tf idf score 
we hypothesized that the words people used in the review for
a particular restaurant would be highly reflective of that business 
we also looked at some metadata provided by yelp  each
restaurant has a set of categories  e g  italian  american  and
a set of attributes  e g  price range  good for kids   we can
additionally calculate the mean and standard deviation of
ratings given for a restaurant and for a given users history 
we created   feature sets to test on that consisted of permutations of the above features 

fi   only tf idf
   only metadata
   both tf idf and metadata

   

rating prediction

in addition to these   parametric models  we also applied
user user collaborative filtering  the idea behind collaborative filtering is that if two users both like the same restaurants  then a user is likely to enjoy the next place that the
other user likes  formally  we estimate user us rating of
restaurant i as 

p
using the above feature sets  we formulated rating prediction
s u  u    ru   i  ru   
  n
u
as a supervised regression problem  specifically  given the rep
   
pu i   ru  
 s u  u    
views texts and restaurant metadata  we aimed to reproduce
 
u n
users star rating of particular restaurant  i e  rating predicwhere pu i represents the predicted star rating  ru repretion is continuous  we first applied   different parametric
sents the average review score for a user u and u  represents
models using the scikit learn python library 
a similar user  s u  u    is the similarity between user u and u 
   linear regression
 discussed below   and n is a set of  similar  neighbors  this
formulation accounts for both user bias and similar users bi   support vector machines  svm 
ases of a particular restaurant i 
figure   and figure   shows a comparison of root mean   random forest
squared errors of training and test data sets for different rein particular  random forest regressor is optimized by se  gression models  note that collaborative filtering gives lowest
lecting appropriate number of trees  n      based on the the test error among all models 
choice that minimizes test error  in addition  regression using
support vector machines uses kernel of cubic order polyno    similarity metrics
mial  we choose   fold cross validation to evaluate the performance of the above models on rating predictions based on we measure the distance between any restaurant and any user
the root mean squared errors  rmse  of the test  validation  by taking the cosine similarity of the feature vector computed
set as 
for each  if u represents the tf idf of user u and i represents
the tf idf of user i 
v
n
up
u  i
 
u
   
cos u  i   
 pu i  ru i  
t
  
u      i   
i  
   
rmse  
n
note cosine similarity varies from   and   since tf idf feature vectors have non negative entries  using the combined
feature set including review texts and restaurant metadata 
we computed the cosine similarity and compared to our category similarity heuristic from eqn       the rmse for this
calculation was       

   

result interpretation

with increasing number of trees in rf regression  figure  
shows training and test error decreases initially  we point out
that there exists a large gap between training and test error 
this observations indicates that our regressions models are
over fitting the data due to excess number of features 

figure    training errors of early models

figure    training and test errors of random forest regression
figure    test errors of early models

we concluded that the excess number of features introduced a high noise to signal ratio  in particular  we observed

fithat the bag of words model cannot capture the different     similarity metrics
meanings and context of a qualifier like  very   this has
the potential to add significant noise to our model  this no  because cosine similarity from our early model was trained
tion was supported by the fact that our lowest rmse was with the high noise to signal tf idf bag of words feature vector
obtained from the feature set without tf idf features 
it generated a rather high rmse of        it also had the
disadvantage of being untrainable  instead  we decided to
use various machine learning models with a feature vector
  improved model
composed of the word vec vectorized texts from each userrestaurant pair to predict our similarity heuristic  from eqn 
    feature selection
    
instead of using tf idf  we used the gensim python library 
we apply linear regression  svm  random forest  and
which implements googles word vec  which is fine tuned to
neural networks to learn the similarity metric based on the
learn the relationship between words given their context  we
same feature sets  the below table summarizes the crossremoved the stop words from our reviews  which decreases
validation root mean squared errors of different models  we
the noise of irrelevant words  we also removed noisy parts
also show the true and predicted values of similarity metof the metadata such as the restaurant attributes that are
ric based on random forest of the training and test sets in
sparse  e g   good for brunch    free wi fi   
figure   and figure   
our modified feature sets were 
model selection
   only doc vec
lr
svm rf
nn
sim
train 
err
     
     
     
     
   only metadata  minus attributes 
sim test err
                       
   both doc vec and metadata

   

rating prediction

once more  used linear regression  support vector machines
and random forest regression models to predict users ratings 
to reduce noise from useless features  we also applied a neural
network model that should theoretically filter out unhelpful
features  the layers of neural network model include a layer
of     rectifiers and another layer of linear neurons  using
the new feature sets above  we obtained the following results 

figure    training of random forest on similarity

figure    training errors of new models

figure    test errors of new models

figure    testing of random forest on similarity

fi   

references

result interpretation

the disparity between the neural network training and test
error is much lower than the other models  so we have less
overfitting  the overall rmse for linear regression  svm 
and random forest was lower for the feature sets that used
metadata  since we removed large parts of the noise  however 
the rmse for only doc vec was similar to the early models
rmse for only tf idf and this leads us to conclude that review
texts are just so noisy and give little useful information about
a restaurant similarity with a user as compared to metadata 

 

we have shown the evaluation for individual parts of the
model  rating predictor and similarity metric   whose score
was given in section     

 rat u  i         sim u  i 
 

   

remember that we divide rating predictor by   since it is in
range of   to   while similarity is in range of   to    however 
we are not able to evaluate the composite model accurately
because we do not have access to the users in the data set and
there is no label that we can use from it  with access to the
users  we could query them for a score for the overall value
of the divergent recommendation  taking into account both
the similarity to a given restaurant and how accurate the predicted rating is   in this instance we could either learn  for
each user or ask them to consider a particular value of  when
they evaluate the divergent recommendation  unfortunately 
the cities that form part of the data set and the businesses
therein are unknown to us and we could not give meaningful
evaluation to the model 
nevertheless  we approximate the overall evaluation rmse
by summing the rmse error for the rating predictor divided
by    to normalize it as with the above equation  and the
similarity metric 
taking the best errors of both models we get 
early model  lr                              
improved model  lr                             
as we can see  the improved model has a lower rmse and
thus is more accurate than the early model  which is to be
expected considering the improvements added 

 

   http   grouplens org site content uploads item basedwww      pdf
   jafarkarimi  hosein  alex tze hiang sim  and robab
saadatdoost   a naive recommendation model for large
databases   international journal of information and education technology                     
   koren  yehuda   collaborative filtering with temporal
dynamics  communications of the acm             

overall evaluation

scorefinal  

   http   www yelp com dataset challenge

future improvements

we have iterated on different ways to do rating prediction
and the similarity metric  some additional methods that we
could try applying is 
   using other similarity metrics such as pearson correlation and knn 
   predicting ratings as a classification problem rather than
an unsupervised learning problem  here we can think
of each review as having   classifications  one for each
possible review score  we could then apply naive bayes
to solve this problem 
   content based filtering is another promising improvement  this is similar to collaborative filtering  except
that it deals with user to item similarity rather than just
user to user similarity 

   sarwar  badrul  et al  application of dimensionality reduction in recommender system a case study  no  tr        minnesota univ minneapolis dept of computer
science       
   g  karypis  evaluation of item based top n recommendation algorithms  in acm cikm     pp         
acm       
   b  m  sarwar  g  karypis  j  konstan  and j 
riedl  analysis of recommendation algorithms for ecommerce  in acm ec     pp          acm  acm
id               
   i  guy  n  zwerdling  d  carmel  i  ronen  e  uziel  s 
yogev  and s  ofekkoifman  personalized recommendation of social software items based on social relations 
in acm recsys     pp        acm       
   r  burke  hybrid recommender systems  survey and
experiments  user modeling and user adapted interaction  vol      no     pp          november      
    n  lathia  evaluating collaborative filtering over
time  phd thesis  university college london  london 
uk  june       

fi