a movie recommender system from tweets data
mengyi gao
m gao stanford edu

xiang zhang
x   zhan stanford edu

   introduction
nowadays  we are living in an age of recommendation  amazon stays ahead of the curve in the
ecommence industry by personalized recommendation of items shoppers might like based on
past orders  google news generates click through rates by showing relevant content to readers 
tripadvisor provides different hotel rankings for different users  last fm displays  play your
recommendations  button on the home page to attract users  netflix achieves     of its movie
views by recommendations 
in this project  we want to explore various methodologies of building a movie recommender
system  movielens  netflix and other companies distributed a couple of datasets for public
research  however  these datasets are becoming outdated and can hardly incorporate new items
and ratings  analysis and investigation based on these datasets would not have an up to date
effect  inspired by a paper which extracts rating information from twitter      we collected rating
data by similar methods  we extracted more information about the movies by referencing to the
movies  imdb pages  with such data stored in database and updated automatically  we want to
build a movie recommendation engine with the objective to minimize root mean square error
 rmse  of user ratings  we explore various models such as collaborative filtering  content based
model and svd  eventually we want to come up with a hybrid model which can take advantage
of each of the models to cope with the cold start problem  popularity bias problem  and sparsity
problem  to facilitate the use of our recommendation system  we will create a data entry
interface where users can rate a few movies from a given list  the web interface will be
connected to our recommendation engine by using python flask django library  we will
recommend   movies that the user might like 

   related work
researchers use different metrics to evaluate recommendation quality  common metrics fall into
two categories  one is statistical accuracy metric  which evaluates the accuracy of the predicted
ratings versus true ratings  mean absolute error  mae   root mean square error  rmse   and
correlation between predictions and ratings are representatives for this category  another kind of
metric  decision support accuracy  involves transforming original numerical ratings into binary
variables  high low ratings  by defining a rating threshold  for example  movies with grades    
are considered good quality  while those with     are low quality  then misclassification rates
are computed      we can also compute roc instead  decision support accuracy measures how
effective the recommendation engine is at recommending users high quality items      we chose
rmse as the metric in our project  because choosing a threshold to convert numeric ratings into
binary is a little arbitrary 

 

fitwo main approaches to building a hybrid system combining collaborative filtering  cf  and
content based  cb  models have been proposed in literature  the first approach is a linear
combination of both methods  for example  fitting a linear model on the predicted values from
cf and cb  claypool uses different weights of cf and cb for different users  the more items the
user has rated  the larger the weight of the cf is      another way is a linear combination of
individual content features and predicted ratings from cf      the second approach is sequential
combination of cf and cb  item item similarities are defined by content features  then cf is
applied to make the prediction           we used the first approach in our project  because this
independent combination allows us to improve cf and cb separately  and interpret individual
contribution from both models 

   dataset and features
we scraped data through twitter api similar to the method in the paper      original tweets
come from rating widget of imdb apps  whenever a user rates a movie  a structured tweets in
the form of  i rated  movie title   rating      imdb link   imdb  will be generated  twitter api
also returns a json object for each tweet which contains the user s twitter id and account
information  we referenced to the imdb link in the tweet by omdb api to collect the movie s
information such as the release year  actors  genre and descriptions  this data parsing process
occurred in python 
we created a mysql database to store the user information  the movie features and the rating  to
facilitate data sharing and storage  we connected the local database to aws rds  those two
steps were also realized by python  we integrated the etl process of tweets collection  data
parsing  and database loading through unix shell  which calls the python function to update
automatically and periodically 
as a preprocessing of our dataset  we omitted those users who rate less than   movies and those
movies with less than   ratings for better model quality  to split the data into training set and test
set  we used a random number generator to choose     of users  for each of those     users 
we selected half of the ratings into the test set 

   methods
in this section we describe the models we used in building our recommendation engine 

    baseline model
as our baseline model  we used rxibase    bx  bi to estimate the rating for item i by user x   
is the global mean rating  bx   avg rating of  user x    is the rating deviation of user x   and
bi   avg rating of  item i    is the rating deviation for item i   the baseline model has a test
rmse of      for all of our later models  we will reference back to this baseline for comparison 

    item based collaborative filtering

 

fiitem item collaborative filtering is a memory based algorithm  first we computed the similarity
between every pair of items i and j   and stored the similarity information in a table  when
making a prediction for user x on item i   we referenced back to the table for the similarity
between item i and other items the user has rated  we use the rating and similarity information
to make the prediction  here we defined the pearson correlation as the similarity measure 
  rxi  ri   rxj  rj  
specifically  sim i  j    sij 

xu ij

  rxi  ri   

xu ij

rated by both item i and item j  

  rxj  rj   

xu ij

 s  r  b
b 
s
ij

the estimated rating is r

cf
xi

   bx

  where s ij is the set of users who

xj

xj

i  j

i

 

  note that bx and bi have the same

ij

i  j

definition as our baseline model in      the item based collaborative filtering has a test rmse
of      

    content based model by using movie features actors year genre
for our first content based model  we constructed item profiles  which consisted of movie
features i e  actors year genre  we defined binary variables of   s and   s for each feature in our
training set  this gives each movie an array of binary features  next  we built user profiles  for
each user  the user profile is defined by the profiles of the movies he has rated and what score he
gave  movies with higher ratings contribute more to the user profile  then we computed cosine
similarity for each user movie pair  we fit a linear regression model on the user movie similarity
s xi and global mean    rxicb           sxi  

    content based model by using movie description  nlp 
for our second content based model  we used some nlp techniques  for each movie  we
selected    words with highest tf idf scores as the movie features  then we combined the
selected words from each movie in the training set as a long vector  if a movie contains a certain
word  the component for that word is   and   otherwise  next we built user profiles  computed
user movie similarity  and fit the linear regression model as part     in the above  this gives us 
rxicb            sxinlp  

    content based model combined
we combined the user movie similarity measures from     and     into one regression model 
our model now looks like  rxicb          sxi   sxinlp  

    hybrid model using collaborative filtering and content based model

 

fiwe treated the predicted ratings from     and     as input variables  and fit a linear regression
model  rxihybrid      rxicf   rxicb  

   results
for our content model in      we chose the top    words with highest tf idf score as the movie
features  we tried a range of values from   to     and eventually selected    based on their test
rmse 
we evaluated each model by their test rmse  the result is shown in the plot  cf       improves
over baseline model        two content based models            individually don t perform as
well as the baseline  the content features are solely based on objective information about the
movie  which doesn t ensure that a user will like it  the quality of recommendation will likely to
improve if the user rates more movies  but a combination of the two cb models      
outperforms baseline  the hybrid model       achieves the lowest rmse among all other models 
cf contains information of human opinions  while cb mainly incorporates information of the
movie features  the two models are complementary  the hybrid model takes advantage of both
cf and cb  and thus improves the prediction result 

 

fiwe also created a web user interface  users can rate   movies  and we will give  
recommendations based on their ratings 

   future work
as a next step  we plan to run bias and variance diagnostic and error analysis  we will explore
more nlp methods and take advantages of existing packages like word vec and nltk 
improving the efficiency of content based model is also an area to work on 

 

fireferences
    simon dooms  toon de pessemier  luc martens  movietweetings  a movie rating dataset
collected from twitter  in workshop on crowdsourcing and human computation for
recommender systems  crowdrec at recsys              
    jure leskovec         recommender systems  content based systems   collaborative
filtering  powerpoint slides   retrieved from http   web stanford edu class cs    handouts html 
    jure leskovec         recommender systems  latent factor models  powerpoint slides  
retrieved from http   web stanford edu class cs    handouts html 
    xavier amatriain        recommender systems  collaborative filtering and other
approaches  powerpoint slides   retrieved from http   www slideshare net xamat recommendersystems machine learning summer school      cmu 
    toby segaran  programming collective intelligence  building smart web     applications 
o  reilly media         
    c  christakou  a  stafylopatis  a hybrid movie recommender system based on neural
networks  in international conference on intelligent systems design and applications       
    n  good  j  schafer  j  konstan  a  borchers  b  sarwar  j  herlocker and j  riedl 
combining collaborative filtering with personal agents for better recommendations  in
proceedings of aaai  vol           
    claypool  m   gokhale  a   miranda  t   murnikov  p   netes  d  and sartin  m        
combining contentbased and collaborative filters in an online newspaper  in proc  acm sigir
workshop on recommender systems  algorithms and evaluation 
    l  qing and m k  byeong  an approach for combining content based and collaborative
filters  in proceedings of the sixth international workshop on information retrieval with asian
languages       
     s  grant and g  mccalla  a hybrid approach to making recommendations and its
application to the movie domain  in      canadian ai conference       

 

fi