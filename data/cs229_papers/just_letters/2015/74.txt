predicting the winning side of dota 
kuangyan song  tianyi zhang  chao ma
abstract
in this paper  we tried using logistic regression to predict the winning side of dota  games based on hero lineups  we collected
data using api provided by the game developer  we find out that only based on hero lineup to predict the game result is not
good enough  we also tried to select feature using stepwise regression and the result is better than using all the heroes and
hero combos as features 

  introduction
dota   is a very popular online game  a regular dota  match has ten players with five players on each side  each player
will choose a hero and their goal is to defeat their opponents  in order to win the game  there are two main aspects need to be
considered  the first aspect is the competitive level of the players  the competitive level of a player here means not only the
overall level  but also the level of playing a particular hero  the other aspect is the lineup of both sides  dota   is such a game
that players need to play as a team in order to win  which means that some heroes are designed to support others and some are
designed to attack or defense  for example  if one team chooses five supporting hero  it is hard for them to win the game since
no one is specialized to attack  moreover  there are some combinations of two or three heroes whose spells can complement
with each other so as to make it easier to defeat their opponents  also there are restraints between two heroes 

  related work
dota   due to its popularity  has drawn fair amount of attention in machine learning projects  in       atish and michael did an
project on dota   team composition  they predicted winning side by looking at how both sides pick their heros including
interactions between heros  however  they found out that after incorporating hero interaction  the prediction rate is lower than
the model with out hero interaction  their insight was that either the model needs to be fined or the data they collected were not
good enough  back to       there was anothor project presented by kevin and daniel where they did an survey on the machine
learning algorithm that had been applied to dota   prodeiction and then made a recommendation engine that helps the player
pick a hero to maximize winning rate 

  data collection
valve  the company who developed dota   provides web api for developers to retrieve match and player data  we use a
python library dota api which is built on the web api to collect the data we need 
    match data
since there are different mode of games  such as ranked all pick  all pick and solo mid  some of which are not regular
dota modes  we need to filter out those games that are not useful in our prediction  in our case  we only consider those games
that is all pick  ranked all pick and random draft  moreover  those games that has absent players or has zero kills
through out the game are considered to be invalid  we first tried to filter out the invalid games by setting the arguments of api
calls  but the api seems to be broken so that it ignores those filter arguments since dota  has changed its engine  we then
collected all the match detail data and filter out the invalid match by ourselves  these match data are stored as json files for
future use 
    player data
the player data are more complex and more difficult to collect  for each single game  there are ten players involved so that
we need to use the api to retrieve all the players data  in our case  we just request the match history information for a
particular player instead of requesting the match detail  we collect about one hundred matches history for a single player 
in addition  some of the players might choose to make the match history private so that we cannot collect every players match
history  the match history will contain the information of the hero that the player used and the match id of that game  these
data are also stored as json files for future use 

fi  methodology
    baseline
      feature selection and extraction

dota  has a player matching system that will automatically match the players that have similar competition level  also called
matchmaking ranking  together to have one game  thus  we first make an assumption that all the players in a single game
should have similar competition level  by assuming this  we are also assuming that a player can play every hero equally well 
this is very strong assumption since there are now     playable heroes in dota   hence it is highly possible that a player is
not familiar with the hero that he used in a particular game  moreover  the players competition level might be different  this
assumption  however  allow us to simply the problem to only consider the hero selection in a game  we could just use the hero
selection data to predict the game result and see how hero selection contributes to the final result 
under such assumption  we define the feature vector as


x 
 x  


    
   


 x    


  x    

 x    
 x    


   
    
x   
since each dota  game has two sides  one is radiant and the other is dire  the first half of the feature vector  x        x     
represents the radient side while the second half of the feature vector  x          x      represents the dire side  for the first
half of the feature vector 

   a player o f radiant side plays hero i
xi  
   no player o f radiant side plays hero i
and for the second half of the feature vector 

   a player o f dire side plays hero i     
xi  
   no player o f dire side plays hero i     
we label each match with

yj  

   radiant side won
  
dire side won

      logistic regression

we used logistic regression on the data set and did k fold cross validation  the logistic regression minimizes the following cost
function 
m
 
minw c wt w  c  log exp yi    x ti w   c       
 
i  
for the first attempt  we collected in total      matches and divided them to ten folds  so for each fold  we trained the model
using      matches and validated using the other     matches 
when predicting the winner of the game  we compute the probability of the each label  radiant win or dire win  for a
given match  and then simply choosing the one with larger probability as its prediction 
we used the python module sci kit to do the logistic regression  after running logistic regression  we got the following results 
table    training error and testing error of logistic regression       matches     folds 
fold
train
test

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

  
    
    

according to the above result  the training error is nearly     while the testing error is much higher  nearly      which is not
acceptable to predict the final result of a given match 
   

fi      problems for baseline

in this simplified model  we made a strong assumption for the players and we mainly focused on the hero selection  since the
testing error is high  it might be not enough just using hero information of a given match to predict the final result of the match 
in other words  we need the player information to better predict the match result 
moreover  by looking into the details of prediction process under the model of logistic regression  we found out that there
are lots of matches that has nearly equal probabilities for both side  e g  a match might have a probability to be classified as
radiant win with a probability of      and as dire win with a probability of       in other words  these data points are
too close to the decision boundary so that it is hard to classify such matches  in our case  we just simply choose the label that
with higher probability  which might lead to prediction error  thus  we need more information to better classify the match 
another problem for the first attempt is the feature selection  we just considered the heroes that are used in a game  an intuitive
idea that logistic regression gives us is whether a hero is strong or weak  it is true that certain heroes are stronger than the others 
but the interaction between heroes are also very important for the game result  thus  we need to add features that represent the
interaction between two or three heroes  moreover  certain heroes have significant effect on the results of matches  so we could
select the heroes that have more effect 
    adding features for hero combo
since heroes have interaction between each other  we decided to add features for interactions between two heroes  in particular 
we will add features such as two heroes are both in radiant side or dire side  since there are too many heroes and too many
possible hero combos  we use our knowledge to specify some most powerful hero combos  we added fifty powerful two hero
combos to the feature vector and run logistic regression and got the following results 
table    training error and testing error of logistic regression       matches     folds 
fold
train
test

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

 
    
    

  
    
    

according to the results  we can see that the training error and testing error is smaller than baseline  but the effect is not that
much  also the decreasing of error might because of the increasing number of match data 
    feature selection
since there are too many heroes  some of them might not have much effect on the result of matches  we need to select features
that has significant effect on the results  in order to do that  we use stepwise regression  basically  the idea is to start with no
feature  and add one feature that increase the model most at each step 
the algorithm is shown below 
algorithm   stepwise regression
requirednumberoffeatures  some number
featureset     
while numoffeatures    requirednumberoffeatures do
fit a model using featureset
 
n
  
calculate  l 
    i   xi  yi  p xi      

  
  
  
  

  initialize the feature set with just interception
  end algorithm when reaching the required features

 
new  arg max    l 
  i   
  
add the feature that corresponding to new to feature set
  
numoffeatures  numoffeatures    
   return featureset

  

using this algorithm  we can select those principal features  heroes and hero combos   in the meantime  the total number
features will decrease  hence it might help to decrease error 
another problem is how to choose the number of features that should be added to feature set  in order to figure out this  we
   

fienumerate the number of features and run the above algorithm for each of the enumerated numbers  the results for the each
trial are shown in the figure   
according to figure    we can see that the training error and testing error are large at first since there are not enough features 
as the number of features grows  the error rate goes down  when the number of features is around    to     the error rate is
the lowest  it shows that some heroes do have such principal effect on the result of matches while adding some heroes to the
features might cause the prediction go wrong  also  the result might relate to the data we collected 

figure    error v s number of features

  future work
according to our work  we can see that predicting the winning side based on hero selection only based on hero lineups does not
seem to have a good resul  future work should take the player into account to make the prediction more accurate  moreover 
the model might need to be changed to get a better result 

references
   kevin conley  daniel perry  how does he saw me  a recommendation engine for picking heroes in dota        
   atish agarwala  michael pearce  learning dota   team compositions      

   

fi