recommendation system leveraging heterogeneity of trust in social
networks
pulkit agrawal  jayanth ramesh and agrim gupta
i  introduction

ii  data

recommendation systems are an integral part of many
online services ranging from content streaming websites
like netflix to online shopping websites like amazon  they
improve the online experience by suggesting new products
that match users interests and preferences  collaborative
filtering     methods are the most commonly used techniques
in recommendation systems which rely on collection and
analysis of users preferences and predicting what users will
like based on their similarity to other users  traditional
collaborative filtering based recommendation systems can
be categorized into three types  user based  item based and
hybrid methods  many algorithms have been used for measuring user and item similarity in recommendation systems
like the k nearest neighbor  k nn  approach and the pearson correlation as first implemented in      neighborhood
methods are good at detecting very localized relationships
but poor at detecting a users overall user preference  in
contrast  latent factor models are best at estimating the
overall preferences of a user but poor at incorporating relationships between users  due to this complementary nature
of the two approaches      integrates them to provide better
recommendations 
trust is another aspect of recommendations in real life scenarios where we trust different friends for recommendations
in different categories of products  for example  we may
prefer movie recommendations from an entirely different
set of friends as compared to electronics recommendations 
we refer to this difference in trust for different categories
of recommendations as heterogeneous trust      attempts to
improve on traditional methods by studying the relations
between trust and product ratings in online consumer review sites  they propose an improvised matrix factorisation
technique that can be used to improve rating predictions
and estimate true strengths of trust relations at the same
time  trustwalker     proposes a random walk model which
combines trust based and item based recommendations  this
improves the performance of recommendations even for cold
start users  our goal in this project is to determine if we can
leverage heterogeneous trust to improve recommendations 
our intuition is that what is true in real life should also hold
true for online communities  more specifically  given a set
of users  their ratings for products in several categories and a
social network of users  we will predict ratings for products
that have not been reviewed by a particular user  we will then
evaluate whether modeling heterogeneous trust information
improves the prediction accuracy 

we work with two different datasets to evaluate our
models  our first dataset comes from the yelp dataset
challenge      which contains business data  business id 
location  average rating  category  attributes  etc    user data
 user id  friends  number of reviews so far  etc   and review
data  user id  business id  review text  star rating on an
integer scale of     etc   for six cities in the us  the
dataset is available in json format  we imported the data
in a postgres database which is used as the main datastore
for our implementation  we fixed our product categories to
restaurants and shopping as they had the maximum number
or reviews amongst all categories  we narrowed down to top
     users based on the total number of reviews they had
in the above categories  we constructed a social network of
users using friends information in the user dataset and only
kept those users in the network who had reviewed either
restaurants or shopping businesses and who were in the list
of top      users  after the data wrangling  our final dataset
had      users        businesses       shopping       
restaurants  with    attributes         reviews and      
edges  friendships  in the user social network 
yelp business dataset has a list of attributes for each business which captures information about its characteristics  for
example  the most common attributes for restaurants are the
ambiance of the restaurant  classy  touristy  romantic  etc   
the type of music played  dj  karaoke  jukebox  etc   and so
on  we use these attributes to extract categorical features for
the businesses  that is  for the ambiance attribute  ambiance
classyis a feature which takes value   if the business has
classy ambiance and   otherwise  we define    such features
for the restaurants 
our second dataset is epinions dataset     which contains
user and ratings data for products in several categories  the
data is available in form of matlab  mat files  we select
movies and electronics as our two product categories because
they have the maximum number of reviews amongst all
categories  we select only those users who have reviewed
products in both the above categories  in the user dataset 
we have explicit trust relations for each user  that is  we
explicitly know which users are trusted by a given user for
recommendations  we use this data to generate a directed
graph where users are nodes and a directed edge exists
between user u and user v if u trusts v  this directed graph
will be referred to as trust network in subsequent discussion 
our final dataset has      users        products      
electronics        movies         reviews and       edges

fiin the trust network      zero in degree nodes      zero
out degree nodes maximum degree        
the rating distribution for both the datasets is shown in
figure i  it can be seen that the data is highly skewed towards
positive ratings    and    

fig    

rating distribution of yelp left  and epinions right 

iii  m ethods
we propose two different approaches to model heterogeneous trust information in recommendation systems  in
our first approach  we use k means clustering to find communities of users with similar preferences in each product
category  thus  for each product category  we will have a
different clustering of users into communities  a new rating
is then predicted by a collaborative filtering algorithm which
computes a weighted average of ratings of all the users for
a particular product in a given users community 
in order to cluster the users based on user preferences 
we generate user profiles based on attributes of the businesses reviewed by them as follows  let  b    b            bm  
be the m businesses reviewed by the user u with ratings
 r    r            rm    let  f    f            f m  be the set of    
  binary feature vectors corresponding to the businesses 
p
fj rj
the user profile of user u is the       vector jm  
intuitively  if a user gives high ratings to restaurants with
classy ambiance and jukebox music  these features would
have higher weights in the user profile vector  thus indicating
the preference of the user to such restaurants 
we also try to model user preferences by learning a naive
bayes and svm model for each user where the attributes of
businesses reviewed by the user are used as features and a
positive label     is used if star rating of the business   
threshold and a negative label     is used otherwise  the
parameters of the learnt model would serve as user profiles
in this scenario which we intended to use for clustering in the
community detection stage  we implemented naive bayes in
matlab while scikit learn     was used for svm and kmeans  the algorithms were implemented with the defaults
from scikit  which can be found in their user guide      we
tested our first approach only on yelp dataset 
in our second approach  we estimate the strength of trust
a user places in all the users in his trust network for each
product category using category specific and general trust
models described below  thus  for each product category 
we will have a different value of trust for all the users in

a given users trust network  we then use a collaborative
filtering algorithm to predict the unknown ratings  for trust
models a  b and e  as follows 
p
su v  rv b  v  
ru b   u   v p
   
v su v
in the equation above and all the models that follow  ru b
and ru b are the actual and estimated  from data  ratings
of user u to product b  u is the average rating of user
u across all products and su v is the strength of trust
between users u and v computed using one of the models
described below  for models which measure the strength of
trust between users for each category separately  we define a
category specific trust strength matrix slu v   where l denotes
the product category  we also define a trust matrix tu v for
our network of users which takes value   if user u trusts
v and   otherwise  for all the trust models we consider 
we define su v and slu v to be   if tu v      in addition
to these matrices  we define a product category matrix cb l
which takes value   if product b belongs to category l and  
otherwise  we refer to our second approach as trust modeling
in the discussion that follows  below  we describe the various
trust models we experimented with 
a  cosine trust
this is our simplest model for estimating the strength of
trust between two users  we assume that two users trust each
other in a particular category if they rate same products
in that category similarly  for each category l  we define
strength of trust between u and v as follows 
p
c
b ru b r
pv b b l
   
slu v   p
r
c
r
u b
b l
v b cb l
b
b
b  recommendation power
this measure of trust is inspired from       for each
category l  the strength of trust between users u and v is
defined as 
x ru b rv b cb l
   
slu v  
ru rb cb l
b

where ru is sum of all ratings by user u and rb is sum of all
ratings given to product b  we can interpret this trust measure
intuitively in terms of a two step random walk on a weighted
bipartite graph of the set of all users and the set of all
products of a particular category  where an edge exists from
a user to a product if the user rated the product  the weight
of the edge is the rating given by the user to the product 
r
under these definitions  ru b
is the probability of traveling
u
rv b
from u to b and rb is the probability to traveling from b
to v in a random walk on the graph  the recommendation
power is thus the total probability of traveling from u to v 
the probability is high if u rates all the businesses which
r
are most liked by v  a high value of rv b
  highly  a high
b
r
value of ru b
  
u

fic  latent factor general trust hybrid
this model is inspired from      in this model  we assume
that a users rating for a particular product depends partly on
his inherent preferences and partly on the ratings of users in
his trust network  the users preferences are modeled using a
latent factor model where we assume that users rate products
using k hidden features  for each product b  a k    vector
qb denotes the values of these k features for the product and
for each user u  a    k vector pu denotes the importance
the user places in these k factors and us estimated rating
on b is given by pu  qb   in order to model the influence of
the trusted users  we add a second component to this rating
estimate by averaging the ratings of all the users in a given
users trust network using the strength of the trust between
the users as a weight  thus  the estimated rating  ru b of a
user u for a product b is given by 
p
v rv b su v
   
ru b   pu  qb         p
v su v
we constrain su v to lie between   and    larger value
indicating more trust   is a hyper parameter which determines the importance of each component  in order to
learn the parameters of this model  we solve the following
optimization problem 
x
minp q s
 ru b  ru b   
 u b o

xx
 xx  
 
pu k  
qb k
 
   
  u
k

b

   

k

s t  u  v su v        
where o is the set of all user product pairs for which we
know the ratings  p is the matrix formed by stacking the pu
vectors row wise and q is the matrix formed by stacking
the qb vectors column wise  here  is a regularization
parameter which doesnt allow pu and qb to become too
large and avoids over fitting  we initialize the parameters to
random values and solve the optimization problem by using
stochastic gradient descent with the following update rules 
pu k  pu k    eu b qb k  pu k  

using this model we are able to estimate strength of trust
between users for each category separately thus allowing
us to estimate heterogeneous trust  we solve the same
optimization problem as in     replacing r with its value
as defined in      consequently  the update equations for
slu v also change as follows 
slu v  slu v         eu b
p
p
cb l rv b v slu v  v cb l rv b su v
p
 
  v cb l slu v   

   

to reduce computation time  we implemented both our hybrid latent factor models in c    all the other collaborative
filtering algorithms were implemented in matlab 
e  global trust
all the trust models we discussed so far are local trust
models in the sense that they measure how much a particular
user is trusted by another user  thus representing a local
relationship between the two users  however  we can also
have a global trust model where we assign a trust value su
to each user u which measures the overall trustworthiness
or importance of the user u solely based on the structure
of the trust network  pagerank      is an ideal choice for
this global trust model because in essence it measures the
importance of each node in a network based on how many
important nodes  in our case trustworthy users  are linked to
it  we compute the pagerank of all the users  nodes  in our
trust network and assign it as the global trust value su   we
contrast global trust measure with the local trust measures
to understand how the opinion  or trust  of locally trusted
users compares to the opinion of expertswhen it comes to
predicting ratings  we use snap py     for all our network
analysis including pagerank computation 
iv  e xperiments  d iscussion
a  k means

qb k  qb k    eu b pu k  qb k  
su v  su v         
p
p
rv b v su v  v rv b su v
p
eu b
 
  v su v   

of products we have in our data set  thus  the estimated
rating in     changes to the following 
p p
l
l
v cb l rv b su v
p
   
ru b   pu  qb         p
l
l
v cb l su v

   

 is the learning rate and eu b is the estimation error  ru b 
ru b    if the updated value of su v exceeds   or falls below
   we set it to   and   respectively 
d  latent factor heterogeneous trust hybrid
apart from some minor implementation differences  this
model is similar to the model proposed in      it is same
as the previous model with the difference that instead of
learning a common trust strength su v between users u and
v for all products  we learn a different trust for each category

for our first approach  we ran k means algorithm for     
users with user profiles generated using the    business
attributes for restaurants  determining the number of clusters
in a data set is a common problem in data clustering  we
determined the number of clusters using silhouette coefficients  shown in table i are the top three features for  
sample clusters for k       as we can observe  its difficult
to gain intuitive insight into the preferences of the users
clustered together based on these basic features  from this
table  we inferred that it is not possible to detect communities
of users with similar preferences using k means algorithm 
further analysis of business and their attributes revealed that
many business types were combinations of other popular
groups  for example the health group contains every business
which is categorized as spa and health  on the other hand 

fitable i
k m eans   t op f eatures for s ample c lusters
one
price range  
good for groups
take out

two
good for dinner
takes reservations
waiter service

three
good for kids
take out
good for groups

because of crossovers such as a food court residing within a
shopping mall  the business attributes were often overlapping
and failed to capture the inherent differences in the factors
which affect ratings for these very different business types 
hence  we decided to abandon this approach to model
heterogeneous trust 
b  naive bayes and svm
our results for learning user profiles using naive bayes
and svm are shown in table ii  the values shown are average test errors across all users  threshold in the table refers to
the rating above which all ratings are given a positive label 
in spite of our efforts to diversify the above two algorithms 
 changing the threshold or feature engineering  the results of
the algorithms were still very close to a baseline algorithm
which predicts an unknown rating as average rating of the
user  this can be attributed to the inherent skew in the rating
distribution as shown in figure      we can observe that
almost     of the ratings are either   or    also  we have
very few bad ratings making it difficult to predict bad ratings 
since we could not obtain a representative model of user
profiles using either naive bayes and svm we decided to
move on to our second approach 
c  trust modeling
for all the trust models  we split our dataset into    
data for training and     data for testing  we chose to
evaluate our trust models through the root mean square
error  rmse  between the predicted ratings and the actual
ratings to measure accuracy  the rmse error is computed
as follows 
r pn
 
i  pi  ai  
rm se  
   
n
where pi is the predicted rating  ai is the actual rating
and n is the number of predicted ratings  to evaluate the
effect of modeling category specific trust  referred to as
heterogeneous trust in the results  on prediction accuracy 
we compute cosine trust and recommendation power for all
the categories considered together  that is  we assume that all
the products belong to the same category and compute the
trust measures as defined above  these category independent
trust models are referred to as general trust models  for the
general trust models  we compute the within category rmse
values along with the overall rmse values  that is  after
using the general trust model to predict ratings  we compute
the rmse error separately for restaurants and shopping in
yelp dataset and movies and electronics in epinions dataset 
for rmse computation  we only consider those test data
points for which the prediction component due to averaging
from trusted users is non zero  for yelp dataset  we did

fig    
 right 

heterogeneous trust learned from electronics  left  and movies

not have explicit data indicating which users are trusted by
a given user  hence  we experimented with two different
approaches  in the first approach  we assumed that a user
trusts all the other users   referred as alltrust  and in the
second approach  we assumed that a user only trusts his
friends  direct connections in the social network  referred
as socialtrust  
the results for trust modeling using cosine trust and
recommendation power are summarized in table iii for yelp
dataset and table iv for epinions dataset 
both the heterogeneous alltrust models improve over general trust models in the restaurant category for yelp dataset 
however  the performance in shopping category declines 
one of the reasons for this behavior could be that we have
fewer shopping businesses as compared to restaurants in our
trust  in addition  many shopping places  malls  are also
tagged as restaurants and user preferences trust in restaurants
should be similar to shopping to some extent  hence  when
we limit ourselves to shopping category for trust estimation 
we lose the similarity information provided by the restaurant
part of the user rating vector 
the socialtrust heterogeneous models do not preform
better than general trust models on yelp dataset  this could
mean that social connections alone are not a good indication
of trust when it comes to recommendations  also  most of
the friends of active users on yelp are themselves not active 
hence  lack of enough correlation between active users and
their friends  due to their inactivity  makes it unreliable to
treat social connections as trusted connections 
epinions dataset doesnt suffer from the above problems
with yelp dataset  movies and electronics  unlike shopping
and restaurant  are mutually exclusive and uncorrelated categories  also  in epinions dataset  we explicitly know every
users trusted users  who are also active reviewers on epinions   hence  both the heterogeneous trust models improve
over general trust models  corroborating our hypothesis 
table ii
svm and naive bayes on y elp dataset
model
naive bayes
svm

threshold    
      
      

threshold    
      
      

fitable iii
t rust m odeling on y elp dataset
model

restaurant
alltrust models
cosine  general 
      
cosine  heterogeneous 
      
recommendation power  general 
      
recommendation power  heterogeneous 
      
socialtrust models
cosine  general 
      
cosine  heterogeneous 
      
recommendation power  general 
      
recommendation power  heterogeneous 
      

        and k       total rmse on test dataset
for these values of hyper parameters is         for values
of  between           both the trust models perform
better than pure latent factor models  dotted lines on the
graph   moreover  for too small values of   the hybrid
models perform poorer than pure latent factor models  this
shows that user ratings are affected both by inherent user
preferences and ratings given by trusted users  however 
the heterogeneous trust hybrid doesnt improve considerably
over the general trust hybrid  one possible explanation for
this could be that the ratings distribution is highly skewed
towards   and    thus  for a given user  the strengths of
trust might vary over movies and electronics  but all the
trusted users might rate many products as either   or  
making it difficult to improve the performance by modeling
heterogeneous trust beyond a point 

shopping
      
      
      
      
      
      
      
      

table iv
t rust m odeling on e pinions dataset
model
cosine  general 
cosine  heterogeneous 
recommendation power  general 
recommendation power  heterogeneous 

movies
      
      
      
      

electronics
      
      
      
      

e  global trust

d  latent factor hybrid models
for the latent factor trust hybrid models  we divide the
dataset into     data for training      data for validation
and     data for test  the learning rate  was set to      
lower values of  slowed down the training and higher
values of  led to divergence  we selected the values of  
 and k which led to the least rmse on the validation
set  this led to a value of         and k       in
figure      we show the validation analysis for  ranging
between     to     for         and k       similar to the
other general trust models  we computed within the category
rmse values for the latent factor and general trust hybrid
model  figure     shows the strengths of trust learnt using
latent factor heterogeneous trust model for user a  the edge
widths correspond to trust strength  it can be seen that while
i is a highly trusted user for movies recommendations  he
is least trusted for electronics 
the minimum validation error is obtained for        

   

electronics h 
electronics
movies h 
movies
total h 
total
total      
electronics        
movies       

   
   

rmse

   
   
   
   
   
   
   

   

   

   

   

   

   

   

alpha

fig    

validation error analysis of latent factor hybrid models

   

finally  we compare the performance of global trust measure  as defined in methods section  with local trust measures
 cosine and recommendation power  with respect to rating
prediction on epinions dataset  the total rmse of rating
prediction using global trust is        whereas the local trust
measures achieve an rmse of         cosine  and       
 recommendation power  on the same test dataset  thus  it
looks like local trust connections affect user ratings more
than ratings from experts  however  a more thorough analysis
is required to make this claim with certainty 
v  conclusions and future work
in this project  we analysed the effect of incorporating heterogeneity in trust relations among users in a social network
on traditional recommendation systems  we observed that
heterogeneous trust improves performance when compared
to general trust for recommendation power and cosine trust 
when we have explicit information about user user trust and
uncorrelated product categories  the hybrid model combining latent and heterogeneous trust gives best performance
for        on the epinions dataset  we could not achieve
similar improvements on the yelp dataset because we didnt
have explicit information about trust between users and most
of the reviews on yelp were for restaurants making it difficult
to find an uncorrelated category with sufficient number of
reviews 
in this project  we only considered directly connected
users as trusted users  however  it is possible to propagate
the trust from directly connected users to other connected
users using random walks on the user network  it would
be interesting to explore these trust propagation algorithms 
another possible line of future work could be extending the
work for multiple business categories on a larger dataset to
obtain more concrete results 
r eferences
    pedregosa  fabian  et al  scikit learn  machine learning in python 
the journal of machine learning research                      
    scikit
learn
user
guide
 online  
available 
http   scikitlearn org stable user guide html

fi    koren  yehuda  factorization meets the neighborhood  a multifaceted
collaborative filtering model  proceedings of the   th acm sigkdd
international conference on knowledge discovery and data mining 
acm       
    breese  john s   david heckerman  and carl kadie  empirical analysis of predictive algorithms for collaborative filtering  proceedings
of the fourteenth conference on uncertainty in artificial intelligence 
morgan kaufmann publishers inc        
    allen  robert b  user models  theory  method  and practice  international journal of man machine studies                      
    http   www public asu edu jtang   datasetcode truststudy htm
    au yeung  ching man  and tomoharu iwata  strength of social
influence in trust networks in product review sites  proceedings of the
fourth acm international conference on web search and data mining 
acm       
    jamali  mohsen  and martin ester  trustwalker  a random walk
model for combining trust based and item based recommendation 
proceedings of the   th acm sigkdd international conference on
knowledge discovery and data mining  acm       
    leskovec  jure  and rok sosic  snap  a general purpose network
analysis and graph mining library in c           
     https   en wikipedia org wiki pagerank
     zhou  tao  et al  bipartite network projection and personal recommendation  physical review e                     
     http   www yelp com dataset

fi