using tweets for single stock price prediction
hongshan chu  ye tian  hongyuan yuan  by alphabet 

abstract
stock price  been studied for hundreds of years  is one of the most versatile thus hardly predictable things that is
deeply rooted in the modern economy  with the trading frequency reaching sub second and beyond  more advanced
real time stock price prediction tools would be highly demanded in addition to traditional financial analysis  in this
work  we applied svm and nave bayes algorithms to this field and successfully built the connection between stock
price and selected keywords frequency from twitter tweets  we firstly used tf idf method to filter out the
candidates of keywords that is most relevant to stock price  then based on these keywords  we systematically
studied the testing error using cross validation for different number of keywords and unit time length  finally  with
the optimized keywords and unit time length  we plotted out the predicted stock price compared with the real stock
price  we found that by using gaussian kernel  svm gives the lowest testing error  while nave bayes catches pretty
accurately the trend of stock price change over a longer period of time  though limited by the available data size 
the optimistic outcome opens a new approaching to real time stock price prediction 

   introduction
social media  as the collective form of individual opinions and emotions  has very profound though maybe subtle
relationship with social events  this is particularly true when it comes to public tweets and stock trading  in fact 
research has shown that when it comes to financial decisions  people are significantly driven by emotions      these
emotions  together with peoples opinions  are in real time reflected by tweets  as a result  by analyzing relevant
tweets using proper machine learning algorithms  one could grasp the publics sentiment as well as attitude towards
the stocks price of interest  which could intuitively predict the next move of it 
some previous work has been done to show that tweets can indeed reflect stock price change  bollen  etc       
randomly selected three months tweets  and pointed out that  surprisingly  the calmness score of these tweets is
able to resemble some of the key features on dow jones industrial average djia  price change within the same
period of time       other work focused on one single stock and used particular persons tweets to predict that stocks
price change      however  there is not yet any published work aimed to predict any single stocks price using
machine learning through social media  like tweets 
in order to expand the scope of prediction from stock market index or some particular stock  we use keywords
frequency  kf  of stock relevant tweets to predict any single stocks price change  by assuming that these keywords
are non sensitive to any particular stock  we could in theory predict any stocks price change in real time  note that
google has applied similar methodology for flu trend prediction using its gigantic search queries  and found out that
certain query keywords are highly correlated with the current level of flu activity  this work has been publish on
nature    
in this work  we divided our selected tweets data and stock price data from the same period of time into different
time slots featured by unit time length  and used svm and nave bayes algorithms to train the keywords frequency
from time slot i and stock return from time slot i    to be exact  our work contains four main steps     data collection
and wrangling from twitter and nasdaq official website     keywords selection by tf idf method     optimization

fiof the number of keywords from    and unit time length through systematic study     testing prediction using both
learning algorithms 

   data collection and wrangling
twitter has collected gigantic amount of tweets  it is both impractical and unnecessary to even try to get all of them 
aside from technical barrier  in fact  twitter only opens the most recent one weeks tweet data to public  most of
the tweets are totally non relevant to stock price  and are thus merely background noise  in order to increase the
relevance to stock price  and overcome the lack of amount of available tweets  we fetched each weeks tweets data
filtered by stock symbol for    stocks with the highest trading volume during the time of interest  using python  by
now  we have collected three weeks tweets data  including        tweets for analysis  for each tweets  we have
its posted time in gmt  and the text content of the tweets  as shown on in figure    a  and  b  
nasdaqs official website has all the stocks price  though it provides historical data back years ago  like twitter 
only most recent one week has stocks price posted for each trading minute  as a result  we fetched the stock price
data with minute precision within the same period of time as tweets data  we then calculated the return of each for
each unit time slot  an example of  day unit time length is given in figure    d  

figure    tweets data and stock price data   a  tweets files searched by each stocks trading symbol  in total there
are    files   b  demonstration of the raw tweets data with time column  in gmt  and tweets content column
search by  aapl   c  post processing dictionary for  aapl tweets on nov    th   d  post processing stock price with
 day unit time length 
in order to find the most relevant feature words from tweets that can best predict the change of stock price  work
that has been done is as below 
  
  
  
  

create training sample by divided both the tweets data and stock price data by specified interval time 
for each tweets sample  convert the text into the mentioned words  remove all links and none english words 
build a dictionary for all the mentioned words  count the frequency of each word from each tweets sample 
for each stock price sample  take the difference between the start and end price for the given period of time 

   tf idf for keywords selection
tf idf  short for term frequency inverse document frequency  is a numerical statistics that reflect how important a
word is to a document in a collection or corpus      this method suits especially well to our purpose as our training
tweets are purposely chosen that are related to stock price  by comparing our training tweets data with randomly
chosen tweets  we could filter out those words that most likely connects to stock price 

fito implement tf idf to find out the feature words  we searched the tweets that contain letter e in their contents 
and divided them equally to the size of the training sample  then based on the same dictionary built from training
sample  we created the random tweets word frequency matrix to compare with training samples 
for a given feature size n  we denote the frequency of the word with ith highest tf idf value as xi  and use   
               as our feature 

   results
    

svm

we run support vector regression with the feature we selected against the return of the corresponding stock
for every time unit and single stock 
hypothesis
f   x    w  x  b
feature
target

x is the feature vector  the raw feature is the frequency of the selected
words during corresponding unit time slot
f  x   is the stocks return in this unit time slot

the method do make sense as we can see the plot below suggest some time period our prediction is effective 
in order to test the different combination of feature size and length of time unit we take into consideration we
calculate the test error for all the cases and plot the contour for better data visualization   figure   a  

figure   svm result   a  contour plot shown the testing error with different feature size and unit time length 
 b  comparison between svms testing result and real stock price  highlighted area show great similarity
the test error was calculated via cross validation with     of all samples to train  and the remaining     to test 
it should be pointed out that we have exclude some outlier  which take up about    of the raw data  to made
our estimation more robust  figure   a  indicates that the smaller the sample interval time is  the lower the
error  notably  when the sample interval time is about     the testing error reaches the minimum  less than     
the testing result with optimized unit time length and feature size is plotted as shown in figure   b 

    

nave bayes

nave bayes classifier is a powerful way to deal with text concerning tasks  now we adapt a similar strategy as
spam classifier  as discussed below 
hypothesis
y   h  
feature
                   where n is feature size  xi is the frequency during
corresponding unit time slot of the word with ith highest tf idf value 
target
y i stock price raises in the next time slot of x 

fito find the optimized feature size and unit time length  we utilized cross validation and calculated the testing
error      of the data is used as the training set  the result is shown in figure   a 

figure    nave bayes result  contour plot shown the testing error with different feature size and unit time
length for      discrete stock price change  b  and   discrete stock price change  a    c  comparison between
nave bayes testing result and real stock price 
we can see that with feature size    and unit time length     min  we can get highest accuracy  with these
parameters  we utilized   weeks data to train and predict  we trained the classifier using     samples of the  
weeks and make prediction according to x corresponding to the rest     sample  and compare the predicted y
with real y  the error is     
now we are going further  using nave bayes to predict the stock price  we divided training set range of return
into several intervals        for example  and devote these intervals as                   then y  
    
          similarly  we do cross validation and draw the picture shown in figure    b   and we find that
with feature size     unit time length     min  we can get highest accuracy  we again train the classifier with
    samples of the   weeks and make prediction according to x corresponding to the rest     sample  the
results is shown in figure   c  

   conclusion
this work has successfully demonstrated that using keywords frequency  svm and nave bayes algorithm can predict
any single stocks price in real time  with our given data size  svm gives the best test error  while naive bayes catches
the general trend of stock change pretty well  for each of these two algorithm  the conclusion is discussed as below 

fidue to limited data size  in the support vector regression context  the testing error seems to be more sensitive to
the length of time unit than feature size  this may be due to relatively even distributed word frequency for most  if
not all  samples and the fact that we do not have enough tweets data to select the most effective feature  the words
may not be effective themselves which result in insensitivity to feature size  in sum  with only three weeks data 
though there is for sure still quite some mis fit  but this model does suggest some useful information 
for nave bayes classifier  error is relatively high  however  regardless of the detailed features like local peaks  nave
bayes captured the general trend pretty well  it is because tweets is a delayed and smoothed version of public
sentiment  for example  when news is released  not everyone receive the information immediately and
simultaneously  even if they receive the information  they will not necessarily talk about it or talk about it
immediately on twitter 

   future work
to improve predicting accuracy and decrease error  future efforts should be devoted to the following four aspects 
first  data from longer period of time will be highly helpful  this is true not only because this can increase the sample
size  but more fundamentally  as stock market shows periodic behavior switching between bullish and bearish  data
from longer period of time would catch the public emotion and opinions in both market situations  based on the
first order estimation  half a year to a years data would be preferable 
second  better keywords selection algorithm is needed  this is maybe equally as important as or even more
important than the first one  though tf idf can tell us the stock relevant keywords  it does not tell whether these
words has anything to do with rising or dropping of stock price  in our selecting results  a certain amount of filtered
keywords by tf idf seems to be neutral to stock price change  a better solution would be to look at the words
frequency change for all the mentioned words from selected tweets when stock price rise  compared to those when
the stock price flat out and drop  the different response of these words frequency would tell which words are
relevant to each stock price behavior  very likely leading to better performance  though this is a more accurate
approach  it is doomed to have much longer run time due to significant increase of computing work 
third  because twitter is a delayed and smoothed version of public sentiment  we can try to predict y using x several
time slots ago and combine x from several time slots  for example  we can use                     to predict       
last but not least  improvement on learning algorithm could be further explored  for example  we have only tried
linear and gaussian kernel for svm  some other kernel maybe more suitable to this problem 
focusing on the above four aspects for improvement  this project can be continued developed into an online realtime stock price prediction tool  data can be kept collected and stored in some online storage database like my sql 

   reference
     nofsinger  j         journal of behaviour finance            
     bollen  j   mao  h  and zeng  x  j        journal of computational science        
     hu  z  jiao  j  zhu  j  http   cs    stanford edu projects     html
     ginsberg  j   mohebbi  m patel  r   brammer  l   smolinski  m   brilliant  l   nature                      
     http   en wikipedia org wiki tf e       idf

fi