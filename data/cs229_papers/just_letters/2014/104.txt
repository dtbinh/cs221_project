algorithmic trading strategy based
on massive data mining
haoming li  zhijun yang and tianlun li
stanford university

abstract
we believe that there is useful information hiding behind the noisy and massive data that can provide
us insight into the financial markets  our goal in this project is to find a strategy to select profitable
u s stocks everyday by mining the public data  to achieve this we build models that predict the daily
return of a stock from a set of features  these features are constructed based on quoted and external data
that is available before the prediction date  when considering machine learning models we consider both
regression and classification approaches and several supervised learning algorithms are implemented  in
order to catch the dynamical nature of the financial market  we carefully design out sample testing and
cross validation procedures to ensure that our historical test results are reasonable and is achievable in
the real market  finally  we construct stock portfolios based on our forecast models and illustrate the
performance of these portfolios to show that our strategy works indeed 

i 

introduction

mance of our daily selected portfolio as well as
some discussions and analysis on the results
we get  in part   we draw the summary 

ow can we discover stocks that will
rise in the future  the general answer
is to gather as much relevant and nontrivial information as possible  one possible
way to get such information is mining the huge
amount of financial and internet data that cannot be easily understood  this data allows us
to define various features for each individual
stock  for example  we can distinguish different stocks by their historical performance 
trading volume or sensitivity to external economical and financial variables  then we can
use machine learning models to discover the
underlying relation between these features and
actual performance of stocks  finally  we can
select those stocks that are predicted to have
the highest returns 
the report is organized as follows  in part
  we mainly discuss what data we are using
and how we collected and processed the data 
in part   we introduce our methodology of
constructing features  part   gives the machine
learning models that we are implementing and
the procedures of dynamically training and
testing  part   gives the results and the perfor 

h

ii 

data description

we collected daily trading data of      u s
stocks trading  or once traded  at nyse or
nasdaq from            to             this
dataset includes each days open price  close
price  highest price  lowest price and trading
volume of every stock  data is collected from a
free online database named quandl 
meanwhile  we also collected data that is
not directly related to each stock but may contain additional information for forecasting purposes  these include the daily quotes of  
commodity future contracts  gold  crude oil 
nature gas  corn  cotton     foreign currencies
 eur  jpy  and   interest rate     year treasury
rate   all from            to             the
aggregate size of all data files is      gb 
 

fiiii 

targets and features
construction

hli t  

closepricei t
 
openpricei t

   

note that we can also focus only on the direction in spite of the amplitude  another way of
defining or targets is 


closepricei t
 
 
   
targeti t   sign
openpricei t
for the first definition we have a regression
problem and for the second we have a classification problem  both of these two setups will
be tried 
and then we have to construct features that
help distinguish  or say  define  each stock every day  these features should be relevant to
the performance and should be available before the trading day  it is well known that
stock performance is correlated with dozens
of things and our model will only employ a
relative small amount of features in this paper
for simplicity 
the features we constructed can be divided
into two categories  the first category  which
is named as direct features  contains some
variables that are constructed by explicit  and
lagged  market data of stocks  e g   open  close 
high  low  etc  the other category is named as
indirect features and concerns about the information carried by external factors  that is  we
construct one feature for each external variable
to reflect how a specific stock can be affected
at a certain day when the external variable
changes  now we will have a more detailed
discussion on how we construct the features by
category 
direct features 
based on our raw data  we constructed  
direct features 
reti t  

closepricei t
     targeti t 
openpricei t

   

voli t   ln   tradingvolumei t   
   


tradingvolumei t 
volchngi t   ln
tradingvolumei t 
   
these four features are properly lagged so
that can be computed  and these are all relevant since they measure some trends or relative
strength of each stock 
indirect features 
the intuition of constructing indirect features corresponding to some external economic
indices is to compute the sensitivity of each
stocks return to these indices and multiply
this sensitivity by the latest indices values  as
mentioned above we have data of   external
indices    commodity futures    foreign currencies and   interest rate   for index j  we define
the corresponding feature for stock i at day t
as 
extrn ji t    ji t  index j t 
   

as our goal is to predict the daily return of
each stock  then we naturally define our target
as stock is daily return on day t for all i and t 
targeti t  

highpricei t
lowpricei t

where 

 c    i t          i t  t   argmin  k xi t   yi t k 
   
where 


 
index  t 

index  t 


  
xi t     

 
 
 
  index  tt      index  tt  
   


yi t


targeti t 

 
 
targeti tt

    

here t is an arbitrary window period parameter to compute sensitivity  intuitively  these  
indirect features describe the relative change
of stock ith possible price change at time t
with respect to the change of index j at time t   
since everything defined here is lagged  the
values of these   indirect features are available 
thus we construct    features for stocks 
cross sectional averages of these features are
shown as follows 

   

 

fifigure    the upper figure indicates the cross sectional averages of direct features  including ret  hl  vol 
volchng  the lower figure indicates the cross sectional averages of indirect features including gold 
crude oil  nature gas  corn  cotton  usdvseur  usdvsjpy and treasury

iv 

learning algorithms
implementation

of training and testing models are as follows 
   specify a training window parameter w
   to predict the performance of stocks
on the date ti   use the sample during
ti     ti     ti          ti  w as the
training set to train models 

now that we have specified our targets and features  implementing specific machine learning
algorithm is important 
as we have specified two ways of defining
targets  numerical or categorical   we have two
representations of predicting the performance
of stocks  classification and regression  in the
classification set up we try to predict the trend
of the stock in a specific day  besides  we predict the exact return of a stock in regression
set up  for simplicity we first try linear models 
logistic regression as the classification model
and linear regression as the regression model 
then we implement svm models  classifier
and regression  to explore possible non linear
regularities utilizing kernels  before feeding
into models we also normalize and centralize
our features to mean   and standard deviation
   however our model is dynamic rather than
fixed  depending on the date at which a return
is to be predicted  specifically  our procedure

after we generated predictions for every
day we should measure how good our predictions are  we can compute every days correction rate in the classification models and
the mean square root error in the regression
models but then it would then be abstruse to
compare cross these two categories  we therefore give a more practical and visualizable way
of measuring performance  testing the performance of stocks selected by our models  the
methodology is as follows 
   specify a portfolio size  number of stocks
to be picked  n
   every day choose n stocks according to
the predictions generate by the models 
 

fifor regression model we simply choose
the n stocks that are predicted to have
the highest return  and for classification
models we choose n stocks that are best
classified  i e   with the largest scores in
the classification

another interesting question to think is
whether our models behave stably over time 
from the graph we find that the   linear models behave relatively stably before the end of
      to quantify this we compute sr every
   days and plot these time series showed in
figure  

   compute the actual return of every days
stock basket  compare this time series to
the market index such as s p      furthermore we can denote one specific day
as successful if the portfolio we selected
has greater return than the market index
and as unsuccessful if that didnt happen  then we can compute the successful
rate for each model 
sr  

n o f succes f ul days
n o f total days

vi 

to conclude  we derived an approach to predict
daily returns of u s stocks based on their trading data and external financial indices  our linear models work well in both regression framework and classification framework  the best
model turns out to be linear classifier  logistic
regression  it gives        successful rate and
      cumulative return over    years  however as time pass by the models tend to behave
less stably especially after      
in the future we can try to find methods
that give more stable predictions  from the perspective of machine learning we can try mixing
different models our train models with more
data every day  from the perspective of investment we can make predictions on alphas
rather than returns  also we can try to get
more information from text data  news and
social networks can be excellent information
resources for predicting stocks returns 

    

then we compare different models and
present the model with the best successful rate 
results see figure   and figure  

v 

conclusion

discussions and analysis

the linear models behave well  actually from
the portfolio return graphs we can see that linear classification model and linear regression
model give similar results here  the regression
approach and classification approach both can
capture the underlying regularities 
the supporting vector machines dont behave well enough  one possible reason is that
for these extremely noisy data linear simple
models can behave better  svm classifiers performance is especially bad  one possible reason is that the confidenceof the classification 
or say decision function that we are sorting as
an indicator of potential success doesnt make
much sense in the non linear case  using more
data to train each days model may improve the
performance of svm  but the computational
cost will increase significantly since we retrain
our model for each trading day 

references
 abu mostafa and atiya        abu mostafa 
y  s     atiya  a  f          introduction to
financial forecasting  applied intelligence  
             
 smola and schlkopf         smola  a  j    
schlkopf  b          a tutorial on support
vector regression statistics and computing  
               

 

fifigure    left figure is the result of logistic regression modelin the implementation we specify our window parameter
w   and portfolio size n        we first implement linear models  the logistic regression gives sr  
        the cumulative return of stocks selected by this model  the right figure shows linear regression
model giving sr           the cumulative return of the portfolio selected as we can see that for linear
models  both classification setup and regression setup behave well     invested in      became about     in
     if we have continually implemented the trades suggested by these   models  this success indicates that
our approach did get information from the data we collected 

figure    the left is svm  we use gaussian kernel and since the financial data is highly noised we set the parameter
c as       surprisingly svm give worse results than linear models  for svm classifier we have  sr  
        the return of selected portfolio  the rightis svm regression we get sr          after we adjusted
the window parameter w and the regularization parameter c this doesnt improve much 

figure    it can be shown that all models tend to behave less well as time goes by especially after       we believe that
from that time daily stock prices change depend on more factors than we have recovered 

 

fi