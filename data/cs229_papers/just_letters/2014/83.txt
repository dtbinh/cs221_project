analyzing positional play in chess using machine learning
sameep bagadia
sameepb stanford edu

pranav jindal
pranavj stanford edu

rohit mundra
rohitm   stanford edu

december         

abstract

 

with increases in computational power and better algorithms  chess engines are able to explore game trees of
greater depths and thus have excelled at calculative play 
however  since the growth of the move search space is
exponential  even with increase in computational power
chess engines perform only marginally better year toyear  in this paper  we explore a novel technique for
assessing board positions using machine learning techniques that can be used to supplement and improve current chess engines  we model chess board positions as
networks of interacting pieces and use supervised machine learning techniques to analyze positions and predict outcomes in chess games 

in this section  we describe our dataset followed by the
preprocessing steps that were required to structure the
data 

 

   

introduction

chess has two broad approaches to game play  tactical and positional  tactical play is the approach of
calculating maneuvers and employing tactics that take
advantage of short term opportunities  while positional
play is dominated by long term maneuvers for advantage
and requires judgement more than calculations 
current generation chess engines predominantly
employ tactical play and thus outplay top human players given their much superior computational abilities 
engines do so by searching game trees of depths typically between    and    moves and calculating a large
number of variations  however  human play is often a
combination of both  tactical and positional approaches 
since humans have some intuition about which board
positions are intrinsically better than others 
in our project  we use machine learning to identify
elements of positional play that can be incorporated in
chess engines  we model chess board positions as networks of interacting pieces and predict game outcomes
when the engine evaluates both sides to be of comparable strength  our findings indicate that we can make
such predictions with reasonable accuracy and thus  this
technique can be augmented with current chess engines
to improve their performance 

dataset

   

source and structure of data

we used board positions from      games from an engine
vs  engine tournament in           this provided us with
a total of           board positions in portable game
notation  pgn  where a board position is a snapshot of
the game at a point in time  we parsed the pgn data
to a more convenient forsythedwards notation  fen 
for further processing 

data selection criteria

each board position also had an associated score calculated by the engine  a board score is a measure of
the relative strength of white compared to black  thus 
a positive value indicates that the chess engines evaluation believes that white is in a stronger position while
a negative value indicates the converse  if a board score
is near zero but the game then goes on to end decisively 
we hypothesize that aspects of positional play were unaccounted for by the chess engine  thus  we consider
only those board positions where the board scores are
nearly zero but the game ends decisively  it is worth
noting we restrict our focus to engine vs  engine games
where we know that the successive moves are going to
be tactically optimal  thus  the board positions we considered are those whose outcome can be attributed to
positional aspects with high confidence  the hypothesis
can be seen in table   
table    cause of outcome
outcome
white win
black win
draw

 
positional
positional
variable

engine score
 
 
tactical
improbable
improbable
tactical
improbable improbable

fi 

networks   features

to capture interactions between various pieces and locations on the board  we modeled the board as networks
with board squares and pieces as nodes  and the interactions as edges with attributes  this approach is similar
to that seen in      for each board position  we create
the following two networks 
   support network  this is a network where each
node represents a piece and each directed edge represents that the first piece can reach the second
piece  if the edge is between pieces of the same
color  then it is attributed to be a defense edge  since
the first piece can defend the second piece   conversely  the edge between pieces of different color is
attributed to be an attack edge  figure   demonstrates attack and defense edges on a chess board 
the corresponding network for this board position
can be seen in figure  a 
   mobility network  this is a bipartite network
from chess pieces to board squares  an edge from
a piece to a location represents that the piece can
reach that location on its next move  mobility edges
on a chess board can also be seen in figure    the
corresponding network can be seen in figure  b 

 a  a chess board support network

 b  mobility network for white

figure    network structures for board positions
 mobility around the king  captures the concept of
king safety in chess  it is desired to have low mobility of opponent pieces around your king
we also used some well recognized heuristics for positional features  some of these can be seen in figure  
and are listed below 

figure    attack  defense  mobility
after creating the aforementioned networks for each
board  we extract features from these network representations  some of the features are 
 number of edges in the mobility network  indicator
of the mobility of various chess pieces on the board
 termed as activity in chess 
 number of nodes in the mobility network  captures
the notion of a space advantage in chess
 number of attack and defense edges  each side will
ideally want to have a fewer attack edges from the
opponent and more support edges to its own pieces
 number of weakly connected components  this
measures how well the pieces coordinate with each
other

figure    pawn structures
 isolated pawns  pawns that cannot be supported
by other pawns  indicates a weakness in the pawn
structure 
 doubled pawns  multiple pawns in the same column  again indicative of weaknesses in the structure
as they barricade movement

fi open files  a column on the chess board without
any pawns of the same color  considered an advantage in presence of rooks  since it allows for additional mobility
 passed pawn  a pawn which cannot be attacked by
any enemy pawn and has cross the  th rank on the
chess board 

 

model and feature selection

in this section  we describe the models that we used for
our classification problem and the approach taken for
feature selection 

   

models used 

considering the differences in discriminative and generative models  we used the following classifiers for our
binary labelling task 






naive bayes  generative 
linear discriminant analysis  generative 
logistic regression  discriminative 
support vector machines  discriminative 
random forests  discriminative  ensemble 

the performance of the different models can be seen in
the table   and have been discussed in greater detail in
the next section 

   

overview of training  testing and
feature selection 

after this  we retrained the features and compared performance and repeated the feature selection process if
necessary  at last  we used the final model to evaluate
the test error 

 

results

in this section we discuss our prediction accuracy and
compare it with engine score as a predictor of the outcome 

   

baseline accuracy

for each board position we know what the enginepredicted score for that position is  since a positive score
for one side indicates a stronger position for that side 
we were able to measure a baseline prediction accuracy
using the engines scores as a proxy for the result of the
game  in other words  if the engine had to predict the
result of a game by looking at the board positions  it
would simply calculate the board score  s  and predict 

   s 
h s   
   s  
this perceptron like approach of calculating baseline
accuracy allowed us to evaluate how well engine score
can predict game outcomes at different board scores 

   

machine learning accuracy

consider the case when engine predicted score is exactly
  but the game ends decisively  thus  engine predicts
equal probability for both sides to win making the baseline accuracy as      the prediction accuracies of our
method in this case are shown in figure    random
forests performed the best with test accuracy of       
which is quite good as compared to baseline accuracy
    
table    machine learning accuracy results

figure    overview of approach to feature and model
selection
our first step involved mapping the data in fen to
the set of features described earlier in addition to some
others by constructing the chess game networks  we
split this dataset into a training and cross validation set
       and a test set        for each of the models
described above  we trained the model and optimized
hyper parameters using the training and cross validation
dataset to prevent bias variance issues  after analyzing the feature importance using data visualization techniques  we removed poor predictors and noisy features 

 
 
 
 
 

classifier
random forest
logistic regression
svm  rbf 
lda
naive bayes

train
      
      
      
      
      

test
      
      
      
      
      

chess positions are often very complex to analyze using this feature based approach  many features might
indicate a weakness depending on a particular configuration for the other features but a strength for another
configuration  for example  open files may be a strong
advantage when a side has rooks on these files but can
be a weakness if the side does not possess rooks but the
opposition has rooks with the same set of open files  it is

fivery hard for most discriminative generative models to
capture this complexity on a case by case basis  but decision trees are intrinsically designed to handle such kind
of feature interactions  thus  random forests is able to
outperform other classifiers 

   

analysis of results

we considered board positions where the absolute value
of the engine score was less than some value x close to   
we varied the value of x from   to   and compared the
machine learning accuracy with the baseline accuracy for
that set of board positions  the results can be seen in
figure    when x is very close to    machine learning approach using positional features performs very well and
outperforms the baseline accuracy with a good margin 
when x is greater than       the baseline accuracy is
higher  this is because having positions with different
scores makes it harder for the features to capture the
variety of detail in the board positions  on the other
hand  by training only on a small range of board scores
we are able to achieve much higher accuracies 

figure    augmenting machine learning with current
chess engines

 

conclusion   future
work

using machine learning we were able to predict the game
outcome with approximately     accuracy for positions
where the engines were unable to assign an advantage to
either side  i e  prediction accuracy of     if we use the
engine score as a predictor   these results demonstrate
that engines lack important positional insight into the
game that our features and models capture  given this 
possible future directions of our work are 
 enhanced features  a case by case analysis of existing features with the possibility of additional features would provide additional insight to incorporating positional play in chess engines 

figure    machine learning vs baseline
we also identified features that are most important
in predicting the board outcomes  the top five features
with their relative importance are shown in figure    we
notice that mobility network features play an important
role in positional features 

 augmenting chess engines with positional
play  the results from machine learning can be
added to the board evaluation function that chess
engines use and can be tested against state of theart engines  an example of how our predictions
can be used to recalculate board scores and improve decision making can be seen in figure    in
this example  positions predicted to win and lose
are awarded and penalized     points respectively 
note  since feature computation can be expensive 
it should be included only at the top few levels in
the game tree search rather than at the leaf level 
the source code for many state of the art engines is
available to the public     

references
    h 
van
kempen 
      
nunn
tournaments
 
cegt
       
 online  
available 
http   www husvankempen de nunn 
downloads        new downloads htm
    d  farren  d  templeton  and m  wang  analysis of
networks in chess  stanford university  tech  rep  
     

figure    relative importance of top features

     online   available  https   github com mcostalba 
stockfish

fi