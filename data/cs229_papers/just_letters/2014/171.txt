real time on board flight path optimization under
constraints using surrogate flutter function
arthur paul dubois taine   stanford university  stanford  ca      
a real time approach for aircraft flight path planning is considered  the approach uses a dynamic
programming optimization to find the best possible trajectory in a discretized state space under flight
envelope  fuel and flutter constraints  in order to perform real time evaluation of the flutter constraint function  a surrogate model of the flutter function is introduced and trained using various
machine learning techniques  in particular  both regression and classification approaches are considered  in addition  due to the high cost of generating data  sampling issues will be considered  at
first  a simple a priori of the feature space is used to generate the training set  then a greedy sampling approach using an appropriate criterion along with kmeans clustering is introduced and used
to generate a better training set 

i 

introduction

this project addresses the issue of airplane real time flight path optimization  flight path optimization has numerous applications 
airlines dispatchers use simple flight path optimizations algorithms daily to decide how to fly their airplanes and save on fuel  military airplanes rely on such algorithms to minimize their time to target while minimizing operational risks and stress on the airplane
structure  aircraft designers use it as a design tool to improve performances  however  currently  most flight path optimization
algorithms require somewhat involved numerical simulations which must be run from the ground a priori using estimated flight
data  leaving the pilot with little ability to re optimize his flight path in real time based on actual flight conditions or in case of
unplanned circumstances  there is a growing interest in designing so called real time flight path optimization algorithms that can
instantly compute optimal trajectories while satisfying some flight constraint such as remaining in the aircraft flight envelope  i e 
below a certain speed altitude combination   fuel level constraints  the aircraft must not run out of fuel   or avoiding flutter for example  however  real time flight path optimization is only possible if all constraint and objective functions can be evaluated cheaply 
in an optimization context  multiple queries must be made to both the objective and constraint functions  however  some of
the constraints can only be evaluated using expensive computer simulations on large computer clusters making the algorithm impossible to embed on the airplane computer without modification  in particular  the so called flutter function is extremely expensive
to compute as it requires a full  d simulation of the flow around the aircraft as well as its structure  in this project  machine learning
techniques will be used to construct a cheap proxy of the flutter function in order to dramatically reduce the cost of the optimization
routine  the aircraft considered is the lockheed martin f    raptor fitted with an external fuel tank 

a 

background information on aerodynamic flutter

flutter is an aeroelastic phenomenon that can occur in airplanes when oscillations in the fluid flow around the aircraft excites its
internal structure close to its natural modes of vibrations  in such cases  the amplitude of vibration of the structure can be increased
to the point where the wing can rupture  flutter has been the cause of many catastrophic failures in aircraft development history 
and is one of the main concerns of aircraft designers  one of the most famous flutter failures to occur is shown in figure      the
accident happened on a northrop f    scorpion aircraft during a flypast at the international aviation exposition in       more
recently the boeing f   aircraft has faced flutter issues  which forces its rear tail to be replaced after a couple hundred hours of
flight  in general  flutter is a function of speed  also called mach number m    altitude h and fuel level f  fuel level influences
the vibration modes of the structure  

variable name
speed  mach number 
altitude
fuel level

symbol
m
h
f

unit
none
 ft 
   

table    features of the problem

figure    f    scorpion crash due to flutter failure
 graduate

research assistant  department of aerospace engineering  farhat research group  artpdt stanford edu

  of  
cs    final project

fiii 
a 

learning the flutter function

features

as explained above  computing the flutter is extremely expensive and cannot be done in real time on an aircraft computer  in this
section  the flutter evaluation routine will be replaced by a surrogate constructed via machine learning  in addition  the issue of
sampling the training set is investigated  in particular  the idea of a greedy sampling for generating the best possible training set
is explored  mathematically  the problem of finding a proxy for the flutter function f can be expressed as that of finding some
hypothesis h such that 
h  h  m   f    f  h  m   f  
   
the features of the problem are described in table    in the remainder of this paper  the space of all possible  h  m   f   will be
referred to as the feature space 

b  generating flutter data
   approach
without going into too much details  determining whether an aircraft will experience flutter requires computing the vibration modes
of the structure  solve for the fluid flow parameters around the aircraft  and finally coupling the two results to determine whether the
structure is excited in a critical fashion  in this project  this was performed using two state of the art simulation codes  both open
source  developed by the farhat research group at stanford university 
 aeros for the structure simulation
 aerof for the fluid simulation
both codes feaure large parallelization capabilities which make them computationally very powerful  simulations are run on
a cluster using    cpus  and one run requires about   hour  despite the efficiency of the code  computing flutter solutions for the
test set in the discretized state space took weeks and roughly        cpu hours for the chosen aircraft 
flutter can be represented either as a continuous or a binary variable 
 discrete representation  describes whether flutter is occuring  f    h  m   f   or f    h  m   f     this representation is
illustrated in figure      a  and suggests a classification approach 
 continuous representation  flutter occurs if the so called damping ratio is negative  hence  instead of representing flutter 
we can model the continuous damping ratio   h  m   f    function  then  flutter occurs if  h  m   f        this
representation is illustrated in figure      b  and suggests the use of a regression like approach 
both approaches will be examined here 

  

test set

in order to test the accuracy of the different training procedures  a test set has been generated by running the exact flutter function
for     different  m   h  f   combinations                of the test data were sampled evenly in the state space  and the
remaining     were randomly placed using latin hypercube sampling     
damping ratio function
 

damping ratio 

  

flutter zone for f   raptor aircraft with external fuel tank
no flutter
flutter

fill level f    

   

x   

  
  
 
 
 
 

  
 
 
 
   

 
   

   

   
   
mach number m

 

 
   

   

 
 

x   

 

fuel level     
fuel level      
fuel level      
     plane  flutter limit

 
x   
altitude h f t 
 

altitude h f t 

 

a  binary flutter representation

     

   

   
   
 
mach number m

   

b  continuous flutter representation via damping ratio

figure    binary and continuous flutter representation

  of  
cs    final project

fic 

training using direct sampling methods

sampling is an important issue in this problem because the flutter function is expensive to compute  and the size of the training set
should therefore be kept to a minimum  in this section  the flutter function will be learned using a training set generated via a a
priori sampling  also called direct sampling  here  the training set is sampled using a mixture of nunif orm uniformly placed points
in feature space  and nlhs latin hypercube sampling  lhs  points      the goal of this approach is to cover the feature space as
evenly as possible while still allowing some random feature space exploration through the lhs  using this approach  the chances
of finding interesting training samples are maximized 

  

classification approach

here  flutter is treated as a binary variable  f    h  m   f   or f    h  m   f     a support vector machine  svm  model is chosen
for the classification  and trained on data sets of various sizes  since flutter can result in catastrophic failures of the aircraft  there
is a very low tolerance for misclassifications  and the relaxation constraint of the svm is therefore set to zero  i e  i      
each hypothesis is evaluated using the     test samples  the percentage and number of misclassified points are reported  table  
shows the accuracy for different svm kernels for a given sampling strategy  the best kernel  polynomial  is retained and used
for the remainder of this section  different sampling strategies are then tested as shown in table    results show that the number
of uniformly placed samples has little influence on the testing error  this is because uniform points are typically located near the
feature space boundary  which means far from the decision boundary  on the other hand  adding extra lhs points produces more
informational data  and has a better chance of helping svm identify the correct decision boundary  in addition  as expected  results
vary as the total number of samples increases  the most accurate svm hypothesis for        and    samples have       and  
misclassifications respectively 

svm kernel
gaussian
linear
quadratic
polynomial
multilayer perceptron

error      nmisclass       
            
            
            
           
            

nunif orm
    x x  
     x x  
    x x  
     x x  
    x x  

nlhs
  
  
  
  
  

error      nmisclass       
           
           
          
          
         

table    svm classification error for nunif orm           table    svm classification error for various sampling stratenlhs      and various kernels
gies  polynomial kernel

  

regression approach

the flutter function can also be represented as a continuous variable  the damping ratio   as shown in figure      b   if the
damping ratio is negative  flutter occurs  i e  f      h  m   f         the same sampling strategy as previously is applied  the
damping ratio hypothesis is trained using a kriging model  the dace matlab toolbox     was used here  which uses a combined
regression correlation approach to represent the data  kriging models have been shown to be efficient at modelling deterministic
computer models      the model is fitted via maximum likelihood and also comes with a built in error estimator  as for svm 
multiple kriging kernels and regression polynomials are then tested as shown in table    an exponential kernel along with a  st
order polynomial is retained for the remainder of this section  table   then shows the effect of sampling on the resulting hypothesis
accuracy  the same trends as for the svm approach are noted  but the overall accuracy of the regression based approach seems
to be better with       and   misclassification for        and    training samples respectively  therefore  for the remainder of this
paper  the regression approach is retained 

p   
 
 
 
 
 
 
 
 
 

kriging kernel
gaussian
gaussian
gaussian
exponential
exponential
exponential
spline
spline
spline

error      nmisclass       
           
           
            
           
           
           
           
           
           

nunif orm
    x x  
     x x  
    x x  
     x x  
    x x  

nlhs
  
  
  
  
  

error      nmisclass       
           
           
          
         
         

table    kriging model error for various sampling strategies 
exponential kernel and  st order regression polynomial

table    kriging model error for nunif orm           
nlhs      and various kernels   p is the order of the regression polynomial in the kriging model 

  of  
cs    final project

fid 

greedy sampling approach

direct sampling approaches such as those presented in section ii b are simple  but have one major shortcoming  they do not include
any information about the specificities of the objective function  which makes them somewhat inefficient  for example  in the
present case  the only region of the feature space that matters is the decision boundary  adding training sample points far from the
decision boundary has essentially no effect on the accuracy of the hypothesis  on the other hand  sampling points near the decision
boundary will improve the hypothesis significantly  however  the is no way to know the position of the decision boundary a priori 
in order to progressively locate the decision boundary and refine the training set in its vicinity  a greedy sampling approach is now
proposed 
the idea behind greedy sampling is to start with a small set of sample points in feature space and train a rough hypothesis from
that using the kriging model  the hypothesis is then evaluated to locate the decision boundary  and new sample points are queried 
after that  the hypothesis is re trained with the updated training set  and the procedure is repeated until desired accuracy is reached 
in practice  this procedure allows to generate more informative samples than direct sampling 

  

training set enrichment

at each greedy step  the goal is to refine the model near the decision boundary  in order to efficiently do so  one must 
   identify regions where the model is inaccurate  i e  it is useless to add a new sample near an already existing one  
this can be achieved by using the mean square error estimate built in the kriging model which provides an a posteriori
error estimator  mathematically  this can be expressed at ekriging  h  m   f    m se h  m   f    the mse is readily
available from the dace toolbox and comes at negligible extra cost for the given problem size 
   locate the decision boundary  this is achieved by using the damping values predicted by the kriging model kriging  h  m   f  
and finding their absolute minimum  recall that flutter occurs when       therefore  identifying the decision boundary
comes down to finding the roots of  h  m   f    and finding the absolute minimum is one way to do it 
using the two above ideas  a greedy score criterion is devised  the criterion is designed to find the feature space locations

 h   m
  f    that  i  are located in regions where the model is inaccuracte  i e  mse is high  and  ii  are in the vicinity of
the decision boundary   is minimal   the selected criterion is the following 

 h   m
  f      argmax h m  f   gs h  m   f     argmax h m  f  

m se h  m   f  
    kriging   h  m   f    

   

where  is just a small smoothing term  in addition  the algorithm is able to add multiple samples per greedy iteration by looking
at the n largest scores  and clustering the resulting feature space locations via k means clustering in order to identify multiple
regions to refine at once  the optimal number of clusters is automatically identified using an approach developed in     

  

results

fig    presents the evolution of the hypothesis accuracy as points are greedily added to the training set  each greedy approach is
represented by the number of uniform and lhs points it started with  and the number of samples as the end of the greedy sampling 
for example  the blue curve represents a greedy sampling that started with nunif orm    x xs      uniform and nlhs    
lhs points  then  ngreedy   ntotal  n unif orm  nlhs                 new training samples are added using the greedy
approach  results show that the greedy approach to sampling is much more efficient than the direct one  in fact  as shown in table
   for the same number of training samples  the best direct sampling methods have at least three times as much misclassifications
than the best greedy ones  this shows that greedy sampling significantly improves the quality of the hypothesis whithout increasing
the number of samples  and therefore the computational cost   this is again because the greedy sampling has the ability to locate
the decision boundary and add extra samples in its vicinity 

nsamples
  
  

best hyp  error      nmisclass       
direct sampling
greedy sampling
           
          
          
         

ncalls to function
ncalls to proxy
total cpu time  cpu s 
speed up factor
speed up factor  

true function
proxy
    
  
 
    
         
         
  
      

table    svm classification error for various sampling strategies  exponential kernel and  st order regression polynomial table    optimization time with  and without flutter proxy 
time for   function call           cp u  s  time for   proxy
call     cp u  s     not including training 

iii 

optimization results

note  there is no additional machine learning aspect in this section  but it is the motivation for this project  so i decided to include
is anyways 

  of  
cs    final project

figreedy training results
  
greedy sampling   x x         
greedy sampling   x x         
greedy sampling   x x          
direct sampling for comparison

number of misclassified test points

  

  

  

  

  

 
  

  

  

  
  
number of training samples

  

  

  

figure    greedy training  kriging model  test set error vs number of samples  different greedy approaches are represented
as  nunif orm     nlhs  ntotal  
the best hypothesis is then selected and integrated in the optimization routine as a proxy for the flutter function  the path
optimization problem is solved using a dynamic programming approach      fig    presents optimization results and shows speed
 m    altitude and fuel level vs  distance traveled for the best flight path   in addition  speed comparisons between optimization
using the true flutter model and that using the proxy are shown in table    if the proxy was not trained offline previously  the training
must be done offline  despite that  the optimization is still    times faster than the version using the true flutter function  if the
proxy is trained offline  the full optimization routine runs in a matter of seconds leading to speedups of as much as    millions 
 

m

   
   
   
   
 

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

altitude  ft 

distance  mi 
     

    

 
 

  

  

  

  

fuel level    

distance  mi 
   

internal tank
  

external tank
 
 

  

  

  

  

distance  mi 

figure    optimization results  speed  altitude and fuel level vs  distance for optimal path

iv 

conclusions and future work

in this work  the need for a cheap proxy of the flutter function in oder to perform real time flight path optimization is explained 
to do so  both classification and regression approaches with various models and kernels are examined and tested  the regression
approach is shown to provide better accuracy for the problem of interest and is hence retained  because data generation comes at
a high cost  the size of the training is minimized via appropriate sampling  direct and greedy sampling are explored  and greedy
sampling is shown to provide superior accuracy  finally  addition of the best proxy to the optimization routine is shown to provide
speedup factors of at least    
in the future  the accuracy of the hypothesis could be improved further by adding gradient information to the training set  a gradient
enhanced kriging model called cokriging could then be generated with superior accuracy  in addition  alternate greedy sampling
criterions could be explored  one could imagine some kind of cross validation based criterion for example 

references
    iman  r   latin hypercube sampling  encyclopedia of quantitative risk analysis and assessment iii       
    martin  j d   simpson t w  on the use of kriging models to approximate deterministic computer models    th design
automation conference salt lake city  utah  usa  september   october         
    lophaven et  al  dace  a matlab kriging toolbox  imm department  technical university of denmark 
    t hastie  r tibshirani  and j h friedman  the elements of statistical learning  data mining  inference  and prediction  second
edition  springer  august      
    amsallem et  al  model predictive control under coupled fluid structure constraints using a database of reduced order
models on a tablet   st aiaa computational fluid dynamics conference  june              san diego ca 

  of  
cs    final project

fi