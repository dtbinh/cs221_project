cs     fall     

predicting yelp ratings from business
and user characteristics
jeff han
justin kuang
derek lim
stanford university
jeffhan stanford edu kuangj stanford edu limderek stanford edu

i 

abstract

with online evaluation systems  people have
a new way of making an informed decision 
ebay  amazon  stack overflow  and yelp are all
examples of online systems where users submit
their evaluation of a particular item whether
it be another user  a product  etc      these
networks allow a user to submit their opinion
to be read and evaluated by other users in the
network  these crowd sourced reviews act as
a method for users to infer evaluations like
whether a restaurant is worth going to  if a
product is good quality or whether to trust an
online seller  these systems form the backbone
behind the trust in online transactions     
we will look at the yelp network specifically 
past work has included ways to predict the star
rating by doing sentiment analysis on review
text      we will approach this task from a new
angle by predicting solely based on features
of the user and business  without information
from the review text  in this scenario  then simply given a user and a business  we can predict
how the user will rate the business  we can extend this as a way to recommended businesses
to a given user based on the prediction of how
much they will like the business  the work in
this paper can be extended to several applications beyond yelp  in general  it shows how a
users evaluation depends on the surrounding
factors and context it is within 

ii 

introduction

online evaluation systems have given people
a new factor to consider when making everyday decisions  for example  before buying a

new tv or furniture set  people can now first
check its reviews on amazon  when deciding
where to eat pizza tonight  hungry customers
can look up restaurant reviews on yelp 
we will explore the underlying user and
business properties of the yelp network and
how that can be analyzed to draw conclusions
about a given review  in particular we will explore what information can be extracted from
user and business features and how to predict
star ratings based on those features 

iii 

dataset description

in this paper  the data we use comes from the
yelp dataset challenge sponsored by yelp  it
consists of        businesses          business
attributes         check in sets          users 
        tips  and           reviews  as shown
in the graph  the dataset is comprised of the
following           star reviews           star
reviews           star reviews           star
reviews           star reviews  from this we
can see that the dataset is skewed towards
positive higher star reviews  users rate businesses using integer star ratings                 
average star ratings for businesses are defined
at a half star granularity                           
and average star ratings of users are defined
up to two decimal points         in order to
reduce the reviews to a manageable size we
only take into account users who have made   
to     reviews  which amounted to a sample
size of over       users  the review  business 
and user data were centralized in a mongo
database which we used as the main datastore
for this implementation 

 

fics     fall     

figure    star rating distribution

iv 

linear regression

baselines  we begin by defining two baselines
to be used as a metric to compare against  baseline    b   will predict the star rating based
solely on the average star rating given by user 
that is  a prediction for each user is made
based on the average of the users previous
rating  baseline    b   will predict the star rating based solely on the average star rating of
all reviews  that is  it takes the average of all
tested reviews and uses that average as the prediction for the remaining reviews  running b 
yields prediction accuracy of    percent  b 
yields prediction accuracy of    percent 
linear regression on reviews 
this
method combines features from both the users
and from the businesses  for each review we
pull features both from the user who made
the review and from the business the review is
for  the data set is split into training and test
portions in increments of      that is  training 
testing  set to                        and so on  for
a total of nine splits  we also go through every
possible permutation of the features  such that
we either include or omit the feature for a total
 n possible permutations  where n is the total
number of features  thus for for this linear
regression model  a total of   n        runs are
done  when testing each review  we produce a
predicted rating and the mse when compared
to the actual rating  the average of the mses
for each training testing split are shown below
in figure   
 

figure    results of linear regression for different training testing splits
the total possible features used for this run
are  user review count  user average stars 
user friends  user fans  business review count 
business stars   running through every permutation of features shows that the features with
the highest weights are the user average stars 
business average stars  and business review
count  thus these features have the highest
impact on the overall score  which agrees with
intuition  all of the other features have relatively low weight and thus very little impact on
the prediction  compared to the baseline  this
method achieves much greater performance 

v 

collaborative filtering

basic procedure  given a user and a restaurant  first we find a group of similar users
to the given user who have also been to the
restaurant  we will define this group as the
similarity group  similarity between users
is calculated from the users average ratings
given to different categories of restaurants  and
the user overall average star ratings  from
this similarity group  we use a combination of
the ratings similar users have assigned to the
restaurant  and make a prediction of what the
given user will rate the given restaurant  we
find the similarity group by looking at all the
users who have gone to that given restaurant 
and rank them based on similarity as defined
later  from this similarity ranking we base our

fics     fall     

prediction on the top n most similar users as
defined by our model  an illustration of this
procedure is shown below 

figure    making a prediction from n similar
users
utility matrix  we define user features as
the average rating given to different categories
of restaurants  example  american     chinese 
   italian     thai     we define a utility matrix
to capture these user features  we have two
groups  users and user features  the rows of
the matrix correspond to the users and the
columns correspond to the user features  the
value of a particular cell in row i and column
j represents the rating which user i gave category j  a sample of this utility matrix is shown
in figure   below 

figure    utility matrix
similarity measure we explore three different methods of measuring similarity  jaccard similarity  cosine similarity  pearson
correlation coefficient  the flaw with jaccard
similarity is that it ignores the value of the
rating and only looks at the set of features with
ratings  pearson correlation coefficient is similar to cosine similarity but has a downside in
that it slightly more computationally expensive 
for these reasons  we settle on using cosine
similarity  shown below in figure   

figure    cosine similarity

using the cosine similarity measure by itself for our purposes presents an issue  all
features are counted as positively correlated 
that is  by simply having a feature present  it
will have a positive impact on the prediction 
regardless of how positive or negative the rating is for that feature  to explain this issue
with an example  if user   rates thai restaurants    meaning he likes thai food  and user
  rates thai restaurants    meaning he doesnt
like thai food  this will result in a postive similarity simply because they have both been to
thai restaurants  this is erroneous for our application of an accurate prediction  to address
this  we normalize the utility matrix by subtracting the row mean from each value  this
makes it so that a users lower rated features
will use a negative value to be used in computing similarity 
rating prediction methods  now to arrive at a prediction we analyze two different
methods  namely unweighted average and
weighted average  for an unweighted average 
we take the n most similar users  and simply
use the average of those users ratings of the
given restaurant 
for a weighted average  we weight each of the
top n most similar users by their similarity
value  we compute the weighted average as
defined in figure    in the weighted average
figure  let n represent the set of n most similar
users  s xy represent the similarity between user
x and y  and r xi and ryi represent user xs and
user ys rating of category i 

figure    weighted similarity average

vi 

results

we ran the algorithm defined by our model
through every review in the entire reduced
dataset  for each run  we produced both
weighted and unweighted predicted ratings
and calculated the mses from the actual rating 
 

fics     fall     

all the mses for the run are then averaged
as a measure of performance for the run  we
repeated this using a different similarity group
size n for all group sizes up to n     we
also ran it for a group size n all that matches
the size of all users who have gone to the
restaurant in question  the results are shown
in figure   below 

figure    average mse with varying n
the run that used a group size n all turned
out to produce the lowest average mses for
both weighted and unweighted methods  a
comparison of the predicted ratings to actual
ratings  along with a trendline  are shown in
figure   below  for readability and to avoid
cluttering of points  a subset of a hundred
points are used in the figure    

figure    results of the lowest error run

vii 

discussion

from the results  we see that the weighted similarity prediction exhibited a lower mse compared to the unweighted similarity prediction
for a similarity group smaller than ten  this
 

is not surprising as an unweighted prediction
give each member of the similarity group equal
influence on the overall prediction  which may
be detrimental if the discrepancy between the
most and least similar group members is large 
however  after the similarity group exceeds
ten members  the difference between the performance of the two measures converge  we
believe this is due to dilution in the similarity
group weighting system  as more members
are allowed into the group  the total sum of
similarity measurements  which form the denominator of the weights  grows larger and
thereby reduces the influence of the most similar members from the overall prediction 
another trend that exists for both weighted
and unweighted similarity prediction methods
is that the mse monotonically decreases when
increasing the similarity group size  this implies that the more reviews that we consider
when forming the overall prediction  even from
users that may be not similar to the test user 
the better the prediction  in the  all  case 
when all users who have rated a particular
restaurant are in the similarity group  we see
that the lower limit of the mse is a bit below
    for both prediction methods  this trend
suggests a tradeoff between computation complexity and prediction accuracy since a larger
similarity group leads to more computation 
however  this is a reasonable tradeoff that is
present in many recommendation systems 
lastly  we recognize that the current system
does not predict low star ratings  those of one
or two stars  very well  the reason for this is
twofold  first  the distribution of aggregate
star ratings is non uniform as three  four  and
five star ratings account for over     of the
total ratings in our dataset  second  the star
predictions are calculated by summing parts
of the actual ratings from members in a test
users similarity group and therefore  any high
rating of the restaurant for a review in that
group will skew the overall prediction in that
direction  however  even though this presents
a problem for reducing mse  it may not effect the overall results of a recommendation
engine that is created on top of this star predic 

fics     fall     

tion scheme  even though predictions of one
and two stars may be higher than their actual
values  it is unlikely that they will be higher
than the prediction of a three  four  or five star
review  thus  a recommendation engine that
takes many restaurants as inputs will almost
always serve an actual higher rated restaurant
over a misclassified low rated restaurant  this
way  it is highly unlikely that such a misclassification will ever reach the end user 

viii 

future work

improving similarity measure  in the current
implementation  the magnitude of the similarity measure between the test user and a member in the similarity group is used to assign
a weight to the similarity group members rating for the restaurant in question  thus  the
weighting mechanism used is linear in the similarity measure  however  we suspect that this
is non optimal  since as the similarity group
size increases  the weighted and unweighted
similarity predictions converge due to a larger
total weight denominator  thus  we believe
using a non linear weight distribution model
will better account for star rating predictions
in large similarity groups 
enhanced low star predictions a few
ideas that may improve the prediction of low
star ratings is to subtract from a test users aggregate prediction the ratings of members in
the similarity group with negative similarity 
furthermore  we believe it may be interesting
to consider the businesses aggregate rating distribution and incorporate a random weighted
variable from that distribution to the prediction 
extension to recommendation engine finally  we wish to use our rating prediction
model as a part of an overall recommendation
engine  the most simplistic way of implementing such a recommendation engine would be to
rank all restaurants by predicted star rating for
a given user and serve the recommendations in
that order  more advanced algorithms can also
incorporate location aware services  sentiment

analysis on what a user is currently craving 
and social hot spots  this recommendation
engine would therefore attempt to curate a personalized dining experience for each user 

ix 

conclusion

in conclusion  we have shown that a user star
rating of a restaurant can be predicted with
high level of accuracy by using a similarity
measure algorithm between yelp users  by categorizing a users past reviews of restaurants
into food categories  we formed a user feature
vector by finding the average star rating of each
type of food category the user has rated  the
algorithm is also fast and computationally inexpensive since a recommendation is linear in
the number of reviews of a specific restaurant 
a users feature vector can be updated with new
reviews in contant time  and an entire user can
be onboarded in linear time with respect to
number of reviews published  we believe the
similarity measure algorithm with the feature
vector we constructed can be used as the foundation of a restaurant recommendation engine 
such a recommendation engine can be useful
in directed advertisements and help build a
better user experience based on confident and
trusted suggestions in yelps current and future services 

references
    j  leskovec  mining massive data sets 
recommendation systems lecture notes 
    b  sarwar  g  karypis  j  konstan  j  riedl 
item based collaborative filtering recommendation algorithms  in proceedings of
  th international conference on wold
wide web  acm  new york  ny  usa 
        
    js breese  d heckerman  c kadie  empirical analysis of predictive algorithms
for collaborative filtering  in uai   proceedings of the fourteenth conference on
uncertainty in artificial intelligence 

 

fi