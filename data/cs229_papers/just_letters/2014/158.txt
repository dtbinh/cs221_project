instrumental solo generator
prithvi ramakrishnan  aditya dev gupta
 prithvir  gaditya  stanford edu
musical ideas can be successfully applied to a machine
learning system 

abstract
instrumental solo generator     allows musicians to tap into a musical vocabulary that
extends beyond that which they have built on
their own  the system accepts a chord progression as an input and outputs musical ideas in
the form of a midi file  a clustering algorithm
is used to reduce the sample space of chords
and musical ideas  after which a svm with a
linear kernel is used to suggest musical ideas for
chord progression inputs  these musical ideas
are intended to be used as a starting point for
exploration in the composition or improvisation
process  instrumental solo generator does not
aim to replace the human performer  but merely
serve as a tool for idea generation as part of the
music development process 

 
   

dataset
data retrieval

this project uses midi files as input data  midi provides a precise representation of pitch and duration 
datapoints that are key components of the feature
space and solo generation process  midi transcriptions of blues and jazz performances are ubiquitous
on the internet  making data retrieval fairly straightforward 
midi data was scraped from an online repository 
of jazz and blues pieces using wget  we avoid manually selecting midi files in order to preserve the objectivity of the dataset  because the driving premise
of this project is to provide an unbiased realization
  introduction
of instrumental solo ideas from a diverse musical vothe jazz and blues genres of music are grounded in cabulary  the dataset includes     midi files conimprovisation  an aspect that can sometimes be de  taining a diverse collection of jazz and blues pieces
terrent to young musicians seeking to transition from from a wide range of genres  artists  styles  and time
the relatively straightforward classical genre  suc  periods  thereby diversifying the training data 
cessful jazz and blues performers often spend years
in training developing an ear for thematic ideas and     data processing
motifs that can be used as part of an improvised solo
by accessing a personal vocabulary of musical ideas  music   is a python based toolkit for computer aided
clearly  there is an aspect of  learning  in the musicology that enables scholars and other active
process of maturing into a successful jazz performer  listeners to answer questions about music quickly
musicians encounter hundreds  or even thousands  of and simply     music   enables the representation of
phrases that become a part of their vocabularly  and symbolic music as objects in the form of a musically
then selectively unleash these ideas in response to a intuitive hierarchial structure  this was instrumengiven musical stimulus  the impetus for this project tal in allowing us to parse midi files into training
stems from the belief that the concept of learning instances 
  http   midkar com jazz and http   midkar com blues
from prior exposure to music to generate improvised
 

fiwe use music   to design a scoreparser class that
converts a midi file to a stream object  the stream
object is the fundamental container of musical eleemnts in music    key subclasses for this project are the
measure and score objects  hierarchically  music  
returns a score object as the top level representation
of a midi input  the next level of thescore object
is a part  typically an instrument  such as piano 
saxophone  or bass guitar   followed by an optional
decomposition into one or more voice objects  a subset of a musical part  such as the treble and bass clefs
in a piano part  or satb breakdown for a vocal part  
each part or voice thereon contains an array of time
offsetted note objects 
we define measure to represent a segment of time
defined by a given number of beats  each of which
are assigned a particular note value  dividing music into measures provides regular reference points
to locations within a piece of music  unfortunately 
the score object parsed from a midi file is not divided into measures  to this end  we invoke music  s
makemeasures method upon every part to allow our
data to represent reference points to time 

 
   

given measure 
our feature vector can therefore be defined as
 chord    chord    chord     where the subscript of
chord denotes its position  in measures  relative to
the measure represented by the training instance 
the edge cases to the iterative approach of obtaining training instances are the first and last measures 
in these cases  we express chord  and chord  as
nonetype  respectively 

   

preprocessing

the object based representation is effective in verifying the appropriateness of the training instances from
a musical perspective  however  it is essential to obtain a numerical representation of the feature space
in order to perform the clustering step  the numerical representation employed in this project captures
the intervals between the musical pitches in chords
and music ideas  this forms our preprocessing step 
music   allows one to obtain a numerical representation of the pitch of a note  regardless of octave 
using note pitchclass  that is to say  pitchclass
returns   for both notes c and c   and so forth 
a key requirement of the interval representation of
notes is to be able to significantly distinguish musical ideas to ensure that they are clustered into different buckets when appropriate  the naive approach
would be to represent intervals as an array of the
difference between the pitch classes for consecutive
notes  however  this would result in the musical ideas
 c   e   g   and  c   e   g   being represented as
       and        respectively  from a musical perspective  the ideas represent c major and c minor
respectively  but the interval representation does not
succeed in depicting these ideas as dissimilar  as it
should 
to that end  we devised a circle of fifths representation to allow the interval array to incorporate tonal
dissimilarities between musical ideas  the circle offifths representation uses the intervals shown in figure    and also uses a heuristic that enables us to
avoid the disparity between the two relatively similar
musical ideas   c   e    and  c   e    that would be
represented as     and     respectively  per figure   
this heuristic is detailed as folows 

features and preprocessing
feature representation

although the feature representation ultimately used
in the clustering algorithm is derived from the raw
data  it helps to understand the feature representation from a high level perspective 
we obtain raw training instances by iterating
through every measure of a midi file and extracting
chord objects for the preceding  current  and succeeding measures  along with a musical idea mapping expressed as an array of and rest objects  note
that the sheet music diagram is a simplistic representation of our raw dataset  in reality  an individual
measure may have multiple representative chords and
a number of musical ideas  each contributed by the
various parts voices present in a measure   to take
this into account  and also expand our feature space 
we performed what is effectively a cross product over
the space of feature arrays and musical ideas for a
 

fifigure    features
that there will be many repeated musical ideas  note
for note  even when we normalized for key  we found
that nontrivial sequences of notes  those with at least
three or four pitches  were rarely duplicated  therefore  if we wanted to apply some algorithm to pick
musical ideas based on the chord progression around
a given measure  we would essentially be creating an
augmented markov model  with little room for sophisticated machine learning techniques 
however  intuitively  some musical ideas are very
similar  while others are quite disparite  so  assuming
we can find a reasonable measure for this degree of
separation between two musical ideas  we could apply
a clustering algorithm to decrease the previously huge
set of raw musical ideas into a finite  and fairly small 
set of distinct chords 
we also clustered the chords found in midi files as
well  particularly in jazz  there are numerous different voicings for a single chord  different combinations
of notes that harmonically indicate a given chord  
musicians will often add a ninth  substitute a sixth 
and dynamically play other variations of chords than
may be written on the score  even though they indicate the same harmonic progression  hence  clustering chords into distinct forms will be just as useful
a tool as for solo ideas  the very same clustering
algorithm  in fact  is used to cluster chords 
note that this collection of chords and musical
ideas are all context free  in that there is no connection between chords and ideas yet  and the actual
mapping from sequences of chords to ideas  which create a context aware environment for creating solos  is
prepared in the classification step 
the actual algorithm is constructed as follows 

figure    circle of fifths
we define the circle of fifths mapping  zeroindexed  array as c                                          
which maps pitch classes to their locations on the circle of fifths  then  we define the difference between
two notes n  and n  as
d n    n      r    cp n     cp n     
where rk  n  is the remainder function programmatically conventionally represented as n   k  and
p n  maps a note to its pitch class  indexed to c     
then  to get the circle of fifths representation of
a musical idea  consisting of notes  n            nk    we
simply compute 
r n            nk      d n    n     d n    n             d nk    nk  

 
   

models
clustering

the motivation for clustering    the chords is that
even across hundreds of musical samples  it is unlikely
 

fifirst  we separate musical ideas into groups of n notes
 here  we used n       this is to facilitate constant
dimension in the points  in order to run k means 
we then construct the circle of fifths representation
of each musical idea  which is a point in rn    we
cluster on these points  using k means  here  we used
k         finally re map these cluster assignments to
the original musical idea objects  to get our clusters 
for chords  the algorithm is essentially the same  with
the slight change that we use k       since after normalizing for the root  there are much fewer distinct
chord types than melodic ideas 

   

machine learning  we used a fairly nave approach
for this  simply selecting an arbitrary member of the
cluster of musical ideas selected that structurally fits
into the structure of the measure being constructed 
this structural check is done simply with a rhythmic 
avoiding sequences of rests and rhythmic inconsistencies that would make the music sound choppy 

 

results

since the quality of the music cannot be objectively
numerically analyzed  we tested the quality of the
classification algorithm  to do this  we first broke up
the data in half by songs  specifically  we decided
not to break it up by training points after randomizing  since each song has a chord progession thats
persistent throughout the piece  its likely that many
training points will overlap  then  the testing set
will consist of feature vectors that are from the same
song as some feature vectors in the training set  making the performance of the algorithm extremely optimistic  partitioning training set and the testing set
by song avoids this fallacious behavior 
once the data was partitioned  we trained the classification model on the training data  for each testing instance  in each measure  we simply compared
the cluster index generated by the classification algorithm to the actual cluster of the musical idea presented in the measure  as would be done in a normal
performance analysis of a classification algorithm 

classification

once the clustering algorithm has mapped each idea
into clusters  we apply a classification algorithm to
map feature vectors  represented as chord progressions  to algorithms  formally  let the set of musical ideas be i  and let the clusters of musical
ideas be i    i            iki   where we use ki       and
s   
i   ii   i  and let si    i    i            iki    similarly 
for chords  we let the set of chords be c 
the clusters
s   
be c    c            cki where kc      and i   ci   c 
and let sc    c    c            cki   
now  formally  our classificaiton algorithm is an algorithm that models a mapping from sc sc sc 
si   thus mapping a combination of chord clusters to
a musical idea cluster 
the algorithm we used to do this was svm with
a linear kernel  we experemented with some other
algorithms  which are described in more details in
results 
note that since each training point is a sequence  
discussion
of chords and notes  centered by a measure  we get
a training point for each measure of each midi file  using a svm with a linear kernel for the classification produced the best results  with      accuracy
generating a large amount of training data 
when trained on the small training set and     
accuracy when trained on the large training set  we
    prediction
can rationalize this vast difference fairly easily  with
combining these two models for the music  we have a the small dataset  which contained only      data
machine learning algorithm that produces a cluster of points  ranged only over a few files  and so the mumusic ideas given a sequence of chords  now  to pro  sical vocabulary may not have been broad enough to
duce actual music  we have to construct sequences cover the new musical concepts that would have been
of notes and rests from this sequence of clusters of included in the testing set  however  once the trainchords  since this operation does not involve any ing set was increased to around       data points 
 

fitable   results
model
svm  rbf kernel 
svm  linear kernel 
svm  polynomial kernel 
random forest  gini criteria 
random forest  entropy criteria 
random forest    estimators 
random forest     estimators 
random forest     estimators 
random forest     estimators 

performance
small dataset large dataset
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      

the musical vocabulary was complete enough to de  that removed all the percussion parts would have
termine the cluster of solo ideas fairly accurately 
readily improved overall performance 
finally  adding a feature for the genre of jazz that
the piece is taken from would also improve results 
  conclusion
jazz solos that might sound good in a blues setting
might not sound as good in a bebop or bossa nova
instrumental solo generator succeeds in transform  style 
ing a large  diverse repository of midi jazz pieces
into a feature space that is capable of suggesting musical ideas given a user supplied musical basis  the references
final product is capable of accepting a sequence of
    cuthbert  m  and ariza  c   music   
chords from the user as input  and outputting a sea toolkit for computer aided musicology
quence of musical ideas in the form of a midi file 
and symbolic music data   in j  stephen
this presents itself as a useful tool for jazz or blues
downie and remco c  veltkamp  eds   
composer or performer hoping to tap into a musical
  th international society for music
vocabulary that extends beyond his or her own 
information retrieval conference
 ismir        august            
  future work
utrecht  netherlands  pp         
http   web mit edu music  
the current implementation uses nave approaches
a  and ramakrishnan 
p 
and heuristics to determine the identity of the solo     gupta 
 instrumental
solo
generator  
part for each measure  which is used to decide which
https   github com adityadevgupta 
instruments will be used to provide chords and which
cs   project
instrument will be used to populate solo ideas in different sections of the music  by using more intelligent
    pedregosa et al   scikit learn  machine
approaches that aim to minimize an entropy value to
learning in python  in jmlr     pp 
prevent the solo part from changing frequently 
                
several midi files also have a  percussion  part 
http   scikit learn org stable index 
which has different pitches corresponding to different
html
unpitched instruments  this adds significant noise to
the solo ideas and chords clusters  writing a script
 

fi