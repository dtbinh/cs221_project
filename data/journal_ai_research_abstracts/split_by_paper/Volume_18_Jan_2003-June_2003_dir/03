o  grumberg  s  livne and  s  markovitch 2003 learning to order bdd variables in verification volume 18 pages 83116

the size and complexity of software and hardware systems    have significantly increased in the past years  as a result it is    harder to guarantee their correct behavior one of the most successful    methods for automated verification of finitestate systems is model    checking most of the current modelchecking systems use binary    decision diagrams bdds for the representation of the tested model    and in the verification process of its properties generally bdds    allow a canonical compact representation of a boolean function given    an order of its variables the more compact the bdd is the better    performance one gets from the verifier however finding an optimal    order for a bdd is an npcomplete problem therefore several    heuristic methods based on expert knowledge have been developed for    variable ordering       we propose an alternative approach in which the variable ordering     algorithm gains ordering experience from training models and     uses the learned knowledge for finding good orders our     methodology is based on offline learning of pair precedence     classifiers from training models that is learning which variable     pair permutation is more likely to lead to a good order for each     training model a number of training sequences are evaluated every     training model variable pair permutation is then tagged based on     its performance on the evaluated orders the tagged permutations     are then passed through a feature extractor and are given as     examples to a classifier creation algorithm given a model for     which an order is requested the ordering algorithm consults each     precedence classifier and constructs a pair precedence table     which is used to create the order      our algorithm was integrated with smv which is one of the most     widely used verification systems preliminary empirical evaluation of our     methodology using real benchmark models shows performance that     is better than random ordering and is competitive with existing     algorithms that use expert knowledge we believe that in     subdomains of models alu caches etc our system will prove     even more valuable this is because it features the ability to     learn subdomain knowledge something that no other ordering     algorithm does

