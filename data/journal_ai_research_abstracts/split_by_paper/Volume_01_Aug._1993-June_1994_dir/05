j  c schlimmer and  l  a hermens 1993 software agents completing patterns and constructing user interfaces volume 1 pages 6189

to support the goal of allowing users to record and retrieve information this paper describes an interactive notetaking system for penbased computers with two distinctive features first it actively predicts what the user is going to write second it automatically constructs a custom buttonbox user interface on request the system is an example of a learningapprentice software agent a machine learning component characterizes the syntax and semantics of the users information a performance system uses this learned information to generate completion strings and construct a user interface  description of online appendix people like to record information  doing this on paper is initially efficient but lacks flexibility recording information on a computer is less efficient but more powerful in our new note taking softwre the user records information directly on a computer behind the interface an agent acts for the user to help it provides defaults and constructs a custom user interface  the demonstration is a quicktime movie of the note taking agent in action  the file is a binhexed selfextracting archive macintosh utilities for binhex are available from macarchiveumichedu quicktime is available from ftpapplecom in the dtsmacsyssoftquicktime 

as real logic programmers normally use cut  an effective learning procedure for logic programs should be able to deal with it  because the cut predicate has only a procedural meaning clauses containing cut cannot be learned using an extensional evaluation method as is done in most learning systems  on the other hand searching a space of possible programs instead of a space of independent clauses is unfeasible  an alternative solution is to generate first a candidate base program which covers the positive examples and then make it consistent by inserting cut where appropriate  the problem of learning programs with cut has not been investigated before and this seems to be a natural and reasonable approach we generalize this scheme and investigate the difficulties that arise  some of the major shortcomings are actually caused in general by the need for intensional evaluation as a conclusion the analysis of this paper suggests on precise and technical grounds that learning cut is difficult and current induction techniques should probably be restricted to purely declarative logic languages

