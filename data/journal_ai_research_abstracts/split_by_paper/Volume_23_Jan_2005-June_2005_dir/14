g  barish and  c  a knoblock 2005 an expressive language and efficient execution system for software agents volume 23 pages 625666

software agents can be used to automate many of the tedious timeconsuming information processing tasks that humans currently have to complete manually  however to do so agent plans must be capable of representing the myriad of actions and control flows required to perform those tasks  in addition since these tasks can require integrating multiple sources of remote information  typically a slow iobound process  it is desirable to make execution as efficient as possible  to address both of these needs we present a flexible software agent plan language and a highly parallel execution system that enable the efficient execution of expressive agent plans the plan language allows complex tasks to be more easily expressed by providing a variety of operators for flexibly processing the data as well as supporting subplans for modularity and recursion for indeterminate looping  the executor is based on a streaming dataflow model of execution to maximize the amount of operator and data parallelism possible at runtime  we have implemented both the language and executor in a system called theseus  our results from testing theseus show that streaming dataflow execution can yield significant speedups over both traditional serial von neumann as well as nonstreaming dataflowstyle execution that existing software and robot agent execution systems currently support  in addition we show how plans written in the language we present can represent certain types of subtasks that cannot be accomplished using the languages supported by network query engines  finally we demonstrate that the increased expressivity of our plan language does not hamper performance specifically we show how data can be integrated from multiple remote sources just as efficiently using our architecture as is possible with a stateoftheart streamingdataflow network query engine

