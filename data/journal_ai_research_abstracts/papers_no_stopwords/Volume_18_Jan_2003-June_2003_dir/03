grumberg livne markovitch 2003 learning order bdd variables verification 18 83116

size complexity software hardware systems significantly increased past years harder guarantee correct behavior one successful methods automated verification finitestate systems model checking current modelchecking systems use binary decision diagrams bdds representation tested model verification process properties generally bdds allow canonical compact representation boolean function given order variables compact bdd better performance one gets verifier however finding optimal order bdd npcomplete therefore several heuristic methods expert knowledge developed variable ordering propose alternative variable ordering gains ordering experience training uses learned knowledge finding good orders methodology offline learning pair precedence classifiers training learning variable pair permutation likely lead good order training model number training sequences evaluated every training model variable pair permutation tagged performance evaluated orders tagged permutations passed feature extractor given examples classifier creation given model order requested ordering consults precedence classifier constructs pair precedence table used create order integrated smv one widely used verification systems preliminary empirical evaluation methodology using real benchmark shows performance better random ordering competitive existing use expert knowledge believe subdomains alu caches etc system prove even valuable features ability learn subdomain knowledge something ordering

